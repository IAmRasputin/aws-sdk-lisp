;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/redshift-data/api
  (:use)
  (:nicknames #:aws/redshift-data)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/redshift-data/api)
(common-lisp:progn
 (common-lisp:define-condition redshift-data-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'redshift-data-error))
(common-lisp:progn
 (common-lisp:defclass redshift-data-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "redshift-data" :api-version
                        "2019-12-20" :host-prefix "redshift-data" :signing-name
                        "redshift-data" :global-host common-lisp:nil
                        :target-prefix "RedshiftData" :json-version "1.1"))
 (common-lisp:export 'redshift-data-request))
(common-lisp:defvar *error-map*
  '(("ActiveStatementsExceededException"
     . active-statements-exceeded-exception)
    ("BatchExecuteStatementException" . batch-execute-statement-exception)
    ("DatabaseConnectionException" . database-connection-exception)
    ("ExecuteStatementException" . execute-statement-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition active-statements-exceeded-exception
     (redshift-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       active-statements-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'active-statements-exceeded-exception
                    'active-statements-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition batch-execute-statement-exception
     (redshift-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       batch-execute-statement-exception-message)
      (statement-id :initarg :statement-id :initform common-lisp:nil :reader
       batch-execute-statement-exception-statement-id)))
 (common-lisp:export
  (common-lisp:list 'batch-execute-statement-exception
                    'batch-execute-statement-exception-message
                    'batch-execute-statement-exception-statement-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-execute-statement-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-execute-statement-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or location common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or string common-lisp:null))
   (db-user common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (sqls (common-lisp:error ":sqls is required") :type
    (common-lisp:or sql-list common-lisp:null))
   (statement-name common-lisp:nil :type
    (common-lisp:or statement-name-string common-lisp:null))
   (with-event common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-execute-statement-input
                    'make-batch-execute-statement-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqls))
      (common-lisp:list
       (common-lisp:cons "Sqls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-event))
      (common-lisp:list
       (common-lisp:cons "WithEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "WorkgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-execute-statement-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-execute-statement-output-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or location common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (database common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (db-user common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or statement-id common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-execute-statement-output
                    'make-batch-execute-statement-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "WorkgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-output))
   common-lisp:nil))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-double () 'common-lisp:double-float)
(common-lisp:deftype boxed-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-statement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-statement-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or statement-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-statement-request 'make-cancel-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-statement-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-statement-response-"))
   (status common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-statement-response
                    'make-cancel-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-response))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-list ()
   '(trivial-types:proper-list column-metadata))
 (common-lisp:defun make-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (column-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-metadata-"))
   (column-default common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (is-case-sensitive common-lisp:nil :type
    (common-lisp:or |bool| common-lisp:null))
   (is-currency common-lisp:nil :type (common-lisp:or |bool| common-lisp:null))
   (is-signed common-lisp:nil :type (common-lisp:or |bool| common-lisp:null))
   (label common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (length common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (nullable common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (precision common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (scale common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (schema-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (table-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column-metadata 'make-column-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-default))
      (common-lisp:list
       (common-lisp:cons "columnDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-case-sensitive))
      (common-lisp:list
       (common-lisp:cons "isCaseSensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-currency))
      (common-lisp:list
       (common-lisp:cons "isCurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-signed))
      (common-lisp:list
       (common-lisp:cons "isSigned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nullable))
      (common-lisp:list
       (common-lisp:cons "nullable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "typeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-metadata-list ()
   '(trivial-types:proper-list column-metadata))
 (common-lisp:defun make-column-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition database-connection-exception
     (redshift-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       database-connection-exception-message)))
 (common-lisp:export
  (common-lisp:list 'database-connection-exception
                    'database-connection-exception-message)))
(common-lisp:progn
 (common-lisp:deftype database-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-database-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-statement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-statement-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or statement-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-statement-request
                    'make-describe-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-statement-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-statement-response-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (database common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (db-user common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (has-result-set common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or statement-id common-lisp:null))
   (query-parameters common-lisp:nil :type
    (common-lisp:or sql-parameters-list common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or statement-string common-lisp:null))
   (redshift-pid common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (redshift-query-id common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (result-rows common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (result-size common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-string common-lisp:null))
   (sub-statements common-lisp:nil :type
    (common-lisp:or sub-statement-list common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-statement-response
                    'make-describe-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-result-set))
      (common-lisp:list
       (common-lisp:cons "HasResultSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "QueryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-pid))
      (common-lisp:list
       (common-lisp:cons "RedshiftPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-query-id))
      (common-lisp:list
       (common-lisp:cons "RedshiftQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-rows))
      (common-lisp:list
       (common-lisp:cons "ResultRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-size))
      (common-lisp:list
       (common-lisp:cons "ResultSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-statements))
      (common-lisp:list
       (common-lisp:cons "SubStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "WorkgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-table-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-table-request-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or location common-lisp:null))
   (connected-database common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or string common-lisp:null))
   (db-user common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (schema common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (table common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-table-request 'make-describe-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected-database))
      (common-lisp:list
       (common-lisp:cons "ConnectedDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "WorkgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-table-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-table-response-"))
   (column-list common-lisp:nil :type
    (common-lisp:or column-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (table-name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-table-response 'make-describe-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-list))
      (common-lisp:list
       (common-lisp:cons "ColumnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition execute-statement-exception
     (redshift-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       execute-statement-exception-message)
      (statement-id :initarg :statement-id :initform common-lisp:nil :reader
       execute-statement-exception-statement-id)))
 (common-lisp:export
  (common-lisp:list 'execute-statement-exception
                    'execute-statement-exception-message
                    'execute-statement-exception-statement-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (execute-statement-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-execute-statement-input-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or location common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or string common-lisp:null))
   (db-user common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or sql-parameters-list common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (sql (common-lisp:error ":sql is required") :type
    (common-lisp:or statement-string common-lisp:null))
   (statement-name common-lisp:nil :type
    (common-lisp:or statement-name-string common-lisp:null))
   (with-event common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execute-statement-input 'make-execute-statement-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "Sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-event))
      (common-lisp:list
       (common-lisp:cons "WithEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "WorkgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (execute-statement-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-execute-statement-output-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or location common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (database common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (db-user common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or statement-id common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execute-statement-output 'make-execute-statement-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "WorkgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (field (:copier common-lisp:nil) (:conc-name "struct-shape-field-"))
   (blob-value common-lisp:nil :type (common-lisp:or blob common-lisp:null))
   (boolean-value common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (double-value common-lisp:nil :type
    (common-lisp:or boxed-double common-lisp:null))
   (is-null common-lisp:nil :type
    (common-lisp:or boxed-boolean common-lisp:null))
   (long-value common-lisp:nil :type
    (common-lisp:or boxed-long common-lisp:null))
   (string-value common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'field 'make-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob-value))
      (common-lisp:list
       (common-lisp:cons "blobValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-null))
      (common-lisp:list
       (common-lisp:cons "isNull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "longValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-list () '(trivial-types:proper-list field))
 (common-lisp:defun make-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-statement-result-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-statement-result-request-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or statement-id common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-statement-result-request
                    'make-get-statement-result-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-result-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-result-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-result-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-statement-result-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-statement-result-response-"))
   (column-metadata common-lisp:nil :type
    (common-lisp:or column-metadata-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (records (common-lisp:error ":records is required") :type
    (common-lisp:or sql-records common-lisp:null))
   (total-num-rows common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-statement-result-response
                    'make-get-statement-result-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-result-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-result-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-metadata))
      (common-lisp:list
       (common-lisp:cons "ColumnMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-num-rows))
      (common-lisp:list
       (common-lisp:cons "TotalNumRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-result-response))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (redshift-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-databases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-databases-request-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or location common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or string common-lisp:null))
   (db-user common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-databases-request 'make-list-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "WorkgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-databases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-databases-response-"))
   (databases common-lisp:nil :type
    (common-lisp:or database-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-databases-response 'make-list-databases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'databases))
      (common-lisp:list
       (common-lisp:cons "Databases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-databases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schemas-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schemas-request-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or location common-lisp:null))
   (connected-database common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or string common-lisp:null))
   (db-user common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (schema-pattern common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schemas-request 'make-list-schemas-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-schemas-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-schemas-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected-database))
      (common-lisp:list
       (common-lisp:cons "ConnectedDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-pattern))
      (common-lisp:list
       (common-lisp:cons "SchemaPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "WorkgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-schemas-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schemas-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schemas-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (schemas common-lisp:nil :type
    (common-lisp:or schema-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schemas-response 'make-list-schemas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schemas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schemas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schemas))
      (common-lisp:list
       (common-lisp:cons "Schemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schemas-response))
   common-lisp:nil))
(common-lisp:deftype list-statements-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-statements-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-statements-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-statements-limit common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (role-level common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (statement-name common-lisp:nil :type
    (common-lisp:or statement-name-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-statements-request 'make-list-statements-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-level))
      (common-lisp:list
       (common-lisp:cons "RoleLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-statements-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-statements-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (statements (common-lisp:error ":statements is required") :type
    (common-lisp:or statement-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-statements-response 'make-list-statements-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statements))
      (common-lisp:list
       (common-lisp:cons "Statements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tables-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tables-request-"))
   (cluster-identifier common-lisp:nil :type
    (common-lisp:or location common-lisp:null))
   (connected-database common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or string common-lisp:null))
   (db-user common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (schema-pattern common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (table-pattern common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tables-request 'make-list-tables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-identifier))
      (common-lisp:list
       (common-lisp:cons "ClusterIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected-database))
      (common-lisp:list
       (common-lisp:cons "ConnectedDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-pattern))
      (common-lisp:list
       (common-lisp:cons "SchemaPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-pattern))
      (common-lisp:list
       (common-lisp:cons "TablePattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "WorkgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tables-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tables-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tables common-lisp:nil :type (common-lisp:or table-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tables-response 'make-list-tables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables))
      (common-lisp:list
       (common-lisp:cons "Tables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tables-response))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (redshift-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id)))
(common-lisp:progn
 (common-lisp:deftype schema-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-schema-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype secret-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sql-list ()
   '(trivial-types:proper-list statement-string))
 (common-lisp:defun make-sql-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-parameter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or parameter-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sql-parameter 'make-sql-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sql-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sql-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sql-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-parameters-list ()
   '(trivial-types:proper-list sql-parameter))
 (common-lisp:defun make-sql-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sql-records () '(trivial-types:proper-list field-list))
 (common-lisp:defun make-sql-records
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (statement-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-statement-data-"))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or statement-id common-lisp:null))
   (is-batch-statement common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (query-parameters common-lisp:nil :type
    (common-lisp:or sql-parameters-list common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or statement-string common-lisp:null))
   (query-strings common-lisp:nil :type
    (common-lisp:or statement-string-list common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null))
   (statement-name common-lisp:nil :type
    (common-lisp:or statement-name-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or status-string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'statement-data 'make-statement-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statement-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statement-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-batch-statement))
      (common-lisp:list
       (common-lisp:cons "IsBatchStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-parameters))
      (common-lisp:list
       (common-lisp:cons "QueryParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-strings))
      (common-lisp:list
       (common-lisp:cons "QueryStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-name))
      (common-lisp:list
       (common-lisp:cons "StatementName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statement-data))
   common-lisp:nil))
(common-lisp:deftype statement-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype statement-list ()
   '(trivial-types:proper-list statement-data))
 (common-lisp:defun make-statement-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype statement-name-string () 'common-lisp:string)
(common-lisp:deftype statement-status-string () 'common-lisp:string)
(common-lisp:deftype statement-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype statement-string-list ()
   '(trivial-types:proper-list statement-string))
 (common-lisp:defun make-statement-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype status-string () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sub-statement-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-sub-statement-data-"))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (duration common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (has-result-set common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or statement-id common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or statement-string common-lisp:null))
   (redshift-query-id common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (result-rows common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (result-size common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or statement-status-string common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sub-statement-data 'make-sub-statement-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sub-statement-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sub-statement-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-result-set))
      (common-lisp:list
       (common-lisp:cons "HasResultSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-query-id))
      (common-lisp:list
       (common-lisp:cons "RedshiftQueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-rows))
      (common-lisp:list
       (common-lisp:cons "ResultRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-size))
      (common-lisp:list
       (common-lisp:cons "ResultSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sub-statement-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sub-statement-list ()
   '(trivial-types:proper-list sub-statement-data))
 (common-lisp:defun make-sub-statement-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sub-statement-data))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype table-list () '(trivial-types:proper-list table-member))
 (common-lisp:defun make-table-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-member))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (table-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-member-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (schema common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-member 'make-table-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-member))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (redshift-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype workgroup-name-string () 'common-lisp:string)
(common-lisp:deftype |bool| () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defun batch-execute-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token cluster-identifier database
                     db-user secret-arn sqls statement-name with-event
                     workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token cluster-identifier database db-user
     secret-arn sqls statement-name with-event workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-execute-statement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchExecuteStatement"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-execute-statement))
(common-lisp:progn
 (common-lisp:defun cancel-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelStatement"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-statement))
(common-lisp:progn
 (common-lisp:defun describe-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStatement"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-statement))
(common-lisp:progn
 (common-lisp:defun describe-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier connected-database
                     database db-user max-results next-token schema secret-arn
                     table workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier connected-database database
     db-user max-results next-token schema secret-arn table workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTable"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-table))
(common-lisp:progn
 (common-lisp:defun execute-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token cluster-identifier database
                     db-user parameters secret-arn sql statement-name
                     with-event workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable client-token cluster-identifier database db-user
     parameters secret-arn sql statement-name with-event workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-statement-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExecuteStatement"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'execute-statement))
(common-lisp:progn
 (common-lisp:defun get-statement-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id next-token)
   (common-lisp:declare (common-lisp:ignorable id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-statement-result-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetStatementResult"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-statement-result))
(common-lisp:progn
 (common-lisp:defun list-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier database db-user
                     max-results next-token secret-arn workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier database db-user max-results
     next-token secret-arn workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-databases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDatabases"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-databases))
(common-lisp:progn
 (common-lisp:defun list-schemas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier connected-database
                     database db-user max-results next-token schema-pattern
                     secret-arn workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier connected-database database
     db-user max-results next-token schema-pattern secret-arn workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schemas-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSchemas"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-schemas))
(common-lisp:progn
 (common-lisp:defun list-statements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token role-level
                     statement-name status)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token role-level statement-name
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-statements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStatements"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-statements))
(common-lisp:progn
 (common-lisp:defun list-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-identifier connected-database
                     database db-user max-results next-token schema-pattern
                     secret-arn table-pattern workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable cluster-identifier connected-database database
     db-user max-results next-token schema-pattern secret-arn table-pattern
     workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'redshift-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTables"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tables))
