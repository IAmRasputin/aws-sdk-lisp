;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/iottwinmaker/api
  (:use)
  (:nicknames #:aws/iottwinmaker)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iottwinmaker/api)
(common-lisp:progn
 (common-lisp:defclass iottwinmaker-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "iottwinmaker" :protocol
                        :rest-json))
 (common-lisp:export 'iottwinmaker-request))
(common-lisp:progn
 (common-lisp:define-condition iottwinmaker-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iottwinmaker-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("ConnectorFailureException" . connector-failure-exception)
    ("ConnectorTimeoutException" . connector-timeout-exception)
    ("InternalServerException" . internal-server-exception)
    ("QueryTimeoutException" . query-timeout-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass batch-put-property-error common-lisp:nil
                       ((entry :initarg :|entry| :type
                         (common-lisp:or property-value-entry common-lisp:null)
                         :accessor %batch-put-property-error-entry :initform
                         (common-lisp:error ":entry is required"))
                        (error-message :initarg :|errorMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-put-property-error-error-message :initform
                         (common-lisp:error ":errormessage is required"))
                        (error-code :initarg :|errorCode| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-put-property-error-error-code :initform
                         (common-lisp:error ":errorcode is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-put-property-error 'make-batch-put-property-error))
 (common-lisp:defun make-batch-put-property-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entry error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance 'batch-put-property-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry))
      (common-lisp:list
       (common-lisp:cons "entry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-property-error-entry common-lisp:nil
                       ((errors :initarg :|errors| :type
                         (common-lisp:or errors common-lisp:null) :accessor
                         %batch-put-property-error-entry-errors :initform
                         (common-lisp:error ":errors is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-put-property-error-entry
                    'make-batch-put-property-error-entry))
 (common-lisp:defun make-batch-put-property-error-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key errors)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-property-error-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-property-values-request common-lisp:nil
                       ((entries :initarg :|entries| :type
                         (common-lisp:or entries common-lisp:null) :accessor
                         %batch-put-property-values-request-entries :initform
                         (common-lisp:error ":entries is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %batch-put-property-values-request-workspace-id
                         :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-put-property-values-request
                    'make-batch-put-property-values-request))
 (common-lisp:defun make-batch-put-property-values-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entries workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-property-values-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-put-property-values-response common-lisp:nil
                       ((error-entries :initarg :|errorEntries| :type
                         (common-lisp:or error-entries common-lisp:null)
                         :accessor
                         %batch-put-property-values-response-error-entries
                         :initform
                         (common-lisp:error ":errorentries is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-put-property-values-response
                    'make-batch-put-property-values-response))
 (common-lisp:defun make-batch-put-property-values-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-entries)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-put-property-values-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "errorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-property-values-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bundle-information common-lisp:nil
                       ((pricing-tier :initarg :|pricingTier| :type
                         (common-lisp:or pricing-tier common-lisp:null)
                         :accessor %bundle-information-pricing-tier :initform
                         common-lisp:nil)
                        (bundle-names :initarg :|bundleNames| :type
                         (common-lisp:or pricing-bundles common-lisp:null)
                         :accessor %bundle-information-bundle-names :initform
                         (common-lisp:error ":bundlenames is required"))))
 (common-lisp:export
  (common-lisp:list 'bundle-information 'make-bundle-information))
 (common-lisp:defun make-bundle-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pricing-tier bundle-names)
   (common-lisp:apply #'common-lisp:make-instance 'bundle-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bundle-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bundle-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-names))
      (common-lisp:list
       (common-lisp:cons "bundleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-tier))
      (common-lisp:list
       (common-lisp:cons "pricingTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bundle-information))
   common-lisp:nil))
(common-lisp:deftype bundle-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column-description common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or column-type common-lisp:null)
                         :accessor %column-description-type :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor %column-description-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'column-description 'make-column-description))
 (common-lisp:defun make-column-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type name)
   (common-lisp:apply #'common-lisp:make-instance 'column-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-descriptions ()
   '(trivial-types:proper-list column-description))
 (common-lisp:defun |make-column-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:deftype column-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component-property-group-request common-lisp:nil
                       ((update-type :initarg :|updateType| :type
                         (common-lisp:or property-group-update-type
                                         common-lisp:null)
                         :accessor
                         %component-property-group-request-update-type
                         :initform common-lisp:nil)
                        (property-names :initarg :|propertyNames| :type
                         (common-lisp:or property-names common-lisp:null)
                         :accessor
                         %component-property-group-request-property-names
                         :initform common-lisp:nil)
                        (group-type :initarg :|groupType| :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         %component-property-group-request-group-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-property-group-request
                    'make-component-property-group-request))
 (common-lisp:defun make-component-property-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-type property-names group-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'component-property-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-type))
      (common-lisp:list
       (common-lisp:cons "groupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-names))
      (common-lisp:list
       (common-lisp:cons "propertyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-property-group-requests ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-component-property-group-requests|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass component-property-group-response common-lisp:nil
                       ((is-inherited :initarg :|isInherited| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %component-property-group-response-is-inherited
                         :initform
                         (common-lisp:error ":isinherited is required"))
                        (property-names :initarg :|propertyNames| :type
                         (common-lisp:or property-names common-lisp:null)
                         :accessor
                         %component-property-group-response-property-names
                         :initform
                         (common-lisp:error ":propertynames is required"))
                        (group-type :initarg :|groupType| :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         %component-property-group-response-group-type
                         :initform
                         (common-lisp:error ":grouptype is required"))))
 (common-lisp:export
  (common-lisp:list 'component-property-group-response
                    'make-component-property-group-response))
 (common-lisp:defun make-component-property-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-inherited property-names group-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'component-property-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-type))
      (common-lisp:list
       (common-lisp:cons "groupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-names))
      (common-lisp:list
       (common-lisp:cons "propertyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-inherited))
      (common-lisp:list
       (common-lisp:cons "isInherited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-property-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-property-group-responses ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-component-property-group-responses|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass component-request common-lisp:nil
                       ((property-groups :initarg :|propertyGroups| :type
                         (common-lisp:or component-property-group-requests
                                         common-lisp:null)
                         :accessor %component-request-property-groups :initform
                         common-lisp:nil)
                        (properties :initarg :|properties| :type
                         (common-lisp:or property-requests common-lisp:null)
                         :accessor %component-request-properties :initform
                         common-lisp:nil)
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor %component-request-component-type-id
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %component-request-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-request 'make-component-request))
 (common-lisp:defun make-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key property-groups properties
                     component-type-id description)
   (common-lisp:apply #'common-lisp:make-instance 'component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass component-response common-lisp:nil
                       ((sync-source :initarg :|syncSource| :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor %component-response-sync-source :initform
                         common-lisp:nil)
                        (property-groups :initarg :|propertyGroups| :type
                         (common-lisp:or component-property-group-responses
                                         common-lisp:null)
                         :accessor %component-response-property-groups
                         :initform common-lisp:nil)
                        (properties :initarg :|properties| :type
                         (common-lisp:or property-responses common-lisp:null)
                         :accessor %component-response-properties :initform
                         common-lisp:nil)
                        (defined-in :initarg :|definedIn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %component-response-defined-in :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %component-response-status :initform common-lisp:nil)
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor %component-response-component-type-id
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %component-response-description :initform
                         common-lisp:nil)
                        (component-name :initarg :|componentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %component-response-component-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-response 'make-component-response))
 (common-lisp:defun make-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sync-source property-groups properties
                     defined-in status component-type-id description
                     component-name)
   (common-lisp:apply #'common-lisp:make-instance 'component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'defined-in))
      (common-lisp:list
       (common-lisp:cons "definedIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-response))
   common-lisp:nil))
(common-lisp:deftype component-type-id () 'common-lisp:string)
(common-lisp:deftype component-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-type-summaries ()
   '(trivial-types:proper-list component-type-summary))
 (common-lisp:defun |make-component-type-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass component-type-summary common-lisp:nil
                       ((component-type-name :initarg :|componentTypeName|
                         :type
                         (common-lisp:or component-type-name common-lisp:null)
                         :accessor %component-type-summary-component-type-name
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %component-type-summary-status :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %component-type-summary-description
                         :initform common-lisp:nil)
                        (update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %component-type-summary-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %component-type-summary-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor %component-type-summary-component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %component-type-summary-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'component-type-summary 'make-component-type-summary))
 (common-lisp:defun make-component-type-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-type-name status description
                     update-date-time creation-date-time component-type-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'component-type-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-name))
      (common-lisp:list
       (common-lisp:cons "componentTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-type-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass component-update-request common-lisp:nil
                       ((property-group-updates :initarg
                         :|propertyGroupUpdates| :type
                         (common-lisp:or component-property-group-requests
                                         common-lisp:null)
                         :accessor
                         %component-update-request-property-group-updates
                         :initform common-lisp:nil)
                        (property-updates :initarg :|propertyUpdates| :type
                         (common-lisp:or property-requests common-lisp:null)
                         :accessor %component-update-request-property-updates
                         :initform common-lisp:nil)
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor %component-update-request-component-type-id
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %component-update-request-description
                         :initform common-lisp:nil)
                        (update-type :initarg :|updateType| :type
                         (common-lisp:or component-update-type
                                         common-lisp:null)
                         :accessor %component-update-request-update-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-update-request 'make-component-update-request))
 (common-lisp:defun make-component-update-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key property-group-updates property-updates
                     component-type-id description update-type)
   (common-lisp:apply #'common-lisp:make-instance 'component-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-updates))
      (common-lisp:list
       (common-lisp:cons "propertyUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-group-updates))
      (common-lisp:list
       (common-lisp:cons "propertyGroupUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-update-request))
   common-lisp:nil))
(common-lisp:deftype component-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype component-updates-map-request () 'common-lisp:hash-table)
 (common-lisp:defun |make-component-updates-map-request|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype components-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-components-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype components-map-request () 'common-lisp:hash-table)
 (common-lisp:defun |make-components-map-request|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype configuration () 'common-lisp:hash-table)
 (common-lisp:defun |make-configuration| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition connector-failure-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       connector-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'connector-failure-exception
                    'connector-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition connector-timeout-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       connector-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'connector-timeout-exception
                    'connector-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-component-type-request common-lisp:nil
                       ((component-type-name :initarg :|componentTypeName|
                         :type
                         (common-lisp:or component-type-name common-lisp:null)
                         :accessor
                         %create-component-type-request-component-type-name
                         :initform common-lisp:nil)
                        (property-groups :initarg :|propertyGroups| :type
                         (common-lisp:or property-groups-request
                                         common-lisp:null)
                         :accessor
                         %create-component-type-request-property-groups
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-component-type-request-tags :initform
                         common-lisp:nil)
                        (functions :initarg :|functions| :type
                         (common-lisp:or functions-request common-lisp:null)
                         :accessor %create-component-type-request-functions
                         :initform common-lisp:nil)
                        (extends-from :initarg :|extendsFrom| :type
                         (common-lisp:or extends-from common-lisp:null)
                         :accessor %create-component-type-request-extends-from
                         :initform common-lisp:nil)
                        (property-definitions :initarg :|propertyDefinitions|
                         :type
                         (common-lisp:or property-definitions-request
                                         common-lisp:null)
                         :accessor
                         %create-component-type-request-property-definitions
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-component-type-request-description
                         :initform common-lisp:nil)
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         %create-component-type-request-component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required"))
                        (is-singleton :initarg :|isSingleton| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-component-type-request-is-singleton :initform
                         common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-component-type-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-component-type-request
                    'make-create-component-type-request))
 (common-lisp:defun make-create-component-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-type-name property-groups tags
                     functions extends-from property-definitions description
                     component-type-id is-singleton workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-component-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-singleton))
      (common-lisp:list
       (common-lisp:cons "isSingleton"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-definitions))
      (common-lisp:list
       (common-lisp:cons "propertyDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extends-from))
      (common-lisp:list
       (common-lisp:cons "extendsFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-name))
      (common-lisp:list
       (common-lisp:cons "componentTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-component-type-response common-lisp:nil
                       ((state :initarg :|state| :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %create-component-type-response-state :initform
                         (common-lisp:error ":state is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-component-type-response-creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %create-component-type-response-arn
                         :initform (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-component-type-response
                    'make-create-component-type-response))
 (common-lisp:defun make-create-component-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state creation-date-time arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-component-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-entity-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-entity-request-tags :initform common-lisp:nil)
                        (parent-entity-id :initarg :|parentEntityId| :type
                         (common-lisp:or parent-entity-id common-lisp:null)
                         :accessor %create-entity-request-parent-entity-id
                         :initform common-lisp:nil)
                        (components :initarg :|components| :type
                         (common-lisp:or components-map-request
                                         common-lisp:null)
                         :accessor %create-entity-request-components :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-entity-request-description :initform
                         common-lisp:nil)
                        (entity-name :initarg :|entityName| :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %create-entity-request-entity-name :initform
                         (common-lisp:error ":entityname is required"))
                        (entity-id :initarg :|entityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-entity-request-entity-id :initform
                         common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-entity-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-entity-request 'make-create-entity-request))
 (common-lisp:defun make-create-entity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags parent-entity-id components
                     description entity-name entity-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "entityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-entity-id))
      (common-lisp:list
       (common-lisp:cons "parentEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-entity-response common-lisp:nil
                       ((state :initarg :|state| :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %create-entity-response-state :initform
                         (common-lisp:error ":state is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-entity-response-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %create-entity-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (entity-id :initarg :|entityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %create-entity-response-entity-id :initform
                         (common-lisp:error ":entityid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-entity-response 'make-create-entity-response))
 (common-lisp:defun make-create-entity-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state creation-date-time arn entity-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-scene-request common-lisp:nil
                       ((scene-metadata :initarg :|sceneMetadata| :type
                         (common-lisp:or scene-metadata-map common-lisp:null)
                         :accessor %create-scene-request-scene-metadata
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-scene-request-tags :initform common-lisp:nil)
                        (capabilities :initarg :|capabilities| :type
                         (common-lisp:or scene-capabilities common-lisp:null)
                         :accessor %create-scene-request-capabilities :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-scene-request-description :initform
                         common-lisp:nil)
                        (content-location :initarg :|contentLocation| :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %create-scene-request-content-location :initform
                         (common-lisp:error ":contentlocation is required"))
                        (scene-id :initarg :|sceneId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-scene-request-scene-id :initform
                         (common-lisp:error ":sceneid is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-scene-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-scene-request 'make-create-scene-request))
 (common-lisp:defun make-create-scene-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scene-metadata tags capabilities
                     description content-location scene-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-scene-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-scene-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-id))
      (common-lisp:list
       (common-lisp:cons "sceneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-location))
      (common-lisp:list
       (common-lisp:cons "contentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-metadata))
      (common-lisp:list
       (common-lisp:cons "sceneMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-scene-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-scene-response common-lisp:nil
                       ((creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-scene-response-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %create-scene-response-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-scene-response 'make-create-scene-response))
 (common-lisp:defun make-create-scene-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-scene-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scene-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scene-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scene-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sync-job-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-sync-job-request-tags :initform
                         common-lisp:nil)
                        (sync-role :initarg :|syncRole| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-sync-job-request-sync-role :initform
                         (common-lisp:error ":syncrole is required"))
                        (sync-source :initarg :|syncSource| :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor %create-sync-job-request-sync-source
                         :initform
                         (common-lisp:error ":syncsource is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-sync-job-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-sync-job-request 'make-create-sync-job-request))
 (common-lisp:defun make-create-sync-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags sync-role sync-source workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-sync-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-role))
      (common-lisp:list
       (common-lisp:cons "syncRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-sync-job-response common-lisp:nil
                       ((state :initarg :|state| :type
                         (common-lisp:or sync-job-state common-lisp:null)
                         :accessor %create-sync-job-response-state :initform
                         (common-lisp:error ":state is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-sync-job-response-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %create-sync-job-response-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-sync-job-response 'make-create-sync-job-response))
 (common-lisp:defun make-create-sync-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state creation-date-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-sync-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sync-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-workspace-request-tags :initform
                         common-lisp:nil)
                        (role :initarg :|role| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-workspace-request-role :initform
                         (common-lisp:error ":role is required"))
                        (s3location :initarg :|s3Location| :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %create-workspace-request-s3location :initform
                         (common-lisp:error ":s3location is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-workspace-request-description
                         :initform common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %create-workspace-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'create-workspace-request 'make-create-workspace-request))
 (common-lisp:defun make-create-workspace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags role s3location description
                     workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workspace-response common-lisp:nil
                       ((creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-workspace-response-creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %create-workspace-response-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-workspace-response
                    'make-create-workspace-response))
 (common-lisp:defun make-create-workspace-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workspace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-connector common-lisp:nil
                       ((is-native :initarg :|isNative| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %data-connector-is-native :initform common-lisp:nil)
                        (lambda :initarg :|lambda| :type
                         (common-lisp:or lambda-function common-lisp:null)
                         :accessor %data-connector-lambda :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-connector 'make-data-connector))
 (common-lisp:defun make-data-connector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-native lambda)
   (common-lisp:apply #'common-lisp:make-instance 'data-connector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-native))
      (common-lisp:list
       (common-lisp:cons "isNative"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-connector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-type common-lisp:nil
                       ((relationship :initarg :|relationship| :type
                         (common-lisp:or relationship common-lisp:null)
                         :accessor %data-type-relationship :initform
                         common-lisp:nil)
                        (unit-of-measure :initarg :|unitOfMeasure| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %data-type-unit-of-measure :initform common-lisp:nil)
                        (allowed-values :initarg :|allowedValues| :type
                         (common-lisp:or data-value-list common-lisp:null)
                         :accessor %data-type-allowed-values :initform
                         common-lisp:nil)
                        (nested-type :initarg :|nestedType| :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         %data-type-nested-type :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %data-type-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'data-type 'make-data-type))
 (common-lisp:defun make-data-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key relationship unit-of-measure
                     allowed-values nested-type type)
   (common-lisp:apply #'common-lisp:make-instance 'data-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nested-type))
      (common-lisp:list
       (common-lisp:cons "nestedType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit-of-measure))
      (common-lisp:list
       (common-lisp:cons "unitOfMeasure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship))
      (common-lisp:list
       (common-lisp:cons "relationship"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-value common-lisp:nil
                       ((expression :initarg :|expression| :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %data-value-expression :initform common-lisp:nil)
                        (relationship-value :initarg :|relationshipValue| :type
                         (common-lisp:or relationship-value common-lisp:null)
                         :accessor %data-value-relationship-value :initform
                         common-lisp:nil)
                        (map-value :initarg :|mapValue| :type
                         (common-lisp:or data-value-map common-lisp:null)
                         :accessor %data-value-map-value :initform
                         common-lisp:nil)
                        (list-value :initarg :|listValue| :type
                         (common-lisp:or data-value-list common-lisp:null)
                         :accessor %data-value-list-value :initform
                         common-lisp:nil)
                        (string-value :initarg :|stringValue| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %data-value-string-value :initform common-lisp:nil)
                        (long-value :initarg :|longValue| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %data-value-long-value :initform common-lisp:nil)
                        (integer-value :initarg :|integerValue| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %data-value-integer-value :initform common-lisp:nil)
                        (double-value :initarg :|doubleValue| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %data-value-double-value :initform common-lisp:nil)
                        (boolean-value :initarg :|booleanValue| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %data-value-boolean-value :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-value 'make-data-value))
 (common-lisp:defun make-data-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expression relationship-value map-value
                     list-value string-value long-value integer-value
                     double-value boolean-value)
   (common-lisp:apply #'common-lisp:make-instance 'data-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "integerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "longValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-value))
      (common-lisp:list
       (common-lisp:cons "listValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'map-value))
      (common-lisp:list
       (common-lisp:cons "mapValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-value))
      (common-lisp:list
       (common-lisp:cons "relationshipValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-value-list ()
   '(trivial-types:proper-list data-value))
 (common-lisp:defun |make-data-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-value-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-data-value-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass delete-component-type-request common-lisp:nil
                       ((component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         %delete-component-type-request-component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-component-type-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-component-type-request
                    'make-delete-component-type-request))
 (common-lisp:defun make-delete-component-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-type-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-component-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-component-type-response common-lisp:nil
                       ((state :initarg :|state| :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %delete-component-type-response-state :initform
                         (common-lisp:error ":state is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-component-type-response
                    'make-delete-component-type-response))
 (common-lisp:defun make-delete-component-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-component-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-entity-request common-lisp:nil
                       ((is-recursive :initarg :|isRecursive| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %delete-entity-request-is-recursive :initform
                         common-lisp:nil)
                        (entity-id :initarg :|entityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %delete-entity-request-entity-id :initform
                         (common-lisp:error ":entityid is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-entity-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-entity-request 'make-delete-entity-request))
 (common-lisp:defun make-delete-entity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-recursive entity-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-entity-response common-lisp:nil
                       ((state :initarg :|state| :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %delete-entity-response-state :initform
                         (common-lisp:error ":state is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-entity-response 'make-delete-entity-response))
 (common-lisp:defun make-delete-entity-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state)
   (common-lisp:apply #'common-lisp:make-instance 'delete-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scene-request common-lisp:nil
                       ((scene-id :initarg :|sceneId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-scene-request-scene-id :initform
                         (common-lisp:error ":sceneid is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-scene-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-scene-request 'make-delete-scene-request))
 (common-lisp:defun make-delete-scene-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scene-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-scene-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-scene-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-scene-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-scene-response 'make-delete-scene-response))
 (common-lisp:defun make-delete-scene-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-scene-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scene-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scene-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scene-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sync-job-request common-lisp:nil
                       ((sync-source :initarg :|syncSource| :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor %delete-sync-job-request-sync-source
                         :initform
                         (common-lisp:error ":syncsource is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-sync-job-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-sync-job-request 'make-delete-sync-job-request))
 (common-lisp:defun make-delete-sync-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sync-source workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-sync-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-sync-job-response common-lisp:nil
                       ((state :initarg :|state| :type
                         (common-lisp:or sync-job-state common-lisp:null)
                         :accessor %delete-sync-job-response-state :initform
                         (common-lisp:error ":state is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-sync-job-response 'make-delete-sync-job-response))
 (common-lisp:defun make-delete-sync-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state)
   (common-lisp:apply #'common-lisp:make-instance 'delete-sync-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sync-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-request common-lisp:nil
                       ((workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %delete-workspace-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-workspace-request 'make-delete-workspace-request))
 (common-lisp:defun make-delete-workspace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workspace-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-workspace-response
                    'make-delete-workspace-response))
 (common-lisp:defun make-delete-workspace-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workspace-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype entity-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass entity-property-reference common-lisp:nil
                       ((property-name :initarg :|propertyName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %entity-property-reference-property-name :initform
                         (common-lisp:error ":propertyname is required"))
                        (entity-id :initarg :|entityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %entity-property-reference-entity-id :initform
                         common-lisp:nil)
                        (external-id-property :initarg :|externalIdProperty|
                         :type
                         (common-lisp:or external-id-property common-lisp:null)
                         :accessor
                         %entity-property-reference-external-id-property
                         :initform common-lisp:nil)
                        (component-name :initarg :|componentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %entity-property-reference-component-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'entity-property-reference
                    'make-entity-property-reference))
 (common-lisp:defun make-entity-property-reference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key property-name entity-id
                     external-id-property component-name)
   (common-lisp:apply #'common-lisp:make-instance 'entity-property-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          entity-property-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          entity-property-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-id-property))
      (common-lisp:list
       (common-lisp:cons "externalIdProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name))
      (common-lisp:list
       (common-lisp:cons "propertyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          entity-property-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-summaries ()
   '(trivial-types:proper-list entity-summary))
 (common-lisp:defun |make-entity-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass entity-summary common-lisp:nil
                       ((update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %entity-summary-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %entity-summary-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (has-child-entities :initarg :|hasChildEntities| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %entity-summary-has-child-entities :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %entity-summary-description :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %entity-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (parent-entity-id :initarg :|parentEntityId| :type
                         (common-lisp:or parent-entity-id common-lisp:null)
                         :accessor %entity-summary-parent-entity-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %entity-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (entity-name :initarg :|entityName| :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %entity-summary-entity-name :initform
                         (common-lisp:error ":entityname is required"))
                        (entity-id :initarg :|entityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %entity-summary-entity-id :initform
                         (common-lisp:error ":entityid is required"))))
 (common-lisp:export (common-lisp:list 'entity-summary 'make-entity-summary))
 (common-lisp:defun make-entity-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-date-time creation-date-time
                     has-child-entities description status parent-entity-id arn
                     entity-name entity-id)
   (common-lisp:apply #'common-lisp:make-instance 'entity-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "entityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-entity-id))
      (common-lisp:list
       (common-lisp:cons "parentEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-child-entities))
      (common-lisp:list
       (common-lisp:cons "hasChildEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entries ()
   '(trivial-types:proper-list property-value-entry))
 (common-lisp:defun |make-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-value-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-details common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %error-details-message :initform
                         common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %error-details-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defun make-error-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code)
   (common-lisp:apply #'common-lisp:make-instance 'error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-entries ()
   '(trivial-types:proper-list batch-put-property-error-entry))
 (common-lisp:defun |make-error-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-property-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype errors ()
   '(trivial-types:proper-list batch-put-property-error))
 (common-lisp:defun |make-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-property-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-query-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %execute-query-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or query-service-max-results
                                         common-lisp:null)
                         :accessor %execute-query-request-max-results :initform
                         common-lisp:nil)
                        (query-statement :initarg :|queryStatement| :type
                         (common-lisp:or query-statement common-lisp:null)
                         :accessor %execute-query-request-query-statement
                         :initform
                         (common-lisp:error ":querystatement is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %execute-query-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'execute-query-request 'make-execute-query-request))
 (common-lisp:defun make-execute-query-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results query-statement
                     workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'execute-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "queryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-query-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %execute-query-response-next-token :initform
                         common-lisp:nil)
                        (rows :initarg :|rows| :type
                         (common-lisp:or rows common-lisp:null) :accessor
                         %execute-query-response-rows :initform
                         common-lisp:nil)
                        (column-descriptions :initarg :|columnDescriptions|
                         :type
                         (common-lisp:or column-descriptions common-lisp:null)
                         :accessor %execute-query-response-column-descriptions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-query-response 'make-execute-query-response))
 (common-lisp:defun make-execute-query-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token rows column-descriptions)
   (common-lisp:apply #'common-lisp:make-instance 'execute-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-descriptions))
      (common-lisp:list
       (common-lisp:cons "columnDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-query-response))
   common-lisp:nil))
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype extends-from ()
   '(trivial-types:proper-list component-type-id))
 (common-lisp:defun |make-extends-from|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-type-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype external-id-property () 'common-lisp:hash-table)
 (common-lisp:defun |make-external-id-property|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass function-request common-lisp:nil
                       ((implemented-by :initarg :|implementedBy| :type
                         (common-lisp:or data-connector common-lisp:null)
                         :accessor %function-request-implemented-by :initform
                         common-lisp:nil)
                        (scope :initarg :|scope| :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         %function-request-scope :initform common-lisp:nil)
                        (required-properties :initarg :|requiredProperties|
                         :type
                         (common-lisp:or required-properties common-lisp:null)
                         :accessor %function-request-required-properties
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'function-request 'make-function-request))
 (common-lisp:defun make-function-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key implemented-by scope required-properties)
   (common-lisp:apply #'common-lisp:make-instance 'function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-properties))
      (common-lisp:list
       (common-lisp:cons "requiredProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'implemented-by))
      (common-lisp:list
       (common-lisp:cons "implementedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass function-response common-lisp:nil
                       ((is-inherited :initarg :|isInherited| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %function-response-is-inherited :initform
                         common-lisp:nil)
                        (implemented-by :initarg :|implementedBy| :type
                         (common-lisp:or data-connector common-lisp:null)
                         :accessor %function-response-implemented-by :initform
                         common-lisp:nil)
                        (scope :initarg :|scope| :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         %function-response-scope :initform common-lisp:nil)
                        (required-properties :initarg :|requiredProperties|
                         :type
                         (common-lisp:or required-properties common-lisp:null)
                         :accessor %function-response-required-properties
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'function-response 'make-function-response))
 (common-lisp:defun make-function-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-inherited implemented-by scope
                     required-properties)
   (common-lisp:apply #'common-lisp:make-instance 'function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-properties))
      (common-lisp:list
       (common-lisp:cons "requiredProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'implemented-by))
      (common-lisp:list
       (common-lisp:cons "implementedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-inherited))
      (common-lisp:list
       (common-lisp:cons "isInherited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype functions-request () 'common-lisp:hash-table)
 (common-lisp:defun |make-functions-request|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype functions-response () 'common-lisp:hash-table)
 (common-lisp:defun |make-functions-response|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype generated-scene-metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-generated-scene-metadata-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass get-component-type-request common-lisp:nil
                       ((component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         %get-component-type-request-component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-component-type-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-component-type-request
                    'make-get-component-type-request))
 (common-lisp:defun make-get-component-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-type-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-component-type-response common-lisp:nil
                       ((component-type-name :initarg :|componentTypeName|
                         :type
                         (common-lisp:or component-type-name common-lisp:null)
                         :accessor
                         %get-component-type-response-component-type-name
                         :initform common-lisp:nil)
                        (sync-source :initarg :|syncSource| :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor %get-component-type-response-sync-source
                         :initform common-lisp:nil)
                        (property-groups :initarg :|propertyGroups| :type
                         (common-lisp:or property-groups-response
                                         common-lisp:null)
                         :accessor %get-component-type-response-property-groups
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %get-component-type-response-status :initform
                         common-lisp:nil)
                        (is-schema-initialized :initarg :|isSchemaInitialized|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %get-component-type-response-is-schema-initialized
                         :initform common-lisp:nil)
                        (is-abstract :initarg :|isAbstract| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-component-type-response-is-abstract :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %get-component-type-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-component-type-response-update-date-time
                         :initform
                         (common-lisp:error ":updatedatetime is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-component-type-response-creation-date-time
                         :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (functions :initarg :|functions| :type
                         (common-lisp:or functions-response common-lisp:null)
                         :accessor %get-component-type-response-functions
                         :initform common-lisp:nil)
                        (extends-from :initarg :|extendsFrom| :type
                         (common-lisp:or extends-from common-lisp:null)
                         :accessor %get-component-type-response-extends-from
                         :initform common-lisp:nil)
                        (property-definitions :initarg :|propertyDefinitions|
                         :type
                         (common-lisp:or property-definitions-response
                                         common-lisp:null)
                         :accessor
                         %get-component-type-response-property-definitions
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-component-type-response-description
                         :initform common-lisp:nil)
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         %get-component-type-response-component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required"))
                        (is-singleton :initarg :|isSingleton| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-component-type-response-is-singleton :initform
                         common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-component-type-response-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-component-type-response
                    'make-get-component-type-response))
 (common-lisp:defun make-get-component-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-type-name sync-source
                     property-groups status is-schema-initialized is-abstract
                     arn update-date-time creation-date-time functions
                     extends-from property-definitions description
                     component-type-id is-singleton workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-component-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-singleton))
      (common-lisp:list
       (common-lisp:cons "isSingleton"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-definitions))
      (common-lisp:list
       (common-lisp:cons "propertyDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extends-from))
      (common-lisp:list
       (common-lisp:cons "extendsFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-abstract))
      (common-lisp:list
       (common-lisp:cons "isAbstract"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-schema-initialized))
      (common-lisp:list
       (common-lisp:cons "isSchemaInitialized"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-name))
      (common-lisp:list
       (common-lisp:cons "componentTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-component-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-entity-request common-lisp:nil
                       ((entity-id :initarg :|entityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-entity-request-entity-id :initform
                         (common-lisp:error ":entityid is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-entity-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-entity-request 'make-get-entity-request))
 (common-lisp:defun make-get-entity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entity-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-entity-response common-lisp:nil
                       ((sync-source :initarg :|syncSource| :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor %get-entity-response-sync-source :initform
                         common-lisp:nil)
                        (update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-entity-response-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-entity-response-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (has-child-entities :initarg :|hasChildEntities| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-entity-response-has-child-entities :initform
                         (common-lisp:error ":haschildentities is required"))
                        (parent-entity-id :initarg :|parentEntityId| :type
                         (common-lisp:or parent-entity-id common-lisp:null)
                         :accessor %get-entity-response-parent-entity-id
                         :initform
                         (common-lisp:error ":parententityid is required"))
                        (components :initarg :|components| :type
                         (common-lisp:or components-map common-lisp:null)
                         :accessor %get-entity-response-components :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-entity-response-description :initform
                         common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-entity-response-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %get-entity-response-status :initform
                         (common-lisp:error ":status is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %get-entity-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (entity-name :initarg :|entityName| :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %get-entity-response-entity-name :initform
                         (common-lisp:error ":entityname is required"))
                        (entity-id :initarg :|entityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-entity-response-entity-id :initform
                         (common-lisp:error ":entityid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-entity-response 'make-get-entity-response))
 (common-lisp:defun make-get-entity-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sync-source update-date-time
                     creation-date-time has-child-entities parent-entity-id
                     components description workspace-id status arn entity-name
                     entity-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "entityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'components))
      (common-lisp:list
       (common-lisp:cons "components"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-entity-id))
      (common-lisp:list
       (common-lisp:cons "parentEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-child-entities))
      (common-lisp:list
       (common-lisp:cons "hasChildEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pricing-plan-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-pricing-plan-request 'make-get-pricing-plan-request))
 (common-lisp:defun make-get-pricing-plan-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-pricing-plan-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-pricing-plan-response common-lisp:nil
                       ((pending-pricing-plan :initarg :|pendingPricingPlan|
                         :type (common-lisp:or pricing-plan common-lisp:null)
                         :accessor
                         %get-pricing-plan-response-pending-pricing-plan
                         :initform common-lisp:nil)
                        (current-pricing-plan :initarg :|currentPricingPlan|
                         :type (common-lisp:or pricing-plan common-lisp:null)
                         :accessor
                         %get-pricing-plan-response-current-pricing-plan
                         :initform
                         (common-lisp:error
                          ":currentpricingplan is required"))))
 (common-lisp:export
  (common-lisp:list 'get-pricing-plan-response
                    'make-get-pricing-plan-response))
 (common-lisp:defun make-get-pricing-plan-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pending-pricing-plan
                     current-pricing-plan)
   (common-lisp:apply #'common-lisp:make-instance 'get-pricing-plan-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-pricing-plan))
      (common-lisp:list
       (common-lisp:cons "currentPricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-pricing-plan))
      (common-lisp:list
       (common-lisp:cons "pendingPricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-pricing-plan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-property-value-history-request common-lisp:nil
                       ((end-time :initarg :|endTime| :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %get-property-value-history-request-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %get-property-value-history-request-start-time
                         :initform common-lisp:nil)
                        (order-by-time :initarg :|orderByTime| :type
                         (common-lisp:or order-by-time common-lisp:null)
                         :accessor
                         %get-property-value-history-request-order-by-time
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %get-property-value-history-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-property-value-history-request-next-token
                         :initform common-lisp:nil)
                        (interpolation :initarg :|interpolation| :type
                         (common-lisp:or interpolation-parameters
                                         common-lisp:null)
                         :accessor
                         %get-property-value-history-request-interpolation
                         :initform common-lisp:nil)
                        (end-date-time :initarg :|endDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-property-value-history-request-end-date-time
                         :initform common-lisp:nil)
                        (start-date-time :initarg :|startDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-property-value-history-request-start-date-time
                         :initform common-lisp:nil)
                        (property-filters :initarg :|propertyFilters| :type
                         (common-lisp:or property-filters common-lisp:null)
                         :accessor
                         %get-property-value-history-request-property-filters
                         :initform common-lisp:nil)
                        (selected-properties :initarg :|selectedProperties|
                         :type
                         (common-lisp:or selected-property-list
                                         common-lisp:null)
                         :accessor
                         %get-property-value-history-request-selected-properties
                         :initform
                         (common-lisp:error ":selectedproperties is required"))
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         %get-property-value-history-request-component-type-id
                         :initform common-lisp:nil)
                        (component-name :initarg :|componentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %get-property-value-history-request-component-name
                         :initform common-lisp:nil)
                        (entity-id :initarg :|entityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-property-value-history-request-entity-id
                         :initform common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-property-value-history-request-workspace-id
                         :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-property-value-history-request
                    'make-get-property-value-history-request))
 (common-lisp:defun make-get-property-value-history-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time order-by-time
                     max-results next-token interpolation end-date-time
                     start-date-time property-filters selected-properties
                     component-type-id component-name entity-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-property-value-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-properties))
      (common-lisp:list
       (common-lisp:cons "selectedProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-filters))
      (common-lisp:list
       (common-lisp:cons "propertyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date-time))
      (common-lisp:list
       (common-lisp:cons "startDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date-time))
      (common-lisp:list
       (common-lisp:cons "endDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpolation))
      (common-lisp:list
       (common-lisp:cons "interpolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by-time))
      (common-lisp:list
       (common-lisp:cons "orderByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-property-value-history-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-property-value-history-response-next-token
                         :initform common-lisp:nil)
                        (property-values :initarg :|propertyValues| :type
                         (common-lisp:or property-value-list common-lisp:null)
                         :accessor
                         %get-property-value-history-response-property-values
                         :initform
                         (common-lisp:error ":propertyvalues is required"))))
 (common-lisp:export
  (common-lisp:list 'get-property-value-history-response
                    'make-get-property-value-history-response))
 (common-lisp:defun make-get-property-value-history-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token property-values)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-property-value-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-values))
      (common-lisp:list
       (common-lisp:cons "propertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-property-value-request common-lisp:nil
                       ((tabular-conditions :initarg :|tabularConditions| :type
                         (common-lisp:or tabular-conditions common-lisp:null)
                         :accessor
                         %get-property-value-request-tabular-conditions
                         :initform common-lisp:nil)
                        (property-group-name :initarg :|propertyGroupName|
                         :type (common-lisp:or name common-lisp:null) :accessor
                         %get-property-value-request-property-group-name
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-property-value-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-property-value-request-max-results
                         :initform common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-property-value-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))
                        (selected-properties :initarg :|selectedProperties|
                         :type
                         (common-lisp:or selected-property-list
                                         common-lisp:null)
                         :accessor
                         %get-property-value-request-selected-properties
                         :initform
                         (common-lisp:error ":selectedproperties is required"))
                        (entity-id :initarg :|entityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %get-property-value-request-entity-id :initform
                         common-lisp:nil)
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         %get-property-value-request-component-type-id
                         :initform common-lisp:nil)
                        (component-name :initarg :|componentName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %get-property-value-request-component-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-property-value-request
                    'make-get-property-value-request))
 (common-lisp:defun make-get-property-value-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tabular-conditions property-group-name
                     next-token max-results workspace-id selected-properties
                     entity-id component-type-id component-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-property-value-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "componentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "entityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-properties))
      (common-lisp:list
       (common-lisp:cons "selectedProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-group-name))
      (common-lisp:list
       (common-lisp:cons "propertyGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tabular-conditions))
      (common-lisp:list
       (common-lisp:cons "tabularConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-property-value-response common-lisp:nil
                       ((tabular-property-values :initarg
                         :|tabularPropertyValues| :type
                         (common-lisp:or tabular-property-values
                                         common-lisp:null)
                         :accessor
                         %get-property-value-response-tabular-property-values
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-property-value-response-next-token :initform
                         common-lisp:nil)
                        (property-values :initarg :|propertyValues| :type
                         (common-lisp:or property-latest-value-map
                                         common-lisp:null)
                         :accessor %get-property-value-response-property-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-property-value-response
                    'make-get-property-value-response))
 (common-lisp:defun make-get-property-value-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tabular-property-values next-token
                     property-values)
   (common-lisp:apply #'common-lisp:make-instance 'get-property-value-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-values))
      (common-lisp:list
       (common-lisp:cons "propertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tabular-property-values))
      (common-lisp:list
       (common-lisp:cons "tabularPropertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-property-value-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-scene-request common-lisp:nil
                       ((scene-id :initarg :|sceneId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-scene-request-scene-id :initform
                         (common-lisp:error ":sceneid is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-scene-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-scene-request 'make-get-scene-request))
 (common-lisp:defun make-get-scene-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scene-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-scene-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-scene-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-scene-response common-lisp:nil
                       ((generated-scene-metadata :initarg
                         :|generatedSceneMetadata| :type
                         (common-lisp:or generated-scene-metadata-map
                                         common-lisp:null)
                         :accessor %get-scene-response-generated-scene-metadata
                         :initform common-lisp:nil)
                        (scene-metadata :initarg :|sceneMetadata| :type
                         (common-lisp:or scene-metadata-map common-lisp:null)
                         :accessor %get-scene-response-scene-metadata :initform
                         common-lisp:nil)
                        (capabilities :initarg :|capabilities| :type
                         (common-lisp:or scene-capabilities common-lisp:null)
                         :accessor %get-scene-response-capabilities :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-scene-response-description :initform
                         common-lisp:nil)
                        (update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-scene-response-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-scene-response-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %get-scene-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (content-location :initarg :|contentLocation| :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %get-scene-response-content-location :initform
                         (common-lisp:error ":contentlocation is required"))
                        (scene-id :initarg :|sceneId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-scene-response-scene-id :initform
                         (common-lisp:error ":sceneid is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-scene-response-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-scene-response 'make-get-scene-response))
 (common-lisp:defun make-get-scene-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key generated-scene-metadata scene-metadata
                     capabilities description update-date-time
                     creation-date-time arn content-location scene-id
                     workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-scene-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-scene-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-scene-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-id))
      (common-lisp:list
       (common-lisp:cons "sceneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-location))
      (common-lisp:list
       (common-lisp:cons "contentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-metadata))
      (common-lisp:list
       (common-lisp:cons "sceneMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-scene-metadata))
      (common-lisp:list
       (common-lisp:cons "generatedSceneMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-scene-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sync-job-request common-lisp:nil
                       ((workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-sync-job-request-workspace-id :initform
                         common-lisp:nil)
                        (sync-source :initarg :|syncSource| :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor %get-sync-job-request-sync-source :initform
                         (common-lisp:error ":syncsource is required"))))
 (common-lisp:export
  (common-lisp:list 'get-sync-job-request 'make-get-sync-job-request))
 (common-lisp:defun make-get-sync-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id sync-source)
   (common-lisp:apply #'common-lisp:make-instance 'get-sync-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-sync-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-sync-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sync-job-response common-lisp:nil
                       ((update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-sync-job-response-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-sync-job-response-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or sync-job-status common-lisp:null)
                         :accessor %get-sync-job-response-status :initform
                         (common-lisp:error ":status is required"))
                        (sync-role :initarg :|syncRole| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %get-sync-job-response-sync-role :initform
                         (common-lisp:error ":syncrole is required"))
                        (sync-source :initarg :|syncSource| :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor %get-sync-job-response-sync-source :initform
                         (common-lisp:error ":syncsource is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-sync-job-response-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %get-sync-job-response-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-sync-job-response 'make-get-sync-job-response))
 (common-lisp:defun make-get-sync-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-date-time creation-date-time
                     status sync-role sync-source workspace-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-sync-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-role))
      (common-lisp:list
       (common-lisp:cons "syncRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sync-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workspace-request common-lisp:nil
                       ((workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id-or-arn common-lisp:null) :accessor
                         %get-workspace-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-workspace-request 'make-get-workspace-request))
 (common-lisp:defun make-get-workspace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workspace-response common-lisp:nil
                       ((update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-workspace-response-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-workspace-response-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (role :initarg :|role| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %get-workspace-response-role :initform
                         (common-lisp:error ":role is required"))
                        (s3location :initarg :|s3Location| :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %get-workspace-response-s3location :initform
                         (common-lisp:error ":s3location is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-workspace-response-description
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %get-workspace-response-arn :initform
                         (common-lisp:error ":arn is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %get-workspace-response-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-workspace-response 'make-get-workspace-response))
 (common-lisp:defun make-get-workspace-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-date-time creation-date-time role
                     s3location description arn workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workspace-response))
   common-lisp:nil))
(common-lisp:deftype group-type () 'common-lisp:string)
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype id-or-arn () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass interpolation-parameters common-lisp:nil
                       ((interval-in-seconds :initarg :|intervalInSeconds|
                         :type
                         (common-lisp:or interval-in-seconds common-lisp:null)
                         :accessor
                         %interpolation-parameters-interval-in-seconds
                         :initform common-lisp:nil)
                        (interpolation-type :initarg :|interpolationType| :type
                         (common-lisp:or interpolation-type common-lisp:null)
                         :accessor %interpolation-parameters-interpolation-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'interpolation-parameters 'make-interpolation-parameters))
 (common-lisp:defun make-interpolation-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interval-in-seconds interpolation-type)
   (common-lisp:apply #'common-lisp:make-instance 'interpolation-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          interpolation-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          interpolation-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpolation-type))
      (common-lisp:list
       (common-lisp:cons "interpolationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-in-seconds))
      (common-lisp:list
       (common-lisp:cons "intervalInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          interpolation-parameters))
   common-lisp:nil))
(common-lisp:deftype interpolation-type () 'common-lisp:string)
(common-lisp:deftype interval-in-seconds () 'common-lisp:integer)
(common-lisp:deftype lambda-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass lambda-function common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or lambda-arn common-lisp:null) :accessor
                         %lambda-function-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'lambda-function 'make-lambda-function))
 (common-lisp:defun make-lambda-function
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-function
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-function))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-function))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-function))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-component-types-filter common-lisp:nil
                       ((is-abstract :initarg :|isAbstract| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-component-types-filter-is-abstract :initform
                         common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-component-types-filter-namespace :initform
                         common-lisp:nil)
                        (extends-from :initarg :|extendsFrom| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor %list-component-types-filter-extends-from
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-component-types-filter
                    'make-list-component-types-filter))
 (common-lisp:defun make-list-component-types-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-abstract namespace extends-from)
   (common-lisp:apply #'common-lisp:make-instance 'list-component-types-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extends-from))
      (common-lisp:list
       (common-lisp:cons "extendsFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-abstract))
      (common-lisp:list
       (common-lisp:cons "isAbstract"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-component-types-filters ()
   '(trivial-types:proper-list list-component-types-filter))
 (common-lisp:defun |make-list-component-types-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-component-types-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-component-types-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-component-types-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-component-types-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or list-component-types-filters
                                         common-lisp:null)
                         :accessor %list-component-types-request-filters
                         :initform common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-component-types-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-component-types-request
                    'make-list-component-types-request))
 (common-lisp:defun make-list-component-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-component-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-component-types-response common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-component-types-response-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-component-types-response-next-token :initform
                         common-lisp:nil)
                        (component-type-summaries :initarg
                         :|componentTypeSummaries| :type
                         (common-lisp:or component-type-summaries
                                         common-lisp:null)
                         :accessor
                         %list-component-types-response-component-type-summaries
                         :initform
                         (common-lisp:error
                          ":componenttypesummaries is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-component-types-response-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-component-types-response
                    'make-list-component-types-response))
 (common-lisp:defun make-list-component-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     component-type-summaries workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-component-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-type-summaries))
      (common-lisp:list
       (common-lisp:cons "componentTypeSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-component-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entities-filter common-lisp:nil
                       ((external-id :initarg :|externalId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-entities-filter-external-id :initform
                         common-lisp:nil)
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor %list-entities-filter-component-type-id
                         :initform common-lisp:nil)
                        (parent-entity-id :initarg :|parentEntityId| :type
                         (common-lisp:or parent-entity-id common-lisp:null)
                         :accessor %list-entities-filter-parent-entity-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-entities-filter 'make-list-entities-filter))
 (common-lisp:defun make-list-entities-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id component-type-id
                     parent-entity-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-entities-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-entities-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-entities-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-entity-id))
      (common-lisp:list
       (common-lisp:cons "parentEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-entities-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-entities-filters ()
   '(trivial-types:proper-list list-entities-filter))
 (common-lisp:defun |make-list-entities-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list list-entities-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-entities-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-entities-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-entities-request-max-results :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or list-entities-filters
                                         common-lisp:null)
                         :accessor %list-entities-request-filters :initform
                         common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-entities-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-entities-request 'make-list-entities-request))
 (common-lisp:defun make-list-entities-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-entities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entities-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-entities-response-next-token :initform
                         common-lisp:nil)
                        (entity-summaries :initarg :|entitySummaries| :type
                         (common-lisp:or entity-summaries common-lisp:null)
                         :accessor %list-entities-response-entity-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-entities-response 'make-list-entities-response))
 (common-lisp:defun make-list-entities-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entity-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-entities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-summaries))
      (common-lisp:list
       (common-lisp:cons "entitySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scenes-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-scenes-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-scenes-request-max-results :initform
                         common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-scenes-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-scenes-request 'make-list-scenes-request))
 (common-lisp:defun make-list-scenes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-scenes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-scenes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-scenes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-scenes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scenes-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-scenes-response-next-token :initform
                         common-lisp:nil)
                        (scene-summaries :initarg :|sceneSummaries| :type
                         (common-lisp:or scene-summaries common-lisp:null)
                         :accessor %list-scenes-response-scene-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-scenes-response 'make-list-scenes-response))
 (common-lisp:defun make-list-scenes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token scene-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-scenes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-scenes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-scenes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-summaries))
      (common-lisp:list
       (common-lisp:cons "sceneSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-scenes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sync-jobs-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-sync-jobs-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-sync-jobs-request-max-results
                         :initform common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-sync-jobs-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-sync-jobs-request 'make-list-sync-jobs-request))
 (common-lisp:defun make-list-sync-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-sync-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sync-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-sync-jobs-response-next-token :initform
                         common-lisp:nil)
                        (sync-job-summaries :initarg :|syncJobSummaries| :type
                         (common-lisp:or sync-job-summaries common-lisp:null)
                         :accessor %list-sync-jobs-response-sync-job-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-sync-jobs-response 'make-list-sync-jobs-response))
 (common-lisp:defun make-list-sync-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token sync-job-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-sync-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-job-summaries))
      (common-lisp:list
       (common-lisp:cons "syncJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sync-resources-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-sync-resources-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-sync-resources-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or sync-resource-filters
                                         common-lisp:null)
                         :accessor %list-sync-resources-request-filters
                         :initform common-lisp:nil)
                        (sync-source :initarg :|syncSource| :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor %list-sync-resources-request-sync-source
                         :initform
                         (common-lisp:error ":syncsource is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %list-sync-resources-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-sync-resources-request
                    'make-list-sync-resources-request))
 (common-lisp:defun make-list-sync-resources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     sync-source workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-sync-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sync-resources-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-sync-resources-response-next-token :initform
                         common-lisp:nil)
                        (sync-resources :initarg :|syncResources| :type
                         (common-lisp:or sync-resource-summaries
                                         common-lisp:null)
                         :accessor %list-sync-resources-response-sync-resources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-sync-resources-response
                    'make-list-sync-resources-response))
 (common-lisp:defun make-list-sync-resources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token sync-resources)
   (common-lisp:apply #'common-lisp:make-instance 'list-sync-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-resources))
      (common-lisp:list
       (common-lisp:cons "syncResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sync-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-tags-for-resource-request-max-results
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceARN| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-response-next-token :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workspaces-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-workspaces-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-workspaces-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workspaces-request 'make-list-workspaces-request))
 (common-lisp:defun make-list-workspaces-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-workspaces-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workspaces-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-workspaces-response-next-token :initform
                         common-lisp:nil)
                        (workspace-summaries :initarg :|workspaceSummaries|
                         :type
                         (common-lisp:or workspace-summaries common-lisp:null)
                         :accessor
                         %list-workspaces-response-workspace-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workspaces-response 'make-list-workspaces-response))
 (common-lisp:defun make-list-workspaces-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token workspace-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-workspaces-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-summaries))
      (common-lisp:list
       (common-lisp:cons "workspaceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workspaces-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass order-by common-lisp:nil
                       ((property-name :initarg :|propertyName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %order-by-property-name :initform
                         (common-lisp:error ":propertyname is required"))
                        (order :initarg :|order| :type
                         (common-lisp:or order common-lisp:null) :accessor
                         %order-by-order :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'order-by 'make-order-by))
 (common-lisp:defun make-order-by
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key property-name order)
   (common-lisp:apply #'common-lisp:make-instance 'order-by
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name))
      (common-lisp:list
       (common-lisp:cons "propertyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order-by))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype order-by-list () '(trivial-types:proper-list order-by))
 (common-lisp:defun |make-order-by-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list order-by))
   aws-sdk/generator/shape::members))
(common-lisp:deftype order-by-time () 'common-lisp:string)
(common-lisp:deftype parent-entity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parent-entity-update-request common-lisp:nil
                       ((parent-entity-id :initarg :|parentEntityId| :type
                         (common-lisp:or parent-entity-id common-lisp:null)
                         :accessor
                         %parent-entity-update-request-parent-entity-id
                         :initform common-lisp:nil)
                        (update-type :initarg :|updateType| :type
                         (common-lisp:or parent-entity-update-type
                                         common-lisp:null)
                         :accessor %parent-entity-update-request-update-type
                         :initform
                         (common-lisp:error ":updatetype is required"))))
 (common-lisp:export
  (common-lisp:list 'parent-entity-update-request
                    'make-parent-entity-update-request))
 (common-lisp:defun make-parent-entity-update-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parent-entity-id update-type)
   (common-lisp:apply #'common-lisp:make-instance 'parent-entity-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parent-entity-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parent-entity-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-entity-id))
      (common-lisp:list
       (common-lisp:cons "parentEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parent-entity-update-request))
   common-lisp:nil))
(common-lisp:deftype parent-entity-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pricing-bundles ()
   '(trivial-types:proper-list bundle-name))
 (common-lisp:defun |make-pricing-bundles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bundle-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pricing-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pricing-plan common-lisp:nil
                       ((update-reason :initarg :|updateReason| :type
                         (common-lisp:or update-reason common-lisp:null)
                         :accessor %pricing-plan-update-reason :initform
                         (common-lisp:error ":updatereason is required"))
                        (update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %pricing-plan-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))
                        (pricing-mode :initarg :|pricingMode| :type
                         (common-lisp:or pricing-mode common-lisp:null)
                         :accessor %pricing-plan-pricing-mode :initform
                         (common-lisp:error ":pricingmode is required"))
                        (effective-date-time :initarg :|effectiveDateTime|
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor %pricing-plan-effective-date-time :initform
                         (common-lisp:error ":effectivedatetime is required"))
                        (bundle-information :initarg :|bundleInformation| :type
                         (common-lisp:or bundle-information common-lisp:null)
                         :accessor %pricing-plan-bundle-information :initform
                         common-lisp:nil)
                        (billable-entity-count :initarg :|billableEntityCount|
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %pricing-plan-billable-entity-count :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'pricing-plan 'make-pricing-plan))
 (common-lisp:defun make-pricing-plan
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-reason update-date-time
                     pricing-mode effective-date-time bundle-information
                     billable-entity-count)
   (common-lisp:apply #'common-lisp:make-instance 'pricing-plan
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pricing-plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pricing-plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billable-entity-count))
      (common-lisp:list
       (common-lisp:cons "billableEntityCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-information))
      (common-lisp:list
       (common-lisp:cons "bundleInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-date-time))
      (common-lisp:list
       (common-lisp:cons "effectiveDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-mode))
      (common-lisp:list
       (common-lisp:cons "pricingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-reason))
      (common-lisp:list
       (common-lisp:cons "updateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pricing-plan))
   common-lisp:nil))
(common-lisp:deftype pricing-tier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass property-definition-request common-lisp:nil
                       ((display-name :initarg :|displayName| :type
                         (common-lisp:or property-display-name
                                         common-lisp:null)
                         :accessor %property-definition-request-display-name
                         :initform common-lisp:nil)
                        (configuration :initarg :|configuration| :type
                         (common-lisp:or configuration common-lisp:null)
                         :accessor %property-definition-request-configuration
                         :initform common-lisp:nil)
                        (default-value :initarg :|defaultValue| :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         %property-definition-request-default-value :initform
                         common-lisp:nil)
                        (is-time-series :initarg :|isTimeSeries| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %property-definition-request-is-time-series :initform
                         common-lisp:nil)
                        (is-stored-externally :initarg :|isStoredExternally|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %property-definition-request-is-stored-externally
                         :initform common-lisp:nil)
                        (is-external-id :initarg :|isExternalId| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %property-definition-request-is-external-id :initform
                         common-lisp:nil)
                        (is-required-in-entity :initarg :|isRequiredInEntity|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %property-definition-request-is-required-in-entity
                         :initform common-lisp:nil)
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         %property-definition-request-data-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'property-definition-request
                    'make-property-definition-request))
 (common-lisp:defun make-property-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-name configuration default-value
                     is-time-series is-stored-externally is-external-id
                     is-required-in-entity data-type)
   (common-lisp:apply #'common-lisp:make-instance 'property-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-required-in-entity))
      (common-lisp:list
       (common-lisp:cons "isRequiredInEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-external-id))
      (common-lisp:list
       (common-lisp:cons "isExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-stored-externally))
      (common-lisp:list
       (common-lisp:cons "isStoredExternally"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-time-series))
      (common-lisp:list
       (common-lisp:cons "isTimeSeries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property-definition-response common-lisp:nil
                       ((display-name :initarg :|displayName| :type
                         (common-lisp:or property-display-name
                                         common-lisp:null)
                         :accessor %property-definition-response-display-name
                         :initform common-lisp:nil)
                        (configuration :initarg :|configuration| :type
                         (common-lisp:or configuration common-lisp:null)
                         :accessor %property-definition-response-configuration
                         :initform common-lisp:nil)
                        (default-value :initarg :|defaultValue| :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         %property-definition-response-default-value :initform
                         common-lisp:nil)
                        (is-inherited :initarg :|isInherited| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %property-definition-response-is-inherited :initform
                         (common-lisp:error ":isinherited is required"))
                        (is-final :initarg :|isFinal| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %property-definition-response-is-final :initform
                         (common-lisp:error ":isfinal is required"))
                        (is-imported :initarg :|isImported| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %property-definition-response-is-imported :initform
                         (common-lisp:error ":isimported is required"))
                        (is-stored-externally :initarg :|isStoredExternally|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %property-definition-response-is-stored-externally
                         :initform
                         (common-lisp:error ":isstoredexternally is required"))
                        (is-external-id :initarg :|isExternalId| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %property-definition-response-is-external-id :initform
                         (common-lisp:error ":isexternalid is required"))
                        (is-required-in-entity :initarg :|isRequiredInEntity|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %property-definition-response-is-required-in-entity
                         :initform
                         (common-lisp:error ":isrequiredinentity is required"))
                        (is-time-series :initarg :|isTimeSeries| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %property-definition-response-is-time-series :initform
                         (common-lisp:error ":istimeseries is required"))
                        (data-type :initarg :|dataType| :type
                         (common-lisp:or data-type common-lisp:null) :accessor
                         %property-definition-response-data-type :initform
                         (common-lisp:error ":datatype is required"))))
 (common-lisp:export
  (common-lisp:list 'property-definition-response
                    'make-property-definition-response))
 (common-lisp:defun make-property-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-name configuration default-value
                     is-inherited is-final is-imported is-stored-externally
                     is-external-id is-required-in-entity is-time-series
                     data-type)
   (common-lisp:apply #'common-lisp:make-instance 'property-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-time-series))
      (common-lisp:list
       (common-lisp:cons "isTimeSeries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-required-in-entity))
      (common-lisp:list
       (common-lisp:cons "isRequiredInEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-external-id))
      (common-lisp:list
       (common-lisp:cons "isExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-stored-externally))
      (common-lisp:list
       (common-lisp:cons "isStoredExternally"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-imported))
      (common-lisp:list
       (common-lisp:cons "isImported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-final))
      (common-lisp:list
       (common-lisp:cons "isFinal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-inherited))
      (common-lisp:list
       (common-lisp:cons "isInherited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-definitions-request () 'common-lisp:hash-table)
 (common-lisp:defun |make-property-definitions-request|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype property-definitions-response () 'common-lisp:hash-table)
 (common-lisp:defun |make-property-definitions-response|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype property-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass property-filter common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         %property-filter-value :initform common-lisp:nil)
                        (operator :initarg :|operator| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %property-filter-operator :initform common-lisp:nil)
                        (property-name :initarg :|propertyName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %property-filter-property-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'property-filter 'make-property-filter))
 (common-lisp:defun make-property-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value operator property-name)
   (common-lisp:apply #'common-lisp:make-instance 'property-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name))
      (common-lisp:list
       (common-lisp:cons "propertyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-filters ()
   '(trivial-types:proper-list property-filter))
 (common-lisp:defun |make-property-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass property-group-request common-lisp:nil
                       ((property-names :initarg :|propertyNames| :type
                         (common-lisp:or property-names common-lisp:null)
                         :accessor %property-group-request-property-names
                         :initform common-lisp:nil)
                        (group-type :initarg :|groupType| :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         %property-group-request-group-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'property-group-request 'make-property-group-request))
 (common-lisp:defun make-property-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key property-names group-type)
   (common-lisp:apply #'common-lisp:make-instance 'property-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-type))
      (common-lisp:list
       (common-lisp:cons "groupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-names))
      (common-lisp:list
       (common-lisp:cons "propertyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property-group-response common-lisp:nil
                       ((is-inherited :initarg :|isInherited| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %property-group-response-is-inherited :initform
                         (common-lisp:error ":isinherited is required"))
                        (property-names :initarg :|propertyNames| :type
                         (common-lisp:or property-names common-lisp:null)
                         :accessor %property-group-response-property-names
                         :initform
                         (common-lisp:error ":propertynames is required"))
                        (group-type :initarg :|groupType| :type
                         (common-lisp:or group-type common-lisp:null) :accessor
                         %property-group-response-group-type :initform
                         (common-lisp:error ":grouptype is required"))))
 (common-lisp:export
  (common-lisp:list 'property-group-response 'make-property-group-response))
 (common-lisp:defun make-property-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-inherited property-names group-type)
   (common-lisp:apply #'common-lisp:make-instance 'property-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-type))
      (common-lisp:list
       (common-lisp:cons "groupType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-names))
      (common-lisp:list
       (common-lisp:cons "propertyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-inherited))
      (common-lisp:list
       (common-lisp:cons "isInherited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-group-response))
   common-lisp:nil))
(common-lisp:deftype property-group-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype property-groups-request () 'common-lisp:hash-table)
 (common-lisp:defun |make-property-groups-request|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype property-groups-response () 'common-lisp:hash-table)
 (common-lisp:defun |make-property-groups-response|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass property-latest-value common-lisp:nil
                       ((property-value :initarg :|propertyValue| :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         %property-latest-value-property-value :initform
                         common-lisp:nil)
                        (property-reference :initarg :|propertyReference| :type
                         (common-lisp:or entity-property-reference
                                         common-lisp:null)
                         :accessor %property-latest-value-property-reference
                         :initform
                         (common-lisp:error
                          ":propertyreference is required"))))
 (common-lisp:export
  (common-lisp:list 'property-latest-value 'make-property-latest-value))
 (common-lisp:defun make-property-latest-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key property-value property-reference)
   (common-lisp:apply #'common-lisp:make-instance 'property-latest-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-latest-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-latest-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-reference))
      (common-lisp:list
       (common-lisp:cons "propertyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-value))
      (common-lisp:list
       (common-lisp:cons "propertyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-latest-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-latest-value-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-property-latest-value-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype property-names () '(trivial-types:proper-list name))
 (common-lisp:defun |make-property-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass property-request common-lisp:nil
                       ((update-type :initarg :|updateType| :type
                         (common-lisp:or property-update-type common-lisp:null)
                         :accessor %property-request-update-type :initform
                         common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         %property-request-value :initform common-lisp:nil)
                        (definition :initarg :|definition| :type
                         (common-lisp:or property-definition-request
                                         common-lisp:null)
                         :accessor %property-request-definition :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'property-request 'make-property-request))
 (common-lisp:defun make-property-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-type value definition)
   (common-lisp:apply #'common-lisp:make-instance 'property-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-type))
      (common-lisp:list
       (common-lisp:cons "updateType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-requests () 'common-lisp:hash-table)
 (common-lisp:defun |make-property-requests|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass property-response common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         %property-response-value :initform common-lisp:nil)
                        (definition :initarg :|definition| :type
                         (common-lisp:or property-definition-response
                                         common-lisp:null)
                         :accessor %property-response-definition :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'property-response 'make-property-response))
 (common-lisp:defun make-property-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value definition)
   (common-lisp:apply #'common-lisp:make-instance 'property-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-responses () 'common-lisp:hash-table)
 (common-lisp:defun |make-property-responses|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype property-table-value () 'common-lisp:hash-table)
 (common-lisp:defun |make-property-table-value|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype property-update-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass property-value common-lisp:nil
                       ((time :initarg :|time| :type
                         (common-lisp:or time common-lisp:null) :accessor
                         %property-value-time :initform common-lisp:nil)
                        (value :initarg :|value| :type
                         (common-lisp:or data-value common-lisp:null) :accessor
                         %property-value-value :initform
                         (common-lisp:error ":value is required"))
                        (timestamp :initarg common-lisp:string :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %property-value-timestamp :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'property-value 'make-property-value))
 (common-lisp:defun make-property-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time value timestamp)
   (common-lisp:apply #'common-lisp:make-instance 'property-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property-value-entry common-lisp:nil
                       ((property-values :initarg :|propertyValues| :type
                         (common-lisp:or property-values common-lisp:null)
                         :accessor %property-value-entry-property-values
                         :initform common-lisp:nil)
                        (entity-property-reference :initarg
                         :|entityPropertyReference| :type
                         (common-lisp:or entity-property-reference
                                         common-lisp:null)
                         :accessor
                         %property-value-entry-entity-property-reference
                         :initform
                         (common-lisp:error
                          ":entitypropertyreference is required"))))
 (common-lisp:export
  (common-lisp:list 'property-value-entry 'make-property-value-entry))
 (common-lisp:defun make-property-value-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key property-values
                     entity-property-reference)
   (common-lisp:apply #'common-lisp:make-instance 'property-value-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-value-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-value-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entity-property-reference))
      (common-lisp:list
       (common-lisp:cons "entityPropertyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-values))
      (common-lisp:list
       (common-lisp:cons "propertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-value-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass property-value-history common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or values common-lisp:null) :accessor
                         %property-value-history-values :initform
                         common-lisp:nil)
                        (entity-property-reference :initarg
                         :|entityPropertyReference| :type
                         (common-lisp:or entity-property-reference
                                         common-lisp:null)
                         :accessor
                         %property-value-history-entity-property-reference
                         :initform
                         (common-lisp:error
                          ":entitypropertyreference is required"))))
 (common-lisp:export
  (common-lisp:list 'property-value-history 'make-property-value-history))
 (common-lisp:defun make-property-value-history
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values entity-property-reference)
   (common-lisp:apply #'common-lisp:make-instance 'property-value-history
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-value-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-value-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entity-property-reference))
      (common-lisp:list
       (common-lisp:cons "entityPropertyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-value-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-value-list ()
   '(trivial-types:proper-list property-value-history))
 (common-lisp:defun |make-property-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-value-history))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype property-values ()
   '(trivial-types:proper-list property-value))
 (common-lisp:defun |make-property-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass query-result-value common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'query-result-value 'make-query-result-value))
 (common-lisp:defun make-query-result-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'query-result-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-result-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-result-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-result-value))
   common-lisp:nil))
(common-lisp:deftype query-service-max-results () 'common-lisp:integer)
(common-lisp:deftype query-statement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition query-timeout-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       query-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'query-timeout-exception 'query-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass relationship common-lisp:nil
                       ((relationship-type :initarg :|relationshipType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %relationship-relationship-type :initform
                         common-lisp:nil)
                        (target-component-type-id :initarg
                         :|targetComponentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor %relationship-target-component-type-id
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'relationship 'make-relationship))
 (common-lisp:defun make-relationship
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key relationship-type
                     target-component-type-id)
   (common-lisp:apply #'common-lisp:make-instance 'relationship
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relationship))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relationship))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-component-type-id))
      (common-lisp:list
       (common-lisp:cons "targetComponentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-type))
      (common-lisp:list
       (common-lisp:cons "relationshipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relationship))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass relationship-value common-lisp:nil
                       ((target-component-name :initarg :|targetComponentName|
                         :type (common-lisp:or name common-lisp:null) :accessor
                         %relationship-value-target-component-name :initform
                         common-lisp:nil)
                        (target-entity-id :initarg :|targetEntityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %relationship-value-target-entity-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'relationship-value 'make-relationship-value))
 (common-lisp:defun make-relationship-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-component-name target-entity-id)
   (common-lisp:apply #'common-lisp:make-instance 'relationship-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relationship-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relationship-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-entity-id))
      (common-lisp:list
       (common-lisp:cons "targetEntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-component-name))
      (common-lisp:list
       (common-lisp:cons "targetComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relationship-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype required-properties () '(trivial-types:proper-list name))
 (common-lisp:defun |make-required-properties|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass row common-lisp:nil
                       ((row-data :initarg :|rowData| :type
                         (common-lisp:or row-data common-lisp:null) :accessor
                         %row-row-data :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'row 'make-row))
 (common-lisp:defun make-row
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key row-data)
   (common-lisp:apply #'common-lisp:make-instance 'row
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input row))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-data))
      (common-lisp:list
       (common-lisp:cons "rowData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input row))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype row-data ()
   '(trivial-types:proper-list query-result-value))
 (common-lisp:defun |make-row-data|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-result-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rows () '(trivial-types:proper-list row))
 (common-lisp:defun |make-rows|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list row))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3location () 'common-lisp:string)
(common-lisp:deftype s3url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scene-capabilities ()
   '(trivial-types:proper-list scene-capability))
 (common-lisp:defun |make-scene-capabilities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scene-capability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scene-capability () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scene-metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-scene-metadata-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype scene-metadata-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scene-summaries ()
   '(trivial-types:proper-list scene-summary))
 (common-lisp:defun |make-scene-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scene-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass scene-summary common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %scene-summary-description :initform
                         common-lisp:nil)
                        (update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %scene-summary-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %scene-summary-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %scene-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (content-location :initarg :|contentLocation| :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %scene-summary-content-location :initform
                         (common-lisp:error ":contentlocation is required"))
                        (scene-id :initarg :|sceneId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %scene-summary-scene-id :initform
                         (common-lisp:error ":sceneid is required"))))
 (common-lisp:export (common-lisp:list 'scene-summary 'make-scene-summary))
 (common-lisp:defun make-scene-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description update-date-time
                     creation-date-time arn content-location scene-id)
   (common-lisp:apply #'common-lisp:make-instance 'scene-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scene-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scene-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-id))
      (common-lisp:list
       (common-lisp:cons "sceneId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-location))
      (common-lisp:list
       (common-lisp:cons "contentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scene-summary))
   common-lisp:nil))
(common-lisp:deftype scope () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype selected-property-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-selected-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass status common-lisp:nil
                       ((error :initarg :|error| :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor %status-error :initform common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %status-state :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'status 'make-status))
 (common-lisp:defun make-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error state)
   (common-lisp:apply #'common-lisp:make-instance 'status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype sync-job-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sync-job-status common-lisp:nil
                       ((error :initarg :|error| :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor %sync-job-status-error :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or sync-job-state common-lisp:null)
                         :accessor %sync-job-status-state :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sync-job-status 'make-sync-job-status))
 (common-lisp:defun make-sync-job-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error state)
   (common-lisp:apply #'common-lisp:make-instance 'sync-job-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-job-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-job-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-job-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sync-job-summaries ()
   '(trivial-types:proper-list sync-job-summary))
 (common-lisp:defun |make-sync-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sync-job-summary common-lisp:nil
                       ((update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %sync-job-summary-update-date-time :initform
                         common-lisp:nil)
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %sync-job-summary-creation-date-time :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or sync-job-status common-lisp:null)
                         :accessor %sync-job-summary-status :initform
                         common-lisp:nil)
                        (sync-source :initarg :|syncSource| :type
                         (common-lisp:or sync-source common-lisp:null)
                         :accessor %sync-job-summary-sync-source :initform
                         common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %sync-job-summary-workspace-id :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %sync-job-summary-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sync-job-summary 'make-sync-job-summary))
 (common-lisp:defun make-sync-job-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-date-time creation-date-time
                     status sync-source workspace-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'sync-job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "syncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sync-resource-filter common-lisp:nil
                       ((external-id :initarg :|externalId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %sync-resource-filter-external-id :initform
                         common-lisp:nil)
                        (resource-id :initarg :|resourceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %sync-resource-filter-resource-id :initform
                         common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or sync-resource-type common-lisp:null)
                         :accessor %sync-resource-filter-resource-type
                         :initform common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or sync-resource-state common-lisp:null)
                         :accessor %sync-resource-filter-state :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sync-resource-filter 'make-sync-resource-filter))
 (common-lisp:defun make-sync-resource-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id resource-id resource-type
                     state)
   (common-lisp:apply #'common-lisp:make-instance 'sync-resource-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-resource-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-resource-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-resource-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sync-resource-filters ()
   '(trivial-types:proper-list sync-resource-filter))
 (common-lisp:defun |make-sync-resource-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-resource-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sync-resource-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sync-resource-status common-lisp:nil
                       ((error :initarg :|error| :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor %sync-resource-status-error :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or sync-resource-state common-lisp:null)
                         :accessor %sync-resource-status-state :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sync-resource-status 'make-sync-resource-status))
 (common-lisp:defun make-sync-resource-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error state)
   (common-lisp:apply #'common-lisp:make-instance 'sync-resource-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sync-resource-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sync-resource-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sync-resource-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sync-resource-summaries ()
   '(trivial-types:proper-list sync-resource-summary))
 (common-lisp:defun |make-sync-resource-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sync-resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sync-resource-summary common-lisp:nil
                       ((update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %sync-resource-summary-update-date-time :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or sync-resource-status common-lisp:null)
                         :accessor %sync-resource-summary-status :initform
                         common-lisp:nil)
                        (resource-id :initarg :|resourceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %sync-resource-summary-resource-id :initform
                         common-lisp:nil)
                        (external-id :initarg :|externalId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %sync-resource-summary-external-id :initform
                         common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or sync-resource-type common-lisp:null)
                         :accessor %sync-resource-summary-resource-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sync-resource-summary 'make-sync-resource-summary))
 (common-lisp:defun make-sync-resource-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-date-time status resource-id
                     external-id resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'sync-resource-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sync-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sync-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sync-resource-summary))
   common-lisp:nil))
(common-lisp:deftype sync-resource-type () 'common-lisp:string)
(common-lisp:deftype sync-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tabular-conditions common-lisp:nil
                       ((property-filters :initarg :|propertyFilters| :type
                         (common-lisp:or property-filters common-lisp:null)
                         :accessor %tabular-conditions-property-filters
                         :initform common-lisp:nil)
                        (order-by :initarg :|orderBy| :type
                         (common-lisp:or order-by-list common-lisp:null)
                         :accessor %tabular-conditions-order-by :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tabular-conditions 'make-tabular-conditions))
 (common-lisp:defun make-tabular-conditions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key property-filters order-by)
   (common-lisp:apply #'common-lisp:make-instance 'tabular-conditions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tabular-conditions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tabular-conditions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-filters))
      (common-lisp:list
       (common-lisp:cons "propertyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tabular-conditions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tabular-property-value ()
   '(trivial-types:proper-list property-table-value))
 (common-lisp:defun |make-tabular-property-value|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-table-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tabular-property-values ()
   '(trivial-types:proper-list tabular-property-value))
 (common-lisp:defun |make-tabular-property-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tabular-property-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceARN| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:deftype twin-maker-arn () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceARN| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-type-request common-lisp:nil
                       ((component-type-name :initarg :|componentTypeName|
                         :type
                         (common-lisp:or component-type-name common-lisp:null)
                         :accessor
                         %update-component-type-request-component-type-name
                         :initform common-lisp:nil)
                        (property-groups :initarg :|propertyGroups| :type
                         (common-lisp:or property-groups-request
                                         common-lisp:null)
                         :accessor
                         %update-component-type-request-property-groups
                         :initform common-lisp:nil)
                        (functions :initarg :|functions| :type
                         (common-lisp:or functions-request common-lisp:null)
                         :accessor %update-component-type-request-functions
                         :initform common-lisp:nil)
                        (extends-from :initarg :|extendsFrom| :type
                         (common-lisp:or extends-from common-lisp:null)
                         :accessor %update-component-type-request-extends-from
                         :initform common-lisp:nil)
                        (property-definitions :initarg :|propertyDefinitions|
                         :type
                         (common-lisp:or property-definitions-request
                                         common-lisp:null)
                         :accessor
                         %update-component-type-request-property-definitions
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-component-type-request-description
                         :initform common-lisp:nil)
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         %update-component-type-request-component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required"))
                        (is-singleton :initarg :|isSingleton| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-component-type-request-is-singleton :initform
                         common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-component-type-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-component-type-request
                    'make-update-component-type-request))
 (common-lisp:defun make-update-component-type-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-type-name property-groups
                     functions extends-from property-definitions description
                     component-type-id is-singleton workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-component-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-singleton))
      (common-lisp:list
       (common-lisp:cons "isSingleton"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-definitions))
      (common-lisp:list
       (common-lisp:cons "propertyDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extends-from))
      (common-lisp:list
       (common-lisp:cons "extendsFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'functions))
      (common-lisp:list
       (common-lisp:cons "functions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-groups))
      (common-lisp:list
       (common-lisp:cons "propertyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-name))
      (common-lisp:list
       (common-lisp:cons "componentTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-type-response common-lisp:nil
                       ((state :initarg :|state| :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %update-component-type-response-state :initform
                         (common-lisp:error ":state is required"))
                        (component-type-id :initarg :|componentTypeId| :type
                         (common-lisp:or component-type-id common-lisp:null)
                         :accessor
                         %update-component-type-response-component-type-id
                         :initform
                         (common-lisp:error ":componenttypeid is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %update-component-type-response-arn
                         :initform (common-lisp:error ":arn is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-component-type-response-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-component-type-response
                    'make-update-component-type-response))
 (common-lisp:defun make-update-component-type-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state component-type-id arn workspace-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-component-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type-id))
      (common-lisp:list
       (common-lisp:cons "componentTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-entity-request common-lisp:nil
                       ((parent-entity-update :initarg :|parentEntityUpdate|
                         :type
                         (common-lisp:or parent-entity-update-request
                                         common-lisp:null)
                         :accessor %update-entity-request-parent-entity-update
                         :initform common-lisp:nil)
                        (component-updates :initarg :|componentUpdates| :type
                         (common-lisp:or component-updates-map-request
                                         common-lisp:null)
                         :accessor %update-entity-request-component-updates
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-entity-request-description :initform
                         common-lisp:nil)
                        (entity-name :initarg :|entityName| :type
                         (common-lisp:or entity-name common-lisp:null)
                         :accessor %update-entity-request-entity-name :initform
                         common-lisp:nil)
                        (entity-id :initarg :|entityId| :type
                         (common-lisp:or entity-id common-lisp:null) :accessor
                         %update-entity-request-entity-id :initform
                         (common-lisp:error ":entityid is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-entity-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-entity-request 'make-update-entity-request))
 (common-lisp:defun make-update-entity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parent-entity-update component-updates
                     description entity-name entity-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "entityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-updates))
      (common-lisp:list
       (common-lisp:cons "componentUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-entity-update))
      (common-lisp:list
       (common-lisp:cons "parentEntityUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-entity-response common-lisp:nil
                       ((state :initarg :|state| :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %update-entity-response-state :initform
                         (common-lisp:error ":state is required"))
                        (update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-entity-response-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))))
 (common-lisp:export
  (common-lisp:list 'update-entity-response 'make-update-entity-response))
 (common-lisp:defun make-update-entity-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state update-date-time)
   (common-lisp:apply #'common-lisp:make-instance 'update-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pricing-plan-request common-lisp:nil
                       ((bundle-names :initarg :|bundleNames| :type
                         (common-lisp:or pricing-bundles common-lisp:null)
                         :accessor %update-pricing-plan-request-bundle-names
                         :initform common-lisp:nil)
                        (pricing-mode :initarg :|pricingMode| :type
                         (common-lisp:or pricing-mode common-lisp:null)
                         :accessor %update-pricing-plan-request-pricing-mode
                         :initform
                         (common-lisp:error ":pricingmode is required"))))
 (common-lisp:export
  (common-lisp:list 'update-pricing-plan-request
                    'make-update-pricing-plan-request))
 (common-lisp:defun make-update-pricing-plan-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bundle-names pricing-mode)
   (common-lisp:apply #'common-lisp:make-instance 'update-pricing-plan-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-mode))
      (common-lisp:list
       (common-lisp:cons "pricingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-names))
      (common-lisp:list
       (common-lisp:cons "bundleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-pricing-plan-response common-lisp:nil
                       ((pending-pricing-plan :initarg :|pendingPricingPlan|
                         :type (common-lisp:or pricing-plan common-lisp:null)
                         :accessor
                         %update-pricing-plan-response-pending-pricing-plan
                         :initform common-lisp:nil)
                        (current-pricing-plan :initarg :|currentPricingPlan|
                         :type (common-lisp:or pricing-plan common-lisp:null)
                         :accessor
                         %update-pricing-plan-response-current-pricing-plan
                         :initform
                         (common-lisp:error
                          ":currentpricingplan is required"))))
 (common-lisp:export
  (common-lisp:list 'update-pricing-plan-response
                    'make-update-pricing-plan-response))
 (common-lisp:defun make-update-pricing-plan-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pending-pricing-plan
                     current-pricing-plan)
   (common-lisp:apply #'common-lisp:make-instance 'update-pricing-plan-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-pricing-plan))
      (common-lisp:list
       (common-lisp:cons "currentPricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-pricing-plan))
      (common-lisp:list
       (common-lisp:cons "pendingPricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pricing-plan-response))
   common-lisp:nil))
(common-lisp:deftype update-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-scene-request common-lisp:nil
                       ((scene-metadata :initarg :|sceneMetadata| :type
                         (common-lisp:or scene-metadata-map common-lisp:null)
                         :accessor %update-scene-request-scene-metadata
                         :initform common-lisp:nil)
                        (capabilities :initarg :|capabilities| :type
                         (common-lisp:or scene-capabilities common-lisp:null)
                         :accessor %update-scene-request-capabilities :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-scene-request-description :initform
                         common-lisp:nil)
                        (content-location :initarg :|contentLocation| :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %update-scene-request-content-location :initform
                         common-lisp:nil)
                        (scene-id :initarg :|sceneId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-scene-request-scene-id :initform
                         (common-lisp:error ":sceneid is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-scene-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-scene-request 'make-update-scene-request))
 (common-lisp:defun make-update-scene-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scene-metadata capabilities description
                     content-location scene-id workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-scene-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-scene-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-scene-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-location))
      (common-lisp:list
       (common-lisp:cons "contentLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-metadata))
      (common-lisp:list
       (common-lisp:cons "sceneMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-scene-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-scene-response common-lisp:nil
                       ((update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-scene-response-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))))
 (common-lisp:export
  (common-lisp:list 'update-scene-response 'make-update-scene-response))
 (common-lisp:defun make-update-scene-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-date-time)
   (common-lisp:apply #'common-lisp:make-instance 'update-scene-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scene-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scene-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scene-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-request common-lisp:nil
                       ((role :initarg :|role| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-workspace-request-role :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-workspace-request-description
                         :initform common-lisp:nil)
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %update-workspace-request-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-workspace-request 'make-update-workspace-request))
 (common-lisp:defun make-update-workspace-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role description workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-workspace-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workspace-response common-lisp:nil
                       ((update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %update-workspace-response-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))))
 (common-lisp:export
  (common-lisp:list 'update-workspace-response
                    'make-update-workspace-response))
 (common-lisp:defun make-update-workspace-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-date-time)
   (common-lisp:apply #'common-lisp:make-instance 'update-workspace-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workspace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (iottwinmaker-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype values () '(trivial-types:proper-list property-value))
 (common-lisp:defun |make-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workspace-summaries ()
   '(trivial-types:proper-list workspace-summary))
 (common-lisp:defun |make-workspace-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workspace-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workspace-summary common-lisp:nil
                       ((update-date-time :initarg :|updateDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %workspace-summary-update-date-time :initform
                         (common-lisp:error ":updatedatetime is required"))
                        (creation-date-time :initarg :|creationDateTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %workspace-summary-creation-date-time :initform
                         (common-lisp:error ":creationdatetime is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %workspace-summary-description :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or twin-maker-arn common-lisp:null)
                         :accessor %workspace-summary-arn :initform
                         (common-lisp:error ":arn is required"))
                        (workspace-id :initarg :|workspaceId| :type
                         (common-lisp:or id common-lisp:null) :accessor
                         %workspace-summary-workspace-id :initform
                         (common-lisp:error ":workspaceid is required"))))
 (common-lisp:export
  (common-lisp:list 'workspace-summary 'make-workspace-summary))
 (common-lisp:defun make-workspace-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-date-time creation-date-time
                     description arn workspace-id)
   (common-lisp:apply #'common-lisp:make-instance 'workspace-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workspace-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workspace-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workspace-id))
      (common-lisp:list
       (common-lisp:cons "workspaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "creationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date-time))
      (common-lisp:list
       (common-lisp:cons "updateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workspace-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun batch-put-property-values
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id entries)
   (common-lisp:declare (common-lisp:ignorable workspace-id entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-put-property-values-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entity-properties"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "BatchPutPropertyValues"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-put-property-values))
(common-lisp:progn
 (common-lisp:defun create-component-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id is-singleton
                     component-type-id description property-definitions
                     extends-from functions tags property-groups
                     component-type-name)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id is-singleton component-type-id
     description property-definitions extends-from functions tags
     property-groups component-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-component-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/component-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'component-type-id))))
                                                        "CreateComponentType"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-component-type))
(common-lisp:progn
 (common-lisp:defun create-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id entity-id entity-name
                     description components parent-entity-id tags)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id entity-id entity-name description
     components parent-entity-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "CreateEntity"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-entity))
(common-lisp:progn
 (common-lisp:defun create-scene
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id scene-id content-location
                     description capabilities tags scene-metadata)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id scene-id content-location description
     capabilities tags scene-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-scene-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/scenes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "CreateScene"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-scene))
(common-lisp:progn
 (common-lisp:defun create-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id sync-source sync-role tags)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id sync-source sync-role tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-sync-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/sync-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sync-source))))
                                                        "CreateSyncJob"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-sync-job))
(common-lisp:progn
 (common-lisp:defun create-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id description s3location role
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id description s3location role tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "CreateWorkspace"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workspace))
(common-lisp:progn
 (common-lisp:defun delete-component-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id component-type-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id component-type-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-component-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/component-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'component-type-id))))
                                                        "DeleteComponentType"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-component-type))
(common-lisp:progn
 (common-lisp:defun delete-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id entity-id is-recursive)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id entity-id is-recursive))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entity-id))))
                                                        "DeleteEntity"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-entity))
(common-lisp:progn
 (common-lisp:defun delete-scene
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id scene-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id scene-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scene-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/scenes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scene-id))))
                                                        "DeleteScene"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-scene))
(common-lisp:progn
 (common-lisp:defun delete-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id sync-source)
   (common-lisp:declare (common-lisp:ignorable workspace-id sync-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sync-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/sync-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sync-source))))
                                                        "DeleteSyncJob"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-sync-job))
(common-lisp:progn
 (common-lisp:defun delete-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "DeleteWorkspace"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workspace))
(common-lisp:progn
 (common-lisp:defun execute-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id query-statement max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id query-statement max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/queries/execution"
                                                        "ExecuteQuery"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'execute-query))
(common-lisp:progn
 (common-lisp:defun get-component-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id component-type-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id component-type-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-component-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/component-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'component-type-id))))
                                                        "GetComponentType"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-component-type))
(common-lisp:progn
 (common-lisp:defun get-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id entity-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id entity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entity-id))))
                                                        "GetEntity"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-entity))
(common-lisp:progn
 (common-lisp:defun get-pricing-plan ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iottwinmaker-request :method "GET" :path
                                "/pricingplan" :protocol :rest-json :operation
                                "GetPricingPlan" :params
                                `(("Action" ,@"GetPricingPlan")
                                  ("Version" ,@"2021-11-29"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-pricing-plan))
(common-lisp:progn
 (common-lisp:defun get-property-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key component-name component-type-id
                     entity-id selected-properties workspace-id max-results
                     next-token property-group-name tabular-conditions)
   (common-lisp:declare
    (common-lisp:ignorable component-name component-type-id entity-id
     selected-properties workspace-id max-results next-token
     property-group-name tabular-conditions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-property-value-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entity-properties/value"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "GetPropertyValue"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-property-value))
(common-lisp:progn
 (common-lisp:defun get-property-value-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id entity-id component-name
                     component-type-id selected-properties property-filters
                     start-date-time end-date-time interpolation next-token
                     max-results order-by-time start-time end-time)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id entity-id component-name
     component-type-id selected-properties property-filters start-date-time
     end-date-time interpolation next-token max-results order-by-time
     start-time end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-property-value-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entity-properties/history"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "GetPropertyValueHistory"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-property-value-history))
(common-lisp:progn
 (common-lisp:defun get-scene
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id scene-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id scene-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-scene-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/scenes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scene-id))))
                                                        "GetScene"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-scene))
(common-lisp:progn
 (common-lisp:defun get-sync-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-source workspace-id)
   (common-lisp:declare (common-lisp:ignorable sync-source workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sync-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/sync-jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sync-source))))
                                                        "GetSyncJob"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sync-job))
(common-lisp:progn
 (common-lisp:defun get-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id)
   (common-lisp:declare (common-lisp:ignorable workspace-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "GetWorkspace"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workspace))
(common-lisp:progn
 (common-lisp:defun list-component-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-component-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/component-types-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListComponentTypes"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-component-types))
(common-lisp:progn
 (common-lisp:defun list-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListEntities"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-entities))
(common-lisp:progn
 (common-lisp:defun list-scenes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scenes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/scenes-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListScenes"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-scenes))
(common-lisp:progn
 (common-lisp:defun list-sync-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sync-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/sync-jobs-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "ListSyncJobs"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sync-jobs))
(common-lisp:progn
 (common-lisp:defun list-sync-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id sync-source filters
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id sync-source filters max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sync-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/sync-jobs/~A/resources-list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'sync-source))))
                                                        "ListSyncResources"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sync-resources))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/tags-list"
                                                        "ListTagsForResource"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-workspaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workspaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/workspaces-list"
                                                        "ListWorkspaces"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workspaces))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/tags" "TagResource"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/tags" "UntagResource"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-component-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id is-singleton
                     component-type-id description property-definitions
                     extends-from functions property-groups
                     component-type-name)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id is-singleton component-type-id
     description property-definitions extends-from functions property-groups
     component-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-component-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/component-types/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'component-type-id))))
                                                        "UpdateComponentType"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-component-type))
(common-lisp:progn
 (common-lisp:defun update-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id entity-id entity-name
                     description component-updates parent-entity-update)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id entity-id entity-name description
     component-updates parent-entity-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/entities/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'entity-id))))
                                                        "UpdateEntity"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-entity))
(common-lisp:progn
 (common-lisp:defun update-pricing-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pricing-mode bundle-names)
   (common-lisp:declare (common-lisp:ignorable pricing-mode bundle-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pricing-plan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/pricingplan"
                                                        "UpdatePricingPlan"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pricing-plan))
(common-lisp:progn
 (common-lisp:defun update-scene
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id scene-id content-location
                     description capabilities scene-metadata)
   (common-lisp:declare
    (common-lisp:ignorable workspace-id scene-id content-location description
     capabilities scene-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-scene-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A/scenes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'scene-id))))
                                                        "UpdateScene"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-scene))
(common-lisp:progn
 (common-lisp:defun update-workspace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workspace-id description role)
   (common-lisp:declare (common-lisp:ignorable workspace-id description role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workspace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iottwinmaker-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workspaces/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workspace-id))))
                                                        "UpdateWorkspace"
                                                        "2021-11-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workspace))
