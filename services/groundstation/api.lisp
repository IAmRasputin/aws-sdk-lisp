;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/groundstation/api
  (:use)
  (:nicknames #:aws/groundstation)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/groundstation/api)
(common-lisp:progn
 (common-lisp:defclass groundstation-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "groundstation" :protocol
                        :rest-json))
 (common-lisp:export 'groundstation-request))
(common-lisp:progn
 (common-lisp:define-condition groundstation-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'groundstation-error))
(common-lisp:defvar *error-map*
  '(("DependencyException" . dependency-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:deftype awsregion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-cpu-cores-list ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun |make-agent-cpu-cores-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-details-"))
   (agent-cpu-cores common-lisp:nil :type
    (common-lisp:or agent-cpu-cores-list common-lisp:null))
   (agent-version (common-lisp:error ":agentversion is required") :type
    (common-lisp:or version-string common-lisp:null))
   (component-versions (common-lisp:error ":componentversions is required")
    :type (common-lisp:or component-version-list common-lisp:null))
   (instance-id (common-lisp:error ":instanceid is required") :type
    (common-lisp:or instance-id common-lisp:null))
   (instance-type (common-lisp:error ":instancetype is required") :type
    (common-lisp:or instance-type common-lisp:null))
   (reserved-cpu-cores common-lisp:nil :type
    (common-lisp:or agent-cpu-cores-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent-details 'make-agent-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-cpu-cores))
      (common-lisp:list
       (common-lisp:cons "agentCpuCores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-versions))
      (common-lisp:list
       (common-lisp:cons "componentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-cpu-cores))
      (common-lisp:list
       (common-lisp:cons "reservedCpuCores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-details))
   common-lisp:nil))
(common-lisp:deftype agent-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aggregate-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregate-status-"))
   (signature-map common-lisp:nil :type
    (common-lisp:or signature-map common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or agent-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregate-status 'make-aggregate-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregate-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregate-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-map))
      (common-lisp:list
       (common-lisp:cons "signatureMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregate-status))
   common-lisp:nil))
(common-lisp:deftype angle-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (antenna-demod-decode-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-antenna-demod-decode-details-"))
   (output-node common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'antenna-demod-decode-details
                    'make-antenna-demod-decode-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antenna-demod-decode-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antenna-demod-decode-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-node))
      (common-lisp:list
       (common-lisp:cons "outputNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antenna-demod-decode-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (antenna-downlink-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-antenna-downlink-config-"))
   (spectrum-config (common-lisp:error ":spectrumconfig is required") :type
    (common-lisp:or spectrum-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'antenna-downlink-config 'make-antenna-downlink-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spectrum-config))
      (common-lisp:list
       (common-lisp:cons "spectrumConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (antenna-downlink-demod-decode-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-antenna-downlink-demod-decode-config-"))
   (decode-config (common-lisp:error ":decodeconfig is required") :type
    (common-lisp:or decode-config common-lisp:null))
   (demodulation-config (common-lisp:error ":demodulationconfig is required")
    :type (common-lisp:or demodulation-config common-lisp:null))
   (spectrum-config (common-lisp:error ":spectrumconfig is required") :type
    (common-lisp:or spectrum-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'antenna-downlink-demod-decode-config
                    'make-antenna-downlink-demod-decode-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-demod-decode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-demod-decode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decode-config))
      (common-lisp:list
       (common-lisp:cons "decodeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'demodulation-config))
      (common-lisp:list
       (common-lisp:cons "demodulationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spectrum-config))
      (common-lisp:list
       (common-lisp:cons "spectrumConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-demod-decode-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (antenna-uplink-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-antenna-uplink-config-"))
   (spectrum-config (common-lisp:error ":spectrumconfig is required") :type
    (common-lisp:or uplink-spectrum-config common-lisp:null))
   (target-eirp (common-lisp:error ":targeteirp is required") :type
    (common-lisp:or eirp common-lisp:null))
   (transmit-disabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'antenna-uplink-config 'make-antenna-uplink-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antenna-uplink-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antenna-uplink-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spectrum-config))
      (common-lisp:list
       (common-lisp:cons "spectrumConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-eirp))
      (common-lisp:list
       (common-lisp:cons "targetEirp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transmit-disabled))
      (common-lisp:list
       (common-lisp:cons "transmitDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antenna-uplink-config))
   common-lisp:nil))
(common-lisp:deftype any-arn () 'common-lisp:string)
(common-lisp:deftype audit-results () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aws-ground-station-agent-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-aws-ground-station-agent-endpoint-"))
   (agent-status common-lisp:nil :type
    (common-lisp:or agent-status common-lisp:null))
   (audit-results common-lisp:nil :type
    (common-lisp:or audit-results common-lisp:null))
   (egress-address (common-lisp:error ":egressaddress is required") :type
    (common-lisp:or connection-details common-lisp:null))
   (ingress-address (common-lisp:error ":ingressaddress is required") :type
    (common-lisp:or ranged-connection-details common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or safe-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aws-ground-station-agent-endpoint
                    'make-aws-ground-station-agent-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ground-station-agent-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ground-station-agent-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status))
      (common-lisp:list
       (common-lisp:cons "agentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-results))
      (common-lisp:list
       (common-lisp:cons "auditResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-address))
      (common-lisp:list
       (common-lisp:cons "egressAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingress-address))
      (common-lisp:list
       (common-lisp:cons "ingressAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ground-station-agent-endpoint))
   common-lisp:nil))
(common-lisp:deftype bandwidth-units () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-contact-request-"))
   (contact-id (common-lisp:error ":contactid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-contact-request 'make-cancel-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-contact-request))
   common-lisp:nil))
(common-lisp:deftype capability-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capability-arn-list ()
   '(trivial-types:proper-list capability-arn))
 (common-lisp:defun |make-capability-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capability-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype capability-health () 'common-lisp:string)
(common-lisp:deftype capability-health-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capability-health-reason-list ()
   '(trivial-types:proper-list capability-health-reason))
 (common-lisp:defun |make-capability-health-reason-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            capability-health-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (component-status-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-status-data-"))
   (bytes-received common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (bytes-sent common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (capability-arn (common-lisp:error ":capabilityarn is required") :type
    (common-lisp:or capability-arn common-lisp:null))
   (component-type (common-lisp:error ":componenttype is required") :type
    (common-lisp:or component-type-string common-lisp:null))
   (dataflow-id (common-lisp:error ":dataflowid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (packets-dropped common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or agent-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-status-data 'make-component-status-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-status-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-status-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-received))
      (common-lisp:list
       (common-lisp:cons "bytesReceived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-sent))
      (common-lisp:list
       (common-lisp:cons "bytesSent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-arn))
      (common-lisp:list
       (common-lisp:cons "capabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataflow-id))
      (common-lisp:list
       (common-lisp:cons "dataflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packets-dropped))
      (common-lisp:list
       (common-lisp:cons "packetsDropped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-status-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-status-list ()
   '(trivial-types:proper-list component-status-data))
 (common-lisp:defun |make-component-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-status-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (component-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-component-version-"))
   (component-type (common-lisp:error ":componenttype is required") :type
    (common-lisp:or component-type-string common-lisp:null))
   (versions (common-lisp:error ":versions is required") :type
    (common-lisp:or version-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'component-version 'make-component-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-version-list ()
   '(trivial-types:proper-list component-version))
 (common-lisp:defun |make-component-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype config-arn () 'common-lisp:string)
(common-lisp:deftype config-capability-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (config-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-config-details-"))
   (antenna-demod-decode-details common-lisp:nil :type
    (common-lisp:or antenna-demod-decode-details common-lisp:null))
   (endpoint-details common-lisp:nil :type
    (common-lisp:or endpoint-details common-lisp:null))
   (s3recording-details common-lisp:nil :type
    (common-lisp:or s3recording-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'config-details 'make-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antenna-demod-decode-details))
      (common-lisp:list
       (common-lisp:cons "antennaDemodDecodeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-details))
      (common-lisp:list
       (common-lisp:cons "endpointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3recording-details))
      (common-lisp:list
       (common-lisp:cons "s3RecordingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (config-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-config-id-response-"))
   (config-arn common-lisp:nil :type
    (common-lisp:or config-arn common-lisp:null))
   (config-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (config-type common-lisp:nil :type
    (common-lisp:or config-capability-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'config-id-response 'make-config-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input config-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input config-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-arn))
      (common-lisp:list
       (common-lisp:cons "configArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-id))
      (common-lisp:list
       (common-lisp:cons "configId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-type))
      (common-lisp:list
       (common-lisp:cons "configType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input config-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype config-list ()
   '(trivial-types:proper-list config-list-item))
 (common-lisp:defun |make-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list config-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (config-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-config-list-item-"))
   (config-arn common-lisp:nil :type
    (common-lisp:or config-arn common-lisp:null))
   (config-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (config-type common-lisp:nil :type
    (common-lisp:or config-capability-type common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'config-list-item 'make-config-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input config-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input config-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-arn))
      (common-lisp:list
       (common-lisp:cons "configArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-id))
      (common-lisp:list
       (common-lisp:cons "configId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-type))
      (common-lisp:list
       (common-lisp:cons "configType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input config-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (config-type-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-config-type-data-"))
   (antenna-downlink-config common-lisp:nil :type
    (common-lisp:or antenna-downlink-config common-lisp:null))
   (antenna-downlink-demod-decode-config common-lisp:nil :type
    (common-lisp:or antenna-downlink-demod-decode-config common-lisp:null))
   (antenna-uplink-config common-lisp:nil :type
    (common-lisp:or antenna-uplink-config common-lisp:null))
   (dataflow-endpoint-config common-lisp:nil :type
    (common-lisp:or dataflow-endpoint-config common-lisp:null))
   (s3recording-config common-lisp:nil :type
    (common-lisp:or s3recording-config common-lisp:null))
   (tracking-config common-lisp:nil :type
    (common-lisp:or tracking-config common-lisp:null))
   (uplink-echo-config common-lisp:nil :type
    (common-lisp:or uplink-echo-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'config-type-data 'make-config-type-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input config-type-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input config-type-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antenna-downlink-config))
      (common-lisp:list
       (common-lisp:cons "antennaDownlinkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antenna-downlink-demod-decode-config))
      (common-lisp:list
       (common-lisp:cons "antennaDownlinkDemodDecodeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antenna-uplink-config))
      (common-lisp:list
       (common-lisp:cons "antennaUplinkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-config))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3recording-config))
      (common-lisp:list
       (common-lisp:cons "s3RecordingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-config))
      (common-lisp:list
       (common-lisp:cons "trackingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-echo-config))
      (common-lisp:list
       (common-lisp:cons "uplinkEchoConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input config-type-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (connection-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-details-"))
   (mtu common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (socket-address (common-lisp:error ":socketaddress is required") :type
    (common-lisp:or socket-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-details 'make-connection-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'socket-address))
      (common-lisp:list
       (common-lisp:cons "socketAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (contact-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-data-"))
   (contact-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (contact-status common-lisp:nil :type
    (common-lisp:or contact-status common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ground-station common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (maximum-elevation common-lisp:nil :type
    (common-lisp:or elevation common-lisp:null))
   (mission-profile-arn common-lisp:nil :type
    (common-lisp:or mission-profile-arn common-lisp:null))
   (post-pass-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (pre-pass-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (satellite-arn common-lisp:nil :type
    (common-lisp:or |satelliteArn| common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'contact-data 'make-contact-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "contactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-status))
      (common-lisp:list
       (common-lisp:cons "contactStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station))
      (common-lisp:list
       (common-lisp:cons "groundStation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-elevation))
      (common-lisp:list
       (common-lisp:cons "maximumElevation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-pass-end-time))
      (common-lisp:list
       (common-lisp:cons "postPassEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-pass-start-time))
      (common-lisp:list
       (common-lisp:cons "prePassStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (contact-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-id-response-"))
   (contact-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'contact-id-response 'make-contact-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "contactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype contact-list ()
   '(trivial-types:proper-list contact-data))
 (common-lisp:defun |make-contact-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-config-request-"))
   (config-data (common-lisp:error ":configdata is required") :type
    (common-lisp:or config-type-data common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or safe-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-config-request 'make-create-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-data))
      (common-lisp:list
       (common-lisp:cons "configData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dataflow-endpoint-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dataflow-endpoint-group-request-"))
   (contact-post-pass-duration-seconds common-lisp:nil :type
    (common-lisp:or dataflow-endpoint-group-duration-in-seconds
                    common-lisp:null))
   (contact-pre-pass-duration-seconds common-lisp:nil :type
    (common-lisp:or dataflow-endpoint-group-duration-in-seconds
                    common-lisp:null))
   (endpoint-details (common-lisp:error ":endpointdetails is required") :type
    (common-lisp:or endpoint-details-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dataflow-endpoint-group-request
                    'make-create-dataflow-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataflow-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataflow-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-post-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPostPassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-pre-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPrePassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-details))
      (common-lisp:list
       (common-lisp:cons "endpointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataflow-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-ephemeris-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-ephemeris-request-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ephemeris common-lisp:nil :type
    (common-lisp:or ephemeris-data common-lisp:null))
   (expiration-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or key-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or safe-name common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or customer-ephemeris-priority common-lisp:null))
   (satellite-id (common-lisp:error ":satelliteid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-ephemeris-request 'make-create-ephemeris-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ephemeris-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris))
      (common-lisp:list
       (common-lisp:cons "ephemeris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "expirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-id))
      (common-lisp:list
       (common-lisp:cons "satelliteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ephemeris-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-mission-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-mission-profile-request-"))
   (contact-post-pass-duration-seconds common-lisp:nil :type
    (common-lisp:or duration-in-seconds common-lisp:null))
   (contact-pre-pass-duration-seconds common-lisp:nil :type
    (common-lisp:or duration-in-seconds common-lisp:null))
   (dataflow-edges (common-lisp:error ":dataflowedges is required") :type
    (common-lisp:or dataflow-edge-list common-lisp:null))
   (minimum-viable-contact-duration-seconds
    (common-lisp:error ":minimumviablecontactdurationseconds is required")
    :type (common-lisp:or positive-duration-in-seconds common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or safe-name common-lisp:null))
   (streams-kms-key common-lisp:nil :type
    (common-lisp:or kms-key common-lisp:null))
   (streams-kms-role common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (tracking-config-arn (common-lisp:error ":trackingconfigarn is required")
    :type (common-lisp:or config-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-mission-profile-request
                    'make-create-mission-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mission-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-post-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPostPassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-pre-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPrePassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataflow-edges))
      (common-lisp:list
       (common-lisp:cons "dataflowEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-viable-contact-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "minimumViableContactDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-key))
      (common-lisp:list
       (common-lisp:cons "streamsKmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-role))
      (common-lisp:list
       (common-lisp:cons "streamsKmsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-config-arn))
      (common-lisp:list
       (common-lisp:cons "trackingConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mission-profile-request))
   common-lisp:nil))
(common-lisp:deftype criticality () 'common-lisp:string)
(common-lisp:deftype customer-ephemeris-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (dataflow-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataflow-detail-"))
   (destination common-lisp:nil :type
    (common-lisp:or destination common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dataflow-detail 'make-dataflow-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataflow-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataflow-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataflow-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataflow-edge () '(trivial-types:proper-list config-arn))
 (common-lisp:defun |make-dataflow-edge|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list config-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dataflow-edge-list ()
   '(trivial-types:proper-list dataflow-edge))
 (common-lisp:defun |make-dataflow-edge-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataflow-edge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dataflow-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataflow-endpoint-"))
   (address common-lisp:nil :type
    (common-lisp:or socket-address common-lisp:null))
   (mtu common-lisp:nil :type
    (common-lisp:or dataflow-endpoint-mtu-integer common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or safe-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or endpoint-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dataflow-endpoint 'make-dataflow-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataflow-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataflow-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataflow-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dataflow-endpoint-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataflow-endpoint-config-"))
   (dataflow-endpoint-name
    (common-lisp:error ":dataflowendpointname is required") :type
    (common-lisp:or string common-lisp:null))
   (dataflow-endpoint-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dataflow-endpoint-config 'make-dataflow-endpoint-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-region))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-config))
   common-lisp:nil))
(common-lisp:deftype dataflow-endpoint-group-arn () 'common-lisp:string)
(common-lisp:deftype dataflow-endpoint-group-duration-in-seconds ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (dataflow-endpoint-group-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataflow-endpoint-group-id-response-"))
   (dataflow-endpoint-group-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dataflow-endpoint-group-id-response
                    'make-dataflow-endpoint-group-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-group-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-group-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-id))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-group-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataflow-endpoint-group-list ()
   '(trivial-types:proper-list dataflow-endpoint-list-item))
 (common-lisp:defun |make-dataflow-endpoint-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dataflow-endpoint-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dataflow-endpoint-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataflow-endpoint-list-item-"))
   (dataflow-endpoint-group-arn common-lisp:nil :type
    (common-lisp:or dataflow-endpoint-group-arn common-lisp:null))
   (dataflow-endpoint-group-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dataflow-endpoint-list-item
                    'make-dataflow-endpoint-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-id))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-list-item))
   common-lisp:nil))
(common-lisp:deftype dataflow-endpoint-mtu-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype dataflow-list ()
   '(trivial-types:proper-list dataflow-detail))
 (common-lisp:defun |make-dataflow-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataflow-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (decode-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-decode-config-"))
   (unvalidated-json (common-lisp:error ":unvalidatedjson is required") :type
    (common-lisp:or json-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'decode-config 'make-decode-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unvalidated-json))
      (common-lisp:list
       (common-lisp:cons "unvalidatedJSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decode-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-config-request-"))
   (config-id (common-lisp:error ":configid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (config-type (common-lisp:error ":configtype is required") :type
    (common-lisp:or config-capability-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-config-request 'make-delete-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dataflow-endpoint-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dataflow-endpoint-group-request-"))
   (dataflow-endpoint-group-id
    (common-lisp:error ":dataflowendpointgroupid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dataflow-endpoint-group-request
                    'make-delete-dataflow-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataflow-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataflow-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataflow-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-ephemeris-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-ephemeris-request-"))
   (ephemeris-id (common-lisp:error ":ephemerisid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-ephemeris-request 'make-delete-ephemeris-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ephemeris-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-mission-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-mission-profile-request-"))
   (mission-profile-id (common-lisp:error ":missionprofileid is required")
    :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-mission-profile-request
                    'make-delete-mission-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mission-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (demodulation-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-demodulation-config-"))
   (unvalidated-json (common-lisp:error ":unvalidatedjson is required") :type
    (common-lisp:or json-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'demodulation-config 'make-demodulation-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input demodulation-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input demodulation-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unvalidated-json))
      (common-lisp:list
       (common-lisp:cons "unvalidatedJSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input demodulation-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-exception
     (groundstation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       dependency-exception-message)
      (parameter-name :initarg :parameter-name :initform common-lisp:nil
       :reader dependency-exception-parameter-name)))
 (common-lisp:export
  (common-lisp:list 'dependency-exception 'dependency-exception-message
                    'dependency-exception-parameter-name)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-contact-request-"))
   (contact-id (common-lisp:error ":contactid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-request 'make-describe-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-contact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-contact-response-"))
   (contact-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (contact-status common-lisp:nil :type
    (common-lisp:or contact-status common-lisp:null))
   (dataflow-list common-lisp:nil :type
    (common-lisp:or dataflow-list common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (ground-station common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (maximum-elevation common-lisp:nil :type
    (common-lisp:or elevation common-lisp:null))
   (mission-profile-arn common-lisp:nil :type
    (common-lisp:or mission-profile-arn common-lisp:null))
   (post-pass-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (pre-pass-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (satellite-arn common-lisp:nil :type
    (common-lisp:or |satelliteArn| common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-response
                    'make-describe-contact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "contactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-status))
      (common-lisp:list
       (common-lisp:cons "contactStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataflow-list))
      (common-lisp:list
       (common-lisp:cons "dataflowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station))
      (common-lisp:list
       (common-lisp:cons "groundStation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-elevation))
      (common-lisp:list
       (common-lisp:cons "maximumElevation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-pass-end-time))
      (common-lisp:list
       (common-lisp:cons "postPassEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-pass-start-time))
      (common-lisp:list
       (common-lisp:cons "prePassStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-ephemeris-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-ephemeris-request-"))
   (ephemeris-id (common-lisp:error ":ephemerisid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-ephemeris-request
                    'make-describe-ephemeris-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-ephemeris-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-ephemeris-response-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ephemeris-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (invalid-reason common-lisp:nil :type
    (common-lisp:or ephemeris-invalid-reason common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or safe-name common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or ephemeris-priority common-lisp:null))
   (satellite-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ephemeris-status common-lisp:null))
   (supplied-data common-lisp:nil :type
    (common-lisp:or ephemeris-type-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-ephemeris-response
                    'make-describe-ephemeris-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris-id))
      (common-lisp:list
       (common-lisp:cons "ephemerisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-reason))
      (common-lisp:list
       (common-lisp:cons "invalidReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-id))
      (common-lisp:list
       (common-lisp:cons "satelliteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supplied-data))
      (common-lisp:list
       (common-lisp:cons "suppliedData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-"))
   (config-details common-lisp:nil :type
    (common-lisp:or config-details common-lisp:null))
   (config-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (config-type common-lisp:nil :type
    (common-lisp:or config-capability-type common-lisp:null))
   (dataflow-destination-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-details))
      (common-lisp:list
       (common-lisp:cons "configDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-id))
      (common-lisp:list
       (common-lisp:cons "configId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-type))
      (common-lisp:list
       (common-lisp:cons "configType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-destination-region))
      (common-lisp:list
       (common-lisp:cons "dataflowDestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discovery-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-discovery-data-"))
   (capability-arns (common-lisp:error ":capabilityarns is required") :type
    (common-lisp:or capability-arn-list common-lisp:null))
   (private-ip-addresses (common-lisp:error ":privateipaddresses is required")
    :type (common-lisp:or ip-address-list common-lisp:null))
   (public-ip-addresses (common-lisp:error ":publicipaddresses is required")
    :type (common-lisp:or ip-address-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'discovery-data 'make-discovery-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input discovery-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input discovery-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-arns))
      (common-lisp:list
       (common-lisp:cons "capabilityArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "privateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "publicIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input discovery-data))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype duration-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (eirp (:copier common-lisp:nil) (:conc-name "struct-shape-eirp-"))
   (units (common-lisp:error ":units is required") :type
    (common-lisp:or eirp-units common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'eirp 'make-eirp))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eirp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eirp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'units))
      (common-lisp:list
       (common-lisp:cons "units"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eirp))
   common-lisp:nil))
(common-lisp:deftype eirp-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (elevation (:copier common-lisp:nil)
      (:conc-name "struct-shape-elevation-"))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or angle-units common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'elevation 'make-elevation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elevation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elevation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elevation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-details-"))
   (aws-ground-station-agent-endpoint common-lisp:nil :type
    (common-lisp:or aws-ground-station-agent-endpoint common-lisp:null))
   (endpoint common-lisp:nil :type
    (common-lisp:or dataflow-endpoint common-lisp:null))
   (health-reasons common-lisp:nil :type
    (common-lisp:or capability-health-reason-list common-lisp:null))
   (health-status common-lisp:nil :type
    (common-lisp:or capability-health common-lisp:null))
   (security-details common-lisp:nil :type
    (common-lisp:or security-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-details 'make-endpoint-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ground-station-agent-endpoint))
      (common-lisp:list
       (common-lisp:cons "awsGroundStationAgentEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-reasons))
      (common-lisp:list
       (common-lisp:cons "healthReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-details))
      (common-lisp:list
       (common-lisp:cons "securityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-details-list ()
   '(trivial-types:proper-list endpoint-details))
 (common-lisp:defun |make-endpoint-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype endpoint-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ephemerides-list ()
   '(trivial-types:proper-list ephemeris-item))
 (common-lisp:defun |make-ephemerides-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ephemeris-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ephemeris-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-ephemeris-data-"))
   (oem common-lisp:nil :type (common-lisp:or oemephemeris common-lisp:null))
   (tle common-lisp:nil :type (common-lisp:or tleephemeris common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ephemeris-data 'make-ephemeris-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ephemeris-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ephemeris-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oem))
      (common-lisp:list
       (common-lisp:cons "oem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tle))
      (common-lisp:list
       (common-lisp:cons "tle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ephemeris-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ephemeris-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-ephemeris-description-"))
   (ephemeris-data common-lisp:nil :type
    (common-lisp:or unbounded-string common-lisp:null))
   (source-s3object common-lisp:nil :type
    (common-lisp:or s3object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ephemeris-description 'make-ephemeris-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris-data))
      (common-lisp:list
       (common-lisp:cons "ephemerisData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3object))
      (common-lisp:list
       (common-lisp:cons "sourceS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ephemeris-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-ephemeris-id-response-"))
   (ephemeris-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ephemeris-id-response 'make-ephemeris-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris-id))
      (common-lisp:list
       (common-lisp:cons "ephemerisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-id-response))
   common-lisp:nil))
(common-lisp:deftype ephemeris-invalid-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ephemeris-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-ephemeris-item-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (ephemeris-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or safe-name common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or ephemeris-priority common-lisp:null))
   (source-s3object common-lisp:nil :type
    (common-lisp:or s3object common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ephemeris-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ephemeris-item 'make-ephemeris-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ephemeris-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ephemeris-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris-id))
      (common-lisp:list
       (common-lisp:cons "ephemerisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3object))
      (common-lisp:list
       (common-lisp:cons "sourceS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ephemeris-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ephemeris-meta-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-ephemeris-meta-data-"))
   (ephemeris-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (epoch common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or safe-name common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or ephemeris-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ephemeris-meta-data 'make-ephemeris-meta-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ephemeris-meta-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ephemeris-meta-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris-id))
      (common-lisp:list
       (common-lisp:cons "ephemerisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epoch))
      (common-lisp:list
       (common-lisp:cons "epoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ephemeris-meta-data))
   common-lisp:nil))
(common-lisp:deftype ephemeris-priority () 'common-lisp:integer)
(common-lisp:deftype ephemeris-source () 'common-lisp:string)
(common-lisp:deftype ephemeris-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ephemeris-status-list ()
   '(trivial-types:proper-list ephemeris-status))
 (common-lisp:defun |make-ephemeris-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ephemeris-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ephemeris-type-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-ephemeris-type-description-"))
   (oem common-lisp:nil :type
    (common-lisp:or ephemeris-description common-lisp:null))
   (tle common-lisp:nil :type
    (common-lisp:or ephemeris-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ephemeris-type-description
                    'make-ephemeris-type-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-type-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-type-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oem))
      (common-lisp:list
       (common-lisp:cons "oem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tle))
      (common-lisp:list
       (common-lisp:cons "tle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-type-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (frequency (:copier common-lisp:nil)
      (:conc-name "struct-shape-frequency-"))
   (units (common-lisp:error ":units is required") :type
    (common-lisp:or frequency-units common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'frequency 'make-frequency))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input frequency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input frequency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'units))
      (common-lisp:list
       (common-lisp:cons "units"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input frequency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (frequency-bandwidth (:copier common-lisp:nil)
      (:conc-name "struct-shape-frequency-bandwidth-"))
   (units (common-lisp:error ":units is required") :type
    (common-lisp:or bandwidth-units common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'frequency-bandwidth 'make-frequency-bandwidth))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input frequency-bandwidth))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input frequency-bandwidth))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'units))
      (common-lisp:list
       (common-lisp:cons "units"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input frequency-bandwidth))
   common-lisp:nil))
(common-lisp:deftype frequency-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-configuration-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-configuration-request
                    'make-get-agent-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-agent-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-agent-configuration-response-"))
   (agent-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (tasking-document common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-agent-configuration-response
                    'make-get-agent-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasking-document))
      (common-lisp:list
       (common-lisp:cons "taskingDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-config-request-"))
   (config-id (common-lisp:error ":configid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (config-type (common-lisp:error ":configtype is required") :type
    (common-lisp:or config-capability-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-config-request 'make-get-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-config-response-"))
   (config-arn (common-lisp:error ":configarn is required") :type
    (common-lisp:or config-arn common-lisp:null))
   (config-data (common-lisp:error ":configdata is required") :type
    (common-lisp:or config-type-data common-lisp:null))
   (config-id (common-lisp:error ":configid is required") :type
    (common-lisp:or string common-lisp:null))
   (config-type common-lisp:nil :type
    (common-lisp:or config-capability-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-config-response 'make-get-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-arn))
      (common-lisp:list
       (common-lisp:cons "configArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-data))
      (common-lisp:list
       (common-lisp:cons "configData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-id))
      (common-lisp:list
       (common-lisp:cons "configId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-type))
      (common-lisp:list
       (common-lisp:cons "configType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dataflow-endpoint-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dataflow-endpoint-group-request-"))
   (dataflow-endpoint-group-id
    (common-lisp:error ":dataflowendpointgroupid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dataflow-endpoint-group-request
                    'make-get-dataflow-endpoint-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-dataflow-endpoint-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-dataflow-endpoint-group-response-"))
   (contact-post-pass-duration-seconds common-lisp:nil :type
    (common-lisp:or dataflow-endpoint-group-duration-in-seconds
                    common-lisp:null))
   (contact-pre-pass-duration-seconds common-lisp:nil :type
    (common-lisp:or dataflow-endpoint-group-duration-in-seconds
                    common-lisp:null))
   (dataflow-endpoint-group-arn common-lisp:nil :type
    (common-lisp:or dataflow-endpoint-group-arn common-lisp:null))
   (dataflow-endpoint-group-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null))
   (endpoints-details common-lisp:nil :type
    (common-lisp:or endpoint-details-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dataflow-endpoint-group-response
                    'make-get-dataflow-endpoint-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-post-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPostPassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-pre-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPrePassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-id))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints-details))
      (common-lisp:list
       (common-lisp:cons "endpointsDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-minute-usage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-minute-usage-request-"))
   (month (common-lisp:error ":month is required") :type
    (common-lisp:or month common-lisp:null))
   (year (common-lisp:error ":year is required") :type
    (common-lisp:or year common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-minute-usage-request 'make-get-minute-usage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'month))
      (common-lisp:list
       (common-lisp:cons "month"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'year))
      (common-lisp:list
       (common-lisp:cons "year"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-minute-usage-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-minute-usage-response-"))
   (estimated-minutes-remaining common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (is-reserved-minutes-customer common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (total-reserved-minute-allocation common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (total-scheduled-minutes common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (upcoming-minutes-scheduled common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-minute-usage-response
                    'make-get-minute-usage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-minutes-remaining))
      (common-lisp:list
       (common-lisp:cons "estimatedMinutesRemaining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-reserved-minutes-customer))
      (common-lisp:list
       (common-lisp:cons "isReservedMinutesCustomer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-reserved-minute-allocation))
      (common-lisp:list
       (common-lisp:cons "totalReservedMinuteAllocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-scheduled-minutes))
      (common-lisp:list
       (common-lisp:cons "totalScheduledMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upcoming-minutes-scheduled))
      (common-lisp:list
       (common-lisp:cons "upcomingMinutesScheduled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mission-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mission-profile-request-"))
   (mission-profile-id (common-lisp:error ":missionprofileid is required")
    :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mission-profile-request
                    'make-get-mission-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-mission-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-mission-profile-response-"))
   (contact-post-pass-duration-seconds common-lisp:nil :type
    (common-lisp:or duration-in-seconds common-lisp:null))
   (contact-pre-pass-duration-seconds common-lisp:nil :type
    (common-lisp:or duration-in-seconds common-lisp:null))
   (dataflow-edges common-lisp:nil :type
    (common-lisp:or dataflow-edge-list common-lisp:null))
   (minimum-viable-contact-duration-seconds common-lisp:nil :type
    (common-lisp:or positive-duration-in-seconds common-lisp:null))
   (mission-profile-arn common-lisp:nil :type
    (common-lisp:or mission-profile-arn common-lisp:null))
   (mission-profile-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or safe-name common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or awsregion common-lisp:null))
   (streams-kms-key common-lisp:nil :type
    (common-lisp:or kms-key common-lisp:null))
   (streams-kms-role common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (tracking-config-arn common-lisp:nil :type
    (common-lisp:or config-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mission-profile-response
                    'make-get-mission-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-post-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPostPassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-pre-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPrePassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataflow-edges))
      (common-lisp:list
       (common-lisp:cons "dataflowEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-viable-contact-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "minimumViableContactDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-id))
      (common-lisp:list
       (common-lisp:cons "missionProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-key))
      (common-lisp:list
       (common-lisp:cons "streamsKmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-role))
      (common-lisp:list
       (common-lisp:cons "streamsKmsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-config-arn))
      (common-lisp:list
       (common-lisp:cons "trackingConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-satellite-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-satellite-request-"))
   (satellite-id (common-lisp:error ":satelliteid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-satellite-request 'make-get-satellite-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-satellite-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-satellite-response-"))
   (current-ephemeris common-lisp:nil :type
    (common-lisp:or ephemeris-meta-data common-lisp:null))
   (ground-stations common-lisp:nil :type
    (common-lisp:or ground-station-id-list common-lisp:null))
   (norad-satellite-id common-lisp:nil :type
    (common-lisp:or |noradSatelliteID| common-lisp:null))
   (satellite-arn common-lisp:nil :type
    (common-lisp:or |satelliteArn| common-lisp:null))
   (satellite-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-satellite-response 'make-get-satellite-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-ephemeris))
      (common-lisp:list
       (common-lisp:cons "currentEphemeris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-stations))
      (common-lisp:list
       (common-lisp:cons "groundStations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'norad-satellite-id))
      (common-lisp:list
       (common-lisp:cons "noradSatelliteID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-id))
      (common-lisp:list
       (common-lisp:cons "satelliteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ground-station-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-ground-station-data-"))
   (ground-station-id common-lisp:nil :type
    (common-lisp:or ground-station-name common-lisp:null))
   (ground-station-name common-lisp:nil :type
    (common-lisp:or ground-station-name common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or awsregion common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ground-station-data 'make-ground-station-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ground-station-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ground-station-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station-id))
      (common-lisp:list
       (common-lisp:cons "groundStationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station-name))
      (common-lisp:list
       (common-lisp:cons "groundStationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ground-station-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ground-station-id-list ()
   '(trivial-types:proper-list ground-station-name))
 (common-lisp:defun |make-ground-station-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ground-station-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ground-station-list ()
   '(trivial-types:proper-list ground-station-data))
 (common-lisp:defun |make-ground-station-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ground-station-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ground-station-name () 'common-lisp:string)
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (integer-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-integer-range-"))
   (maximum (common-lisp:error ":maximum is required") :type
    (common-lisp:or integer common-lisp:null))
   (minimum (common-lisp:error ":minimum is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'integer-range 'make-integer-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input integer-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input integer-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input integer-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (groundstation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)
      (parameter-name :initarg :parameter-name :initform common-lisp:nil
       :reader invalid-parameter-exception-parameter-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message
                    'invalid-parameter-exception-parameter-name)))
(common-lisp:progn
 (common-lisp:deftype ip-address-list ()
   '(trivial-types:proper-list ip-v4address))
 (common-lisp:defun |make-ip-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-v4address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ip-v4address () 'common-lisp:string)
(common-lisp:deftype json-string () 'common-lisp:string)
(common-lisp:deftype key-alias-arn () 'common-lisp:string)
(common-lisp:deftype key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kms-key (:copier common-lisp:nil) (:conc-name "struct-shape-kms-key-"))
   (kms-alias-arn common-lisp:nil :type
    (common-lisp:or key-alias-arn common-lisp:null))
   (kms-key-arn common-lisp:nil :type
    (common-lisp:or key-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kms-key 'make-kms-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kms-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kms-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-alias-arn))
      (common-lisp:list
       (common-lisp:cons "kmsAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kms-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-configs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-configs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-configs-request 'make-list-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-configs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-configs-response-"))
   (config-list common-lisp:nil :type
    (common-lisp:or config-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-configs-response 'make-list-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-list))
      (common-lisp:list
       (common-lisp:cons "configList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contacts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contacts-request-"))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (ground-station common-lisp:nil :type
    (common-lisp:or ground-station-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null))
   (mission-profile-arn common-lisp:nil :type
    (common-lisp:or mission-profile-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (satellite-arn common-lisp:nil :type
    (common-lisp:or |satelliteArn| common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status-list (common-lisp:error ":statuslist is required") :type
    (common-lisp:or status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contacts-request 'make-list-contacts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station))
      (common-lisp:list
       (common-lisp:cons "groundStation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-list))
      (common-lisp:list
       (common-lisp:cons "statusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contacts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contacts-response-"))
   (contact-list common-lisp:nil :type
    (common-lisp:or contact-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contacts-response 'make-list-contacts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-list))
      (common-lisp:list
       (common-lisp:cons "contactList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dataflow-endpoint-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dataflow-endpoint-groups-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dataflow-endpoint-groups-request
                    'make-list-dataflow-endpoint-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dataflow-endpoint-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dataflow-endpoint-groups-response-"))
   (dataflow-endpoint-group-list common-lisp:nil :type
    (common-lisp:or dataflow-endpoint-group-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dataflow-endpoint-groups-response
                    'make-list-dataflow-endpoint-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-list))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ephemerides-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ephemerides-request-"))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (satellite-id (common-lisp:error ":satelliteid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status-list common-lisp:nil :type
    (common-lisp:or ephemeris-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ephemerides-request 'make-list-ephemerides-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-id))
      (common-lisp:list
       (common-lisp:cons "satelliteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-list))
      (common-lisp:list
       (common-lisp:cons "statusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ephemerides-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ephemerides-response-"))
   (ephemerides common-lisp:nil :type
    (common-lisp:or ephemerides-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ephemerides-response
                    'make-list-ephemerides-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemerides))
      (common-lisp:list
       (common-lisp:cons "ephemerides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ground-stations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ground-stations-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (satellite-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ground-stations-request
                    'make-list-ground-stations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ground-stations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ground-stations-response-"))
   (ground-station-list common-lisp:nil :type
    (common-lisp:or ground-station-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ground-stations-response
                    'make-list-ground-stations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station-list))
      (common-lisp:list
       (common-lisp:cons "groundStationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mission-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mission-profiles-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mission-profiles-request
                    'make-list-mission-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mission-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mission-profiles-response-"))
   (mission-profile-list common-lisp:nil :type
    (common-lisp:or mission-profile-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mission-profiles-response
                    'make-list-mission-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mission-profile-list))
      (common-lisp:list
       (common-lisp:cons "missionProfileList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-satellites-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-satellites-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or pagination-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-satellites-request 'make-list-satellites-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-satellites-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-satellites-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (satellites common-lisp:nil :type
    (common-lisp:or satellite-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-satellites-response 'make-list-satellites-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellites))
      (common-lisp:list
       (common-lisp:cons "satellites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or any-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype mission-profile-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mission-profile-id-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-mission-profile-id-response-"))
   (mission-profile-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mission-profile-id-response
                    'make-mission-profile-id-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-id))
      (common-lisp:list
       (common-lisp:cons "missionProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mission-profile-list ()
   '(trivial-types:proper-list mission-profile-list-item))
 (common-lisp:defun |make-mission-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mission-profile-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (mission-profile-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-mission-profile-list-item-"))
   (mission-profile-arn common-lisp:nil :type
    (common-lisp:or mission-profile-arn common-lisp:null))
   (mission-profile-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or safe-name common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or awsregion common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mission-profile-list-item
                    'make-mission-profile-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-id))
      (common-lisp:list
       (common-lisp:cons "missionProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-list-item))
   common-lisp:nil))
(common-lisp:deftype month () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (oemephemeris (:copier common-lisp:nil)
      (:conc-name "struct-shape-oemephemeris-"))
   (oem-data common-lisp:nil :type
    (common-lisp:or unbounded-string common-lisp:null))
   (s3object common-lisp:nil :type (common-lisp:or s3object common-lisp:null)))
 (common-lisp:export (common-lisp:list 'oemephemeris 'make-oemephemeris))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oemephemeris))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oemephemeris))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oem-data))
      (common-lisp:list
       (common-lisp:cons "oemData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "s3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oemephemeris))
   common-lisp:nil))
(common-lisp:deftype pagination-max-results () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype polarization () 'common-lisp:string)
(common-lisp:deftype positive-duration-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (ranged-connection-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-ranged-connection-details-"))
   (mtu common-lisp:nil :type
    (common-lisp:or ranged-connection-details-mtu-integer common-lisp:null))
   (socket-address (common-lisp:error ":socketaddress is required") :type
    (common-lisp:or ranged-socket-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ranged-connection-details
                    'make-ranged-connection-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ranged-connection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ranged-connection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'socket-address))
      (common-lisp:list
       (common-lisp:cons "socketAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ranged-connection-details))
   common-lisp:nil))
(common-lisp:deftype ranged-connection-details-mtu-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (ranged-socket-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-ranged-socket-address-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ip-v4address common-lisp:null))
   (port-range (common-lisp:error ":portrange is required") :type
    (common-lisp:or integer-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ranged-socket-address 'make-ranged-socket-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ranged-socket-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ranged-socket-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-range))
      (common-lisp:list
       (common-lisp:cons "portRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ranged-socket-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-agent-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-agent-request-"))
   (agent-details (common-lisp:error ":agentdetails is required") :type
    (common-lisp:or agent-details common-lisp:null))
   (discovery-data (common-lisp:error ":discoverydata is required") :type
    (common-lisp:or discovery-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-agent-request 'make-register-agent-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-details))
      (common-lisp:list
       (common-lisp:cons "agentDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-data))
      (common-lisp:list
       (common-lisp:cons "discoveryData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-agent-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-agent-response-"))
   (agent-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-agent-response 'make-register-agent-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reserve-contact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserve-contact-request-"))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (ground-station (common-lisp:error ":groundstation is required") :type
    (common-lisp:or ground-station-name common-lisp:null))
   (mission-profile-arn (common-lisp:error ":missionprofilearn is required")
    :type (common-lisp:or mission-profile-arn common-lisp:null))
   (satellite-arn (common-lisp:error ":satellitearn is required") :type
    (common-lisp:or |satelliteArn| common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserve-contact-request 'make-reserve-contact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserve-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserve-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station))
      (common-lisp:list
       (common-lisp:cons "groundStation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserve-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (groundstation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)
      (parameter-name :initarg :parameter-name :initform common-lisp:nil
       :reader resource-limit-exceeded-exception-parameter-name)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-message
                    'resource-limit-exceeded-exception-parameter-name)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (groundstation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3object (:copier common-lisp:nil) (:conc-name "struct-shape-s3object-"))
   (bucket common-lisp:nil :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or s3object-key common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or s3version-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object))
   common-lisp:nil))
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3recording-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3recording-config-"))
   (bucket-arn (common-lisp:error ":bucketarn is required") :type
    (common-lisp:or bucket-arn common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or s3key-prefix common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3recording-config 'make-s3recording-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3recording-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3recording-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3recording-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3recording-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3recording-details-"))
   (bucket-arn common-lisp:nil :type
    (common-lisp:or bucket-arn common-lisp:null))
   (key-template common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3recording-details 'make-s3recording-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3recording-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3recording-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-template))
      (common-lisp:list
       (common-lisp:cons "keyTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3recording-details))
   common-lisp:nil))
(common-lisp:deftype s3version-id () 'common-lisp:string)
(common-lisp:deftype safe-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype satellite-list ()
   '(trivial-types:proper-list satellite-list-item))
 (common-lisp:defun |make-satellite-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list satellite-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (satellite-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-satellite-list-item-"))
   (current-ephemeris common-lisp:nil :type
    (common-lisp:or ephemeris-meta-data common-lisp:null))
   (ground-stations common-lisp:nil :type
    (common-lisp:or ground-station-id-list common-lisp:null))
   (norad-satellite-id common-lisp:nil :type
    (common-lisp:or |noradSatelliteID| common-lisp:null))
   (satellite-arn common-lisp:nil :type
    (common-lisp:or |satelliteArn| common-lisp:null))
   (satellite-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'satellite-list-item 'make-satellite-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input satellite-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input satellite-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-ephemeris))
      (common-lisp:list
       (common-lisp:cons "currentEphemeris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-stations))
      (common-lisp:list
       (common-lisp:cons "groundStations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'norad-satellite-id))
      (common-lisp:list
       (common-lisp:cons "noradSatelliteID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-id))
      (common-lisp:list
       (common-lisp:cons "satelliteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input satellite-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (security-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-details-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (security-group-ids (common-lisp:error ":securitygroupids is required")
    :type (common-lisp:or security-group-id-list common-lisp:null))
   (subnet-ids (common-lisp:error ":subnetids is required") :type
    (common-lisp:or subnet-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'security-details 'make-security-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype signature-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-signature-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (socket-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-socket-address-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (port (common-lisp:error ":port is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'socket-address 'make-socket-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input socket-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input socket-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input socket-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source (:copier common-lisp:nil) (:conc-name "struct-shape-source-"))
   (config-details common-lisp:nil :type
    (common-lisp:or config-details common-lisp:null))
   (config-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (config-type common-lisp:nil :type
    (common-lisp:or config-capability-type common-lisp:null))
   (dataflow-source-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source 'make-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-details))
      (common-lisp:list
       (common-lisp:cons "configDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-id))
      (common-lisp:list
       (common-lisp:cons "configId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-type))
      (common-lisp:list
       (common-lisp:cons "configType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-source-region))
      (common-lisp:list
       (common-lisp:cons "dataflowSourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (spectrum-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-spectrum-config-"))
   (bandwidth (common-lisp:error ":bandwidth is required") :type
    (common-lisp:or frequency-bandwidth common-lisp:null))
   (center-frequency (common-lisp:error ":centerfrequency is required") :type
    (common-lisp:or frequency common-lisp:null))
   (polarization common-lisp:nil :type
    (common-lisp:or polarization common-lisp:null)))
 (common-lisp:export (common-lisp:list 'spectrum-config 'make-spectrum-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spectrum-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spectrum-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'center-frequency))
      (common-lisp:list
       (common-lisp:cons "centerFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polarization))
      (common-lisp:list
       (common-lisp:cons "polarization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spectrum-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype status-list ()
   '(trivial-types:proper-list contact-status))
 (common-lisp:defun |make-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tledata (:copier common-lisp:nil) (:conc-name "struct-shape-tledata-"))
   (tle-line1 (common-lisp:error ":tleline1 is required") :type
    (common-lisp:or tle-line-one common-lisp:null))
   (tle-line2 (common-lisp:error ":tleline2 is required") :type
    (common-lisp:or tle-line-two common-lisp:null))
   (valid-time-range (common-lisp:error ":validtimerange is required") :type
    (common-lisp:or time-range common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tledata 'make-tledata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tledata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tledata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tle-line1))
      (common-lisp:list
       (common-lisp:cons "tleLine1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tle-line2))
      (common-lisp:list
       (common-lisp:cons "tleLine2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-time-range))
      (common-lisp:list
       (common-lisp:cons "validTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tledata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tledata-list () '(trivial-types:proper-list tledata))
 (common-lisp:defun |make-tledata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tledata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tleephemeris (:copier common-lisp:nil)
      (:conc-name "struct-shape-tleephemeris-"))
   (s3object common-lisp:nil :type (common-lisp:or s3object common-lisp:null))
   (tle-data common-lisp:nil :type
    (common-lisp:or tledata-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tleephemeris 'make-tleephemeris))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tleephemeris))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tleephemeris))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "s3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tle-data))
      (common-lisp:list
       (common-lisp:cons "tleData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tleephemeris))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-keys ()
   '(trivial-types:proper-list unbounded-string))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unbounded-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or any-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-range-"))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time-range 'make-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype tle-line-one () 'common-lisp:string)
(common-lisp:deftype tle-line-two () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tracking-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-tracking-config-"))
   (autotrack (common-lisp:error ":autotrack is required") :type
    (common-lisp:or criticality common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tracking-config 'make-tracking-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tracking-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tracking-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'autotrack))
      (common-lisp:list
       (common-lisp:cons "autotrack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tracking-config))
   common-lisp:nil))
(common-lisp:deftype unbounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or any-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-status-request-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (aggregate-status (common-lisp:error ":aggregatestatus is required") :type
    (common-lisp:or aggregate-status common-lisp:null))
   (component-statuses (common-lisp:error ":componentstatuses is required")
    :type (common-lisp:or component-status-list common-lisp:null))
   (task-id (common-lisp:error ":taskid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-status-request
                    'make-update-agent-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-status))
      (common-lisp:list
       (common-lisp:cons "aggregateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-statuses))
      (common-lisp:list
       (common-lisp:cons "componentStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agent-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agent-status-response-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agent-status-response
                    'make-update-agent-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-config-request-"))
   (config-data (common-lisp:error ":configdata is required") :type
    (common-lisp:or config-type-data common-lisp:null))
   (config-id (common-lisp:error ":configid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (config-type (common-lisp:error ":configtype is required") :type
    (common-lisp:or config-capability-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or safe-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-config-request 'make-update-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-data))
      (common-lisp:list
       (common-lisp:cons "configData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ephemeris-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ephemeris-request-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or boolean common-lisp:null))
   (ephemeris-id (common-lisp:error ":ephemerisid is required") :type
    (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or safe-name common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or ephemeris-priority common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ephemeris-request 'make-update-ephemeris-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ephemeris-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ephemeris-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-mission-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-mission-profile-request-"))
   (contact-post-pass-duration-seconds common-lisp:nil :type
    (common-lisp:or duration-in-seconds common-lisp:null))
   (contact-pre-pass-duration-seconds common-lisp:nil :type
    (common-lisp:or duration-in-seconds common-lisp:null))
   (dataflow-edges common-lisp:nil :type
    (common-lisp:or dataflow-edge-list common-lisp:null))
   (minimum-viable-contact-duration-seconds common-lisp:nil :type
    (common-lisp:or positive-duration-in-seconds common-lisp:null))
   (mission-profile-id (common-lisp:error ":missionprofileid is required")
    :type (common-lisp:or uuid common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or safe-name common-lisp:null))
   (streams-kms-key common-lisp:nil :type
    (common-lisp:or kms-key common-lisp:null))
   (streams-kms-role common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (tracking-config-arn common-lisp:nil :type
    (common-lisp:or config-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-mission-profile-request
                    'make-update-mission-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mission-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-post-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPostPassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-pre-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPrePassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataflow-edges))
      (common-lisp:list
       (common-lisp:cons "dataflowEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-viable-contact-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "minimumViableContactDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-key))
      (common-lisp:list
       (common-lisp:cons "streamsKmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-role))
      (common-lisp:list
       (common-lisp:cons "streamsKmsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-config-arn))
      (common-lisp:list
       (common-lisp:cons "trackingConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mission-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (uplink-echo-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-uplink-echo-config-"))
   (antenna-uplink-config-arn
    (common-lisp:error ":antennauplinkconfigarn is required") :type
    (common-lisp:or config-arn common-lisp:null))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'uplink-echo-config 'make-uplink-echo-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input uplink-echo-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input uplink-echo-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antenna-uplink-config-arn))
      (common-lisp:list
       (common-lisp:cons "antennaUplinkConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input uplink-echo-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (uplink-spectrum-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-uplink-spectrum-config-"))
   (center-frequency (common-lisp:error ":centerfrequency is required") :type
    (common-lisp:or frequency common-lisp:null))
   (polarization common-lisp:nil :type
    (common-lisp:or polarization common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'uplink-spectrum-config 'make-uplink-spectrum-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          uplink-spectrum-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          uplink-spectrum-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'center-frequency))
      (common-lisp:list
       (common-lisp:cons "centerFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polarization))
      (common-lisp:list
       (common-lisp:cons "polarization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          uplink-spectrum-config))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:deftype version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype version-string-list ()
   '(trivial-types:proper-list version-string))
 (common-lisp:defun |make-version-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype year () 'common-lisp:integer)
(common-lisp:deftype |noradSatelliteID| () 'common-lisp:integer)
(common-lisp:deftype |satelliteArn| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id)
   (common-lisp:declare (common-lisp:ignorable contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-id))))
                                                        "CancelContact"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-contact))
(common-lisp:progn
 (common-lisp:defun create-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-data name tags)
   (common-lisp:declare (common-lisp:ignorable config-data name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/config"
                                                        "CreateConfig"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-config))
(common-lisp:progn
 (common-lisp:defun create-dataflow-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-post-pass-duration-seconds
                     contact-pre-pass-duration-seconds endpoint-details tags)
   (common-lisp:declare
    (common-lisp:ignorable contact-post-pass-duration-seconds
     contact-pre-pass-duration-seconds endpoint-details tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dataflow-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/dataflowEndpointGroup"
                                                        "CreateDataflowEndpointGroup"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dataflow-endpoint-group))
(common-lisp:progn
 (common-lisp:defun create-ephemeris
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled ephemeris expiration-time
                     kms-key-arn name priority satellite-id tags)
   (common-lisp:declare
    (common-lisp:ignorable enabled ephemeris expiration-time kms-key-arn name
     priority satellite-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ephemeris-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ephemeris"
                                                        "CreateEphemeris"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-ephemeris))
(common-lisp:progn
 (common-lisp:defun create-mission-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-post-pass-duration-seconds
                     contact-pre-pass-duration-seconds dataflow-edges
                     minimum-viable-contact-duration-seconds name
                     streams-kms-key streams-kms-role tags tracking-config-arn)
   (common-lisp:declare
    (common-lisp:ignorable contact-post-pass-duration-seconds
     contact-pre-pass-duration-seconds dataflow-edges
     minimum-viable-contact-duration-seconds name streams-kms-key
     streams-kms-role tags tracking-config-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mission-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/missionprofile"
                                                        "CreateMissionProfile"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-mission-profile))
(common-lisp:progn
 (common-lisp:defun delete-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id config-type)
   (common-lisp:declare (common-lisp:ignorable config-id config-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/config/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-id))))
                                                        "DeleteConfig"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-config))
(common-lisp:progn
 (common-lisp:defun delete-dataflow-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataflow-endpoint-group-id)
   (common-lisp:declare (common-lisp:ignorable dataflow-endpoint-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dataflow-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dataflowEndpointGroup/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataflow-endpoint-group-id))))
                                                        "DeleteDataflowEndpointGroup"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dataflow-endpoint-group))
(common-lisp:progn
 (common-lisp:defun delete-ephemeris
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ephemeris-id)
   (common-lisp:declare (common-lisp:ignorable ephemeris-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ephemeris-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ephemeris/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ephemeris-id))))
                                                        "DeleteEphemeris"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-ephemeris))
(common-lisp:progn
 (common-lisp:defun delete-mission-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mission-profile-id)
   (common-lisp:declare (common-lisp:ignorable mission-profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mission-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/missionprofile/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mission-profile-id))))
                                                        "DeleteMissionProfile"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mission-profile))
(common-lisp:progn
 (common-lisp:defun describe-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id)
   (common-lisp:declare (common-lisp:ignorable contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-id))))
                                                        "DescribeContact"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-contact))
(common-lisp:progn
 (common-lisp:defun describe-ephemeris
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ephemeris-id)
   (common-lisp:declare (common-lisp:ignorable ephemeris-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ephemeris-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ephemeris/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ephemeris-id))))
                                                        "DescribeEphemeris"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ephemeris))
(common-lisp:progn
 (common-lisp:defun get-agent-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id)
   (common-lisp:declare (common-lisp:ignorable agent-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-agent-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agent/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "GetAgentConfiguration"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-agent-configuration))
(common-lisp:progn
 (common-lisp:defun get-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id config-type)
   (common-lisp:declare (common-lisp:ignorable config-id config-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/config/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-id))))
                                                        "GetConfig"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-config))
(common-lisp:progn
 (common-lisp:defun get-dataflow-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataflow-endpoint-group-id)
   (common-lisp:declare (common-lisp:ignorable dataflow-endpoint-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-dataflow-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dataflowEndpointGroup/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataflow-endpoint-group-id))))
                                                        "GetDataflowEndpointGroup"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dataflow-endpoint-group))
(common-lisp:progn
 (common-lisp:defun get-minute-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key month year)
   (common-lisp:declare (common-lisp:ignorable month year))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-minute-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/minute-usage"
                                                        "GetMinuteUsage"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-minute-usage))
(common-lisp:progn
 (common-lisp:defun get-mission-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mission-profile-id)
   (common-lisp:declare (common-lisp:ignorable mission-profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mission-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/missionprofile/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mission-profile-id))))
                                                        "GetMissionProfile"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mission-profile))
(common-lisp:progn
 (common-lisp:defun get-satellite
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key satellite-id)
   (common-lisp:declare (common-lisp:ignorable satellite-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-satellite-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/satellite/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'satellite-id))))
                                                        "GetSatellite"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-satellite))
(common-lisp:progn
 (common-lisp:defun list-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-configs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/config" "ListConfigs"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configs))
(common-lisp:progn
 (common-lisp:defun list-contacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time ground-station max-results
                     mission-profile-arn next-token satellite-arn start-time
                     status-list)
   (common-lisp:declare
    (common-lisp:ignorable end-time ground-station max-results
     mission-profile-arn next-token satellite-arn start-time status-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contacts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/contacts"
                                                        "ListContacts"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contacts))
(common-lisp:progn
 (common-lisp:defun list-dataflow-endpoint-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-dataflow-endpoint-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/dataflowEndpointGroup"
                                                        "ListDataflowEndpointGroups"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dataflow-endpoint-groups))
(common-lisp:progn
 (common-lisp:defun list-ephemerides
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time max-results next-token
                     satellite-id start-time status-list)
   (common-lisp:declare
    (common-lisp:ignorable end-time max-results next-token satellite-id
     start-time status-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ephemerides-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ephemerides"
                                                        "ListEphemerides"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ephemerides))
(common-lisp:progn
 (common-lisp:defun list-ground-stations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token satellite-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token satellite-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ground-stations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/groundstation"
                                                        "ListGroundStations"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ground-stations))
(common-lisp:progn
 (common-lisp:defun list-mission-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mission-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/missionprofile"
                                                        "ListMissionProfiles"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-mission-profiles))
(common-lisp:progn
 (common-lisp:defun list-satellites
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-satellites-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/satellite"
                                                        "ListSatellites"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-satellites))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun register-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-details discovery-data)
   (common-lisp:declare (common-lisp:ignorable agent-details discovery-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/agent"
                                                        "RegisterAgent"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-agent))
(common-lisp:progn
 (common-lisp:defun reserve-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time ground-station
                     mission-profile-arn satellite-arn start-time tags)
   (common-lisp:declare
    (common-lisp:ignorable end-time ground-station mission-profile-arn
     satellite-arn start-time tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reserve-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/contact"
                                                        "ReserveContact"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reserve-contact))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-agent-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id aggregate-status
                     component-statuses task-id)
   (common-lisp:declare
    (common-lisp:ignorable agent-id aggregate-status component-statuses
     task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-agent-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agent/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "UpdateAgentStatus"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-agent-status))
(common-lisp:progn
 (common-lisp:defun update-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-data config-id config-type name)
   (common-lisp:declare
    (common-lisp:ignorable config-data config-id config-type name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/config/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-id))))
                                                        "UpdateConfig"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-config))
(common-lisp:progn
 (common-lisp:defun update-ephemeris
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled ephemeris-id name priority)
   (common-lisp:declare
    (common-lisp:ignorable enabled ephemeris-id name priority))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ephemeris-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ephemeris/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ephemeris-id))))
                                                        "UpdateEphemeris"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ephemeris))
(common-lisp:progn
 (common-lisp:defun update-mission-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-post-pass-duration-seconds
                     contact-pre-pass-duration-seconds dataflow-edges
                     minimum-viable-contact-duration-seconds mission-profile-id
                     name streams-kms-key streams-kms-role tracking-config-arn)
   (common-lisp:declare
    (common-lisp:ignorable contact-post-pass-duration-seconds
     contact-pre-pass-duration-seconds dataflow-edges
     minimum-viable-contact-duration-seconds mission-profile-id name
     streams-kms-key streams-kms-role tracking-config-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mission-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/missionprofile/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mission-profile-id))))
                                                        "UpdateMissionProfile"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-mission-profile))
