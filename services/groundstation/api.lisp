;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/groundstation/api
  (:use)
  (:nicknames #:aws/groundstation)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/groundstation/api)
(common-lisp:progn
 (common-lisp:defclass groundstation-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "groundstation" :protocol
                        :rest-json))
 (common-lisp:export 'groundstation-request))
(common-lisp:progn
 (common-lisp:define-condition groundstation-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'groundstation-error))
(common-lisp:defvar *error-map*
  '(("DependencyException" . dependency-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:deftype awsregion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-cpu-cores-list ()
   '(trivial-types:proper-list integer))
 (common-lisp:defun |make-agent-cpu-cores-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass agent-details common-lisp:nil
                       ((reserved-cpu-cores :initarg :|reservedCpuCores| :type
                         (common-lisp:or agent-cpu-cores-list common-lisp:null)
                         :accessor %agent-details-reserved-cpu-cores :initform
                         common-lisp:nil)
                        (instance-type :initarg :|instanceType| :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor %agent-details-instance-type :initform
                         (common-lisp:error ":instancetype is required"))
                        (instance-id :initarg :|instanceId| :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %agent-details-instance-id :initform
                         (common-lisp:error ":instanceid is required"))
                        (component-versions :initarg :|componentVersions| :type
                         (common-lisp:or component-version-list
                                         common-lisp:null)
                         :accessor %agent-details-component-versions :initform
                         (common-lisp:error ":componentversions is required"))
                        (agent-version :initarg :|agentVersion| :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor %agent-details-agent-version :initform
                         (common-lisp:error ":agentversion is required"))
                        (agent-cpu-cores :initarg :|agentCpuCores| :type
                         (common-lisp:or agent-cpu-cores-list common-lisp:null)
                         :accessor %agent-details-agent-cpu-cores :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'agent-details 'make-agent-details))
 (common-lisp:defun make-agent-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reserved-cpu-cores instance-type
                     instance-id component-versions agent-version
                     agent-cpu-cores)
   (common-lisp:apply #'common-lisp:make-instance 'agent-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-cpu-cores))
      (common-lisp:list
       (common-lisp:cons "agentCpuCores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-versions))
      (common-lisp:list
       (common-lisp:cons "componentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "instanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-cpu-cores))
      (common-lisp:list
       (common-lisp:cons "reservedCpuCores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-details))
   common-lisp:nil))
(common-lisp:deftype agent-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregate-status common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or agent-status common-lisp:null)
                         :accessor %aggregate-status-status :initform
                         (common-lisp:error ":status is required"))
                        (signature-map :initarg :|signatureMap| :type
                         (common-lisp:or signature-map common-lisp:null)
                         :accessor %aggregate-status-signature-map :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aggregate-status 'make-aggregate-status))
 (common-lisp:defun make-aggregate-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status signature-map)
   (common-lisp:apply #'common-lisp:make-instance 'aggregate-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregate-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregate-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-map))
      (common-lisp:list
       (common-lisp:cons "signatureMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregate-status))
   common-lisp:nil))
(common-lisp:deftype angle-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass antenna-demod-decode-details common-lisp:nil
                       ((output-node :initarg :|outputNode| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %antenna-demod-decode-details-output-node :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'antenna-demod-decode-details
                    'make-antenna-demod-decode-details))
 (common-lisp:defun make-antenna-demod-decode-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-node)
   (common-lisp:apply #'common-lisp:make-instance 'antenna-demod-decode-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antenna-demod-decode-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antenna-demod-decode-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-node))
      (common-lisp:list
       (common-lisp:cons "outputNode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antenna-demod-decode-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass antenna-downlink-config common-lisp:nil
                       ((spectrum-config :initarg :|spectrumConfig| :type
                         (common-lisp:or spectrum-config common-lisp:null)
                         :accessor %antenna-downlink-config-spectrum-config
                         :initform
                         (common-lisp:error ":spectrumconfig is required"))))
 (common-lisp:export
  (common-lisp:list 'antenna-downlink-config 'make-antenna-downlink-config))
 (common-lisp:defun make-antenna-downlink-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key spectrum-config)
   (common-lisp:apply #'common-lisp:make-instance 'antenna-downlink-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spectrum-config))
      (common-lisp:list
       (common-lisp:cons "spectrumConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass antenna-downlink-demod-decode-config common-lisp:nil
                       ((spectrum-config :initarg :|spectrumConfig| :type
                         (common-lisp:or spectrum-config common-lisp:null)
                         :accessor
                         %antenna-downlink-demod-decode-config-spectrum-config
                         :initform
                         (common-lisp:error ":spectrumconfig is required"))
                        (demodulation-config :initarg :|demodulationConfig|
                         :type
                         (common-lisp:or demodulation-config common-lisp:null)
                         :accessor
                         %antenna-downlink-demod-decode-config-demodulation-config
                         :initform
                         (common-lisp:error ":demodulationconfig is required"))
                        (decode-config :initarg :|decodeConfig| :type
                         (common-lisp:or decode-config common-lisp:null)
                         :accessor
                         %antenna-downlink-demod-decode-config-decode-config
                         :initform
                         (common-lisp:error ":decodeconfig is required"))))
 (common-lisp:export
  (common-lisp:list 'antenna-downlink-demod-decode-config
                    'make-antenna-downlink-demod-decode-config))
 (common-lisp:defun make-antenna-downlink-demod-decode-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key spectrum-config demodulation-config
                     decode-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'antenna-downlink-demod-decode-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-demod-decode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-demod-decode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decode-config))
      (common-lisp:list
       (common-lisp:cons "decodeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'demodulation-config))
      (common-lisp:list
       (common-lisp:cons "demodulationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spectrum-config))
      (common-lisp:list
       (common-lisp:cons "spectrumConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antenna-downlink-demod-decode-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass antenna-uplink-config common-lisp:nil
                       ((transmit-disabled :initarg :|transmitDisabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %antenna-uplink-config-transmit-disabled :initform
                         common-lisp:nil)
                        (target-eirp :initarg :|targetEirp| :type
                         (common-lisp:or eirp common-lisp:null) :accessor
                         %antenna-uplink-config-target-eirp :initform
                         (common-lisp:error ":targeteirp is required"))
                        (spectrum-config :initarg :|spectrumConfig| :type
                         (common-lisp:or uplink-spectrum-config
                                         common-lisp:null)
                         :accessor %antenna-uplink-config-spectrum-config
                         :initform
                         (common-lisp:error ":spectrumconfig is required"))))
 (common-lisp:export
  (common-lisp:list 'antenna-uplink-config 'make-antenna-uplink-config))
 (common-lisp:defun make-antenna-uplink-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transmit-disabled target-eirp
                     spectrum-config)
   (common-lisp:apply #'common-lisp:make-instance 'antenna-uplink-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          antenna-uplink-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          antenna-uplink-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spectrum-config))
      (common-lisp:list
       (common-lisp:cons "spectrumConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-eirp))
      (common-lisp:list
       (common-lisp:cons "targetEirp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transmit-disabled))
      (common-lisp:list
       (common-lisp:cons "transmitDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          antenna-uplink-config))
   common-lisp:nil))
(common-lisp:deftype any-arn () 'common-lisp:string)
(common-lisp:deftype audit-results () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-ground-station-agent-endpoint common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %aws-ground-station-agent-endpoint-name :initform
                         (common-lisp:error ":name is required"))
                        (ingress-address :initarg :|ingressAddress| :type
                         (common-lisp:or ranged-connection-details
                                         common-lisp:null)
                         :accessor
                         %aws-ground-station-agent-endpoint-ingress-address
                         :initform
                         (common-lisp:error ":ingressaddress is required"))
                        (egress-address :initarg :|egressAddress| :type
                         (common-lisp:or connection-details common-lisp:null)
                         :accessor
                         %aws-ground-station-agent-endpoint-egress-address
                         :initform
                         (common-lisp:error ":egressaddress is required"))
                        (audit-results :initarg :|auditResults| :type
                         (common-lisp:or audit-results common-lisp:null)
                         :accessor
                         %aws-ground-station-agent-endpoint-audit-results
                         :initform common-lisp:nil)
                        (agent-status :initarg :|agentStatus| :type
                         (common-lisp:or agent-status common-lisp:null)
                         :accessor
                         %aws-ground-station-agent-endpoint-agent-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aws-ground-station-agent-endpoint
                    'make-aws-ground-station-agent-endpoint))
 (common-lisp:defun make-aws-ground-station-agent-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name ingress-address egress-address
                     audit-results agent-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'aws-ground-station-agent-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-ground-station-agent-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-ground-station-agent-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-status))
      (common-lisp:list
       (common-lisp:cons "agentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-results))
      (common-lisp:list
       (common-lisp:cons "auditResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-address))
      (common-lisp:list
       (common-lisp:cons "egressAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingress-address))
      (common-lisp:list
       (common-lisp:cons "ingressAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-ground-station-agent-endpoint))
   common-lisp:nil))
(common-lisp:deftype bandwidth-units () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bucket-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-contact-request common-lisp:nil
                       ((contact-id :initarg :|contactId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %cancel-contact-request-contact-id :initform
                         (common-lisp:error ":contactid is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-contact-request 'make-cancel-contact-request))
 (common-lisp:defun make-cancel-contact-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-contact-request))
   common-lisp:nil))
(common-lisp:deftype capability-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capability-arn-list ()
   '(trivial-types:proper-list capability-arn))
 (common-lisp:defun |make-capability-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capability-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype capability-health () 'common-lisp:string)
(common-lisp:deftype capability-health-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype capability-health-reason-list ()
   '(trivial-types:proper-list capability-health-reason))
 (common-lisp:defun |make-capability-health-reason-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            capability-health-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass component-status-data common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or agent-status common-lisp:null)
                         :accessor %component-status-data-status :initform
                         (common-lisp:error ":status is required"))
                        (packets-dropped :initarg :|packetsDropped| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %component-status-data-packets-dropped :initform
                         common-lisp:nil)
                        (dataflow-id :initarg :|dataflowId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %component-status-data-dataflow-id :initform
                         (common-lisp:error ":dataflowid is required"))
                        (component-type :initarg :|componentType| :type
                         (common-lisp:or component-type-string
                                         common-lisp:null)
                         :accessor %component-status-data-component-type
                         :initform
                         (common-lisp:error ":componenttype is required"))
                        (capability-arn :initarg :|capabilityArn| :type
                         (common-lisp:or capability-arn common-lisp:null)
                         :accessor %component-status-data-capability-arn
                         :initform
                         (common-lisp:error ":capabilityarn is required"))
                        (bytes-sent :initarg :|bytesSent| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %component-status-data-bytes-sent :initform
                         common-lisp:nil)
                        (bytes-received :initarg :|bytesReceived| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %component-status-data-bytes-received :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'component-status-data 'make-component-status-data))
 (common-lisp:defun make-component-status-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status packets-dropped dataflow-id
                     component-type capability-arn bytes-sent bytes-received)
   (common-lisp:apply #'common-lisp:make-instance 'component-status-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          component-status-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          component-status-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-received))
      (common-lisp:list
       (common-lisp:cons "bytesReceived"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-sent))
      (common-lisp:list
       (common-lisp:cons "bytesSent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-arn))
      (common-lisp:list
       (common-lisp:cons "capabilityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataflow-id))
      (common-lisp:list
       (common-lisp:cons "dataflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packets-dropped))
      (common-lisp:list
       (common-lisp:cons "packetsDropped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          component-status-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-status-list ()
   '(trivial-types:proper-list component-status-data))
 (common-lisp:defun |make-component-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-status-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype component-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass component-version common-lisp:nil
                       ((versions :initarg :|versions| :type
                         (common-lisp:or version-string-list common-lisp:null)
                         :accessor %component-version-versions :initform
                         (common-lisp:error ":versions is required"))
                        (component-type :initarg :|componentType| :type
                         (common-lisp:or component-type-string
                                         common-lisp:null)
                         :accessor %component-version-component-type :initform
                         (common-lisp:error ":componenttype is required"))))
 (common-lisp:export
  (common-lisp:list 'component-version 'make-component-version))
 (common-lisp:defun make-component-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key versions component-type)
   (common-lisp:apply #'common-lisp:make-instance 'component-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input component-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input component-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-type))
      (common-lisp:list
       (common-lisp:cons "componentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input component-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype component-version-list ()
   '(trivial-types:proper-list component-version))
 (common-lisp:defun |make-component-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list component-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype config-arn () 'common-lisp:string)
(common-lisp:deftype config-capability-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass config-details common-lisp:nil
                       ((s3recording-details :initarg :|s3RecordingDetails|
                         :type
                         (common-lisp:or s3recording-details common-lisp:null)
                         :accessor %config-details-s3recording-details
                         :initform common-lisp:nil)
                        (endpoint-details :initarg :|endpointDetails| :type
                         (common-lisp:or endpoint-details common-lisp:null)
                         :accessor %config-details-endpoint-details :initform
                         common-lisp:nil)
                        (antenna-demod-decode-details :initarg
                         :|antennaDemodDecodeDetails| :type
                         (common-lisp:or antenna-demod-decode-details
                                         common-lisp:null)
                         :accessor %config-details-antenna-demod-decode-details
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'config-details 'make-config-details))
 (common-lisp:defun make-config-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3recording-details endpoint-details
                     antenna-demod-decode-details)
   (common-lisp:apply #'common-lisp:make-instance 'config-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antenna-demod-decode-details))
      (common-lisp:list
       (common-lisp:cons "antennaDemodDecodeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-details))
      (common-lisp:list
       (common-lisp:cons "endpointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3recording-details))
      (common-lisp:list
       (common-lisp:cons "s3RecordingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass config-id-response common-lisp:nil
                       ((config-type :initarg :|configType| :type
                         (common-lisp:or config-capability-type
                                         common-lisp:null)
                         :accessor %config-id-response-config-type :initform
                         common-lisp:nil)
                        (config-id :initarg :|configId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %config-id-response-config-id :initform
                         common-lisp:nil)
                        (config-arn :initarg :|configArn| :type
                         (common-lisp:or config-arn common-lisp:null) :accessor
                         %config-id-response-config-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'config-id-response 'make-config-id-response))
 (common-lisp:defun make-config-id-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key config-type config-id config-arn)
   (common-lisp:apply #'common-lisp:make-instance 'config-id-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input config-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input config-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-arn))
      (common-lisp:list
       (common-lisp:cons "configArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-id))
      (common-lisp:list
       (common-lisp:cons "configId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-type))
      (common-lisp:list
       (common-lisp:cons "configType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input config-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype config-list ()
   '(trivial-types:proper-list config-list-item))
 (common-lisp:defun |make-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list config-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass config-list-item common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %config-list-item-name :initform common-lisp:nil)
                        (config-type :initarg :|configType| :type
                         (common-lisp:or config-capability-type
                                         common-lisp:null)
                         :accessor %config-list-item-config-type :initform
                         common-lisp:nil)
                        (config-id :initarg :|configId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %config-list-item-config-id :initform common-lisp:nil)
                        (config-arn :initarg :|configArn| :type
                         (common-lisp:or config-arn common-lisp:null) :accessor
                         %config-list-item-config-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'config-list-item 'make-config-list-item))
 (common-lisp:defun make-config-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name config-type config-id config-arn)
   (common-lisp:apply #'common-lisp:make-instance 'config-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input config-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input config-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-arn))
      (common-lisp:list
       (common-lisp:cons "configArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-id))
      (common-lisp:list
       (common-lisp:cons "configId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-type))
      (common-lisp:list
       (common-lisp:cons "configType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input config-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass config-type-data common-lisp:nil
                       ((uplink-echo-config :initarg :|uplinkEchoConfig| :type
                         (common-lisp:or uplink-echo-config common-lisp:null)
                         :accessor %config-type-data-uplink-echo-config
                         :initform common-lisp:nil)
                        (tracking-config :initarg :|trackingConfig| :type
                         (common-lisp:or tracking-config common-lisp:null)
                         :accessor %config-type-data-tracking-config :initform
                         common-lisp:nil)
                        (s3recording-config :initarg :|s3RecordingConfig| :type
                         (common-lisp:or s3recording-config common-lisp:null)
                         :accessor %config-type-data-s3recording-config
                         :initform common-lisp:nil)
                        (dataflow-endpoint-config :initarg
                         :|dataflowEndpointConfig| :type
                         (common-lisp:or dataflow-endpoint-config
                                         common-lisp:null)
                         :accessor %config-type-data-dataflow-endpoint-config
                         :initform common-lisp:nil)
                        (antenna-uplink-config :initarg :|antennaUplinkConfig|
                         :type
                         (common-lisp:or antenna-uplink-config
                                         common-lisp:null)
                         :accessor %config-type-data-antenna-uplink-config
                         :initform common-lisp:nil)
                        (antenna-downlink-demod-decode-config :initarg
                         :|antennaDownlinkDemodDecodeConfig| :type
                         (common-lisp:or antenna-downlink-demod-decode-config
                                         common-lisp:null)
                         :accessor
                         %config-type-data-antenna-downlink-demod-decode-config
                         :initform common-lisp:nil)
                        (antenna-downlink-config :initarg
                         :|antennaDownlinkConfig| :type
                         (common-lisp:or antenna-downlink-config
                                         common-lisp:null)
                         :accessor %config-type-data-antenna-downlink-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'config-type-data 'make-config-type-data))
 (common-lisp:defun make-config-type-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uplink-echo-config tracking-config
                     s3recording-config dataflow-endpoint-config
                     antenna-uplink-config antenna-downlink-demod-decode-config
                     antenna-downlink-config)
   (common-lisp:apply #'common-lisp:make-instance 'config-type-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input config-type-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input config-type-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antenna-downlink-config))
      (common-lisp:list
       (common-lisp:cons "antennaDownlinkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antenna-downlink-demod-decode-config))
      (common-lisp:list
       (common-lisp:cons "antennaDownlinkDemodDecodeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antenna-uplink-config))
      (common-lisp:list
       (common-lisp:cons "antennaUplinkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-config))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3recording-config))
      (common-lisp:list
       (common-lisp:cons "s3RecordingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-config))
      (common-lisp:list
       (common-lisp:cons "trackingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uplink-echo-config))
      (common-lisp:list
       (common-lisp:cons "uplinkEchoConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input config-type-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection-details common-lisp:nil
                       ((socket-address :initarg :|socketAddress| :type
                         (common-lisp:or socket-address common-lisp:null)
                         :accessor %connection-details-socket-address :initform
                         (common-lisp:error ":socketaddress is required"))
                        (mtu :initarg :|mtu| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %connection-details-mtu :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-details 'make-connection-details))
 (common-lisp:defun make-connection-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key socket-address mtu)
   (common-lisp:apply #'common-lisp:make-instance 'connection-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'socket-address))
      (common-lisp:list
       (common-lisp:cons "socketAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass contact-data common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %contact-data-tags :initform common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %contact-data-start-time :initform common-lisp:nil)
                        (satellite-arn :initarg :|satelliteArn| :type
                         (common-lisp:or |satelliteArn| common-lisp:null)
                         :accessor %contact-data-satellite-arn :initform
                         common-lisp:nil)
                        (region :initarg :|region| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %contact-data-region :initform common-lisp:nil)
                        (pre-pass-start-time :initarg :|prePassStartTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %contact-data-pre-pass-start-time :initform
                         common-lisp:nil)
                        (post-pass-end-time :initarg :|postPassEndTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %contact-data-post-pass-end-time :initform
                         common-lisp:nil)
                        (mission-profile-arn :initarg :|missionProfileArn|
                         :type
                         (common-lisp:or mission-profile-arn common-lisp:null)
                         :accessor %contact-data-mission-profile-arn :initform
                         common-lisp:nil)
                        (maximum-elevation :initarg :|maximumElevation| :type
                         (common-lisp:or elevation common-lisp:null) :accessor
                         %contact-data-maximum-elevation :initform
                         common-lisp:nil)
                        (ground-station :initarg :|groundStation| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %contact-data-ground-station :initform
                         common-lisp:nil)
                        (error-message :initarg :|errorMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %contact-data-error-message :initform common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %contact-data-end-time :initform common-lisp:nil)
                        (contact-status :initarg :|contactStatus| :type
                         (common-lisp:or contact-status common-lisp:null)
                         :accessor %contact-data-contact-status :initform
                         common-lisp:nil)
                        (contact-id :initarg :|contactId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %contact-data-contact-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'contact-data 'make-contact-data))
 (common-lisp:defun make-contact-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags start-time satellite-arn region
                     pre-pass-start-time post-pass-end-time mission-profile-arn
                     maximum-elevation ground-station error-message end-time
                     contact-status contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'contact-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "contactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-status))
      (common-lisp:list
       (common-lisp:cons "contactStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station))
      (common-lisp:list
       (common-lisp:cons "groundStation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-elevation))
      (common-lisp:list
       (common-lisp:cons "maximumElevation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-pass-end-time))
      (common-lisp:list
       (common-lisp:cons "postPassEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-pass-start-time))
      (common-lisp:list
       (common-lisp:cons "prePassStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass contact-id-response common-lisp:nil
                       ((contact-id :initarg :|contactId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %contact-id-response-contact-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'contact-id-response 'make-contact-id-response))
 (common-lisp:defun make-contact-id-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'contact-id-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "contactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype contact-list ()
   '(trivial-types:proper-list contact-data))
 (common-lisp:defun |make-contact-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-config-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %create-config-request-tags :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %create-config-request-name :initform
                         (common-lisp:error ":name is required"))
                        (config-data :initarg :|configData| :type
                         (common-lisp:or config-type-data common-lisp:null)
                         :accessor %create-config-request-config-data :initform
                         (common-lisp:error ":configdata is required"))))
 (common-lisp:export
  (common-lisp:list 'create-config-request 'make-create-config-request))
 (common-lisp:defun make-create-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags name config-data)
   (common-lisp:apply #'common-lisp:make-instance 'create-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-data))
      (common-lisp:list
       (common-lisp:cons "configData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataflow-endpoint-group-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %create-dataflow-endpoint-group-request-tags :initform
                         common-lisp:nil)
                        (endpoint-details :initarg :|endpointDetails| :type
                         (common-lisp:or endpoint-details-list
                                         common-lisp:null)
                         :accessor
                         %create-dataflow-endpoint-group-request-endpoint-details
                         :initform
                         (common-lisp:error ":endpointdetails is required"))
                        (contact-pre-pass-duration-seconds :initarg
                         :|contactPrePassDurationSeconds| :type
                         (common-lisp:or
                          dataflow-endpoint-group-duration-in-seconds
                          common-lisp:null)
                         :accessor
                         %create-dataflow-endpoint-group-request-contact-pre-pass-duration-seconds
                         :initform common-lisp:nil)
                        (contact-post-pass-duration-seconds :initarg
                         :|contactPostPassDurationSeconds| :type
                         (common-lisp:or
                          dataflow-endpoint-group-duration-in-seconds
                          common-lisp:null)
                         :accessor
                         %create-dataflow-endpoint-group-request-contact-post-pass-duration-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-dataflow-endpoint-group-request
                    'make-create-dataflow-endpoint-group-request))
 (common-lisp:defun make-create-dataflow-endpoint-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags endpoint-details
                     contact-pre-pass-duration-seconds
                     contact-post-pass-duration-seconds)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-dataflow-endpoint-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataflow-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataflow-endpoint-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-post-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPostPassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-pre-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPrePassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-details))
      (common-lisp:list
       (common-lisp:cons "endpointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataflow-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ephemeris-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %create-ephemeris-request-tags :initform
                         common-lisp:nil)
                        (satellite-id :initarg :|satelliteId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %create-ephemeris-request-satellite-id :initform
                         (common-lisp:error ":satelliteid is required"))
                        (priority :initarg :|priority| :type
                         (common-lisp:or customer-ephemeris-priority
                                         common-lisp:null)
                         :accessor %create-ephemeris-request-priority :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %create-ephemeris-request-name :initform
                         (common-lisp:error ":name is required"))
                        (kms-key-arn :initarg :|kmsKeyArn| :type
                         (common-lisp:or key-arn common-lisp:null) :accessor
                         %create-ephemeris-request-kms-key-arn :initform
                         common-lisp:nil)
                        (expiration-time :initarg :|expirationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %create-ephemeris-request-expiration-time :initform
                         common-lisp:nil)
                        (ephemeris :initarg :|ephemeris| :type
                         (common-lisp:or ephemeris-data common-lisp:null)
                         :accessor %create-ephemeris-request-ephemeris
                         :initform common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-ephemeris-request-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-ephemeris-request 'make-create-ephemeris-request))
 (common-lisp:defun make-create-ephemeris-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags satellite-id priority name
                     kms-key-arn expiration-time ephemeris enabled)
   (common-lisp:apply #'common-lisp:make-instance 'create-ephemeris-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ephemeris-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris))
      (common-lisp:list
       (common-lisp:cons "ephemeris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "expirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-id))
      (common-lisp:list
       (common-lisp:cons "satelliteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ephemeris-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mission-profile-request common-lisp:nil
                       ((tracking-config-arn :initarg :|trackingConfigArn|
                         :type (common-lisp:or config-arn common-lisp:null)
                         :accessor
                         %create-mission-profile-request-tracking-config-arn
                         :initform
                         (common-lisp:error ":trackingconfigarn is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %create-mission-profile-request-tags :initform
                         common-lisp:nil)
                        (streams-kms-role :initarg :|streamsKmsRole| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-mission-profile-request-streams-kms-role
                         :initform common-lisp:nil)
                        (streams-kms-key :initarg :|streamsKmsKey| :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         %create-mission-profile-request-streams-kms-key
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %create-mission-profile-request-name :initform
                         (common-lisp:error ":name is required"))
                        (minimum-viable-contact-duration-seconds :initarg
                         :|minimumViableContactDurationSeconds| :type
                         (common-lisp:or positive-duration-in-seconds
                                         common-lisp:null)
                         :accessor
                         %create-mission-profile-request-minimum-viable-contact-duration-seconds
                         :initform
                         (common-lisp:error
                          ":minimumviablecontactdurationseconds is required"))
                        (dataflow-edges :initarg :|dataflowEdges| :type
                         (common-lisp:or dataflow-edge-list common-lisp:null)
                         :accessor
                         %create-mission-profile-request-dataflow-edges
                         :initform
                         (common-lisp:error ":dataflowedges is required"))
                        (contact-pre-pass-duration-seconds :initarg
                         :|contactPrePassDurationSeconds| :type
                         (common-lisp:or duration-in-seconds common-lisp:null)
                         :accessor
                         %create-mission-profile-request-contact-pre-pass-duration-seconds
                         :initform common-lisp:nil)
                        (contact-post-pass-duration-seconds :initarg
                         :|contactPostPassDurationSeconds| :type
                         (common-lisp:or duration-in-seconds common-lisp:null)
                         :accessor
                         %create-mission-profile-request-contact-post-pass-duration-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-mission-profile-request
                    'make-create-mission-profile-request))
 (common-lisp:defun make-create-mission-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tracking-config-arn tags streams-kms-role
                     streams-kms-key name
                     minimum-viable-contact-duration-seconds dataflow-edges
                     contact-pre-pass-duration-seconds
                     contact-post-pass-duration-seconds)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-mission-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mission-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-post-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPostPassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-pre-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPrePassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataflow-edges))
      (common-lisp:list
       (common-lisp:cons "dataflowEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-viable-contact-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "minimumViableContactDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-key))
      (common-lisp:list
       (common-lisp:cons "streamsKmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-role))
      (common-lisp:list
       (common-lisp:cons "streamsKmsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-config-arn))
      (common-lisp:list
       (common-lisp:cons "trackingConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mission-profile-request))
   common-lisp:nil))
(common-lisp:deftype criticality () 'common-lisp:string)
(common-lisp:deftype customer-ephemeris-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass dataflow-detail common-lisp:nil
                       ((source :initarg :|source| :type
                         (common-lisp:or source common-lisp:null) :accessor
                         %dataflow-detail-source :initform common-lisp:nil)
                        (error-message :initarg :|errorMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dataflow-detail-error-message :initform
                         common-lisp:nil)
                        (destination :initarg :|destination| :type
                         (common-lisp:or destination common-lisp:null)
                         :accessor %dataflow-detail-destination :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dataflow-detail 'make-dataflow-detail))
 (common-lisp:defun make-dataflow-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source error-message destination)
   (common-lisp:apply #'common-lisp:make-instance 'dataflow-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataflow-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataflow-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataflow-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataflow-edge () '(trivial-types:proper-list config-arn))
 (common-lisp:defun |make-dataflow-edge|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list config-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dataflow-edge-list ()
   '(trivial-types:proper-list dataflow-edge))
 (common-lisp:defun |make-dataflow-edge-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataflow-edge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataflow-endpoint common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or endpoint-status common-lisp:null)
                         :accessor %dataflow-endpoint-status :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %dataflow-endpoint-name :initform common-lisp:nil)
                        (mtu :initarg :|mtu| :type
                         (common-lisp:or dataflow-endpoint-mtu-integer
                                         common-lisp:null)
                         :accessor %dataflow-endpoint-mtu :initform
                         common-lisp:nil)
                        (address :initarg :|address| :type
                         (common-lisp:or socket-address common-lisp:null)
                         :accessor %dataflow-endpoint-address :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dataflow-endpoint 'make-dataflow-endpoint))
 (common-lisp:defun make-dataflow-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status name mtu address)
   (common-lisp:apply #'common-lisp:make-instance 'dataflow-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataflow-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataflow-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataflow-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataflow-endpoint-config common-lisp:nil
                       ((dataflow-endpoint-region :initarg
                         :|dataflowEndpointRegion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dataflow-endpoint-config-dataflow-endpoint-region
                         :initform common-lisp:nil)
                        (dataflow-endpoint-name :initarg
                         :|dataflowEndpointName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dataflow-endpoint-config-dataflow-endpoint-name
                         :initform
                         (common-lisp:error
                          ":dataflowendpointname is required"))))
 (common-lisp:export
  (common-lisp:list 'dataflow-endpoint-config 'make-dataflow-endpoint-config))
 (common-lisp:defun make-dataflow-endpoint-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataflow-endpoint-region
                     dataflow-endpoint-name)
   (common-lisp:apply #'common-lisp:make-instance 'dataflow-endpoint-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-region))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-config))
   common-lisp:nil))
(common-lisp:deftype dataflow-endpoint-group-arn () 'common-lisp:string)
(common-lisp:deftype dataflow-endpoint-group-duration-in-seconds ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass dataflow-endpoint-group-id-response common-lisp:nil
                       ((dataflow-endpoint-group-id :initarg
                         :|dataflowEndpointGroupId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %dataflow-endpoint-group-id-response-dataflow-endpoint-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dataflow-endpoint-group-id-response
                    'make-dataflow-endpoint-group-id-response))
 (common-lisp:defun make-dataflow-endpoint-group-id-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataflow-endpoint-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'dataflow-endpoint-group-id-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-group-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-group-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-id))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-group-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataflow-endpoint-group-list ()
   '(trivial-types:proper-list dataflow-endpoint-list-item))
 (common-lisp:defun |make-dataflow-endpoint-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dataflow-endpoint-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataflow-endpoint-list-item common-lisp:nil
                       ((dataflow-endpoint-group-id :initarg
                         :|dataflowEndpointGroupId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %dataflow-endpoint-list-item-dataflow-endpoint-group-id
                         :initform common-lisp:nil)
                        (dataflow-endpoint-group-arn :initarg
                         :|dataflowEndpointGroupArn| :type
                         (common-lisp:or dataflow-endpoint-group-arn
                                         common-lisp:null)
                         :accessor
                         %dataflow-endpoint-list-item-dataflow-endpoint-group-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dataflow-endpoint-list-item
                    'make-dataflow-endpoint-list-item))
 (common-lisp:defun make-dataflow-endpoint-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataflow-endpoint-group-id
                     dataflow-endpoint-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'dataflow-endpoint-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-id))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dataflow-endpoint-list-item))
   common-lisp:nil))
(common-lisp:deftype dataflow-endpoint-mtu-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype dataflow-list ()
   '(trivial-types:proper-list dataflow-detail))
 (common-lisp:defun |make-dataflow-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataflow-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass decode-config common-lisp:nil
                       ((unvalidated-json :initarg :|unvalidatedJSON| :type
                         (common-lisp:or json-string common-lisp:null)
                         :accessor %decode-config-unvalidated-json :initform
                         (common-lisp:error ":unvalidatedjson is required"))))
 (common-lisp:export (common-lisp:list 'decode-config 'make-decode-config))
 (common-lisp:defun make-decode-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unvalidated-json)
   (common-lisp:apply #'common-lisp:make-instance 'decode-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unvalidated-json))
      (common-lisp:list
       (common-lisp:cons "unvalidatedJSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decode-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-config-request common-lisp:nil
                       ((config-type :initarg :|configType| :type
                         (common-lisp:or config-capability-type
                                         common-lisp:null)
                         :accessor %delete-config-request-config-type :initform
                         (common-lisp:error ":configtype is required"))
                        (config-id :initarg :|configId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-config-request-config-id :initform
                         (common-lisp:error ":configid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-config-request 'make-delete-config-request))
 (common-lisp:defun make-delete-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key config-type config-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataflow-endpoint-group-request common-lisp:nil
                       ((dataflow-endpoint-group-id :initarg
                         :|dataflowEndpointGroupId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-dataflow-endpoint-group-request-dataflow-endpoint-group-id
                         :initform
                         (common-lisp:error
                          ":dataflowendpointgroupid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dataflow-endpoint-group-request
                    'make-delete-dataflow-endpoint-group-request))
 (common-lisp:defun make-delete-dataflow-endpoint-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataflow-endpoint-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-dataflow-endpoint-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataflow-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataflow-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataflow-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ephemeris-request common-lisp:nil
                       ((ephemeris-id :initarg :|ephemerisId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-ephemeris-request-ephemeris-id :initform
                         (common-lisp:error ":ephemerisid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-ephemeris-request 'make-delete-ephemeris-request))
 (common-lisp:defun make-delete-ephemeris-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ephemeris-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-ephemeris-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ephemeris-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mission-profile-request common-lisp:nil
                       ((mission-profile-id :initarg :|missionProfileId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-mission-profile-request-mission-profile-id
                         :initform
                         (common-lisp:error ":missionprofileid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-mission-profile-request
                    'make-delete-mission-profile-request))
 (common-lisp:defun make-delete-mission-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mission-profile-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-mission-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mission-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass demodulation-config common-lisp:nil
                       ((unvalidated-json :initarg :|unvalidatedJSON| :type
                         (common-lisp:or json-string common-lisp:null)
                         :accessor %demodulation-config-unvalidated-json
                         :initform
                         (common-lisp:error ":unvalidatedjson is required"))))
 (common-lisp:export
  (common-lisp:list 'demodulation-config 'make-demodulation-config))
 (common-lisp:defun make-demodulation-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unvalidated-json)
   (common-lisp:apply #'common-lisp:make-instance 'demodulation-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input demodulation-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input demodulation-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unvalidated-json))
      (common-lisp:list
       (common-lisp:cons "unvalidatedJSON"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input demodulation-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-exception
     (groundstation-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       dependency-exception-message)
      (parameter-name :initarg :|parameterName| :initform common-lisp:nil
       :reader dependency-exception-parameter-name)))
 (common-lisp:export
  (common-lisp:list 'dependency-exception 'dependency-exception-message
                    'dependency-exception-parameter-name)))
(common-lisp:progn
 (common-lisp:defclass describe-contact-request common-lisp:nil
                       ((contact-id :initarg :|contactId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %describe-contact-request-contact-id :initform
                         (common-lisp:error ":contactid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-contact-request 'make-describe-contact-request))
 (common-lisp:defun make-describe-contact-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-contact-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %describe-contact-response-tags :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-contact-response-start-time :initform
                         common-lisp:nil)
                        (satellite-arn :initarg :|satelliteArn| :type
                         (common-lisp:or |satelliteArn| common-lisp:null)
                         :accessor %describe-contact-response-satellite-arn
                         :initform common-lisp:nil)
                        (region :initarg :|region| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-contact-response-region :initform
                         common-lisp:nil)
                        (pre-pass-start-time :initarg :|prePassStartTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-contact-response-pre-pass-start-time
                         :initform common-lisp:nil)
                        (post-pass-end-time :initarg :|postPassEndTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-contact-response-post-pass-end-time
                         :initform common-lisp:nil)
                        (mission-profile-arn :initarg :|missionProfileArn|
                         :type
                         (common-lisp:or mission-profile-arn common-lisp:null)
                         :accessor
                         %describe-contact-response-mission-profile-arn
                         :initform common-lisp:nil)
                        (maximum-elevation :initarg :|maximumElevation| :type
                         (common-lisp:or elevation common-lisp:null) :accessor
                         %describe-contact-response-maximum-elevation :initform
                         common-lisp:nil)
                        (ground-station :initarg :|groundStation| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-contact-response-ground-station :initform
                         common-lisp:nil)
                        (error-message :initarg :|errorMessage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-contact-response-error-message :initform
                         common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-contact-response-end-time :initform
                         common-lisp:nil)
                        (dataflow-list :initarg :|dataflowList| :type
                         (common-lisp:or dataflow-list common-lisp:null)
                         :accessor %describe-contact-response-dataflow-list
                         :initform common-lisp:nil)
                        (contact-status :initarg :|contactStatus| :type
                         (common-lisp:or contact-status common-lisp:null)
                         :accessor %describe-contact-response-contact-status
                         :initform common-lisp:nil)
                        (contact-id :initarg :|contactId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %describe-contact-response-contact-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-contact-response
                    'make-describe-contact-response))
 (common-lisp:defun make-describe-contact-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags start-time satellite-arn region
                     pre-pass-start-time post-pass-end-time mission-profile-arn
                     maximum-elevation ground-station error-message end-time
                     dataflow-list contact-status contact-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-contact-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-id))
      (common-lisp:list
       (common-lisp:cons "contactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-status))
      (common-lisp:list
       (common-lisp:cons "contactStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataflow-list))
      (common-lisp:list
       (common-lisp:cons "dataflowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station))
      (common-lisp:list
       (common-lisp:cons "groundStation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-elevation))
      (common-lisp:list
       (common-lisp:cons "maximumElevation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-pass-end-time))
      (common-lisp:list
       (common-lisp:cons "postPassEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-pass-start-time))
      (common-lisp:list
       (common-lisp:cons "prePassStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-contact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ephemeris-request common-lisp:nil
                       ((ephemeris-id :initarg :|ephemerisId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %describe-ephemeris-request-ephemeris-id :initform
                         (common-lisp:error ":ephemerisid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-ephemeris-request
                    'make-describe-ephemeris-request))
 (common-lisp:defun make-describe-ephemeris-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ephemeris-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ephemeris-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ephemeris-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %describe-ephemeris-response-tags :initform
                         common-lisp:nil)
                        (supplied-data :initarg :|suppliedData| :type
                         (common-lisp:or ephemeris-type-description
                                         common-lisp:null)
                         :accessor %describe-ephemeris-response-supplied-data
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or ephemeris-status common-lisp:null)
                         :accessor %describe-ephemeris-response-status
                         :initform common-lisp:nil)
                        (satellite-id :initarg :|satelliteId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %describe-ephemeris-response-satellite-id :initform
                         common-lisp:nil)
                        (priority :initarg :|priority| :type
                         (common-lisp:or ephemeris-priority common-lisp:null)
                         :accessor %describe-ephemeris-response-priority
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %describe-ephemeris-response-name :initform
                         common-lisp:nil)
                        (invalid-reason :initarg :|invalidReason| :type
                         (common-lisp:or ephemeris-invalid-reason
                                         common-lisp:null)
                         :accessor %describe-ephemeris-response-invalid-reason
                         :initform common-lisp:nil)
                        (ephemeris-id :initarg :|ephemerisId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %describe-ephemeris-response-ephemeris-id :initform
                         common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %describe-ephemeris-response-enabled :initform
                         common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-ephemeris-response-creation-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-ephemeris-response
                    'make-describe-ephemeris-response))
 (common-lisp:defun make-describe-ephemeris-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags supplied-data status satellite-id
                     priority name invalid-reason ephemeris-id enabled
                     creation-time)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ephemeris-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris-id))
      (common-lisp:list
       (common-lisp:cons "ephemerisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-reason))
      (common-lisp:list
       (common-lisp:cons "invalidReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-id))
      (common-lisp:list
       (common-lisp:cons "satelliteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supplied-data))
      (common-lisp:list
       (common-lisp:cons "suppliedData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ephemeris-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination common-lisp:nil
                       ((dataflow-destination-region :initarg
                         :|dataflowDestinationRegion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %destination-dataflow-destination-region :initform
                         common-lisp:nil)
                        (config-type :initarg :|configType| :type
                         (common-lisp:or config-capability-type
                                         common-lisp:null)
                         :accessor %destination-config-type :initform
                         common-lisp:nil)
                        (config-id :initarg :|configId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %destination-config-id :initform common-lisp:nil)
                        (config-details :initarg :|configDetails| :type
                         (common-lisp:or config-details common-lisp:null)
                         :accessor %destination-config-details :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defun make-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataflow-destination-region config-type
                     config-id config-details)
   (common-lisp:apply #'common-lisp:make-instance 'destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-details))
      (common-lisp:list
       (common-lisp:cons "configDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-id))
      (common-lisp:list
       (common-lisp:cons "configId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-type))
      (common-lisp:list
       (common-lisp:cons "configType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-destination-region))
      (common-lisp:list
       (common-lisp:cons "dataflowDestinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass discovery-data common-lisp:nil
                       ((public-ip-addresses :initarg :|publicIpAddresses|
                         :type
                         (common-lisp:or ip-address-list common-lisp:null)
                         :accessor %discovery-data-public-ip-addresses
                         :initform
                         (common-lisp:error ":publicipaddresses is required"))
                        (private-ip-addresses :initarg :|privateIpAddresses|
                         :type
                         (common-lisp:or ip-address-list common-lisp:null)
                         :accessor %discovery-data-private-ip-addresses
                         :initform
                         (common-lisp:error ":privateipaddresses is required"))
                        (capability-arns :initarg :|capabilityArns| :type
                         (common-lisp:or capability-arn-list common-lisp:null)
                         :accessor %discovery-data-capability-arns :initform
                         (common-lisp:error ":capabilityarns is required"))))
 (common-lisp:export (common-lisp:list 'discovery-data 'make-discovery-data))
 (common-lisp:defun make-discovery-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-ip-addresses private-ip-addresses
                     capability-arns)
   (common-lisp:apply #'common-lisp:make-instance 'discovery-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input discovery-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input discovery-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capability-arns))
      (common-lisp:list
       (common-lisp:cons "capabilityArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "privateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "publicIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input discovery-data))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype duration-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass eirp common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %eirp-value :initform
                         (common-lisp:error ":value is required"))
                        (units :initarg :|units| :type
                         (common-lisp:or eirp-units common-lisp:null) :accessor
                         %eirp-units :initform
                         (common-lisp:error ":units is required"))))
 (common-lisp:export (common-lisp:list 'eirp 'make-eirp))
 (common-lisp:defun make-eirp
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value units)
   (common-lisp:apply #'common-lisp:make-instance 'eirp
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eirp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eirp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'units))
      (common-lisp:list
       (common-lisp:cons "units"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eirp))
   common-lisp:nil))
(common-lisp:deftype eirp-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass elevation common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %elevation-value :initform
                         (common-lisp:error ":value is required"))
                        (unit :initarg :|unit| :type
                         (common-lisp:or angle-units common-lisp:null)
                         :accessor %elevation-unit :initform
                         (common-lisp:error ":unit is required"))))
 (common-lisp:export (common-lisp:list 'elevation 'make-elevation))
 (common-lisp:defun make-elevation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value unit)
   (common-lisp:apply #'common-lisp:make-instance 'elevation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elevation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elevation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elevation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass endpoint-details common-lisp:nil
                       ((security-details :initarg :|securityDetails| :type
                         (common-lisp:or security-details common-lisp:null)
                         :accessor %endpoint-details-security-details :initform
                         common-lisp:nil)
                        (health-status :initarg :|healthStatus| :type
                         (common-lisp:or capability-health common-lisp:null)
                         :accessor %endpoint-details-health-status :initform
                         common-lisp:nil)
                        (health-reasons :initarg :|healthReasons| :type
                         (common-lisp:or capability-health-reason-list
                                         common-lisp:null)
                         :accessor %endpoint-details-health-reasons :initform
                         common-lisp:nil)
                        (endpoint :initarg :|endpoint| :type
                         (common-lisp:or dataflow-endpoint common-lisp:null)
                         :accessor %endpoint-details-endpoint :initform
                         common-lisp:nil)
                        (aws-ground-station-agent-endpoint :initarg
                         :|awsGroundStationAgentEndpoint| :type
                         (common-lisp:or aws-ground-station-agent-endpoint
                                         common-lisp:null)
                         :accessor
                         %endpoint-details-aws-ground-station-agent-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'endpoint-details 'make-endpoint-details))
 (common-lisp:defun make-endpoint-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-details health-status
                     health-reasons endpoint aws-ground-station-agent-endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-ground-station-agent-endpoint))
      (common-lisp:list
       (common-lisp:cons "awsGroundStationAgentEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-reasons))
      (common-lisp:list
       (common-lisp:cons "healthReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-status))
      (common-lisp:list
       (common-lisp:cons "healthStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-details))
      (common-lisp:list
       (common-lisp:cons "securityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-details-list ()
   '(trivial-types:proper-list endpoint-details))
 (common-lisp:defun |make-endpoint-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype endpoint-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ephemerides-list ()
   '(trivial-types:proper-list ephemeris-item))
 (common-lisp:defun |make-ephemerides-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ephemeris-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ephemeris-data common-lisp:nil
                       ((tle :initarg :|tle| :type
                         (common-lisp:or tleephemeris common-lisp:null)
                         :accessor %ephemeris-data-tle :initform
                         common-lisp:nil)
                        (oem :initarg :|oem| :type
                         (common-lisp:or oemephemeris common-lisp:null)
                         :accessor %ephemeris-data-oem :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ephemeris-data 'make-ephemeris-data))
 (common-lisp:defun make-ephemeris-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tle oem)
   (common-lisp:apply #'common-lisp:make-instance 'ephemeris-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ephemeris-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ephemeris-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oem))
      (common-lisp:list
       (common-lisp:cons "oem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tle))
      (common-lisp:list
       (common-lisp:cons "tle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ephemeris-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ephemeris-description common-lisp:nil
                       ((source-s3object :initarg :|sourceS3Object| :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         %ephemeris-description-source-s3object :initform
                         common-lisp:nil)
                        (ephemeris-data :initarg :|ephemerisData| :type
                         (common-lisp:or unbounded-string common-lisp:null)
                         :accessor %ephemeris-description-ephemeris-data
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ephemeris-description 'make-ephemeris-description))
 (common-lisp:defun make-ephemeris-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-s3object ephemeris-data)
   (common-lisp:apply #'common-lisp:make-instance 'ephemeris-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris-data))
      (common-lisp:list
       (common-lisp:cons "ephemerisData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3object))
      (common-lisp:list
       (common-lisp:cons "sourceS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ephemeris-id-response common-lisp:nil
                       ((ephemeris-id :initarg :|ephemerisId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %ephemeris-id-response-ephemeris-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ephemeris-id-response 'make-ephemeris-id-response))
 (common-lisp:defun make-ephemeris-id-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ephemeris-id)
   (common-lisp:apply #'common-lisp:make-instance 'ephemeris-id-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris-id))
      (common-lisp:list
       (common-lisp:cons "ephemerisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-id-response))
   common-lisp:nil))
(common-lisp:deftype ephemeris-invalid-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ephemeris-item common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or ephemeris-status common-lisp:null)
                         :accessor %ephemeris-item-status :initform
                         common-lisp:nil)
                        (source-s3object :initarg :|sourceS3Object| :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         %ephemeris-item-source-s3object :initform
                         common-lisp:nil)
                        (priority :initarg :|priority| :type
                         (common-lisp:or ephemeris-priority common-lisp:null)
                         :accessor %ephemeris-item-priority :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %ephemeris-item-name :initform common-lisp:nil)
                        (ephemeris-id :initarg :|ephemerisId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %ephemeris-item-ephemeris-id :initform
                         common-lisp:nil)
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %ephemeris-item-enabled :initform common-lisp:nil)
                        (creation-time :initarg :|creationTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %ephemeris-item-creation-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ephemeris-item 'make-ephemeris-item))
 (common-lisp:defun make-ephemeris-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status source-s3object priority name
                     ephemeris-id enabled creation-time)
   (common-lisp:apply #'common-lisp:make-instance 'ephemeris-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ephemeris-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ephemeris-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris-id))
      (common-lisp:list
       (common-lisp:cons "ephemerisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-s3object))
      (common-lisp:list
       (common-lisp:cons "sourceS3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ephemeris-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ephemeris-meta-data common-lisp:nil
                       ((source :initarg :|source| :type
                         (common-lisp:or ephemeris-source common-lisp:null)
                         :accessor %ephemeris-meta-data-source :initform
                         (common-lisp:error ":source is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %ephemeris-meta-data-name :initform common-lisp:nil)
                        (epoch :initarg :|epoch| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %ephemeris-meta-data-epoch :initform common-lisp:nil)
                        (ephemeris-id :initarg :|ephemerisId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %ephemeris-meta-data-ephemeris-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ephemeris-meta-data 'make-ephemeris-meta-data))
 (common-lisp:defun make-ephemeris-meta-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source name epoch ephemeris-id)
   (common-lisp:apply #'common-lisp:make-instance 'ephemeris-meta-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ephemeris-meta-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ephemeris-meta-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemeris-id))
      (common-lisp:list
       (common-lisp:cons "ephemerisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epoch))
      (common-lisp:list
       (common-lisp:cons "epoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ephemeris-meta-data))
   common-lisp:nil))
(common-lisp:deftype ephemeris-priority () 'common-lisp:integer)
(common-lisp:deftype ephemeris-source () 'common-lisp:string)
(common-lisp:deftype ephemeris-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ephemeris-status-list ()
   '(trivial-types:proper-list ephemeris-status))
 (common-lisp:defun |make-ephemeris-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ephemeris-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ephemeris-type-description common-lisp:nil
                       ((tle :initarg :|tle| :type
                         (common-lisp:or ephemeris-description
                                         common-lisp:null)
                         :accessor %ephemeris-type-description-tle :initform
                         common-lisp:nil)
                        (oem :initarg :|oem| :type
                         (common-lisp:or ephemeris-description
                                         common-lisp:null)
                         :accessor %ephemeris-type-description-oem :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ephemeris-type-description
                    'make-ephemeris-type-description))
 (common-lisp:defun make-ephemeris-type-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tle oem)
   (common-lisp:apply #'common-lisp:make-instance 'ephemeris-type-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-type-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-type-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oem))
      (common-lisp:list
       (common-lisp:cons "oem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tle))
      (common-lisp:list
       (common-lisp:cons "tle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ephemeris-type-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass frequency common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %frequency-value :initform
                         (common-lisp:error ":value is required"))
                        (units :initarg :|units| :type
                         (common-lisp:or frequency-units common-lisp:null)
                         :accessor %frequency-units :initform
                         (common-lisp:error ":units is required"))))
 (common-lisp:export (common-lisp:list 'frequency 'make-frequency))
 (common-lisp:defun make-frequency
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value units)
   (common-lisp:apply #'common-lisp:make-instance 'frequency
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input frequency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input frequency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'units))
      (common-lisp:list
       (common-lisp:cons "units"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input frequency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass frequency-bandwidth common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %frequency-bandwidth-value :initform
                         (common-lisp:error ":value is required"))
                        (units :initarg :|units| :type
                         (common-lisp:or bandwidth-units common-lisp:null)
                         :accessor %frequency-bandwidth-units :initform
                         (common-lisp:error ":units is required"))))
 (common-lisp:export
  (common-lisp:list 'frequency-bandwidth 'make-frequency-bandwidth))
 (common-lisp:defun make-frequency-bandwidth
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value units)
   (common-lisp:apply #'common-lisp:make-instance 'frequency-bandwidth
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input frequency-bandwidth))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input frequency-bandwidth))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'units))
      (common-lisp:list
       (common-lisp:cons "units"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input frequency-bandwidth))
   common-lisp:nil))
(common-lisp:deftype frequency-units () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-agent-configuration-request common-lisp:nil
                       ((agent-id :initarg :|agentId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-agent-configuration-request-agent-id :initform
                         (common-lisp:error ":agentid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-agent-configuration-request
                    'make-get-agent-configuration-request))
 (common-lisp:defun make-get-agent-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key agent-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-agent-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-agent-configuration-response common-lisp:nil
                       ((tasking-document :initarg :|taskingDocument| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-agent-configuration-response-tasking-document
                         :initform common-lisp:nil)
                        (agent-id :initarg :|agentId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-agent-configuration-response-agent-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-agent-configuration-response
                    'make-get-agent-configuration-response))
 (common-lisp:defun make-get-agent-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tasking-document agent-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-agent-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasking-document))
      (common-lisp:list
       (common-lisp:cons "taskingDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-agent-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-config-request common-lisp:nil
                       ((config-type :initarg :|configType| :type
                         (common-lisp:or config-capability-type
                                         common-lisp:null)
                         :accessor %get-config-request-config-type :initform
                         (common-lisp:error ":configtype is required"))
                        (config-id :initarg :|configId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-config-request-config-id :initform
                         (common-lisp:error ":configid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-config-request 'make-get-config-request))
 (common-lisp:defun make-get-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key config-type config-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-config-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %get-config-response-tags :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-config-response-name :initform
                         (common-lisp:error ":name is required"))
                        (config-type :initarg :|configType| :type
                         (common-lisp:or config-capability-type
                                         common-lisp:null)
                         :accessor %get-config-response-config-type :initform
                         common-lisp:nil)
                        (config-id :initarg :|configId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-config-response-config-id :initform
                         (common-lisp:error ":configid is required"))
                        (config-data :initarg :|configData| :type
                         (common-lisp:or config-type-data common-lisp:null)
                         :accessor %get-config-response-config-data :initform
                         (common-lisp:error ":configdata is required"))
                        (config-arn :initarg :|configArn| :type
                         (common-lisp:or config-arn common-lisp:null) :accessor
                         %get-config-response-config-arn :initform
                         (common-lisp:error ":configarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-config-response 'make-get-config-response))
 (common-lisp:defun make-get-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags name config-type config-id
                     config-data config-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-arn))
      (common-lisp:list
       (common-lisp:cons "configArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-data))
      (common-lisp:list
       (common-lisp:cons "configData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-id))
      (common-lisp:list
       (common-lisp:cons "configId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-type))
      (common-lisp:list
       (common-lisp:cons "configType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dataflow-endpoint-group-request common-lisp:nil
                       ((dataflow-endpoint-group-id :initarg
                         :|dataflowEndpointGroupId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-dataflow-endpoint-group-request-dataflow-endpoint-group-id
                         :initform
                         (common-lisp:error
                          ":dataflowendpointgroupid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-dataflow-endpoint-group-request
                    'make-get-dataflow-endpoint-group-request))
 (common-lisp:defun make-get-dataflow-endpoint-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataflow-endpoint-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dataflow-endpoint-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dataflow-endpoint-group-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %get-dataflow-endpoint-group-response-tags :initform
                         common-lisp:nil)
                        (endpoints-details :initarg :|endpointsDetails| :type
                         (common-lisp:or endpoint-details-list
                                         common-lisp:null)
                         :accessor
                         %get-dataflow-endpoint-group-response-endpoints-details
                         :initform common-lisp:nil)
                        (dataflow-endpoint-group-id :initarg
                         :|dataflowEndpointGroupId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-dataflow-endpoint-group-response-dataflow-endpoint-group-id
                         :initform common-lisp:nil)
                        (dataflow-endpoint-group-arn :initarg
                         :|dataflowEndpointGroupArn| :type
                         (common-lisp:or dataflow-endpoint-group-arn
                                         common-lisp:null)
                         :accessor
                         %get-dataflow-endpoint-group-response-dataflow-endpoint-group-arn
                         :initform common-lisp:nil)
                        (contact-pre-pass-duration-seconds :initarg
                         :|contactPrePassDurationSeconds| :type
                         (common-lisp:or
                          dataflow-endpoint-group-duration-in-seconds
                          common-lisp:null)
                         :accessor
                         %get-dataflow-endpoint-group-response-contact-pre-pass-duration-seconds
                         :initform common-lisp:nil)
                        (contact-post-pass-duration-seconds :initarg
                         :|contactPostPassDurationSeconds| :type
                         (common-lisp:or
                          dataflow-endpoint-group-duration-in-seconds
                          common-lisp:null)
                         :accessor
                         %get-dataflow-endpoint-group-response-contact-post-pass-duration-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-dataflow-endpoint-group-response
                    'make-get-dataflow-endpoint-group-response))
 (common-lisp:defun make-get-dataflow-endpoint-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags endpoints-details
                     dataflow-endpoint-group-id dataflow-endpoint-group-arn
                     contact-pre-pass-duration-seconds
                     contact-post-pass-duration-seconds)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-dataflow-endpoint-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-post-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPostPassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-pre-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPrePassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-arn))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-id))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints-details))
      (common-lisp:list
       (common-lisp:cons "endpointsDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-endpoint-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-minute-usage-request common-lisp:nil
                       ((year :initarg :|year| :type
                         (common-lisp:or year common-lisp:null) :accessor
                         %get-minute-usage-request-year :initform
                         (common-lisp:error ":year is required"))
                        (month :initarg :|month| :type
                         (common-lisp:or month common-lisp:null) :accessor
                         %get-minute-usage-request-month :initform
                         (common-lisp:error ":month is required"))))
 (common-lisp:export
  (common-lisp:list 'get-minute-usage-request 'make-get-minute-usage-request))
 (common-lisp:defun make-get-minute-usage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key year month)
   (common-lisp:apply #'common-lisp:make-instance 'get-minute-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'month))
      (common-lisp:list
       (common-lisp:cons "month"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'year))
      (common-lisp:list
       (common-lisp:cons "year"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-minute-usage-response common-lisp:nil
                       ((upcoming-minutes-scheduled :initarg
                         :|upcomingMinutesScheduled| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-minute-usage-response-upcoming-minutes-scheduled
                         :initform common-lisp:nil)
                        (total-scheduled-minutes :initarg
                         :|totalScheduledMinutes| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-minute-usage-response-total-scheduled-minutes
                         :initform common-lisp:nil)
                        (total-reserved-minute-allocation :initarg
                         :|totalReservedMinuteAllocation| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-minute-usage-response-total-reserved-minute-allocation
                         :initform common-lisp:nil)
                        (is-reserved-minutes-customer :initarg
                         :|isReservedMinutesCustomer| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-minute-usage-response-is-reserved-minutes-customer
                         :initform common-lisp:nil)
                        (estimated-minutes-remaining :initarg
                         :|estimatedMinutesRemaining| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-minute-usage-response-estimated-minutes-remaining
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-minute-usage-response
                    'make-get-minute-usage-response))
 (common-lisp:defun make-get-minute-usage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upcoming-minutes-scheduled
                     total-scheduled-minutes total-reserved-minute-allocation
                     is-reserved-minutes-customer estimated-minutes-remaining)
   (common-lisp:apply #'common-lisp:make-instance 'get-minute-usage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-minutes-remaining))
      (common-lisp:list
       (common-lisp:cons "estimatedMinutesRemaining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-reserved-minutes-customer))
      (common-lisp:list
       (common-lisp:cons "isReservedMinutesCustomer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-reserved-minute-allocation))
      (common-lisp:list
       (common-lisp:cons "totalReservedMinuteAllocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-scheduled-minutes))
      (common-lisp:list
       (common-lisp:cons "totalScheduledMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upcoming-minutes-scheduled))
      (common-lisp:list
       (common-lisp:cons "upcomingMinutesScheduled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-minute-usage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mission-profile-request common-lisp:nil
                       ((mission-profile-id :initarg :|missionProfileId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-mission-profile-request-mission-profile-id
                         :initform
                         (common-lisp:error ":missionprofileid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-mission-profile-request
                    'make-get-mission-profile-request))
 (common-lisp:defun make-get-mission-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mission-profile-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-mission-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mission-profile-response common-lisp:nil
                       ((tracking-config-arn :initarg :|trackingConfigArn|
                         :type (common-lisp:or config-arn common-lisp:null)
                         :accessor
                         %get-mission-profile-response-tracking-config-arn
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %get-mission-profile-response-tags :initform
                         common-lisp:nil)
                        (streams-kms-role :initarg :|streamsKmsRole| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %get-mission-profile-response-streams-kms-role
                         :initform common-lisp:nil)
                        (streams-kms-key :initarg :|streamsKmsKey| :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         %get-mission-profile-response-streams-kms-key
                         :initform common-lisp:nil)
                        (region :initarg :|region| :type
                         (common-lisp:or awsregion common-lisp:null) :accessor
                         %get-mission-profile-response-region :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %get-mission-profile-response-name :initform
                         common-lisp:nil)
                        (mission-profile-id :initarg :|missionProfileId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-mission-profile-response-mission-profile-id
                         :initform common-lisp:nil)
                        (mission-profile-arn :initarg :|missionProfileArn|
                         :type
                         (common-lisp:or mission-profile-arn common-lisp:null)
                         :accessor
                         %get-mission-profile-response-mission-profile-arn
                         :initform common-lisp:nil)
                        (minimum-viable-contact-duration-seconds :initarg
                         :|minimumViableContactDurationSeconds| :type
                         (common-lisp:or positive-duration-in-seconds
                                         common-lisp:null)
                         :accessor
                         %get-mission-profile-response-minimum-viable-contact-duration-seconds
                         :initform common-lisp:nil)
                        (dataflow-edges :initarg :|dataflowEdges| :type
                         (common-lisp:or dataflow-edge-list common-lisp:null)
                         :accessor %get-mission-profile-response-dataflow-edges
                         :initform common-lisp:nil)
                        (contact-pre-pass-duration-seconds :initarg
                         :|contactPrePassDurationSeconds| :type
                         (common-lisp:or duration-in-seconds common-lisp:null)
                         :accessor
                         %get-mission-profile-response-contact-pre-pass-duration-seconds
                         :initform common-lisp:nil)
                        (contact-post-pass-duration-seconds :initarg
                         :|contactPostPassDurationSeconds| :type
                         (common-lisp:or duration-in-seconds common-lisp:null)
                         :accessor
                         %get-mission-profile-response-contact-post-pass-duration-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-mission-profile-response
                    'make-get-mission-profile-response))
 (common-lisp:defun make-get-mission-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tracking-config-arn tags streams-kms-role
                     streams-kms-key region name mission-profile-id
                     mission-profile-arn
                     minimum-viable-contact-duration-seconds dataflow-edges
                     contact-pre-pass-duration-seconds
                     contact-post-pass-duration-seconds)
   (common-lisp:apply #'common-lisp:make-instance 'get-mission-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-post-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPostPassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-pre-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPrePassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataflow-edges))
      (common-lisp:list
       (common-lisp:cons "dataflowEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-viable-contact-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "minimumViableContactDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-id))
      (common-lisp:list
       (common-lisp:cons "missionProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-key))
      (common-lisp:list
       (common-lisp:cons "streamsKmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-role))
      (common-lisp:list
       (common-lisp:cons "streamsKmsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-config-arn))
      (common-lisp:list
       (common-lisp:cons "trackingConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mission-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-satellite-request common-lisp:nil
                       ((satellite-id :initarg :|satelliteId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-satellite-request-satellite-id :initform
                         (common-lisp:error ":satelliteid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-satellite-request 'make-get-satellite-request))
 (common-lisp:defun make-get-satellite-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key satellite-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-satellite-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-satellite-response common-lisp:nil
                       ((satellite-id :initarg :|satelliteId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-satellite-response-satellite-id :initform
                         common-lisp:nil)
                        (satellite-arn :initarg :|satelliteArn| :type
                         (common-lisp:or |satelliteArn| common-lisp:null)
                         :accessor %get-satellite-response-satellite-arn
                         :initform common-lisp:nil)
                        (norad-satellite-id :initarg :|noradSatelliteID| :type
                         (common-lisp:or |noradSatelliteID| common-lisp:null)
                         :accessor %get-satellite-response-norad-satellite-id
                         :initform common-lisp:nil)
                        (ground-stations :initarg :|groundStations| :type
                         (common-lisp:or ground-station-id-list
                                         common-lisp:null)
                         :accessor %get-satellite-response-ground-stations
                         :initform common-lisp:nil)
                        (current-ephemeris :initarg :|currentEphemeris| :type
                         (common-lisp:or ephemeris-meta-data common-lisp:null)
                         :accessor %get-satellite-response-current-ephemeris
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-satellite-response 'make-get-satellite-response))
 (common-lisp:defun make-get-satellite-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key satellite-id satellite-arn
                     norad-satellite-id ground-stations current-ephemeris)
   (common-lisp:apply #'common-lisp:make-instance 'get-satellite-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-ephemeris))
      (common-lisp:list
       (common-lisp:cons "currentEphemeris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-stations))
      (common-lisp:list
       (common-lisp:cons "groundStations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'norad-satellite-id))
      (common-lisp:list
       (common-lisp:cons "noradSatelliteID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-id))
      (common-lisp:list
       (common-lisp:cons "satelliteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-satellite-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ground-station-data common-lisp:nil
                       ((region :initarg :|region| :type
                         (common-lisp:or awsregion common-lisp:null) :accessor
                         %ground-station-data-region :initform common-lisp:nil)
                        (ground-station-name :initarg :|groundStationName|
                         :type
                         (common-lisp:or ground-station-name common-lisp:null)
                         :accessor %ground-station-data-ground-station-name
                         :initform common-lisp:nil)
                        (ground-station-id :initarg :|groundStationId| :type
                         (common-lisp:or ground-station-name common-lisp:null)
                         :accessor %ground-station-data-ground-station-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ground-station-data 'make-ground-station-data))
 (common-lisp:defun make-ground-station-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key region ground-station-name
                     ground-station-id)
   (common-lisp:apply #'common-lisp:make-instance 'ground-station-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ground-station-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ground-station-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station-id))
      (common-lisp:list
       (common-lisp:cons "groundStationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station-name))
      (common-lisp:list
       (common-lisp:cons "groundStationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ground-station-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ground-station-id-list ()
   '(trivial-types:proper-list ground-station-name))
 (common-lisp:defun |make-ground-station-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ground-station-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ground-station-list ()
   '(trivial-types:proper-list ground-station-data))
 (common-lisp:defun |make-ground-station-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ground-station-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ground-station-name () 'common-lisp:string)
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass integer-range common-lisp:nil
                       ((minimum :initarg :|minimum| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %integer-range-minimum :initform
                         (common-lisp:error ":minimum is required"))
                        (maximum :initarg :|maximum| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %integer-range-maximum :initform
                         (common-lisp:error ":maximum is required"))))
 (common-lisp:export (common-lisp:list 'integer-range 'make-integer-range))
 (common-lisp:defun make-integer-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minimum maximum)
   (common-lisp:apply #'common-lisp:make-instance 'integer-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input integer-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input integer-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input integer-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (groundstation-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-exception-message)
      (parameter-name :initarg :|parameterName| :initform common-lisp:nil
       :reader invalid-parameter-exception-parameter-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message
                    'invalid-parameter-exception-parameter-name)))
(common-lisp:progn
 (common-lisp:deftype ip-address-list ()
   '(trivial-types:proper-list ip-v4address))
 (common-lisp:defun |make-ip-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-v4address))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ip-v4address () 'common-lisp:string)
(common-lisp:deftype json-string () 'common-lisp:string)
(common-lisp:deftype key-alias-arn () 'common-lisp:string)
(common-lisp:deftype key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kms-key common-lisp:nil
                       ((kms-key-arn :initarg :|kmsKeyArn| :type
                         (common-lisp:or key-arn common-lisp:null) :accessor
                         %kms-key-kms-key-arn :initform common-lisp:nil)
                        (kms-alias-arn :initarg :|kmsAliasArn| :type
                         (common-lisp:or key-alias-arn common-lisp:null)
                         :accessor %kms-key-kms-alias-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'kms-key 'make-kms-key))
 (common-lisp:defun make-kms-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-arn kms-alias-arn)
   (common-lisp:apply #'common-lisp:make-instance 'kms-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kms-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kms-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-alias-arn))
      (common-lisp:list
       (common-lisp:cons "kmsAliasArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kms-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configs-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-configs-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-configs-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-configs-request 'make-list-configs-request))
 (common-lisp:defun make-list-configs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-configs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-configs-response-next-token :initform
                         common-lisp:nil)
                        (config-list :initarg :|configList| :type
                         (common-lisp:or config-list common-lisp:null)
                         :accessor %list-configs-response-config-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-configs-response 'make-list-configs-response))
 (common-lisp:defun make-list-configs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token config-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-configs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-list))
      (common-lisp:list
       (common-lisp:cons "configList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-contacts-request common-lisp:nil
                       ((status-list :initarg :|statusList| :type
                         (common-lisp:or status-list common-lisp:null)
                         :accessor %list-contacts-request-status-list :initform
                         (common-lisp:error ":statuslist is required"))
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-contacts-request-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (satellite-arn :initarg :|satelliteArn| :type
                         (common-lisp:or |satelliteArn| common-lisp:null)
                         :accessor %list-contacts-request-satellite-arn
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-contacts-request-next-token :initform
                         common-lisp:nil)
                        (mission-profile-arn :initarg :|missionProfileArn|
                         :type
                         (common-lisp:or mission-profile-arn common-lisp:null)
                         :accessor %list-contacts-request-mission-profile-arn
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-contacts-request-max-results :initform
                         common-lisp:nil)
                        (ground-station :initarg :|groundStation| :type
                         (common-lisp:or ground-station-name common-lisp:null)
                         :accessor %list-contacts-request-ground-station
                         :initform common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-contacts-request-end-time :initform
                         (common-lisp:error ":endtime is required"))))
 (common-lisp:export
  (common-lisp:list 'list-contacts-request 'make-list-contacts-request))
 (common-lisp:defun make-list-contacts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-list start-time satellite-arn
                     next-token mission-profile-arn max-results ground-station
                     end-time)
   (common-lisp:apply #'common-lisp:make-instance 'list-contacts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station))
      (common-lisp:list
       (common-lisp:cons "groundStation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-list))
      (common-lisp:list
       (common-lisp:cons "statusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-contacts-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-contacts-response-next-token :initform
                         common-lisp:nil)
                        (contact-list :initarg :|contactList| :type
                         (common-lisp:or contact-list common-lisp:null)
                         :accessor %list-contacts-response-contact-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-contacts-response 'make-list-contacts-response))
 (common-lisp:defun make-list-contacts-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token contact-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-contacts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-list))
      (common-lisp:list
       (common-lisp:cons "contactList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contacts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataflow-endpoint-groups-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-dataflow-endpoint-groups-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor
                         %list-dataflow-endpoint-groups-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-dataflow-endpoint-groups-request
                    'make-list-dataflow-endpoint-groups-request))
 (common-lisp:defun make-list-dataflow-endpoint-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dataflow-endpoint-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dataflow-endpoint-groups-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-dataflow-endpoint-groups-response-next-token
                         :initform common-lisp:nil)
                        (dataflow-endpoint-group-list :initarg
                         :|dataflowEndpointGroupList| :type
                         (common-lisp:or dataflow-endpoint-group-list
                                         common-lisp:null)
                         :accessor
                         %list-dataflow-endpoint-groups-response-dataflow-endpoint-group-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-dataflow-endpoint-groups-response
                    'make-list-dataflow-endpoint-groups-response))
 (common-lisp:defun make-list-dataflow-endpoint-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token dataflow-endpoint-group-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-dataflow-endpoint-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-endpoint-group-list))
      (common-lisp:list
       (common-lisp:cons "dataflowEndpointGroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dataflow-endpoint-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ephemerides-request common-lisp:nil
                       ((status-list :initarg :|statusList| :type
                         (common-lisp:or ephemeris-status-list
                                         common-lisp:null)
                         :accessor %list-ephemerides-request-status-list
                         :initform common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-ephemerides-request-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (satellite-id :initarg :|satelliteId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %list-ephemerides-request-satellite-id :initform
                         (common-lisp:error ":satelliteid is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-ephemerides-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-ephemerides-request-max-results
                         :initform common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-ephemerides-request-end-time :initform
                         (common-lisp:error ":endtime is required"))))
 (common-lisp:export
  (common-lisp:list 'list-ephemerides-request 'make-list-ephemerides-request))
 (common-lisp:defun make-list-ephemerides-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-list start-time satellite-id
                     next-token max-results end-time)
   (common-lisp:apply #'common-lisp:make-instance 'list-ephemerides-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-id))
      (common-lisp:list
       (common-lisp:cons "satelliteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-list))
      (common-lisp:list
       (common-lisp:cons "statusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ephemerides-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-ephemerides-response-next-token
                         :initform common-lisp:nil)
                        (ephemerides :initarg :|ephemerides| :type
                         (common-lisp:or ephemerides-list common-lisp:null)
                         :accessor %list-ephemerides-response-ephemerides
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ephemerides-response
                    'make-list-ephemerides-response))
 (common-lisp:defun make-list-ephemerides-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token ephemerides)
   (common-lisp:apply #'common-lisp:make-instance 'list-ephemerides-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ephemerides))
      (common-lisp:list
       (common-lisp:cons "ephemerides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ephemerides-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ground-stations-request common-lisp:nil
                       ((satellite-id :initarg :|satelliteId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %list-ground-stations-request-satellite-id :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-ground-stations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-ground-stations-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ground-stations-request
                    'make-list-ground-stations-request))
 (common-lisp:defun make-list-ground-stations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key satellite-id next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-ground-stations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ground-stations-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-ground-stations-response-next-token
                         :initform common-lisp:nil)
                        (ground-station-list :initarg :|groundStationList|
                         :type
                         (common-lisp:or ground-station-list common-lisp:null)
                         :accessor
                         %list-ground-stations-response-ground-station-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ground-stations-response
                    'make-list-ground-stations-response))
 (common-lisp:defun make-list-ground-stations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token ground-station-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-ground-stations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station-list))
      (common-lisp:list
       (common-lisp:cons "groundStationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ground-stations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mission-profiles-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-mission-profiles-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-mission-profiles-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-mission-profiles-request
                    'make-list-mission-profiles-request))
 (common-lisp:defun make-list-mission-profiles-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mission-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mission-profiles-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-mission-profiles-response-next-token
                         :initform common-lisp:nil)
                        (mission-profile-list :initarg :|missionProfileList|
                         :type
                         (common-lisp:or mission-profile-list common-lisp:null)
                         :accessor
                         %list-mission-profiles-response-mission-profile-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-mission-profiles-response
                    'make-list-mission-profiles-response))
 (common-lisp:defun make-list-mission-profiles-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token mission-profile-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-mission-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mission-profile-list))
      (common-lisp:list
       (common-lisp:cons "missionProfileList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mission-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-satellites-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-satellites-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or pagination-max-results
                                         common-lisp:null)
                         :accessor %list-satellites-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-satellites-request 'make-list-satellites-request))
 (common-lisp:defun make-list-satellites-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-satellites-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-satellites-response common-lisp:nil
                       ((satellites :initarg :|satellites| :type
                         (common-lisp:or satellite-list common-lisp:null)
                         :accessor %list-satellites-response-satellites
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-satellites-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-satellites-response 'make-list-satellites-response))
 (common-lisp:defun make-list-satellites-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key satellites next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-satellites-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellites))
      (common-lisp:list
       (common-lisp:cons "satellites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-satellites-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or any-arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype mission-profile-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mission-profile-id-response common-lisp:nil
                       ((mission-profile-id :initarg :|missionProfileId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %mission-profile-id-response-mission-profile-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mission-profile-id-response
                    'make-mission-profile-id-response))
 (common-lisp:defun make-mission-profile-id-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mission-profile-id)
   (common-lisp:apply #'common-lisp:make-instance 'mission-profile-id-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-id-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-id-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-id))
      (common-lisp:list
       (common-lisp:cons "missionProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-id-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mission-profile-list ()
   '(trivial-types:proper-list mission-profile-list-item))
 (common-lisp:defun |make-mission-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            mission-profile-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass mission-profile-list-item common-lisp:nil
                       ((region :initarg :|region| :type
                         (common-lisp:or awsregion common-lisp:null) :accessor
                         %mission-profile-list-item-region :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %mission-profile-list-item-name :initform
                         common-lisp:nil)
                        (mission-profile-id :initarg :|missionProfileId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %mission-profile-list-item-mission-profile-id
                         :initform common-lisp:nil)
                        (mission-profile-arn :initarg :|missionProfileArn|
                         :type
                         (common-lisp:or mission-profile-arn common-lisp:null)
                         :accessor
                         %mission-profile-list-item-mission-profile-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mission-profile-list-item
                    'make-mission-profile-list-item))
 (common-lisp:defun make-mission-profile-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key region name mission-profile-id
                     mission-profile-arn)
   (common-lisp:apply #'common-lisp:make-instance 'mission-profile-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-id))
      (common-lisp:list
       (common-lisp:cons "missionProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mission-profile-list-item))
   common-lisp:nil))
(common-lisp:deftype month () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass oemephemeris common-lisp:nil
                       ((s3object :initarg :|s3Object| :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         %oemephemeris-s3object :initform common-lisp:nil)
                        (oem-data :initarg :|oemData| :type
                         (common-lisp:or unbounded-string common-lisp:null)
                         :accessor %oemephemeris-oem-data :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'oemephemeris 'make-oemephemeris))
 (common-lisp:defun make-oemephemeris
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3object oem-data)
   (common-lisp:apply #'common-lisp:make-instance 'oemephemeris
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oemephemeris))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oemephemeris))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oem-data))
      (common-lisp:list
       (common-lisp:cons "oemData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "s3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oemephemeris))
   common-lisp:nil))
(common-lisp:deftype pagination-max-results () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype polarization () 'common-lisp:string)
(common-lisp:deftype positive-duration-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass ranged-connection-details common-lisp:nil
                       ((socket-address :initarg :|socketAddress| :type
                         (common-lisp:or ranged-socket-address
                                         common-lisp:null)
                         :accessor %ranged-connection-details-socket-address
                         :initform
                         (common-lisp:error ":socketaddress is required"))
                        (mtu :initarg :|mtu| :type
                         (common-lisp:or ranged-connection-details-mtu-integer
                                         common-lisp:null)
                         :accessor %ranged-connection-details-mtu :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ranged-connection-details
                    'make-ranged-connection-details))
 (common-lisp:defun make-ranged-connection-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key socket-address mtu)
   (common-lisp:apply #'common-lisp:make-instance 'ranged-connection-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ranged-connection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ranged-connection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mtu))
      (common-lisp:list
       (common-lisp:cons "mtu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'socket-address))
      (common-lisp:list
       (common-lisp:cons "socketAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ranged-connection-details))
   common-lisp:nil))
(common-lisp:deftype ranged-connection-details-mtu-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass ranged-socket-address common-lisp:nil
                       ((port-range :initarg :|portRange| :type
                         (common-lisp:or integer-range common-lisp:null)
                         :accessor %ranged-socket-address-port-range :initform
                         (common-lisp:error ":portrange is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or ip-v4address common-lisp:null)
                         :accessor %ranged-socket-address-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'ranged-socket-address 'make-ranged-socket-address))
 (common-lisp:defun make-ranged-socket-address
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port-range name)
   (common-lisp:apply #'common-lisp:make-instance 'ranged-socket-address
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ranged-socket-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ranged-socket-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-range))
      (common-lisp:list
       (common-lisp:cons "portRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ranged-socket-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-agent-request common-lisp:nil
                       ((discovery-data :initarg :|discoveryData| :type
                         (common-lisp:or discovery-data common-lisp:null)
                         :accessor %register-agent-request-discovery-data
                         :initform
                         (common-lisp:error ":discoverydata is required"))
                        (agent-details :initarg :|agentDetails| :type
                         (common-lisp:or agent-details common-lisp:null)
                         :accessor %register-agent-request-agent-details
                         :initform
                         (common-lisp:error ":agentdetails is required"))))
 (common-lisp:export
  (common-lisp:list 'register-agent-request 'make-register-agent-request))
 (common-lisp:defun make-register-agent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key discovery-data agent-details)
   (common-lisp:apply #'common-lisp:make-instance 'register-agent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-details))
      (common-lisp:list
       (common-lisp:cons "agentDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-data))
      (common-lisp:list
       (common-lisp:cons "discoveryData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-agent-response common-lisp:nil
                       ((agent-id :initarg :|agentId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %register-agent-response-agent-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-agent-response 'make-register-agent-response))
 (common-lisp:defun make-register-agent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key agent-id)
   (common-lisp:apply #'common-lisp:make-instance 'register-agent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-agent-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reserve-contact-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %reserve-contact-request-tags :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %reserve-contact-request-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (satellite-arn :initarg :|satelliteArn| :type
                         (common-lisp:or |satelliteArn| common-lisp:null)
                         :accessor %reserve-contact-request-satellite-arn
                         :initform
                         (common-lisp:error ":satellitearn is required"))
                        (mission-profile-arn :initarg :|missionProfileArn|
                         :type
                         (common-lisp:or mission-profile-arn common-lisp:null)
                         :accessor %reserve-contact-request-mission-profile-arn
                         :initform
                         (common-lisp:error ":missionprofilearn is required"))
                        (ground-station :initarg :|groundStation| :type
                         (common-lisp:or ground-station-name common-lisp:null)
                         :accessor %reserve-contact-request-ground-station
                         :initform
                         (common-lisp:error ":groundstation is required"))
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %reserve-contact-request-end-time :initform
                         (common-lisp:error ":endtime is required"))))
 (common-lisp:export
  (common-lisp:list 'reserve-contact-request 'make-reserve-contact-request))
 (common-lisp:defun make-reserve-contact-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags start-time satellite-arn
                     mission-profile-arn ground-station end-time)
   (common-lisp:apply #'common-lisp:make-instance 'reserve-contact-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserve-contact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserve-contact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-station))
      (common-lisp:list
       (common-lisp:cons "groundStation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mission-profile-arn))
      (common-lisp:list
       (common-lisp:cons "missionProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserve-contact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (groundstation-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)
      (parameter-name :initarg :|parameterName| :initform common-lisp:nil
       :reader resource-limit-exceeded-exception-parameter-name)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-message
                    'resource-limit-exceeded-exception-parameter-name)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (groundstation-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3object common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or s3version-id common-lisp:null)
                         :accessor %s3object-version :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or s3object-key common-lisp:null)
                         :accessor %s3object-key :initform common-lisp:nil)
                        (bucket :initarg :|bucket| :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %s3object-bucket :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defun make-s3object
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version key bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3object
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object))
   common-lisp:nil))
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3recording-config common-lisp:nil
                       ((role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %s3recording-config-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (prefix :initarg :|prefix| :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor %s3recording-config-prefix :initform
                         common-lisp:nil)
                        (bucket-arn :initarg :|bucketArn| :type
                         (common-lisp:or bucket-arn common-lisp:null) :accessor
                         %s3recording-config-bucket-arn :initform
                         (common-lisp:error ":bucketarn is required"))))
 (common-lisp:export
  (common-lisp:list 's3recording-config 'make-s3recording-config))
 (common-lisp:defun make-s3recording-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn prefix bucket-arn)
   (common-lisp:apply #'common-lisp:make-instance 's3recording-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3recording-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3recording-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3recording-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3recording-details common-lisp:nil
                       ((key-template :initarg :|keyTemplate| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %s3recording-details-key-template :initform
                         common-lisp:nil)
                        (bucket-arn :initarg :|bucketArn| :type
                         (common-lisp:or bucket-arn common-lisp:null) :accessor
                         %s3recording-details-bucket-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3recording-details 'make-s3recording-details))
 (common-lisp:defun make-s3recording-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key-template bucket-arn)
   (common-lisp:apply #'common-lisp:make-instance 's3recording-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3recording-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3recording-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-arn))
      (common-lisp:list
       (common-lisp:cons "bucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-template))
      (common-lisp:list
       (common-lisp:cons "keyTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3recording-details))
   common-lisp:nil))
(common-lisp:deftype s3version-id () 'common-lisp:string)
(common-lisp:deftype safe-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype satellite-list ()
   '(trivial-types:proper-list satellite-list-item))
 (common-lisp:defun |make-satellite-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list satellite-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass satellite-list-item common-lisp:nil
                       ((satellite-id :initarg :|satelliteId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %satellite-list-item-satellite-id :initform
                         common-lisp:nil)
                        (satellite-arn :initarg :|satelliteArn| :type
                         (common-lisp:or |satelliteArn| common-lisp:null)
                         :accessor %satellite-list-item-satellite-arn :initform
                         common-lisp:nil)
                        (norad-satellite-id :initarg :|noradSatelliteID| :type
                         (common-lisp:or |noradSatelliteID| common-lisp:null)
                         :accessor %satellite-list-item-norad-satellite-id
                         :initform common-lisp:nil)
                        (ground-stations :initarg :|groundStations| :type
                         (common-lisp:or ground-station-id-list
                                         common-lisp:null)
                         :accessor %satellite-list-item-ground-stations
                         :initform common-lisp:nil)
                        (current-ephemeris :initarg :|currentEphemeris| :type
                         (common-lisp:or ephemeris-meta-data common-lisp:null)
                         :accessor %satellite-list-item-current-ephemeris
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'satellite-list-item 'make-satellite-list-item))
 (common-lisp:defun make-satellite-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key satellite-id satellite-arn
                     norad-satellite-id ground-stations current-ephemeris)
   (common-lisp:apply #'common-lisp:make-instance 'satellite-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input satellite-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input satellite-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-ephemeris))
      (common-lisp:list
       (common-lisp:cons "currentEphemeris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ground-stations))
      (common-lisp:list
       (common-lisp:cons "groundStations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'norad-satellite-id))
      (common-lisp:list
       (common-lisp:cons "noradSatelliteID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-arn))
      (common-lisp:list
       (common-lisp:cons "satelliteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'satellite-id))
      (common-lisp:list
       (common-lisp:cons "satelliteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input satellite-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass security-details common-lisp:nil
                       ((subnet-ids :initarg :|subnetIds| :type
                         (common-lisp:or subnet-list common-lisp:null)
                         :accessor %security-details-subnet-ids :initform
                         (common-lisp:error ":subnetids is required"))
                        (security-group-ids :initarg :|securityGroupIds| :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor %security-details-security-group-ids
                         :initform
                         (common-lisp:error ":securitygroupids is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %security-details-role-arn :initform
                         (common-lisp:error ":rolearn is required"))))
 (common-lisp:export
  (common-lisp:list 'security-details 'make-security-details))
 (common-lisp:defun make-security-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-ids security-group-ids role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'security-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype signature-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-signature-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass socket-address common-lisp:nil
                       ((port :initarg :|port| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %socket-address-port :initform
                         (common-lisp:error ":port is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %socket-address-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'socket-address 'make-socket-address))
 (common-lisp:defun make-socket-address
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key port name)
   (common-lisp:apply #'common-lisp:make-instance 'socket-address
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input socket-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input socket-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input socket-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source common-lisp:nil
                       ((dataflow-source-region :initarg
                         :|dataflowSourceRegion| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %source-dataflow-source-region :initform
                         common-lisp:nil)
                        (config-type :initarg :|configType| :type
                         (common-lisp:or config-capability-type
                                         common-lisp:null)
                         :accessor %source-config-type :initform
                         common-lisp:nil)
                        (config-id :initarg :|configId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %source-config-id :initform common-lisp:nil)
                        (config-details :initarg :|configDetails| :type
                         (common-lisp:or config-details common-lisp:null)
                         :accessor %source-config-details :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'source 'make-source))
 (common-lisp:defun make-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataflow-source-region config-type
                     config-id config-details)
   (common-lisp:apply #'common-lisp:make-instance 'source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-details))
      (common-lisp:list
       (common-lisp:cons "configDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-id))
      (common-lisp:list
       (common-lisp:cons "configId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-type))
      (common-lisp:list
       (common-lisp:cons "configType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataflow-source-region))
      (common-lisp:list
       (common-lisp:cons "dataflowSourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass spectrum-config common-lisp:nil
                       ((polarization :initarg :|polarization| :type
                         (common-lisp:or polarization common-lisp:null)
                         :accessor %spectrum-config-polarization :initform
                         common-lisp:nil)
                        (center-frequency :initarg :|centerFrequency| :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         %spectrum-config-center-frequency :initform
                         (common-lisp:error ":centerfrequency is required"))
                        (bandwidth :initarg :|bandwidth| :type
                         (common-lisp:or frequency-bandwidth common-lisp:null)
                         :accessor %spectrum-config-bandwidth :initform
                         (common-lisp:error ":bandwidth is required"))))
 (common-lisp:export (common-lisp:list 'spectrum-config 'make-spectrum-config))
 (common-lisp:defun make-spectrum-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key polarization center-frequency bandwidth)
   (common-lisp:apply #'common-lisp:make-instance 'spectrum-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spectrum-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spectrum-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'center-frequency))
      (common-lisp:list
       (common-lisp:cons "centerFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polarization))
      (common-lisp:list
       (common-lisp:cons "polarization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spectrum-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype status-list ()
   '(trivial-types:proper-list contact-status))
 (common-lisp:defun |make-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-subnet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tledata common-lisp:nil
                       ((valid-time-range :initarg :|validTimeRange| :type
                         (common-lisp:or time-range common-lisp:null) :accessor
                         %tledata-valid-time-range :initform
                         (common-lisp:error ":validtimerange is required"))
                        (tle-line2 :initarg :|tleLine2| :type
                         (common-lisp:or tle-line-two common-lisp:null)
                         :accessor %tledata-tle-line2 :initform
                         (common-lisp:error ":tleline2 is required"))
                        (tle-line1 :initarg :|tleLine1| :type
                         (common-lisp:or tle-line-one common-lisp:null)
                         :accessor %tledata-tle-line1 :initform
                         (common-lisp:error ":tleline1 is required"))))
 (common-lisp:export (common-lisp:list 'tledata 'make-tledata))
 (common-lisp:defun make-tledata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key valid-time-range tle-line2 tle-line1)
   (common-lisp:apply #'common-lisp:make-instance 'tledata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tledata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tledata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tle-line1))
      (common-lisp:list
       (common-lisp:cons "tleLine1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tle-line2))
      (common-lisp:list
       (common-lisp:cons "tleLine2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-time-range))
      (common-lisp:list
       (common-lisp:cons "validTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tledata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tledata-list () '(trivial-types:proper-list tledata))
 (common-lisp:defun |make-tledata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tledata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tleephemeris common-lisp:nil
                       ((tle-data :initarg :|tleData| :type
                         (common-lisp:or tledata-list common-lisp:null)
                         :accessor %tleephemeris-tle-data :initform
                         common-lisp:nil)
                        (s3object :initarg :|s3Object| :type
                         (common-lisp:or s3object common-lisp:null) :accessor
                         %tleephemeris-s3object :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tleephemeris 'make-tleephemeris))
 (common-lisp:defun make-tleephemeris
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tle-data s3object)
   (common-lisp:apply #'common-lisp:make-instance 'tleephemeris
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tleephemeris))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tleephemeris))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object))
      (common-lisp:list
       (common-lisp:cons "s3Object"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tle-data))
      (common-lisp:list
       (common-lisp:cons "tleData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tleephemeris))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-keys ()
   '(trivial-types:proper-list unbounded-string))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unbounded-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or any-arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass time-range common-lisp:nil
                       ((start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %time-range-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %time-range-end-time :initform
                         (common-lisp:error ":endtime is required"))))
 (common-lisp:export (common-lisp:list 'time-range 'make-time-range))
 (common-lisp:defun make-time-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-time end-time)
   (common-lisp:apply #'common-lisp:make-instance 'time-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype tle-line-one () 'common-lisp:string)
(common-lisp:deftype tle-line-two () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tracking-config common-lisp:nil
                       ((autotrack :initarg :|autotrack| :type
                         (common-lisp:or criticality common-lisp:null)
                         :accessor %tracking-config-autotrack :initform
                         (common-lisp:error ":autotrack is required"))))
 (common-lisp:export (common-lisp:list 'tracking-config 'make-tracking-config))
 (common-lisp:defun make-tracking-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key autotrack)
   (common-lisp:apply #'common-lisp:make-instance 'tracking-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tracking-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tracking-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'autotrack))
      (common-lisp:list
       (common-lisp:cons "autotrack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tracking-config))
   common-lisp:nil))
(common-lisp:deftype unbounded-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or any-arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-agent-status-request common-lisp:nil
                       ((task-id :initarg :|taskId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-agent-status-request-task-id :initform
                         (common-lisp:error ":taskid is required"))
                        (component-statuses :initarg :|componentStatuses| :type
                         (common-lisp:or component-status-list
                                         common-lisp:null)
                         :accessor
                         %update-agent-status-request-component-statuses
                         :initform
                         (common-lisp:error ":componentstatuses is required"))
                        (aggregate-status :initarg :|aggregateStatus| :type
                         (common-lisp:or aggregate-status common-lisp:null)
                         :accessor
                         %update-agent-status-request-aggregate-status
                         :initform
                         (common-lisp:error ":aggregatestatus is required"))
                        (agent-id :initarg :|agentId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-agent-status-request-agent-id :initform
                         (common-lisp:error ":agentid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-agent-status-request
                    'make-update-agent-status-request))
 (common-lisp:defun make-update-agent-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-id component-statuses
                     aggregate-status agent-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-agent-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-status))
      (common-lisp:list
       (common-lisp:cons "aggregateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-statuses))
      (common-lisp:list
       (common-lisp:cons "componentStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "taskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-agent-status-response common-lisp:nil
                       ((agent-id :initarg :|agentId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-agent-status-response-agent-id :initform
                         (common-lisp:error ":agentid is required"))))
 (common-lisp:export
  (common-lisp:list 'update-agent-status-response
                    'make-update-agent-status-response))
 (common-lisp:defun make-update-agent-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key agent-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-agent-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agent-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-config-request common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %update-config-request-name :initform
                         (common-lisp:error ":name is required"))
                        (config-type :initarg :|configType| :type
                         (common-lisp:or config-capability-type
                                         common-lisp:null)
                         :accessor %update-config-request-config-type :initform
                         (common-lisp:error ":configtype is required"))
                        (config-id :initarg :|configId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-config-request-config-id :initform
                         (common-lisp:error ":configid is required"))
                        (config-data :initarg :|configData| :type
                         (common-lisp:or config-type-data common-lisp:null)
                         :accessor %update-config-request-config-data :initform
                         (common-lisp:error ":configdata is required"))))
 (common-lisp:export
  (common-lisp:list 'update-config-request 'make-update-config-request))
 (common-lisp:defun make-update-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name config-type config-id config-data)
   (common-lisp:apply #'common-lisp:make-instance 'update-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-data))
      (common-lisp:list
       (common-lisp:cons "configData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ephemeris-request common-lisp:nil
                       ((priority :initarg :|priority| :type
                         (common-lisp:or ephemeris-priority common-lisp:null)
                         :accessor %update-ephemeris-request-priority :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %update-ephemeris-request-name :initform
                         common-lisp:nil)
                        (ephemeris-id :initarg :|ephemerisId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-ephemeris-request-ephemeris-id :initform
                         (common-lisp:error ":ephemerisid is required"))
                        (enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-ephemeris-request-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'update-ephemeris-request 'make-update-ephemeris-request))
 (common-lisp:defun make-update-ephemeris-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key priority name ephemeris-id enabled)
   (common-lisp:apply #'common-lisp:make-instance 'update-ephemeris-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ephemeris-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ephemeris-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ephemeris-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mission-profile-request common-lisp:nil
                       ((tracking-config-arn :initarg :|trackingConfigArn|
                         :type (common-lisp:or config-arn common-lisp:null)
                         :accessor
                         %update-mission-profile-request-tracking-config-arn
                         :initform common-lisp:nil)
                        (streams-kms-role :initarg :|streamsKmsRole| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-mission-profile-request-streams-kms-role
                         :initform common-lisp:nil)
                        (streams-kms-key :initarg :|streamsKmsKey| :type
                         (common-lisp:or kms-key common-lisp:null) :accessor
                         %update-mission-profile-request-streams-kms-key
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or safe-name common-lisp:null) :accessor
                         %update-mission-profile-request-name :initform
                         common-lisp:nil)
                        (mission-profile-id :initarg :|missionProfileId| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-mission-profile-request-mission-profile-id
                         :initform
                         (common-lisp:error ":missionprofileid is required"))
                        (minimum-viable-contact-duration-seconds :initarg
                         :|minimumViableContactDurationSeconds| :type
                         (common-lisp:or positive-duration-in-seconds
                                         common-lisp:null)
                         :accessor
                         %update-mission-profile-request-minimum-viable-contact-duration-seconds
                         :initform common-lisp:nil)
                        (dataflow-edges :initarg :|dataflowEdges| :type
                         (common-lisp:or dataflow-edge-list common-lisp:null)
                         :accessor
                         %update-mission-profile-request-dataflow-edges
                         :initform common-lisp:nil)
                        (contact-pre-pass-duration-seconds :initarg
                         :|contactPrePassDurationSeconds| :type
                         (common-lisp:or duration-in-seconds common-lisp:null)
                         :accessor
                         %update-mission-profile-request-contact-pre-pass-duration-seconds
                         :initform common-lisp:nil)
                        (contact-post-pass-duration-seconds :initarg
                         :|contactPostPassDurationSeconds| :type
                         (common-lisp:or duration-in-seconds common-lisp:null)
                         :accessor
                         %update-mission-profile-request-contact-post-pass-duration-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-mission-profile-request
                    'make-update-mission-profile-request))
 (common-lisp:defun make-update-mission-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tracking-config-arn streams-kms-role
                     streams-kms-key name mission-profile-id
                     minimum-viable-contact-duration-seconds dataflow-edges
                     contact-pre-pass-duration-seconds
                     contact-post-pass-duration-seconds)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-mission-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mission-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mission-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-post-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPostPassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'contact-pre-pass-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "contactPrePassDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataflow-edges))
      (common-lisp:list
       (common-lisp:cons "dataflowEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-viable-contact-duration-seconds))
      (common-lisp:list
       (common-lisp:cons "minimumViableContactDurationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-key))
      (common-lisp:list
       (common-lisp:cons "streamsKmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams-kms-role))
      (common-lisp:list
       (common-lisp:cons "streamsKmsRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracking-config-arn))
      (common-lisp:list
       (common-lisp:cons "trackingConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mission-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass uplink-echo-config common-lisp:nil
                       ((enabled :initarg :|enabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %uplink-echo-config-enabled :initform
                         (common-lisp:error ":enabled is required"))
                        (antenna-uplink-config-arn :initarg
                         :|antennaUplinkConfigArn| :type
                         (common-lisp:or config-arn common-lisp:null) :accessor
                         %uplink-echo-config-antenna-uplink-config-arn
                         :initform
                         (common-lisp:error
                          ":antennauplinkconfigarn is required"))))
 (common-lisp:export
  (common-lisp:list 'uplink-echo-config 'make-uplink-echo-config))
 (common-lisp:defun make-uplink-echo-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled antenna-uplink-config-arn)
   (common-lisp:apply #'common-lisp:make-instance 'uplink-echo-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input uplink-echo-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input uplink-echo-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'antenna-uplink-config-arn))
      (common-lisp:list
       (common-lisp:cons "antennaUplinkConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input uplink-echo-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass uplink-spectrum-config common-lisp:nil
                       ((polarization :initarg :|polarization| :type
                         (common-lisp:or polarization common-lisp:null)
                         :accessor %uplink-spectrum-config-polarization
                         :initform common-lisp:nil)
                        (center-frequency :initarg :|centerFrequency| :type
                         (common-lisp:or frequency common-lisp:null) :accessor
                         %uplink-spectrum-config-center-frequency :initform
                         (common-lisp:error ":centerfrequency is required"))))
 (common-lisp:export
  (common-lisp:list 'uplink-spectrum-config 'make-uplink-spectrum-config))
 (common-lisp:defun make-uplink-spectrum-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key polarization center-frequency)
   (common-lisp:apply #'common-lisp:make-instance 'uplink-spectrum-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          uplink-spectrum-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          uplink-spectrum-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'center-frequency))
      (common-lisp:list
       (common-lisp:cons "centerFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polarization))
      (common-lisp:list
       (common-lisp:cons "polarization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          uplink-spectrum-config))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:deftype version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype version-string-list ()
   '(trivial-types:proper-list version-string))
 (common-lisp:defun |make-version-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype year () 'common-lisp:integer)
(common-lisp:deftype |noradSatelliteID| () 'common-lisp:integer)
(common-lisp:deftype |satelliteArn| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id)
   (common-lisp:declare (common-lisp:ignorable contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-id))))
                                                        "CancelContact"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-contact))
(common-lisp:progn
 (common-lisp:defun create-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-data name tags)
   (common-lisp:declare (common-lisp:ignorable config-data name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/config"
                                                        "CreateConfig"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-config))
(common-lisp:progn
 (common-lisp:defun create-dataflow-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-post-pass-duration-seconds
                     contact-pre-pass-duration-seconds endpoint-details tags)
   (common-lisp:declare
    (common-lisp:ignorable contact-post-pass-duration-seconds
     contact-pre-pass-duration-seconds endpoint-details tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-dataflow-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/dataflowEndpointGroup"
                                                        "CreateDataflowEndpointGroup"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dataflow-endpoint-group))
(common-lisp:progn
 (common-lisp:defun create-ephemeris
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled ephemeris expiration-time
                     kms-key-arn name priority satellite-id tags)
   (common-lisp:declare
    (common-lisp:ignorable enabled ephemeris expiration-time kms-key-arn name
     priority satellite-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ephemeris-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ephemeris"
                                                        "CreateEphemeris"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-ephemeris))
(common-lisp:progn
 (common-lisp:defun create-mission-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-post-pass-duration-seconds
                     contact-pre-pass-duration-seconds dataflow-edges
                     minimum-viable-contact-duration-seconds name
                     streams-kms-key streams-kms-role tags tracking-config-arn)
   (common-lisp:declare
    (common-lisp:ignorable contact-post-pass-duration-seconds
     contact-pre-pass-duration-seconds dataflow-edges
     minimum-viable-contact-duration-seconds name streams-kms-key
     streams-kms-role tags tracking-config-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mission-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/missionprofile"
                                                        "CreateMissionProfile"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-mission-profile))
(common-lisp:progn
 (common-lisp:defun delete-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id config-type)
   (common-lisp:declare (common-lisp:ignorable config-id config-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/config/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-id))))
                                                        "DeleteConfig"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-config))
(common-lisp:progn
 (common-lisp:defun delete-dataflow-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataflow-endpoint-group-id)
   (common-lisp:declare (common-lisp:ignorable dataflow-endpoint-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-dataflow-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dataflowEndpointGroup/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataflow-endpoint-group-id))))
                                                        "DeleteDataflowEndpointGroup"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dataflow-endpoint-group))
(common-lisp:progn
 (common-lisp:defun delete-ephemeris
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ephemeris-id)
   (common-lisp:declare (common-lisp:ignorable ephemeris-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ephemeris-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ephemeris/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ephemeris-id))))
                                                        "DeleteEphemeris"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-ephemeris))
(common-lisp:progn
 (common-lisp:defun delete-mission-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mission-profile-id)
   (common-lisp:declare (common-lisp:ignorable mission-profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mission-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/missionprofile/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mission-profile-id))))
                                                        "DeleteMissionProfile"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-mission-profile))
(common-lisp:progn
 (common-lisp:defun describe-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-id)
   (common-lisp:declare (common-lisp:ignorable contact-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/contact/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'contact-id))))
                                                        "DescribeContact"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-contact))
(common-lisp:progn
 (common-lisp:defun describe-ephemeris
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ephemeris-id)
   (common-lisp:declare (common-lisp:ignorable ephemeris-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ephemeris-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ephemeris/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ephemeris-id))))
                                                        "DescribeEphemeris"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ephemeris))
(common-lisp:progn
 (common-lisp:defun get-agent-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id)
   (common-lisp:declare (common-lisp:ignorable agent-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-agent-configuration-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agent/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "GetAgentConfiguration"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-agent-configuration))
(common-lisp:progn
 (common-lisp:defun get-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-id config-type)
   (common-lisp:declare (common-lisp:ignorable config-id config-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/config/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-id))))
                                                        "GetConfig"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-config))
(common-lisp:progn
 (common-lisp:defun get-dataflow-endpoint-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataflow-endpoint-group-id)
   (common-lisp:declare (common-lisp:ignorable dataflow-endpoint-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-dataflow-endpoint-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dataflowEndpointGroup/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataflow-endpoint-group-id))))
                                                        "GetDataflowEndpointGroup"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-dataflow-endpoint-group))
(common-lisp:progn
 (common-lisp:defun get-minute-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key month year)
   (common-lisp:declare (common-lisp:ignorable month year))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-minute-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/minute-usage"
                                                        "GetMinuteUsage"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-minute-usage))
(common-lisp:progn
 (common-lisp:defun get-mission-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mission-profile-id)
   (common-lisp:declare (common-lisp:ignorable mission-profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mission-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/missionprofile/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mission-profile-id))))
                                                        "GetMissionProfile"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-mission-profile))
(common-lisp:progn
 (common-lisp:defun get-satellite
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key satellite-id)
   (common-lisp:declare (common-lisp:ignorable satellite-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-satellite-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/satellite/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'satellite-id))))
                                                        "GetSatellite"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-satellite))
(common-lisp:progn
 (common-lisp:defun list-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-configs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/config" "ListConfigs"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configs))
(common-lisp:progn
 (common-lisp:defun list-contacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time ground-station max-results
                     mission-profile-arn next-token satellite-arn start-time
                     status-list)
   (common-lisp:declare
    (common-lisp:ignorable end-time ground-station max-results
     mission-profile-arn next-token satellite-arn start-time status-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contacts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/contacts"
                                                        "ListContacts"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contacts))
(common-lisp:progn
 (common-lisp:defun list-dataflow-endpoint-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-dataflow-endpoint-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/dataflowEndpointGroup"
                                                        "ListDataflowEndpointGroups"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dataflow-endpoint-groups))
(common-lisp:progn
 (common-lisp:defun list-ephemerides
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time max-results next-token
                     satellite-id start-time status-list)
   (common-lisp:declare
    (common-lisp:ignorable end-time max-results next-token satellite-id
     start-time status-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ephemerides-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/ephemerides"
                                                        "ListEphemerides"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ephemerides))
(common-lisp:progn
 (common-lisp:defun list-ground-stations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token satellite-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token satellite-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ground-stations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/groundstation"
                                                        "ListGroundStations"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ground-stations))
(common-lisp:progn
 (common-lisp:defun list-mission-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mission-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/missionprofile"
                                                        "ListMissionProfiles"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-mission-profiles))
(common-lisp:progn
 (common-lisp:defun list-satellites
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-satellites-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/satellite"
                                                        "ListSatellites"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-satellites))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun register-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-details discovery-data)
   (common-lisp:declare (common-lisp:ignorable agent-details discovery-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/agent"
                                                        "RegisterAgent"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-agent))
(common-lisp:progn
 (common-lisp:defun reserve-contact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time ground-station
                     mission-profile-arn satellite-arn start-time tags)
   (common-lisp:declare
    (common-lisp:ignorable end-time ground-station mission-profile-arn
     satellite-arn start-time tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reserve-contact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/contact"
                                                        "ReserveContact"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reserve-contact))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-agent-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-id aggregate-status
                     component-statuses task-id)
   (common-lisp:declare
    (common-lisp:ignorable agent-id aggregate-status component-statuses
     task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-agent-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/agent/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'agent-id))))
                                                        "UpdateAgentStatus"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-agent-status))
(common-lisp:progn
 (common-lisp:defun update-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-data config-id config-type name)
   (common-lisp:declare
    (common-lisp:ignorable config-data config-id config-type name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/config/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-type))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'config-id))))
                                                        "UpdateConfig"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-config))
(common-lisp:progn
 (common-lisp:defun update-ephemeris
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled ephemeris-id name priority)
   (common-lisp:declare
    (common-lisp:ignorable enabled ephemeris-id name priority))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ephemeris-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ephemeris/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'ephemeris-id))))
                                                        "UpdateEphemeris"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ephemeris))
(common-lisp:progn
 (common-lisp:defun update-mission-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contact-post-pass-duration-seconds
                     contact-pre-pass-duration-seconds dataflow-edges
                     minimum-viable-contact-duration-seconds mission-profile-id
                     name streams-kms-key streams-kms-role tracking-config-arn)
   (common-lisp:declare
    (common-lisp:ignorable contact-post-pass-duration-seconds
     contact-pre-pass-duration-seconds dataflow-edges
     minimum-viable-contact-duration-seconds mission-profile-id name
     streams-kms-key streams-kms-role tracking-config-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mission-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'groundstation-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/missionprofile/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'mission-profile-id))))
                                                        "UpdateMissionProfile"
                                                        "2019-05-23"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-mission-profile))
