;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codeguru-reviewer/api
  (:use)
  (:nicknames #:aws/codeguru-reviewer)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codeguru-reviewer/api)
(common-lisp:progn
 (common-lisp:defclass codeguru-reviewer-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codeguru-reviewer"
                        :protocol :rest-json))
 (common-lisp:export 'codeguru-reviewer-request))
(common-lisp:progn
 (common-lisp:define-condition codeguru-reviewer-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codeguru-reviewer-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype analysis-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analysis-types ()
   '(trivial-types:proper-list analysis-type))
 (common-lisp:defun |make-analysis-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-repository-request common-lisp:nil
                       ((kmskey-details :initarg :kmskey-details :type
                         (common-lisp:or kmskey-details common-lisp:null)
                         :accessor %associate-repository-request-kmskey-details
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %associate-repository-request-tags :initform
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %associate-repository-request-client-request-token
                         :initform common-lisp:nil)
                        (repository :initarg :repository :type
                         (common-lisp:or repository common-lisp:null) :accessor
                         %associate-repository-request-repository :initform
                         (common-lisp:error ":repository is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-repository-request
                    'make-associate-repository-request))
 (common-lisp:defun make-associate-repository-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kmskey-details tags client-request-token
                     repository)
   (common-lisp:apply #'common-lisp:make-instance 'associate-repository-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "Repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-details))
      (common-lisp:list
       (common-lisp:cons "KMSKeyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-repository-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %associate-repository-response-tags :initform
                         common-lisp:nil)
                        (repository-association :initarg
                         :repository-association :type
                         (common-lisp:or repository-association
                                         common-lisp:null)
                         :accessor
                         %associate-repository-response-repository-association
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-repository-response
                    'make-associate-repository-response))
 (common-lisp:defun make-associate-repository-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags repository-association)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-repository-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-association))
      (common-lisp:list
       (common-lisp:cons "RepositoryAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-response))
   common-lisp:nil))
(common-lisp:deftype association-arn () 'common-lisp:string)
(common-lisp:deftype association-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass branch-diff-source-code-type common-lisp:nil
                       ((destination-branch-name :initarg
                         :destination-branch-name :type
                         (common-lisp:or branch-name common-lisp:null)
                         :accessor
                         %branch-diff-source-code-type-destination-branch-name
                         :initform
                         (common-lisp:error
                          ":destination-branch-name is required"))
                        (source-branch-name :initarg :source-branch-name :type
                         (common-lisp:or branch-name common-lisp:null)
                         :accessor
                         %branch-diff-source-code-type-source-branch-name
                         :initform
                         (common-lisp:error
                          ":source-branch-name is required"))))
 (common-lisp:export
  (common-lisp:list 'branch-diff-source-code-type
                    'make-branch-diff-source-code-type))
 (common-lisp:defun make-branch-diff-source-code-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-branch-name
                     source-branch-name)
   (common-lisp:apply #'common-lisp:make-instance 'branch-diff-source-code-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          branch-diff-source-code-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          branch-diff-source-code-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-branch-name))
      (common-lisp:list
       (common-lisp:cons "SourceBranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-branch-name))
      (common-lisp:list
       (common-lisp:cons "DestinationBranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          branch-diff-source-code-type))
   common-lisp:nil))
(common-lisp:deftype branch-name () 'common-lisp:string)
(common-lisp:deftype build-artifacts-object-key () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-artifacts common-lisp:nil
                       ((build-artifacts-object-key :initarg
                         :build-artifacts-object-key :type
                         (common-lisp:or build-artifacts-object-key
                                         common-lisp:null)
                         :accessor %code-artifacts-build-artifacts-object-key
                         :initform common-lisp:nil)
                        (source-code-artifacts-object-key :initarg
                         :source-code-artifacts-object-key :type
                         (common-lisp:or source-code-artifacts-object-key
                                         common-lisp:null)
                         :accessor
                         %code-artifacts-source-code-artifacts-object-key
                         :initform
                         (common-lisp:error
                          ":source-code-artifacts-object-key is required"))))
 (common-lisp:export (common-lisp:list 'code-artifacts 'make-code-artifacts))
 (common-lisp:defun make-code-artifacts
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key build-artifacts-object-key
                     source-code-artifacts-object-key)
   (common-lisp:apply #'common-lisp:make-instance 'code-artifacts
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-artifacts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-artifacts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-artifacts-object-key))
      (common-lisp:list
       (common-lisp:cons "SourceCodeArtifactsObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'build-artifacts-object-key))
      (common-lisp:list
       (common-lisp:cons "BuildArtifactsObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-artifacts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-commit-repository common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %code-commit-repository-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'code-commit-repository 'make-code-commit-repository))
 (common-lisp:defun make-code-commit-repository
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'code-commit-repository
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-commit-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-commit-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-commit-repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-review common-lisp:nil
                       ((config-file-state :initarg :config-file-state :type
                         (common-lisp:or config-file-state common-lisp:null)
                         :accessor %code-review-config-file-state :initform
                         common-lisp:nil)
                        (analysis-types :initarg :analysis-types :type
                         (common-lisp:or analysis-types common-lisp:null)
                         :accessor %code-review-analysis-types :initform
                         common-lisp:nil)
                        (metrics :initarg :metrics :type
                         (common-lisp:or metrics common-lisp:null) :accessor
                         %code-review-metrics :initform common-lisp:nil)
                        (association-arn :initarg :association-arn :type
                         (common-lisp:or association-arn common-lisp:null)
                         :accessor %code-review-association-arn :initform
                         common-lisp:nil)
                        (source-code-type :initarg :source-code-type :type
                         (common-lisp:or source-code-type common-lisp:null)
                         :accessor %code-review-source-code-type :initform
                         common-lisp:nil)
                        (pull-request-id :initarg :pull-request-id :type
                         (common-lisp:or pull-request-id common-lisp:null)
                         :accessor %code-review-pull-request-id :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %code-review-type :initform common-lisp:nil)
                        (last-updated-time-stamp :initarg
                         :last-updated-time-stamp :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %code-review-last-updated-time-stamp :initform
                         common-lisp:nil)
                        (created-time-stamp :initarg :created-time-stamp :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %code-review-created-time-stamp :initform
                         common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or state-reason common-lisp:null)
                         :accessor %code-review-state-reason :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or job-state common-lisp:null) :accessor
                         %code-review-state :initform common-lisp:nil)
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %code-review-provider-type :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %code-review-owner :initform common-lisp:nil)
                        (repository-name :initarg :repository-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %code-review-repository-name :initform
                         common-lisp:nil)
                        (code-review-arn :initarg :code-review-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %code-review-code-review-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %code-review-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'code-review 'make-code-review))
 (common-lisp:defun make-code-review
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key config-file-state analysis-types metrics
                     association-arn source-code-type pull-request-id type
                     last-updated-time-stamp created-time-stamp state-reason
                     state provider-type owner repository-name code-review-arn
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'code-review
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-review))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-review))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review-arn))
      (common-lisp:list
       (common-lisp:cons "CodeReviewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-time-stamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-request-id))
      (common-lisp:list
       (common-lisp:cons "PullRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-type))
      (common-lisp:list
       (common-lisp:cons "SourceCodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "AssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-types))
      (common-lisp:list
       (common-lisp:cons "AnalysisTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-file-state))
      (common-lisp:list
       (common-lisp:cons "ConfigFileState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-review))
   common-lisp:nil))
(common-lisp:deftype code-review-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype code-review-summaries ()
   '(trivial-types:proper-list code-review-summary))
 (common-lisp:defun |make-code-review-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-review-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass code-review-summary common-lisp:nil
                       ((source-code-type :initarg :source-code-type :type
                         (common-lisp:or source-code-type common-lisp:null)
                         :accessor %code-review-summary-source-code-type
                         :initform common-lisp:nil)
                        (metrics-summary :initarg :metrics-summary :type
                         (common-lisp:or metrics-summary common-lisp:null)
                         :accessor %code-review-summary-metrics-summary
                         :initform common-lisp:nil)
                        (pull-request-id :initarg :pull-request-id :type
                         (common-lisp:or pull-request-id common-lisp:null)
                         :accessor %code-review-summary-pull-request-id
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %code-review-summary-type :initform common-lisp:nil)
                        (last-updated-time-stamp :initarg
                         :last-updated-time-stamp :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %code-review-summary-last-updated-time-stamp :initform
                         common-lisp:nil)
                        (created-time-stamp :initarg :created-time-stamp :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %code-review-summary-created-time-stamp :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or job-state common-lisp:null) :accessor
                         %code-review-summary-state :initform common-lisp:nil)
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %code-review-summary-provider-type :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %code-review-summary-owner :initform common-lisp:nil)
                        (repository-name :initarg :repository-name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %code-review-summary-repository-name :initform
                         common-lisp:nil)
                        (code-review-arn :initarg :code-review-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %code-review-summary-code-review-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %code-review-summary-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'code-review-summary 'make-code-review-summary))
 (common-lisp:defun make-code-review-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-code-type metrics-summary
                     pull-request-id type last-updated-time-stamp
                     created-time-stamp state provider-type owner
                     repository-name code-review-arn name)
   (common-lisp:apply #'common-lisp:make-instance 'code-review-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-review-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-review-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review-arn))
      (common-lisp:list
       (common-lisp:cons "CodeReviewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-time-stamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-request-id))
      (common-lisp:list
       (common-lisp:cons "PullRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-summary))
      (common-lisp:list
       (common-lisp:cons "MetricsSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-type))
      (common-lisp:list
       (common-lisp:cons "SourceCodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-review-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-review-type common-lisp:nil
                       ((analysis-types :initarg :analysis-types :type
                         (common-lisp:or analysis-types common-lisp:null)
                         :accessor %code-review-type-analysis-types :initform
                         common-lisp:nil)
                        (repository-analysis :initarg :repository-analysis
                         :type
                         (common-lisp:or repository-analysis common-lisp:null)
                         :accessor %code-review-type-repository-analysis
                         :initform
                         (common-lisp:error
                          ":repository-analysis is required"))))
 (common-lisp:export
  (common-lisp:list 'code-review-type 'make-code-review-type))
 (common-lisp:defun make-code-review-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analysis-types repository-analysis)
   (common-lisp:apply #'common-lisp:make-instance 'code-review-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-review-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-review-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-analysis))
      (common-lisp:list
       (common-lisp:cons "RepositoryAnalysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-types))
      (common-lisp:list
       (common-lisp:cons "AnalysisTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-review-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass commit-diff-source-code-type common-lisp:nil
                       ((merge-base-commit :initarg :merge-base-commit :type
                         (common-lisp:or commit-id common-lisp:null) :accessor
                         %commit-diff-source-code-type-merge-base-commit
                         :initform common-lisp:nil)
                        (destination-commit :initarg :destination-commit :type
                         (common-lisp:or commit-id common-lisp:null) :accessor
                         %commit-diff-source-code-type-destination-commit
                         :initform common-lisp:nil)
                        (source-commit :initarg :source-commit :type
                         (common-lisp:or commit-id common-lisp:null) :accessor
                         %commit-diff-source-code-type-source-commit :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'commit-diff-source-code-type
                    'make-commit-diff-source-code-type))
 (common-lisp:defun make-commit-diff-source-code-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key merge-base-commit destination-commit
                     source-commit)
   (common-lisp:apply #'common-lisp:make-instance 'commit-diff-source-code-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-diff-source-code-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-diff-source-code-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-commit))
      (common-lisp:list
       (common-lisp:cons "SourceCommit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-commit))
      (common-lisp:list
       (common-lisp:cons "DestinationCommit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-base-commit))
      (common-lisp:list
       (common-lisp:cons "MergeBaseCommit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-diff-source-code-type))
   common-lisp:nil))
(common-lisp:deftype commit-id () 'common-lisp:string)
(common-lisp:deftype config-file-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype connection-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-code-review-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-code-review-request-client-request-token
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or code-review-type common-lisp:null)
                         :accessor %create-code-review-request-type :initform
                         (common-lisp:error ":type is required"))
                        (repository-association-arn :initarg
                         :repository-association-arn :type
                         (common-lisp:or association-arn common-lisp:null)
                         :accessor
                         %create-code-review-request-repository-association-arn
                         :initform
                         (common-lisp:error
                          ":repository-association-arn is required"))
                        (name :initarg :name :type
                         (common-lisp:or code-review-name common-lisp:null)
                         :accessor %create-code-review-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-code-review-request
                    'make-create-code-review-request))
 (common-lisp:defun make-create-code-review-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token type
                     repository-association-arn name)
   (common-lisp:apply #'common-lisp:make-instance 'create-code-review-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-association-arn))
      (common-lisp:list
       (common-lisp:cons "RepositoryAssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-code-review-response common-lisp:nil
                       ((code-review :initarg :code-review :type
                         (common-lisp:or code-review common-lisp:null)
                         :accessor %create-code-review-response-code-review
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-code-review-response
                    'make-create-code-review-response))
 (common-lisp:defun make-create-code-review-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-review)
   (common-lisp:apply #'common-lisp:make-instance 'create-code-review-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review))
      (common-lisp:list
       (common-lisp:cons "CodeReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-code-review-request common-lisp:nil
                       ((code-review-arn :initarg :code-review-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-code-review-request-code-review-arn
                         :initform
                         (common-lisp:error ":code-review-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-code-review-request
                    'make-describe-code-review-request))
 (common-lisp:defun make-describe-code-review-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-review-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-code-review-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-code-review-response common-lisp:nil
                       ((code-review :initarg :code-review :type
                         (common-lisp:or code-review common-lisp:null)
                         :accessor %describe-code-review-response-code-review
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-code-review-response
                    'make-describe-code-review-response))
 (common-lisp:defun make-describe-code-review-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-review)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-code-review-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review))
      (common-lisp:list
       (common-lisp:cons "CodeReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-recommendation-feedback-request common-lisp:nil
                       ((user-id :initarg :user-id :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %describe-recommendation-feedback-request-user-id
                         :initform common-lisp:nil)
                        (recommendation-id :initarg :recommendation-id :type
                         (common-lisp:or recommendation-id common-lisp:null)
                         :accessor
                         %describe-recommendation-feedback-request-recommendation-id
                         :initform
                         (common-lisp:error ":recommendation-id is required"))
                        (code-review-arn :initarg :code-review-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-recommendation-feedback-request-code-review-arn
                         :initform
                         (common-lisp:error ":code-review-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-recommendation-feedback-request
                    'make-describe-recommendation-feedback-request))
 (common-lisp:defun make-describe-recommendation-feedback-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-id recommendation-id
                     code-review-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-recommendation-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-recommendation-feedback-response
                       common-lisp:nil
                       ((recommendation-feedback :initarg
                         :recommendation-feedback :type
                         (common-lisp:or recommendation-feedback
                                         common-lisp:null)
                         :accessor
                         %describe-recommendation-feedback-response-recommendation-feedback
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-recommendation-feedback-response
                    'make-describe-recommendation-feedback-response))
 (common-lisp:defun make-describe-recommendation-feedback-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recommendation-feedback)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-recommendation-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-feedback))
      (common-lisp:list
       (common-lisp:cons "RecommendationFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-repository-association-request common-lisp:nil
                       ((association-arn :initarg :association-arn :type
                         (common-lisp:or association-arn common-lisp:null)
                         :accessor
                         %describe-repository-association-request-association-arn
                         :initform
                         (common-lisp:error ":association-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-repository-association-request
                    'make-describe-repository-association-request))
 (common-lisp:defun make-describe-repository-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-repository-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-repository-association-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %describe-repository-association-response-tags
                         :initform common-lisp:nil)
                        (repository-association :initarg
                         :repository-association :type
                         (common-lisp:or repository-association
                                         common-lisp:null)
                         :accessor
                         %describe-repository-association-response-repository-association
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-repository-association-response
                    'make-describe-repository-association-response))
 (common-lisp:defun make-describe-repository-association-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags repository-association)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-repository-association-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-association))
      (common-lisp:list
       (common-lisp:cons "RepositoryAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-repository-request common-lisp:nil
                       ((association-arn :initarg :association-arn :type
                         (common-lisp:or association-arn common-lisp:null)
                         :accessor
                         %disassociate-repository-request-association-arn
                         :initform
                         (common-lisp:error ":association-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-repository-request
                    'make-disassociate-repository-request))
 (common-lisp:defun make-disassociate-repository-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-repository-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-repository-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %disassociate-repository-response-tags :initform
                         common-lisp:nil)
                        (repository-association :initarg
                         :repository-association :type
                         (common-lisp:or repository-association
                                         common-lisp:null)
                         :accessor
                         %disassociate-repository-response-repository-association
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-repository-response
                    'make-disassociate-repository-response))
 (common-lisp:defun make-disassociate-repository-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags repository-association)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-repository-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-association))
      (common-lisp:list
       (common-lisp:cons "RepositoryAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-response))
   common-lisp:nil))
(common-lisp:deftype encryption-option () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-info common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or event-state common-lisp:null)
                         :accessor %event-info-state :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or event-name common-lisp:null) :accessor
                         %event-info-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'event-info 'make-event-info))
 (common-lisp:defun make-event-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state name)
   (common-lisp:apply #'common-lisp:make-instance 'event-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-info))
   common-lisp:nil))
(common-lisp:deftype event-name () 'common-lisp:string)
(common-lisp:deftype event-state () 'common-lisp:string)
(common-lisp:deftype file-path () 'common-lisp:string)
(common-lisp:deftype findings-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype job-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-states () '(trivial-types:proper-list job-state))
 (common-lisp:defun |make-job-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kmskey-details common-lisp:nil
                       ((encryption-option :initarg :encryption-option :type
                         (common-lisp:or encryption-option common-lisp:null)
                         :accessor %kmskey-details-encryption-option :initform
                         common-lisp:nil)
                        (kmskey-id :initarg :kmskey-id :type
                         (common-lisp:or kmskey-id common-lisp:null) :accessor
                         %kmskey-details-kmskey-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'kmskey-details 'make-kmskey-details))
 (common-lisp:defun make-kmskey-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-option kmskey-id)
   (common-lisp:apply #'common-lisp:make-instance 'kmskey-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kmskey-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kmskey-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-option))
      (common-lisp:list
       (common-lisp:cons "EncryptionOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kmskey-details))
   common-lisp:nil))
(common-lisp:deftype kmskey-id () 'common-lisp:string)
(common-lisp:deftype line-number () 'common-lisp:integer)
(common-lisp:deftype lines-of-code-count () 'common-lisp:integer)
(common-lisp:deftype list-code-reviews-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-code-reviews-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-code-reviews-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or list-code-reviews-max-results
                                         common-lisp:null)
                         :accessor %list-code-reviews-request-max-results
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %list-code-reviews-request-type :initform
                         (common-lisp:error ":type is required"))
                        (repository-names :initarg :repository-names :type
                         (common-lisp:or repository-names common-lisp:null)
                         :accessor %list-code-reviews-request-repository-names
                         :initform common-lisp:nil)
                        (states :initarg :states :type
                         (common-lisp:or job-states common-lisp:null) :accessor
                         %list-code-reviews-request-states :initform
                         common-lisp:nil)
                        (provider-types :initarg :provider-types :type
                         (common-lisp:or provider-types common-lisp:null)
                         :accessor %list-code-reviews-request-provider-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-code-reviews-request
                    'make-list-code-reviews-request))
 (common-lisp:defun make-list-code-reviews-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results type
                     repository-names states provider-types)
   (common-lisp:apply #'common-lisp:make-instance 'list-code-reviews-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-code-reviews-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-code-reviews-response-next-token :initform
                         common-lisp:nil)
                        (code-review-summaries :initarg :code-review-summaries
                         :type
                         (common-lisp:or code-review-summaries
                                         common-lisp:null)
                         :accessor
                         %list-code-reviews-response-code-review-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-code-reviews-response
                    'make-list-code-reviews-response))
 (common-lisp:defun make-list-code-reviews-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token code-review-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-code-reviews-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-review-summaries))
      (common-lisp:list
       (common-lisp:cons "CodeReviewSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recommendation-feedback-request common-lisp:nil
                       ((recommendation-ids :initarg :recommendation-ids :type
                         (common-lisp:or recommendation-ids common-lisp:null)
                         :accessor
                         %list-recommendation-feedback-request-recommendation-ids
                         :initform common-lisp:nil)
                        (user-ids :initarg :user-ids :type
                         (common-lisp:or user-ids common-lisp:null) :accessor
                         %list-recommendation-feedback-request-user-ids
                         :initform common-lisp:nil)
                        (code-review-arn :initarg :code-review-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-recommendation-feedback-request-code-review-arn
                         :initform
                         (common-lisp:error ":code-review-arn is required"))
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-recommendation-feedback-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-recommendation-feedback-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-recommendation-feedback-request
                    'make-list-recommendation-feedback-request))
 (common-lisp:defun make-list-recommendation-feedback-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recommendation-ids user-ids
                     code-review-arn max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recommendation-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recommendation-feedback-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-recommendation-feedback-response-next-token
                         :initform common-lisp:nil)
                        (recommendation-feedback-summaries :initarg
                         :recommendation-feedback-summaries :type
                         (common-lisp:or recommendation-feedback-summaries
                                         common-lisp:null)
                         :accessor
                         %list-recommendation-feedback-response-recommendation-feedback-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-recommendation-feedback-response
                    'make-list-recommendation-feedback-response))
 (common-lisp:defun make-list-recommendation-feedback-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     recommendation-feedback-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recommendation-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-feedback-summaries))
      (common-lisp:list
       (common-lisp:cons "RecommendationFeedbackSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-response))
   common-lisp:nil))
(common-lisp:deftype list-recommendations-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-recommendations-request common-lisp:nil
                       ((code-review-arn :initarg :code-review-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-recommendations-request-code-review-arn
                         :initform
                         (common-lisp:error ":code-review-arn is required"))
                        (max-results :initarg :max-results :type
                         (common-lisp:or list-recommendations-max-results
                                         common-lisp:null)
                         :accessor %list-recommendations-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-recommendations-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-request
                    'make-list-recommendations-request))
 (common-lisp:defun make-list-recommendations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-review-arn max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-recommendations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recommendations-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-recommendations-response-next-token :initform
                         common-lisp:nil)
                        (recommendation-summaries :initarg
                         :recommendation-summaries :type
                         (common-lisp:or recommendation-summaries
                                         common-lisp:null)
                         :accessor
                         %list-recommendations-response-recommendation-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-response
                    'make-list-recommendations-response))
 (common-lisp:defun make-list-recommendations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token recommendation-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recommendations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-summaries))
      (common-lisp:list
       (common-lisp:cons "RecommendationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repository-associations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-repository-associations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-repository-associations-request-max-results
                         :initform common-lisp:nil)
                        (owners :initarg :owners :type
                         (common-lisp:or owners common-lisp:null) :accessor
                         %list-repository-associations-request-owners :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or names common-lisp:null) :accessor
                         %list-repository-associations-request-names :initform
                         common-lisp:nil)
                        (states :initarg :states :type
                         (common-lisp:or repository-association-states
                                         common-lisp:null)
                         :accessor %list-repository-associations-request-states
                         :initform common-lisp:nil)
                        (provider-types :initarg :provider-types :type
                         (common-lisp:or provider-types common-lisp:null)
                         :accessor
                         %list-repository-associations-request-provider-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-repository-associations-request
                    'make-list-repository-associations-request))
 (common-lisp:defun make-list-repository-associations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results owners names
                     states provider-types)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-repository-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repository-associations-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-repository-associations-response-next-token
                         :initform common-lisp:nil)
                        (repository-association-summaries :initarg
                         :repository-association-summaries :type
                         (common-lisp:or repository-association-summaries
                                         common-lisp:null)
                         :accessor
                         %list-repository-associations-response-repository-association-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-repository-associations-response
                    'make-list-repository-associations-response))
 (common-lisp:defun make-list-repository-associations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     repository-association-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-repository-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-association-summaries))
      (common-lisp:list
       (common-lisp:cons "RepositoryAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or association-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long-description () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass metrics common-lisp:nil
                       ((findings-count :initarg :findings-count :type
                         (common-lisp:or findings-count common-lisp:null)
                         :accessor %metrics-findings-count :initform
                         common-lisp:nil)
                        (suppressed-lines-of-code-count :initarg
                         :suppressed-lines-of-code-count :type
                         (common-lisp:or lines-of-code-count common-lisp:null)
                         :accessor %metrics-suppressed-lines-of-code-count
                         :initform common-lisp:nil)
                        (metered-lines-of-code-count :initarg
                         :metered-lines-of-code-count :type
                         (common-lisp:or lines-of-code-count common-lisp:null)
                         :accessor %metrics-metered-lines-of-code-count
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'metrics 'make-metrics))
 (common-lisp:defun make-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key findings-count
                     suppressed-lines-of-code-count
                     metered-lines-of-code-count)
   (common-lisp:apply #'common-lisp:make-instance 'metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metered-lines-of-code-count))
      (common-lisp:list
       (common-lisp:cons "MeteredLinesOfCodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppressed-lines-of-code-count))
      (common-lisp:list
       (common-lisp:cons "SuppressedLinesOfCodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings-count))
      (common-lisp:list
       (common-lisp:cons "FindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass metrics-summary common-lisp:nil
                       ((findings-count :initarg :findings-count :type
                         (common-lisp:or findings-count common-lisp:null)
                         :accessor %metrics-summary-findings-count :initform
                         common-lisp:nil)
                        (suppressed-lines-of-code-count :initarg
                         :suppressed-lines-of-code-count :type
                         (common-lisp:or lines-of-code-count common-lisp:null)
                         :accessor
                         %metrics-summary-suppressed-lines-of-code-count
                         :initform common-lisp:nil)
                        (metered-lines-of-code-count :initarg
                         :metered-lines-of-code-count :type
                         (common-lisp:or lines-of-code-count common-lisp:null)
                         :accessor %metrics-summary-metered-lines-of-code-count
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'metrics-summary 'make-metrics-summary))
 (common-lisp:defun make-metrics-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key findings-count
                     suppressed-lines-of-code-count
                     metered-lines-of-code-count)
   (common-lisp:apply #'common-lisp:make-instance 'metrics-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metered-lines-of-code-count))
      (common-lisp:list
       (common-lisp:cons "MeteredLinesOfCodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppressed-lines-of-code-count))
      (common-lisp:list
       (common-lisp:cons "SuppressedLinesOfCodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings-count))
      (common-lisp:list
       (common-lisp:cons "FindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics-summary))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype names () '(trivial-types:proper-list name))
 (common-lisp:defun |make-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype owners () '(trivial-types:proper-list owner))
 (common-lisp:defun |make-owners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list owner))
   aws-sdk/generator/shape::members))
(common-lisp:deftype provider-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provider-types ()
   '(trivial-types:proper-list provider-type))
 (common-lisp:defun |make-provider-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provider-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pull-request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-recommendation-feedback-request common-lisp:nil
                       ((reactions :initarg :reactions :type
                         (common-lisp:or reactions common-lisp:null) :accessor
                         %put-recommendation-feedback-request-reactions
                         :initform
                         (common-lisp:error ":reactions is required"))
                        (recommendation-id :initarg :recommendation-id :type
                         (common-lisp:or recommendation-id common-lisp:null)
                         :accessor
                         %put-recommendation-feedback-request-recommendation-id
                         :initform
                         (common-lisp:error ":recommendation-id is required"))
                        (code-review-arn :initarg :code-review-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %put-recommendation-feedback-request-code-review-arn
                         :initform
                         (common-lisp:error ":code-review-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-recommendation-feedback-request
                    'make-put-recommendation-feedback-request))
 (common-lisp:defun make-put-recommendation-feedback-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reactions recommendation-id
                     code-review-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-recommendation-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review-arn))
      (common-lisp:list
       (common-lisp:cons "CodeReviewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactions))
      (common-lisp:list
       (common-lisp:cons "Reactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-recommendation-feedback-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-recommendation-feedback-response
                    'make-put-recommendation-feedback-response))
 (common-lisp:defun make-put-recommendation-feedback-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-recommendation-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-response))
   common-lisp:nil))
(common-lisp:deftype reaction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reactions () '(trivial-types:proper-list reaction))
 (common-lisp:defun |make-reactions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reaction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recommendation-feedback common-lisp:nil
                       ((last-updated-time-stamp :initarg
                         :last-updated-time-stamp :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %recommendation-feedback-last-updated-time-stamp
                         :initform common-lisp:nil)
                        (created-time-stamp :initarg :created-time-stamp :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %recommendation-feedback-created-time-stamp :initform
                         common-lisp:nil)
                        (user-id :initarg :user-id :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %recommendation-feedback-user-id :initform
                         common-lisp:nil)
                        (reactions :initarg :reactions :type
                         (common-lisp:or reactions common-lisp:null) :accessor
                         %recommendation-feedback-reactions :initform
                         common-lisp:nil)
                        (recommendation-id :initarg :recommendation-id :type
                         (common-lisp:or recommendation-id common-lisp:null)
                         :accessor %recommendation-feedback-recommendation-id
                         :initform common-lisp:nil)
                        (code-review-arn :initarg :code-review-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %recommendation-feedback-code-review-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recommendation-feedback 'make-recommendation-feedback))
 (common-lisp:defun make-recommendation-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated-time-stamp
                     created-time-stamp user-id reactions recommendation-id
                     code-review-arn)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-feedback
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review-arn))
      (common-lisp:list
       (common-lisp:cons "CodeReviewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactions))
      (common-lisp:list
       (common-lisp:cons "Reactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-time-stamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-feedback-summaries ()
   '(trivial-types:proper-list recommendation-feedback-summary))
 (common-lisp:defun |make-recommendation-feedback-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-feedback-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recommendation-feedback-summary common-lisp:nil
                       ((user-id :initarg :user-id :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         %recommendation-feedback-summary-user-id :initform
                         common-lisp:nil)
                        (reactions :initarg :reactions :type
                         (common-lisp:or reactions common-lisp:null) :accessor
                         %recommendation-feedback-summary-reactions :initform
                         common-lisp:nil)
                        (recommendation-id :initarg :recommendation-id :type
                         (common-lisp:or recommendation-id common-lisp:null)
                         :accessor
                         %recommendation-feedback-summary-recommendation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recommendation-feedback-summary
                    'make-recommendation-feedback-summary))
 (common-lisp:defun make-recommendation-feedback-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-id reactions recommendation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'recommendation-feedback-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactions))
      (common-lisp:list
       (common-lisp:cons "Reactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback-summary))
   common-lisp:nil))
(common-lisp:deftype recommendation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-ids ()
   '(trivial-types:proper-list recommendation-id))
 (common-lisp:defun |make-recommendation-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendation-summaries ()
   '(trivial-types:proper-list recommendation-summary))
 (common-lisp:defun |make-recommendation-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recommendation-summary common-lisp:nil
                       ((severity :initarg :severity :type
                         (common-lisp:or severity common-lisp:null) :accessor
                         %recommendation-summary-severity :initform
                         common-lisp:nil)
                        (rule-metadata :initarg :rule-metadata :type
                         (common-lisp:or rule-metadata common-lisp:null)
                         :accessor %recommendation-summary-rule-metadata
                         :initform common-lisp:nil)
                        (recommendation-category :initarg
                         :recommendation-category :type
                         (common-lisp:or recommendation-category
                                         common-lisp:null)
                         :accessor
                         %recommendation-summary-recommendation-category
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %recommendation-summary-description :initform
                         common-lisp:nil)
                        (end-line :initarg :end-line :type
                         (common-lisp:or line-number common-lisp:null)
                         :accessor %recommendation-summary-end-line :initform
                         common-lisp:nil)
                        (start-line :initarg :start-line :type
                         (common-lisp:or line-number common-lisp:null)
                         :accessor %recommendation-summary-start-line :initform
                         common-lisp:nil)
                        (recommendation-id :initarg :recommendation-id :type
                         (common-lisp:or recommendation-id common-lisp:null)
                         :accessor %recommendation-summary-recommendation-id
                         :initform common-lisp:nil)
                        (file-path :initarg :file-path :type
                         (common-lisp:or file-path common-lisp:null) :accessor
                         %recommendation-summary-file-path :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recommendation-summary 'make-recommendation-summary))
 (common-lisp:defun make-recommendation-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity rule-metadata
                     recommendation-category description end-line start-line
                     recommendation-id file-path)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "FilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-line))
      (common-lisp:list
       (common-lisp:cons "StartLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-line))
      (common-lisp:list
       (common-lisp:cons "EndLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-category))
      (common-lisp:list
       (common-lisp:cons "RecommendationCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-metadata))
      (common-lisp:list
       (common-lisp:cons "RuleMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository common-lisp:nil
                       ((s3bucket :initarg :s3bucket :type
                         (common-lisp:or s3repository common-lisp:null)
                         :accessor %repository-s3bucket :initform
                         common-lisp:nil)
                        (git-hub-enterprise-server :initarg
                         :git-hub-enterprise-server :type
                         (common-lisp:or third-party-source-repository
                                         common-lisp:null)
                         :accessor %repository-git-hub-enterprise-server
                         :initform common-lisp:nil)
                        (bitbucket :initarg :bitbucket :type
                         (common-lisp:or third-party-source-repository
                                         common-lisp:null)
                         :accessor %repository-bitbucket :initform
                         common-lisp:nil)
                        (code-commit :initarg :code-commit :type
                         (common-lisp:or code-commit-repository
                                         common-lisp:null)
                         :accessor %repository-code-commit :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'repository 'make-repository))
 (common-lisp:defun make-repository
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket git-hub-enterprise-server
                     bitbucket code-commit)
   (common-lisp:apply #'common-lisp:make-instance 'repository
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-commit))
      (common-lisp:list
       (common-lisp:cons "CodeCommit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitbucket))
      (common-lisp:list
       (common-lisp:cons "Bitbucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-enterprise-server))
      (common-lisp:list
       (common-lisp:cons "GitHubEnterpriseServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-analysis common-lisp:nil
                       ((source-code-type :initarg :source-code-type :type
                         (common-lisp:or source-code-type common-lisp:null)
                         :accessor %repository-analysis-source-code-type
                         :initform common-lisp:nil)
                        (repository-head :initarg :repository-head :type
                         (common-lisp:or repository-head-source-code-type
                                         common-lisp:null)
                         :accessor %repository-analysis-repository-head
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'repository-analysis 'make-repository-analysis))
 (common-lisp:defun make-repository-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-code-type repository-head)
   (common-lisp:apply #'common-lisp:make-instance 'repository-analysis
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-analysis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-analysis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-head))
      (common-lisp:list
       (common-lisp:cons "RepositoryHead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-type))
      (common-lisp:list
       (common-lisp:cons "SourceCodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-analysis))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-association common-lisp:nil
                       ((s3repository-details :initarg :s3repository-details
                         :type
                         (common-lisp:or s3repository-details common-lisp:null)
                         :accessor %repository-association-s3repository-details
                         :initform common-lisp:nil)
                        (kmskey-details :initarg :kmskey-details :type
                         (common-lisp:or kmskey-details common-lisp:null)
                         :accessor %repository-association-kmskey-details
                         :initform common-lisp:nil)
                        (created-time-stamp :initarg :created-time-stamp :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %repository-association-created-time-stamp :initform
                         common-lisp:nil)
                        (last-updated-time-stamp :initarg
                         :last-updated-time-stamp :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %repository-association-last-updated-time-stamp
                         :initform common-lisp:nil)
                        (state-reason :initarg :state-reason :type
                         (common-lisp:or state-reason common-lisp:null)
                         :accessor %repository-association-state-reason
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or repository-association-state
                                         common-lisp:null)
                         :accessor %repository-association-state :initform
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %repository-association-provider-type
                         :initform common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %repository-association-owner :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %repository-association-name :initform
                         common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %repository-association-connection-arn
                         :initform common-lisp:nil)
                        (association-arn :initarg :association-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %repository-association-association-arn :initform
                         common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor %repository-association-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'repository-association 'make-repository-association))
 (common-lisp:defun make-repository-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3repository-details kmskey-details
                     created-time-stamp last-updated-time-stamp state-reason
                     state provider-type owner name connection-arn
                     association-arn association-id)
   (common-lisp:apply #'common-lisp:make-instance 'repository-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "AssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-time-stamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-details))
      (common-lisp:list
       (common-lisp:cons "KMSKeyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3repository-details))
      (common-lisp:list
       (common-lisp:cons "S3RepositoryDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-association))
   common-lisp:nil))
(common-lisp:deftype repository-association-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-association-states ()
   '(trivial-types:proper-list repository-association-state))
 (common-lisp:defun |make-repository-association-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-association-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype repository-association-summaries ()
   '(trivial-types:proper-list repository-association-summary))
 (common-lisp:defun |make-repository-association-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass repository-association-summary common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or repository-association-state
                                         common-lisp:null)
                         :accessor %repository-association-summary-state
                         :initform common-lisp:nil)
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor
                         %repository-association-summary-provider-type
                         :initform common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %repository-association-summary-owner :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %repository-association-summary-name :initform
                         common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor
                         %repository-association-summary-association-id
                         :initform common-lisp:nil)
                        (last-updated-time-stamp :initarg
                         :last-updated-time-stamp :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %repository-association-summary-last-updated-time-stamp
                         :initform common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         %repository-association-summary-connection-arn
                         :initform common-lisp:nil)
                        (association-arn :initarg :association-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %repository-association-summary-association-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'repository-association-summary
                    'make-repository-association-summary))
 (common-lisp:defun make-repository-association-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state provider-type owner name
                     association-id last-updated-time-stamp connection-arn
                     association-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'repository-association-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "AssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-time-stamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-head-source-code-type common-lisp:nil
                       ((branch-name :initarg :branch-name :type
                         (common-lisp:or branch-name common-lisp:null)
                         :accessor
                         %repository-head-source-code-type-branch-name
                         :initform
                         (common-lisp:error ":branch-name is required"))))
 (common-lisp:export
  (common-lisp:list 'repository-head-source-code-type
                    'make-repository-head-source-code-type))
 (common-lisp:defun make-repository-head-source-code-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key branch-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'repository-head-source-code-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-head-source-code-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-head-source-code-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "BranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-head-source-code-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-names () '(trivial-types:proper-list name))
 (common-lisp:defun |make-repository-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass request-metadata common-lisp:nil
                       ((vendor-name :initarg :vendor-name :type
                         (common-lisp:or vendor-name common-lisp:null)
                         :accessor %request-metadata-vendor-name :initform
                         common-lisp:nil)
                        (event-info :initarg :event-info :type
                         (common-lisp:or event-info common-lisp:null) :accessor
                         %request-metadata-event-info :initform
                         common-lisp:nil)
                        (requester :initarg :requester :type
                         (common-lisp:or requester common-lisp:null) :accessor
                         %request-metadata-requester :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or request-id common-lisp:null) :accessor
                         %request-metadata-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'request-metadata 'make-request-metadata))
 (common-lisp:defun make-request-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vendor-name event-info requester
                     request-id)
   (common-lisp:apply #'common-lisp:make-instance 'request-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input request-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input request-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester))
      (common-lisp:list
       (common-lisp:cons "Requester"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-info))
      (common-lisp:list
       (common-lisp:cons "EventInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-name))
      (common-lisp:list
       (common-lisp:cons "VendorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input request-metadata))
   common-lisp:nil))
(common-lisp:deftype requester () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype rule-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rule-metadata common-lisp:nil
                       ((rule-tags :initarg :rule-tags :type
                         (common-lisp:or rule-tags common-lisp:null) :accessor
                         %rule-metadata-rule-tags :initform common-lisp:nil)
                        (long-description :initarg :long-description :type
                         (common-lisp:or long-description common-lisp:null)
                         :accessor %rule-metadata-long-description :initform
                         common-lisp:nil)
                        (short-description :initarg :short-description :type
                         (common-lisp:or short-description common-lisp:null)
                         :accessor %rule-metadata-short-description :initform
                         common-lisp:nil)
                        (rule-name :initarg :rule-name :type
                         (common-lisp:or rule-name common-lisp:null) :accessor
                         %rule-metadata-rule-name :initform common-lisp:nil)
                        (rule-id :initarg :rule-id :type
                         (common-lisp:or rule-id common-lisp:null) :accessor
                         %rule-metadata-rule-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rule-metadata 'make-rule-metadata))
 (common-lisp:defun make-rule-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-tags long-description
                     short-description rule-name rule-id)
   (common-lisp:apply #'common-lisp:make-instance 'rule-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "ShortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "LongDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-tags))
      (common-lisp:list
       (common-lisp:cons "RuleTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-metadata))
   common-lisp:nil))
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:deftype rule-tag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-tags () '(trivial-types:proper-list rule-tag))
 (common-lisp:defun |make-rule-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3bucket-repository common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or s3repository-details common-lisp:null)
                         :accessor %s3bucket-repository-details :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %s3bucket-repository-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 's3bucket-repository 'make-s3bucket-repository))
 (common-lisp:defun make-s3bucket-repository
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details name)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-repository
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket-repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3repository common-lisp:nil
                       ((bucket-name :initarg :bucket-name :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %s3repository-bucket-name :initform
                         (common-lisp:error ":bucket-name is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %s3repository-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 's3repository 'make-s3repository))
 (common-lisp:defun make-s3repository
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bucket-name name)
   (common-lisp:apply #'common-lisp:make-instance 's3repository
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3repository-details common-lisp:nil
                       ((code-artifacts :initarg :code-artifacts :type
                         (common-lisp:or code-artifacts common-lisp:null)
                         :accessor %s3repository-details-code-artifacts
                         :initform common-lisp:nil)
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %s3repository-details-bucket-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3repository-details 'make-s3repository-details))
 (common-lisp:defun make-s3repository-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-artifacts bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 's3repository-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3repository-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3repository-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-artifacts))
      (common-lisp:list
       (common-lisp:cons "CodeArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3repository-details))
   common-lisp:nil))
(common-lisp:deftype severity () 'common-lisp:string)
(common-lisp:deftype short-description () 'common-lisp:string)
(common-lisp:deftype source-code-artifacts-object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-code-type common-lisp:nil
                       ((request-metadata :initarg :request-metadata :type
                         (common-lisp:or request-metadata common-lisp:null)
                         :accessor %source-code-type-request-metadata :initform
                         common-lisp:nil)
                        (s3bucket-repository :initarg :s3bucket-repository
                         :type
                         (common-lisp:or s3bucket-repository common-lisp:null)
                         :accessor %source-code-type-s3bucket-repository
                         :initform common-lisp:nil)
                        (branch-diff :initarg :branch-diff :type
                         (common-lisp:or branch-diff-source-code-type
                                         common-lisp:null)
                         :accessor %source-code-type-branch-diff :initform
                         common-lisp:nil)
                        (repository-head :initarg :repository-head :type
                         (common-lisp:or repository-head-source-code-type
                                         common-lisp:null)
                         :accessor %source-code-type-repository-head :initform
                         common-lisp:nil)
                        (commit-diff :initarg :commit-diff :type
                         (common-lisp:or commit-diff-source-code-type
                                         common-lisp:null)
                         :accessor %source-code-type-commit-diff :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-code-type 'make-source-code-type))
 (common-lisp:defun make-source-code-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-metadata s3bucket-repository
                     branch-diff repository-head commit-diff)
   (common-lisp:apply #'common-lisp:make-instance 'source-code-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-code-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-code-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-diff))
      (common-lisp:list
       (common-lisp:cons "CommitDiff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-head))
      (common-lisp:list
       (common-lisp:cons "RepositoryHead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-diff))
      (common-lisp:list
       (common-lisp:cons "BranchDiff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-repository))
      (common-lisp:list
       (common-lisp:cons "S3BucketRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-metadata))
      (common-lisp:list
       (common-lisp:cons "RequestMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-code-type))
   common-lisp:nil))
(common-lisp:deftype state-reason () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or association-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass third-party-source-repository common-lisp:nil
                       ((owner :initarg :owner :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         %third-party-source-repository-owner :initform
                         (common-lisp:error ":owner is required"))
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor
                         %third-party-source-repository-connection-arn
                         :initform
                         (common-lisp:error ":connection-arn is required"))
                        (name :initarg :name :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %third-party-source-repository-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'third-party-source-repository
                    'make-third-party-source-repository))
 (common-lisp:defun make-third-party-source-repository
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key owner connection-arn name)
   (common-lisp:apply #'common-lisp:make-instance
                      'third-party-source-repository
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-source-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-source-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-source-repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or association-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-ids () '(trivial-types:proper-list user-id))
 (common-lisp:defun |make-user-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype vendor-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository client-request-token tags
                     kmskey-details)
   (common-lisp:declare
    (common-lisp:ignorable repository client-request-token tags
     kmskey-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "POST"
        :rest-json "/associations" "AssociateRepository" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-repository))
(common-lisp:progn
 (common-lisp:defun create-code-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name repository-association-arn type
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name repository-association-arn type
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-code-review-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "POST"
        :rest-json "/codereviews" "CreateCodeReview" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-code-review))
(common-lisp:progn
 (common-lisp:defun describe-code-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-review-arn)
   (common-lisp:declare (common-lisp:ignorable code-review-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-code-review-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/codereviews/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'code-review-arn))))
        "DescribeCodeReview" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-code-review))
(common-lisp:progn
 (common-lisp:defun describe-recommendation-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-review-arn recommendation-id
                     user-id)
   (common-lisp:declare
    (common-lisp:ignorable code-review-arn recommendation-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-recommendation-feedback-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/feedback/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'code-review-arn))))
        "DescribeRecommendationFeedback" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-recommendation-feedback))
(common-lisp:progn
 (common-lisp:defun describe-repository-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-arn)
   (common-lisp:declare (common-lisp:ignorable association-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-repository-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/associations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'association-arn))))
        "DescribeRepositoryAssociation" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-repository-association))
(common-lisp:progn
 (common-lisp:defun disassociate-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-arn)
   (common-lisp:declare (common-lisp:ignorable association-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/associations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'association-arn))))
        "DisassociateRepository" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-repository))
(common-lisp:progn
 (common-lisp:defun list-code-reviews
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider-types states repository-names
                     type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable provider-types states repository-names type
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-code-reviews-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        :rest-json "/codereviews" "ListCodeReviews" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-code-reviews))
(common-lisp:progn
 (common-lisp:defun list-recommendation-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results code-review-arn
                     user-ids recommendation-ids)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results code-review-arn user-ids
     recommendation-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-recommendation-feedback-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/feedback/~A/RecommendationFeedback"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'code-review-arn))))
        "ListRecommendationFeedback" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recommendation-feedback))
(common-lisp:progn
 (common-lisp:defun list-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results code-review-arn)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results code-review-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/codereviews/~A/Recommendations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'code-review-arn))))
        "ListRecommendations" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recommendations))
(common-lisp:progn
 (common-lisp:defun list-repository-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider-types states names owners
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable provider-types states names owners max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-repository-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        :rest-json "/associations" "ListRepositoryAssociations" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-repository-associations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-recommendation-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-review-arn recommendation-id
                     reactions)
   (common-lisp:declare
    (common-lisp:ignorable code-review-arn recommendation-id reactions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-recommendation-feedback-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "PUT"
        :rest-json "/feedback" "PutRecommendationFeedback" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-recommendation-feedback))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
