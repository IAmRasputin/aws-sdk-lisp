;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codeguru-reviewer/api
  (:use)
  (:nicknames #:aws/codeguru-reviewer)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codeguru-reviewer/api)
(common-lisp:progn
 (common-lisp:defclass codeguru-reviewer-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codeguru-reviewer"))
 (common-lisp:export 'codeguru-reviewer-request))
(common-lisp:progn
 (common-lisp:define-condition codeguru-reviewer-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codeguru-reviewer-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("NotFoundException" . not-found-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype analysis-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype analysis-types ()
   '(trivial-types:proper-list analysis-type))
 (common-lisp:defun |make-analysis-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analysis-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-repository-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-repository-request-"))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (kmskey-details common-lisp:nil :type
    (common-lisp:or kmskey-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-repository-request
                    'make-associate-repository-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "Repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-details))
      (common-lisp:list
       (common-lisp:cons "KMSKeyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-repository-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-repository-response-"))
   (repository-association common-lisp:nil :type
    (common-lisp:or repository-association common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-repository-response
                    'make-associate-repository-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-association))
      (common-lisp:list
       (common-lisp:cons "RepositoryAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-repository-response))
   common-lisp:nil))
(common-lisp:deftype association-arn () 'common-lisp:string)
(common-lisp:deftype association-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (branch-diff-source-code-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-branch-diff-source-code-type-"))
   (source-branch-name (common-lisp:error ":source-branch-name is required")
    :type (common-lisp:or branch-name common-lisp:null))
   (destination-branch-name
    (common-lisp:error ":destination-branch-name is required") :type
    (common-lisp:or branch-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'branch-diff-source-code-type
                    'make-branch-diff-source-code-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          branch-diff-source-code-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          branch-diff-source-code-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-branch-name))
      (common-lisp:list
       (common-lisp:cons "SourceBranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-branch-name))
      (common-lisp:list
       (common-lisp:cons "DestinationBranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          branch-diff-source-code-type))
   common-lisp:nil))
(common-lisp:deftype branch-name () 'common-lisp:string)
(common-lisp:deftype build-artifacts-object-key () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (code-artifacts (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-artifacts-"))
   (source-code-artifacts-object-key
    (common-lisp:error ":source-code-artifacts-object-key is required") :type
    (common-lisp:or source-code-artifacts-object-key common-lisp:null))
   (build-artifacts-object-key common-lisp:nil :type
    (common-lisp:or build-artifacts-object-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-artifacts 'make-code-artifacts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-artifacts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-artifacts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-artifacts-object-key))
      (common-lisp:list
       (common-lisp:cons "SourceCodeArtifactsObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'build-artifacts-object-key))
      (common-lisp:list
       (common-lisp:cons "BuildArtifactsObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-artifacts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (code-commit-repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-commit-repository-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-commit-repository 'make-code-commit-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-commit-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-commit-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-commit-repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (code-review (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-review-"))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (code-review-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (repository-name common-lisp:nil :type
    (common-lisp:or name common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (provider-type common-lisp:nil :type
    (common-lisp:or provider-type common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or job-state common-lisp:null))
   (state-reason common-lisp:nil :type
    (common-lisp:or state-reason common-lisp:null))
   (created-time-stamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (last-updated-time-stamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or type common-lisp:null))
   (pull-request-id common-lisp:nil :type
    (common-lisp:or pull-request-id common-lisp:null))
   (source-code-type common-lisp:nil :type
    (common-lisp:or source-code-type common-lisp:null))
   (association-arn common-lisp:nil :type
    (common-lisp:or association-arn common-lisp:null))
   (metrics common-lisp:nil :type (common-lisp:or metrics common-lisp:null))
   (analysis-types common-lisp:nil :type
    (common-lisp:or analysis-types common-lisp:null))
   (config-file-state common-lisp:nil :type
    (common-lisp:or config-file-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-review 'make-code-review))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-review))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-review))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review-arn))
      (common-lisp:list
       (common-lisp:cons "CodeReviewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-time-stamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-request-id))
      (common-lisp:list
       (common-lisp:cons "PullRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-type))
      (common-lisp:list
       (common-lisp:cons "SourceCodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "AssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-types))
      (common-lisp:list
       (common-lisp:cons "AnalysisTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-file-state))
      (common-lisp:list
       (common-lisp:cons "ConfigFileState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-review))
   common-lisp:nil))
(common-lisp:deftype code-review-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype code-review-summaries ()
   '(trivial-types:proper-list code-review-summary))
 (common-lisp:defun |make-code-review-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-review-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (code-review-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-review-summary-"))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (code-review-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (repository-name common-lisp:nil :type
    (common-lisp:or name common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (provider-type common-lisp:nil :type
    (common-lisp:or provider-type common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or job-state common-lisp:null))
   (created-time-stamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (last-updated-time-stamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or type common-lisp:null))
   (pull-request-id common-lisp:nil :type
    (common-lisp:or pull-request-id common-lisp:null))
   (metrics-summary common-lisp:nil :type
    (common-lisp:or metrics-summary common-lisp:null))
   (source-code-type common-lisp:nil :type
    (common-lisp:or source-code-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-review-summary 'make-code-review-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-review-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-review-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review-arn))
      (common-lisp:list
       (common-lisp:cons "CodeReviewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-time-stamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pull-request-id))
      (common-lisp:list
       (common-lisp:cons "PullRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics-summary))
      (common-lisp:list
       (common-lisp:cons "MetricsSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-type))
      (common-lisp:list
       (common-lisp:cons "SourceCodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-review-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (code-review-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-review-type-"))
   (repository-analysis (common-lisp:error ":repository-analysis is required")
    :type (common-lisp:or repository-analysis common-lisp:null))
   (analysis-types common-lisp:nil :type
    (common-lisp:or analysis-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-review-type 'make-code-review-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-review-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-review-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-analysis))
      (common-lisp:list
       (common-lisp:cons "RepositoryAnalysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analysis-types))
      (common-lisp:list
       (common-lisp:cons "AnalysisTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-review-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (commit-diff-source-code-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-commit-diff-source-code-type-"))
   (source-commit common-lisp:nil :type
    (common-lisp:or commit-id common-lisp:null))
   (destination-commit common-lisp:nil :type
    (common-lisp:or commit-id common-lisp:null))
   (merge-base-commit common-lisp:nil :type
    (common-lisp:or commit-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'commit-diff-source-code-type
                    'make-commit-diff-source-code-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-diff-source-code-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-diff-source-code-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-commit))
      (common-lisp:list
       (common-lisp:cons "SourceCommit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-commit))
      (common-lisp:list
       (common-lisp:cons "DestinationCommit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-base-commit))
      (common-lisp:list
       (common-lisp:cons "MergeBaseCommit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-diff-source-code-type))
   common-lisp:nil))
(common-lisp:deftype commit-id () 'common-lisp:string)
(common-lisp:deftype config-file-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype connection-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-code-review-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-code-review-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or code-review-name common-lisp:null))
   (repository-association-arn
    (common-lisp:error ":repository-association-arn is required") :type
    (common-lisp:or association-arn common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or code-review-type common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-code-review-request
                    'make-create-code-review-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-association-arn))
      (common-lisp:list
       (common-lisp:cons "RepositoryAssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-code-review-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-code-review-response-"))
   (code-review common-lisp:nil :type
    (common-lisp:or code-review common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-code-review-response
                    'make-create-code-review-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review))
      (common-lisp:list
       (common-lisp:cons "CodeReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-code-review-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-code-review-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-code-review-request-"))
   (code-review-arn (common-lisp:error ":code-review-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-code-review-request
                    'make-describe-code-review-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-code-review-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-code-review-response-"))
   (code-review common-lisp:nil :type
    (common-lisp:or code-review common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-code-review-response
                    'make-describe-code-review-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review))
      (common-lisp:list
       (common-lisp:cons "CodeReview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-review-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-recommendation-feedback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-recommendation-feedback-request-"))
   (code-review-arn (common-lisp:error ":code-review-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (recommendation-id (common-lisp:error ":recommendation-id is required")
    :type (common-lisp:or recommendation-id common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-recommendation-feedback-request
                    'make-describe-recommendation-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-recommendation-feedback-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-recommendation-feedback-response-"))
   (recommendation-feedback common-lisp:nil :type
    (common-lisp:or recommendation-feedback common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-recommendation-feedback-response
                    'make-describe-recommendation-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-feedback))
      (common-lisp:list
       (common-lisp:cons "RecommendationFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-recommendation-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-repository-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-repository-association-request-"))
   (association-arn (common-lisp:error ":association-arn is required") :type
    (common-lisp:or association-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-repository-association-request
                    'make-describe-repository-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-repository-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-repository-association-response-"))
   (repository-association common-lisp:nil :type
    (common-lisp:or repository-association common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-repository-association-response
                    'make-describe-repository-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-association))
      (common-lisp:list
       (common-lisp:cons "RepositoryAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-repository-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-repository-request-"))
   (association-arn (common-lisp:error ":association-arn is required") :type
    (common-lisp:or association-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-repository-request
                    'make-disassociate-repository-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-repository-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-repository-response-"))
   (repository-association common-lisp:nil :type
    (common-lisp:or repository-association common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-repository-response
                    'make-disassociate-repository-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-association))
      (common-lisp:list
       (common-lisp:cons "RepositoryAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-repository-response))
   common-lisp:nil))
(common-lisp:deftype encryption-option () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-info-"))
   (name common-lisp:nil :type (common-lisp:or event-name common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or event-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-info 'make-event-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-info))
   common-lisp:nil))
(common-lisp:deftype event-name () 'common-lisp:string)
(common-lisp:deftype event-state () 'common-lisp:string)
(common-lisp:deftype file-path () 'common-lisp:string)
(common-lisp:deftype findings-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype job-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-states () '(trivial-types:proper-list job-state))
 (common-lisp:defun |make-job-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (kmskey-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-kmskey-details-"))
   (kmskey-id common-lisp:nil :type
    (common-lisp:or kmskey-id common-lisp:null))
   (encryption-option common-lisp:nil :type
    (common-lisp:or encryption-option common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kmskey-details 'make-kmskey-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kmskey-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kmskey-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-id))
      (common-lisp:list
       (common-lisp:cons "KMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-option))
      (common-lisp:list
       (common-lisp:cons "EncryptionOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kmskey-details))
   common-lisp:nil))
(common-lisp:deftype kmskey-id () 'common-lisp:string)
(common-lisp:deftype line-number () 'common-lisp:integer)
(common-lisp:deftype lines-of-code-count () 'common-lisp:integer)
(common-lisp:deftype list-code-reviews-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-code-reviews-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-code-reviews-request-"))
   (provider-types common-lisp:nil :type
    (common-lisp:or provider-types common-lisp:null))
   (states common-lisp:nil :type (common-lisp:or job-states common-lisp:null))
   (repository-names common-lisp:nil :type
    (common-lisp:or repository-names common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-code-reviews-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-code-reviews-request
                    'make-list-code-reviews-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-code-reviews-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-code-reviews-response-"))
   (code-review-summaries common-lisp:nil :type
    (common-lisp:or code-review-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-code-reviews-response
                    'make-list-code-reviews-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-review-summaries))
      (common-lisp:list
       (common-lisp:cons "CodeReviewSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-code-reviews-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendation-feedback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendation-feedback-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (code-review-arn (common-lisp:error ":code-review-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (user-ids common-lisp:nil :type (common-lisp:or user-ids common-lisp:null))
   (recommendation-ids common-lisp:nil :type
    (common-lisp:or recommendation-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendation-feedback-request
                    'make-list-recommendation-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendation-feedback-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendation-feedback-response-"))
   (recommendation-feedback-summaries common-lisp:nil :type
    (common-lisp:or recommendation-feedback-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendation-feedback-response
                    'make-list-recommendation-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-feedback-summaries))
      (common-lisp:list
       (common-lisp:cons "RecommendationFeedbackSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-feedback-response))
   common-lisp:nil))
(common-lisp:deftype list-recommendations-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendations-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-recommendations-max-results common-lisp:null))
   (code-review-arn (common-lisp:error ":code-review-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-request
                    'make-list-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendations-response-"))
   (recommendation-summaries common-lisp:nil :type
    (common-lisp:or recommendation-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-response
                    'make-list-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-summaries))
      (common-lisp:list
       (common-lisp:cons "RecommendationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-repository-associations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repository-associations-request-"))
   (provider-types common-lisp:nil :type
    (common-lisp:or provider-types common-lisp:null))
   (states common-lisp:nil :type
    (common-lisp:or repository-association-states common-lisp:null))
   (names common-lisp:nil :type (common-lisp:or names common-lisp:null))
   (owners common-lisp:nil :type (common-lisp:or owners common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repository-associations-request
                    'make-list-repository-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-repository-associations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repository-associations-response-"))
   (repository-association-summaries common-lisp:nil :type
    (common-lisp:or repository-association-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repository-associations-response
                    'make-list-repository-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-association-summaries))
      (common-lisp:list
       (common-lisp:cons "RepositoryAssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repository-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or association-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long-description () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (metrics (:copier common-lisp:nil) (:conc-name "struct-shape-metrics-"))
   (metered-lines-of-code-count common-lisp:nil :type
    (common-lisp:or lines-of-code-count common-lisp:null))
   (suppressed-lines-of-code-count common-lisp:nil :type
    (common-lisp:or lines-of-code-count common-lisp:null))
   (findings-count common-lisp:nil :type
    (common-lisp:or findings-count common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metrics 'make-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metered-lines-of-code-count))
      (common-lisp:list
       (common-lisp:cons "MeteredLinesOfCodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppressed-lines-of-code-count))
      (common-lisp:list
       (common-lisp:cons "SuppressedLinesOfCodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings-count))
      (common-lisp:list
       (common-lisp:cons "FindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metrics-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-metrics-summary-"))
   (metered-lines-of-code-count common-lisp:nil :type
    (common-lisp:or lines-of-code-count common-lisp:null))
   (suppressed-lines-of-code-count common-lisp:nil :type
    (common-lisp:or lines-of-code-count common-lisp:null))
   (findings-count common-lisp:nil :type
    (common-lisp:or findings-count common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metrics-summary 'make-metrics-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metered-lines-of-code-count))
      (common-lisp:list
       (common-lisp:cons "MeteredLinesOfCodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'suppressed-lines-of-code-count))
      (common-lisp:list
       (common-lisp:cons "SuppressedLinesOfCodeCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings-count))
      (common-lisp:list
       (common-lisp:cons "FindingsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics-summary))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype names () '(trivial-types:proper-list name))
 (common-lisp:defun |make-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype owners () '(trivial-types:proper-list owner))
 (common-lisp:defun |make-owners|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list owner))
   aws-sdk/generator/shape::members))
(common-lisp:deftype provider-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provider-types ()
   '(trivial-types:proper-list provider-type))
 (common-lisp:defun |make-provider-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provider-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pull-request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-recommendation-feedback-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-recommendation-feedback-request-"))
   (code-review-arn (common-lisp:error ":code-review-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (recommendation-id (common-lisp:error ":recommendation-id is required")
    :type (common-lisp:or recommendation-id common-lisp:null))
   (reactions (common-lisp:error ":reactions is required") :type
    (common-lisp:or reactions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-recommendation-feedback-request
                    'make-put-recommendation-feedback-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review-arn))
      (common-lisp:list
       (common-lisp:cons "CodeReviewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactions))
      (common-lisp:list
       (common-lisp:cons "Reactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-recommendation-feedback-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-recommendation-feedback-response-")))
 (common-lisp:export
  (common-lisp:list 'put-recommendation-feedback-response
                    'make-put-recommendation-feedback-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-recommendation-feedback-response))
   common-lisp:nil))
(common-lisp:deftype reaction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reactions () '(trivial-types:proper-list reaction))
 (common-lisp:defun |make-reactions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reaction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-feedback (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-feedback-"))
   (code-review-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or recommendation-id common-lisp:null))
   (reactions common-lisp:nil :type
    (common-lisp:or reactions common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null))
   (created-time-stamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (last-updated-time-stamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-feedback 'make-recommendation-feedback))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-review-arn))
      (common-lisp:list
       (common-lisp:cons "CodeReviewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactions))
      (common-lisp:list
       (common-lisp:cons "Reactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-time-stamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-feedback-summaries ()
   '(trivial-types:proper-list recommendation-feedback-summary))
 (common-lisp:defun |make-recommendation-feedback-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-feedback-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-feedback-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-feedback-summary-"))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or recommendation-id common-lisp:null))
   (reactions common-lisp:nil :type
    (common-lisp:or reactions common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or user-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-feedback-summary
                    'make-recommendation-feedback-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reactions))
      (common-lisp:list
       (common-lisp:cons "Reactions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-feedback-summary))
   common-lisp:nil))
(common-lisp:deftype recommendation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-ids ()
   '(trivial-types:proper-list recommendation-id))
 (common-lisp:defun |make-recommendation-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendation-summaries ()
   '(trivial-types:proper-list recommendation-summary))
 (common-lisp:defun |make-recommendation-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-summary-"))
   (file-path common-lisp:nil :type
    (common-lisp:or file-path common-lisp:null))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or recommendation-id common-lisp:null))
   (start-line common-lisp:nil :type
    (common-lisp:or line-number common-lisp:null))
   (end-line common-lisp:nil :type
    (common-lisp:or line-number common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or text common-lisp:null))
   (recommendation-category common-lisp:nil :type
    (common-lisp:or recommendation-category common-lisp:null))
   (rule-metadata common-lisp:nil :type
    (common-lisp:or rule-metadata common-lisp:null))
   (severity common-lisp:nil :type (common-lisp:or severity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-summary 'make-recommendation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-path))
      (common-lisp:list
       (common-lisp:cons "FilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-line))
      (common-lisp:list
       (common-lisp:cons "StartLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-line))
      (common-lisp:list
       (common-lisp:cons "EndLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-category))
      (common-lisp:list
       (common-lisp:cons "RecommendationCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-metadata))
      (common-lisp:list
       (common-lisp:cons "RuleMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-"))
   (code-commit common-lisp:nil :type
    (common-lisp:or code-commit-repository common-lisp:null))
   (bitbucket common-lisp:nil :type
    (common-lisp:or third-party-source-repository common-lisp:null))
   (git-hub-enterprise-server common-lisp:nil :type
    (common-lisp:or third-party-source-repository common-lisp:null))
   (s3bucket common-lisp:nil :type
    (common-lisp:or s3repository common-lisp:null)))
 (common-lisp:export (common-lisp:list 'repository 'make-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-commit))
      (common-lisp:list
       (common-lisp:cons "CodeCommit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitbucket))
      (common-lisp:list
       (common-lisp:cons "Bitbucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'git-hub-enterprise-server))
      (common-lisp:list
       (common-lisp:cons "GitHubEnterpriseServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-analysis (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-analysis-"))
   (repository-head common-lisp:nil :type
    (common-lisp:or repository-head-source-code-type common-lisp:null))
   (source-code-type common-lisp:nil :type
    (common-lisp:or source-code-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-analysis 'make-repository-analysis))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-analysis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-analysis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-head))
      (common-lisp:list
       (common-lisp:cons "RepositoryHead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-type))
      (common-lisp:list
       (common-lisp:cons "SourceCodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-analysis))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-association-"))
   (association-id common-lisp:nil :type
    (common-lisp:or association-id common-lisp:null))
   (association-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (connection-arn common-lisp:nil :type
    (common-lisp:or connection-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (provider-type common-lisp:nil :type
    (common-lisp:or provider-type common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or repository-association-state common-lisp:null))
   (state-reason common-lisp:nil :type
    (common-lisp:or state-reason common-lisp:null))
   (last-updated-time-stamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (created-time-stamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (kmskey-details common-lisp:nil :type
    (common-lisp:or kmskey-details common-lisp:null))
   (s3repository-details common-lisp:nil :type
    (common-lisp:or s3repository-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-association 'make-repository-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "AssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-reason))
      (common-lisp:list
       (common-lisp:cons "StateReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-time-stamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey-details))
      (common-lisp:list
       (common-lisp:cons "KMSKeyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3repository-details))
      (common-lisp:list
       (common-lisp:cons "S3RepositoryDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-association))
   common-lisp:nil))
(common-lisp:deftype repository-association-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype repository-association-states ()
   '(trivial-types:proper-list repository-association-state))
 (common-lisp:defun |make-repository-association-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-association-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype repository-association-summaries ()
   '(trivial-types:proper-list repository-association-summary))
 (common-lisp:defun |make-repository-association-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-association-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-association-summary-"))
   (association-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (connection-arn common-lisp:nil :type
    (common-lisp:or connection-arn common-lisp:null))
   (last-updated-time-stamp common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (association-id common-lisp:nil :type
    (common-lisp:or association-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or owner common-lisp:null))
   (provider-type common-lisp:nil :type
    (common-lisp:or provider-type common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or repository-association-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-association-summary
                    'make-repository-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "AssociationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-time-stamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-head-source-code-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-head-source-code-type-"))
   (branch-name (common-lisp:error ":branch-name is required") :type
    (common-lisp:or branch-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-head-source-code-type
                    'make-repository-head-source-code-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-head-source-code-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-head-source-code-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "BranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-head-source-code-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-names () '(trivial-types:proper-list name))
 (common-lisp:defun |make-repository-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (request-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-request-metadata-"))
   (request-id common-lisp:nil :type
    (common-lisp:or request-id common-lisp:null))
   (requester common-lisp:nil :type
    (common-lisp:or requester common-lisp:null))
   (event-info common-lisp:nil :type
    (common-lisp:or event-info common-lisp:null))
   (vendor-name common-lisp:nil :type
    (common-lisp:or vendor-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'request-metadata 'make-request-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input request-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input request-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requester))
      (common-lisp:list
       (common-lisp:cons "Requester"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-info))
      (common-lisp:list
       (common-lisp:cons "EventInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-name))
      (common-lisp:list
       (common-lisp:cons "VendorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input request-metadata))
   common-lisp:nil))
(common-lisp:deftype requester () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype rule-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rule-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-metadata-"))
   (rule-id common-lisp:nil :type (common-lisp:or rule-id common-lisp:null))
   (rule-name common-lisp:nil :type
    (common-lisp:or rule-name common-lisp:null))
   (short-description common-lisp:nil :type
    (common-lisp:or short-description common-lisp:null))
   (long-description common-lisp:nil :type
    (common-lisp:or long-description common-lisp:null))
   (rule-tags common-lisp:nil :type
    (common-lisp:or rule-tags common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-metadata 'make-rule-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "RuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'short-description))
      (common-lisp:list
       (common-lisp:cons "ShortDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-description))
      (common-lisp:list
       (common-lisp:cons "LongDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-tags))
      (common-lisp:list
       (common-lisp:cons "RuleTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-metadata))
   common-lisp:nil))
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:deftype rule-tag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-tags () '(trivial-types:proper-list rule-tag))
 (common-lisp:defun |make-rule-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3bucket-repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3bucket-repository-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (details common-lisp:nil :type
    (common-lisp:or s3repository-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3bucket-repository 'make-s3bucket-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket-repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3repository-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (bucket-name (common-lisp:error ":bucket-name is required") :type
    (common-lisp:or s3bucket-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3repository 'make-s3repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3repository-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3repository-details-"))
   (bucket-name common-lisp:nil :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (code-artifacts common-lisp:nil :type
    (common-lisp:or code-artifacts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3repository-details 'make-s3repository-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3repository-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3repository-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-artifacts))
      (common-lisp:list
       (common-lisp:cons "CodeArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3repository-details))
   common-lisp:nil))
(common-lisp:deftype severity () 'common-lisp:string)
(common-lisp:deftype short-description () 'common-lisp:string)
(common-lisp:deftype source-code-artifacts-object-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-code-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-code-type-"))
   (commit-diff common-lisp:nil :type
    (common-lisp:or commit-diff-source-code-type common-lisp:null))
   (repository-head common-lisp:nil :type
    (common-lisp:or repository-head-source-code-type common-lisp:null))
   (branch-diff common-lisp:nil :type
    (common-lisp:or branch-diff-source-code-type common-lisp:null))
   (s3bucket-repository common-lisp:nil :type
    (common-lisp:or s3bucket-repository common-lisp:null))
   (request-metadata common-lisp:nil :type
    (common-lisp:or request-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-code-type 'make-source-code-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-code-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-code-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-diff))
      (common-lisp:list
       (common-lisp:cons "CommitDiff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-head))
      (common-lisp:list
       (common-lisp:cons "RepositoryHead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-diff))
      (common-lisp:list
       (common-lisp:cons "BranchDiff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-repository))
      (common-lisp:list
       (common-lisp:cons "S3BucketRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-metadata))
      (common-lisp:list
       (common-lisp:cons "RequestMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-code-type))
   common-lisp:nil))
(common-lisp:deftype state-reason () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or association-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (third-party-source-repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-third-party-source-repository-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (connection-arn (common-lisp:error ":connection-arn is required") :type
    (common-lisp:or connection-arn common-lisp:null))
   (owner (common-lisp:error ":owner is required") :type
    (common-lisp:or owner common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'third-party-source-repository
                    'make-third-party-source-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          third-party-source-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          third-party-source-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          third-party-source-repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or association-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-ids () '(trivial-types:proper-list user-id))
 (common-lisp:defun |make-user-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codeguru-reviewer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype vendor-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository client-request-token tags
                     kmskey-details)
   (common-lisp:declare
    (common-lisp:ignorable repository client-request-token tags
     kmskey-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "POST"
        "/associations" "AssociateRepository" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-repository))
(common-lisp:progn
 (common-lisp:defun create-code-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name repository-association-arn type
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name repository-association-arn type
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-code-review-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "POST"
        "/codereviews" "CreateCodeReview" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-code-review))
(common-lisp:progn
 (common-lisp:defun describe-code-review
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-review-arn)
   (common-lisp:declare (common-lisp:ignorable code-review-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-code-review-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/codereviews/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'code-review-arn))))
        "DescribeCodeReview" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-code-review))
(common-lisp:progn
 (common-lisp:defun describe-recommendation-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-review-arn recommendation-id
                     user-id)
   (common-lisp:declare
    (common-lisp:ignorable code-review-arn recommendation-id user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-recommendation-feedback-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/feedback/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'code-review-arn))))
        "DescribeRecommendationFeedback" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-recommendation-feedback))
(common-lisp:progn
 (common-lisp:defun describe-repository-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-arn)
   (common-lisp:declare (common-lisp:ignorable association-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-repository-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/associations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'association-arn))))
        "DescribeRepositoryAssociation" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-repository-association))
(common-lisp:progn
 (common-lisp:defun disassociate-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-arn)
   (common-lisp:declare (common-lisp:ignorable association-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/associations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'association-arn))))
        "DisassociateRepository" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-repository))
(common-lisp:progn
 (common-lisp:defun list-code-reviews
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider-types states repository-names
                     type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable provider-types states repository-names type
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-code-reviews-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        "/codereviews" "ListCodeReviews" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-code-reviews))
(common-lisp:progn
 (common-lisp:defun list-recommendation-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results code-review-arn
                     user-ids recommendation-ids)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results code-review-arn user-ids
     recommendation-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-recommendation-feedback-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/feedback/~A/RecommendationFeedback"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'code-review-arn))))
        "ListRecommendationFeedback" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recommendation-feedback))
(common-lisp:progn
 (common-lisp:defun list-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results code-review-arn)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results code-review-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/codereviews/~A/Recommendations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'code-review-arn))))
        "ListRecommendations" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recommendations))
(common-lisp:progn
 (common-lisp:defun list-repository-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key provider-types states names owners
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable provider-types states names owners max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-repository-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        "/associations" "ListRepositoryAssociations" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-repository-associations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-recommendation-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-review-arn recommendation-id
                     reactions)
   (common-lisp:declare
    (common-lisp:ignorable code-review-arn recommendation-id reactions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-recommendation-feedback-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "PUT"
        "/feedback" "PutRecommendationFeedback" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-recommendation-feedback))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguru-reviewer-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource" "2019-09-19"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
