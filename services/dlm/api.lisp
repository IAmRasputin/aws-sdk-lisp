;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/dlm/api
  (:use)
  (:nicknames #:aws/dlm)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/dlm/api)
(common-lisp:progn
 (common-lisp:defclass dlm-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "dlm" :protocol :rest-json))
 (common-lisp:export 'dlm-request))
(common-lisp:progn
 (common-lisp:define-condition dlm-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'dlm-error))
(common-lisp:defvar *error-map*
  '(("InternalServerException" . internal-server-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((cross-region-copy :initarg :cross-region-copy :type
                         (common-lisp:or cross-region-copy-action-list
                                         common-lisp:null)
                         :accessor %action-cross-region-copy :initform
                         (common-lisp:error ":cross-region-copy is required"))
                        (name :initarg :name :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor %action-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defun make-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cross-region-copy name)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-region-copy))
      (common-lisp:list
       (common-lisp:cons "CrossRegionCopy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun |make-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass archive-retain-rule common-lisp:nil
                       ((retention-archive-tier :initarg
                         :retention-archive-tier :type
                         (common-lisp:or retention-archive-tier
                                         common-lisp:null)
                         :accessor %archive-retain-rule-retention-archive-tier
                         :initform
                         (common-lisp:error
                          ":retention-archive-tier is required"))))
 (common-lisp:export
  (common-lisp:list 'archive-retain-rule 'make-archive-retain-rule))
 (common-lisp:defun make-archive-retain-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retention-archive-tier)
   (common-lisp:apply #'common-lisp:make-instance 'archive-retain-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-retain-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-retain-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-archive-tier))
      (common-lisp:list
       (common-lisp:cons "RetentionArchiveTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-retain-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-rule common-lisp:nil
                       ((retain-rule :initarg :retain-rule :type
                         (common-lisp:or archive-retain-rule common-lisp:null)
                         :accessor %archive-rule-retain-rule :initform
                         (common-lisp:error ":retain-rule is required"))))
 (common-lisp:export (common-lisp:list 'archive-rule 'make-archive-rule))
 (common-lisp:defun make-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retain-rule)
   (common-lisp:apply #'common-lisp:make-instance 'archive-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-rule))
   common-lisp:nil))
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zone-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype cmk-arn () 'common-lisp:string)
(common-lisp:deftype copy-tags () 'common-lisp:boolean)
(common-lisp:deftype copy-tags-nullable () 'common-lisp:boolean)
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-lifecycle-policy-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-lifecycle-policy-request-tags :initform
                         common-lisp:nil)
                        (policy-details :initarg :policy-details :type
                         (common-lisp:or policy-details common-lisp:null)
                         :accessor
                         %create-lifecycle-policy-request-policy-details
                         :initform
                         (common-lisp:error ":policy-details is required"))
                        (state :initarg :state :type
                         (common-lisp:or settable-policy-state-values
                                         common-lisp:null)
                         :accessor %create-lifecycle-policy-request-state
                         :initform (common-lisp:error ":state is required"))
                        (description :initarg :description :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor %create-lifecycle-policy-request-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (execution-role-arn :initarg :execution-role-arn :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         %create-lifecycle-policy-request-execution-role-arn
                         :initform
                         (common-lisp:error
                          ":execution-role-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-lifecycle-policy-request
                    'make-create-lifecycle-policy-request))
 (common-lisp:defun make-create-lifecycle-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags policy-details state description
                     execution-role-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "PolicyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-lifecycle-policy-response common-lisp:nil
                       ((policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %create-lifecycle-policy-response-policy-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-lifecycle-policy-response
                    'make-create-lifecycle-policy-response))
 (common-lisp:defun make-create-lifecycle-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rule common-lisp:nil
                       ((cron-expression :initarg :cron-expression :type
                         (common-lisp:or cron-expression common-lisp:null)
                         :accessor %create-rule-cron-expression :initform
                         common-lisp:nil)
                        (times :initarg :times :type
                         (common-lisp:or times-list common-lisp:null) :accessor
                         %create-rule-times :initform common-lisp:nil)
                        (interval-unit :initarg :interval-unit :type
                         (common-lisp:or interval-unit-values common-lisp:null)
                         :accessor %create-rule-interval-unit :initform
                         common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or interval common-lisp:null) :accessor
                         %create-rule-interval :initform common-lisp:nil)
                        (location :initarg :location :type
                         (common-lisp:or location-values common-lisp:null)
                         :accessor %create-rule-location :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'create-rule 'make-create-rule))
 (common-lisp:defun make-create-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cron-expression times interval-unit
                     interval location)
   (common-lisp:apply #'common-lisp:make-instance 'create-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'times))
      (common-lisp:list
       (common-lisp:cons "Times"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cron-expression))
      (common-lisp:list
       (common-lisp:cons "CronExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule))
   common-lisp:nil))
(common-lisp:deftype cron-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cross-region-copy-action common-lisp:nil
                       ((retain-rule :initarg :retain-rule :type
                         (common-lisp:or cross-region-copy-retain-rule
                                         common-lisp:null)
                         :accessor %cross-region-copy-action-retain-rule
                         :initform common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %cross-region-copy-action-encryption-configuration
                         :initform
                         (common-lisp:error
                          ":encryption-configuration is required"))
                        (target :initarg :target :type
                         (common-lisp:or target common-lisp:null) :accessor
                         %cross-region-copy-action-target :initform
                         (common-lisp:error ":target is required"))))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-action 'make-cross-region-copy-action))
 (common-lisp:defun make-cross-region-copy-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retain-rule encryption-configuration
                     target)
   (common-lisp:apply #'common-lisp:make-instance 'cross-region-copy-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cross-region-copy-action-list ()
   '(trivial-types:proper-list cross-region-copy-action))
 (common-lisp:defun |make-cross-region-copy-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cross-region-copy-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cross-region-copy-deprecate-rule common-lisp:nil
                       ((interval-unit :initarg :interval-unit :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor
                         %cross-region-copy-deprecate-rule-interval-unit
                         :initform common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or interval common-lisp:null) :accessor
                         %cross-region-copy-deprecate-rule-interval :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-deprecate-rule
                    'make-cross-region-copy-deprecate-rule))
 (common-lisp:defun make-cross-region-copy-deprecate-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interval-unit interval)
   (common-lisp:apply #'common-lisp:make-instance
                      'cross-region-copy-deprecate-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-deprecate-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-deprecate-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-deprecate-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cross-region-copy-retain-rule common-lisp:nil
                       ((interval-unit :initarg :interval-unit :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor %cross-region-copy-retain-rule-interval-unit
                         :initform common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or interval common-lisp:null) :accessor
                         %cross-region-copy-retain-rule-interval :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-retain-rule
                    'make-cross-region-copy-retain-rule))
 (common-lisp:defun make-cross-region-copy-retain-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interval-unit interval)
   (common-lisp:apply #'common-lisp:make-instance
                      'cross-region-copy-retain-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-retain-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-retain-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-retain-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cross-region-copy-rule common-lisp:nil
                       ((deprecate-rule :initarg :deprecate-rule :type
                         (common-lisp:or cross-region-copy-deprecate-rule
                                         common-lisp:null)
                         :accessor %cross-region-copy-rule-deprecate-rule
                         :initform common-lisp:nil)
                        (retain-rule :initarg :retain-rule :type
                         (common-lisp:or cross-region-copy-retain-rule
                                         common-lisp:null)
                         :accessor %cross-region-copy-rule-retain-rule
                         :initform common-lisp:nil)
                        (copy-tags :initarg :copy-tags :type
                         (common-lisp:or copy-tags-nullable common-lisp:null)
                         :accessor %cross-region-copy-rule-copy-tags :initform
                         common-lisp:nil)
                        (cmk-arn :initarg :cmk-arn :type
                         (common-lisp:or cmk-arn common-lisp:null) :accessor
                         %cross-region-copy-rule-cmk-arn :initform
                         common-lisp:nil)
                        (encrypted :initarg :encrypted :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         %cross-region-copy-rule-encrypted :initform
                         (common-lisp:error ":encrypted is required"))
                        (target :initarg :target :type
                         (common-lisp:or target common-lisp:null) :accessor
                         %cross-region-copy-rule-target :initform
                         common-lisp:nil)
                        (target-region :initarg :target-region :type
                         (common-lisp:or target-region common-lisp:null)
                         :accessor %cross-region-copy-rule-target-region
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-rule 'make-cross-region-copy-rule))
 (common-lisp:defun make-cross-region-copy-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deprecate-rule retain-rule copy-tags
                     cmk-arn encrypted target target-region)
   (common-lisp:apply #'common-lisp:make-instance 'cross-region-copy-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "TargetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cmk-arn))
      (common-lisp:list
       (common-lisp:cons "CmkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecate-rule))
      (common-lisp:list
       (common-lisp:cons "DeprecateRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cross-region-copy-rules ()
   '(trivial-types:proper-list cross-region-copy-rule))
 (common-lisp:defun |make-cross-region-copy-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cross-region-copy-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-lifecycle-policy-request common-lisp:nil
                       ((policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %delete-lifecycle-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-policy-request
                    'make-delete-lifecycle-policy-request))
 (common-lisp:defun make-delete-lifecycle-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-lifecycle-policy-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-policy-response
                    'make-delete-lifecycle-policy-response))
 (common-lisp:defun make-delete-lifecycle-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deprecate-rule common-lisp:nil
                       ((interval-unit :initarg :interval-unit :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor %deprecate-rule-interval-unit :initform
                         common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or interval common-lisp:null) :accessor
                         %deprecate-rule-interval :initform common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or count common-lisp:null) :accessor
                         %deprecate-rule-count :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'deprecate-rule 'make-deprecate-rule))
 (common-lisp:defun make-deprecate-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interval-unit interval count)
   (common-lisp:apply #'common-lisp:make-instance 'deprecate-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deprecate-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deprecate-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deprecate-rule))
   common-lisp:nil))
(common-lisp:deftype description-regex () 'common-lisp:string)
(common-lisp:deftype encrypted () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((cmk-arn :initarg :cmk-arn :type
                         (common-lisp:or cmk-arn common-lisp:null) :accessor
                         %encryption-configuration-cmk-arn :initform
                         common-lisp:nil)
                        (encrypted :initarg :encrypted :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         %encryption-configuration-encrypted :initform
                         (common-lisp:error ":encrypted is required"))))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defun make-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cmk-arn encrypted)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cmk-arn))
      (common-lisp:list
       (common-lisp:cons "CmkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-parameters common-lisp:nil
                       ((description-regex :initarg :description-regex :type
                         (common-lisp:or description-regex common-lisp:null)
                         :accessor %event-parameters-description-regex
                         :initform
                         (common-lisp:error ":description-regex is required"))
                        (snapshot-owner :initarg :snapshot-owner :type
                         (common-lisp:or snapshot-owner-list common-lisp:null)
                         :accessor %event-parameters-snapshot-owner :initform
                         (common-lisp:error ":snapshot-owner is required"))
                        (event-type :initarg :event-type :type
                         (common-lisp:or event-type-values common-lisp:null)
                         :accessor %event-parameters-event-type :initform
                         (common-lisp:error ":event-type is required"))))
 (common-lisp:export
  (common-lisp:list 'event-parameters 'make-event-parameters))
 (common-lisp:defun make-event-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description-regex snapshot-owner
                     event-type)
   (common-lisp:apply #'common-lisp:make-instance 'event-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-owner))
      (common-lisp:list
       (common-lisp:cons "SnapshotOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description-regex))
      (common-lisp:list
       (common-lisp:cons "DescriptionRegex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event-source common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or event-parameters common-lisp:null)
                         :accessor %event-source-parameters :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or event-source-values common-lisp:null)
                         :accessor %event-source-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'event-source 'make-event-source))
 (common-lisp:defun make-event-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters type)
   (common-lisp:apply #'common-lisp:make-instance 'event-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-source))
   common-lisp:nil))
(common-lisp:deftype event-source-values () 'common-lisp:string)
(common-lisp:deftype event-type-values () 'common-lisp:string)
(common-lisp:deftype exclude-boot-volume () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype exclude-data-volume-tag-list ()
   '(trivial-types:proper-list tag))
 (common-lisp:defun |make-exclude-data-volume-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype execution-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fast-restore-rule common-lisp:nil
                       ((availability-zones :initarg :availability-zones :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor %fast-restore-rule-availability-zones
                         :initform
                         (common-lisp:error ":availability-zones is required"))
                        (interval-unit :initarg :interval-unit :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor %fast-restore-rule-interval-unit :initform
                         common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or interval common-lisp:null) :accessor
                         %fast-restore-rule-interval :initform common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or count common-lisp:null) :accessor
                         %fast-restore-rule-count :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fast-restore-rule 'make-fast-restore-rule))
 (common-lisp:defun make-fast-restore-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zones interval-unit interval
                     count)
   (common-lisp:apply #'common-lisp:make-instance 'fast-restore-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fast-restore-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fast-restore-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fast-restore-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policies-request common-lisp:nil
                       ((tags-to-add :initarg :tags-to-add :type
                         (common-lisp:or tags-to-add-filter-list
                                         common-lisp:null)
                         :accessor %get-lifecycle-policies-request-tags-to-add
                         :initform common-lisp:nil)
                        (target-tags :initarg :target-tags :type
                         (common-lisp:or target-tags-filter-list
                                         common-lisp:null)
                         :accessor %get-lifecycle-policies-request-target-tags
                         :initform common-lisp:nil)
                        (resource-types :initarg :resource-types :type
                         (common-lisp:or resource-type-values-list
                                         common-lisp:null)
                         :accessor
                         %get-lifecycle-policies-request-resource-types
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or gettable-policy-state-values
                                         common-lisp:null)
                         :accessor %get-lifecycle-policies-request-state
                         :initform common-lisp:nil)
                        (policy-ids :initarg :policy-ids :type
                         (common-lisp:or policy-id-list common-lisp:null)
                         :accessor %get-lifecycle-policies-request-policy-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policies-request
                    'make-get-lifecycle-policies-request))
 (common-lisp:defun make-get-lifecycle-policies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags-to-add target-tags resource-types
                     state policy-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lifecycle-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policies-response common-lisp:nil
                       ((policies :initarg :policies :type
                         (common-lisp:or lifecycle-policy-summary-list
                                         common-lisp:null)
                         :accessor %get-lifecycle-policies-response-policies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policies-response
                    'make-get-lifecycle-policies-response))
 (common-lisp:defun make-get-lifecycle-policies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policies)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lifecycle-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policy-request common-lisp:nil
                       ((policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %get-lifecycle-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policy-request
                    'make-get-lifecycle-policy-request))
 (common-lisp:defun make-get-lifecycle-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policy-response common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or lifecycle-policy common-lisp:null)
                         :accessor %get-lifecycle-policy-response-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policy-response
                    'make-get-lifecycle-policy-response))
 (common-lisp:defun make-get-lifecycle-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:deftype gettable-policy-state-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       internal-server-exception-code)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-code)))
(common-lisp:deftype interval () 'common-lisp:integer)
(common-lisp:deftype interval-unit-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       invalid-request-exception-code)
      (required-parameters :initarg :required-parameters :initform
       common-lisp:nil :reader invalid-request-exception-required-parameters)
      (mutually-exclusive-parameters :initarg :mutually-exclusive-parameters
       :initform common-lisp:nil :reader
       invalid-request-exception-mutually-exclusive-parameters)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message
                    'invalid-request-exception-code
                    'invalid-request-exception-required-parameters
                    'invalid-request-exception-mutually-exclusive-parameters)))
(common-lisp:progn
 (common-lisp:defclass lifecycle-policy common-lisp:nil
                       ((policy-arn :initarg :policy-arn :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         %lifecycle-policy-policy-arn :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %lifecycle-policy-tags :initform common-lisp:nil)
                        (policy-details :initarg :policy-details :type
                         (common-lisp:or policy-details common-lisp:null)
                         :accessor %lifecycle-policy-policy-details :initform
                         common-lisp:nil)
                        (date-modified :initarg :date-modified :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %lifecycle-policy-date-modified :initform
                         common-lisp:nil)
                        (date-created :initarg :date-created :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %lifecycle-policy-date-created :initform
                         common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor %lifecycle-policy-execution-role-arn
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor %lifecycle-policy-status-message :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or gettable-policy-state-values
                                         common-lisp:null)
                         :accessor %lifecycle-policy-state :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor %lifecycle-policy-description :initform
                         common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %lifecycle-policy-policy-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy 'make-lifecycle-policy))
 (common-lisp:defun make-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-arn tags policy-details
                     date-modified date-created execution-role-arn
                     status-message state description policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "PolicyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-policy-summary common-lisp:nil
                       ((policy-type :initarg :policy-type :type
                         (common-lisp:or policy-type-values common-lisp:null)
                         :accessor %lifecycle-policy-summary-policy-type
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %lifecycle-policy-summary-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or gettable-policy-state-values
                                         common-lisp:null)
                         :accessor %lifecycle-policy-summary-state :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor %lifecycle-policy-summary-description
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %lifecycle-policy-summary-policy-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy-summary 'make-lifecycle-policy-summary))
 (common-lisp:defun make-lifecycle-policy-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-type tags state description
                     policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-policy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-policy-summary-list ()
   '(trivial-types:proper-list lifecycle-policy-summary))
 (common-lisp:defun |make-lifecycle-policy-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lifecycle-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       limit-exceeded-exception-code)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-code
                    'limit-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype location-values () 'common-lisp:string)
(common-lisp:deftype no-reboot () 'common-lisp:boolean)
(common-lisp:deftype parameter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-list () '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameters common-lisp:nil
                       ((exclude-data-volume-tags :initarg
                         :exclude-data-volume-tags :type
                         (common-lisp:or exclude-data-volume-tag-list
                                         common-lisp:null)
                         :accessor %parameters-exclude-data-volume-tags
                         :initform common-lisp:nil)
                        (no-reboot :initarg :no-reboot :type
                         (common-lisp:or no-reboot common-lisp:null) :accessor
                         %parameters-no-reboot :initform common-lisp:nil)
                        (exclude-boot-volume :initarg :exclude-boot-volume
                         :type
                         (common-lisp:or exclude-boot-volume common-lisp:null)
                         :accessor %parameters-exclude-boot-volume :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'parameters 'make-parameters))
 (common-lisp:defun make-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exclude-data-volume-tags no-reboot
                     exclude-boot-volume)
   (common-lisp:apply #'common-lisp:make-instance 'parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-boot-volume))
      (common-lisp:list
       (common-lisp:cons "ExcludeBootVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-reboot))
      (common-lisp:list
       (common-lisp:cons "NoReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-data-volume-tags))
      (common-lisp:list
       (common-lisp:cons "ExcludeDataVolumeTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameters))
   common-lisp:nil))
(common-lisp:deftype policy-arn () 'common-lisp:string)
(common-lisp:deftype policy-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-details common-lisp:nil
                       ((actions :initarg :actions :type
                         (common-lisp:or action-list common-lisp:null)
                         :accessor %policy-details-actions :initform
                         common-lisp:nil)
                        (event-source :initarg :event-source :type
                         (common-lisp:or event-source common-lisp:null)
                         :accessor %policy-details-event-source :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %policy-details-parameters :initform common-lisp:nil)
                        (schedules :initarg :schedules :type
                         (common-lisp:or schedule-list common-lisp:null)
                         :accessor %policy-details-schedules :initform
                         common-lisp:nil)
                        (target-tags :initarg :target-tags :type
                         (common-lisp:or target-tag-list common-lisp:null)
                         :accessor %policy-details-target-tags :initform
                         common-lisp:nil)
                        (resource-locations :initarg :resource-locations :type
                         (common-lisp:or resource-location-list
                                         common-lisp:null)
                         :accessor %policy-details-resource-locations :initform
                         common-lisp:nil)
                        (resource-types :initarg :resource-types :type
                         (common-lisp:or resource-type-values-list
                                         common-lisp:null)
                         :accessor %policy-details-resource-types :initform
                         common-lisp:nil)
                        (policy-type :initarg :policy-type :type
                         (common-lisp:or policy-type-values common-lisp:null)
                         :accessor %policy-details-policy-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy-details 'make-policy-details))
 (common-lisp:defun make-policy-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key actions event-source parameters schedules
                     target-tags resource-locations resource-types policy-type)
   (common-lisp:apply #'common-lisp:make-instance 'policy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-locations))
      (common-lisp:list
       (common-lisp:cons "ResourceLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-tags))
      (common-lisp:list
       (common-lisp:cons "TargetTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedules))
      (common-lisp:list
       (common-lisp:cons "Schedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "EventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-details))
   common-lisp:nil))
(common-lisp:deftype policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-id-list () '(trivial-types:proper-list policy-id))
 (common-lisp:defun |make-policy-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-type-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-location-list ()
   '(trivial-types:proper-list resource-location-values))
 (common-lisp:defun |make-resource-location-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-location-values))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-location-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (resource-ids :initarg :resource-ids :initform common-lisp:nil :reader
       resource-not-found-exception-resource-ids)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-code
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-resource-ids)))
(common-lisp:deftype resource-type-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-type-values-list ()
   '(trivial-types:proper-list resource-type-values))
 (common-lisp:defun |make-resource-type-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type-values))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass retain-rule common-lisp:nil
                       ((interval-unit :initarg :interval-unit :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor %retain-rule-interval-unit :initform
                         common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or standard-tier-retain-rule-interval
                                         common-lisp:null)
                         :accessor %retain-rule-interval :initform
                         common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or standard-tier-retain-rule-count
                                         common-lisp:null)
                         :accessor %retain-rule-count :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'retain-rule 'make-retain-rule))
 (common-lisp:defun make-retain-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interval-unit interval count)
   (common-lisp:apply #'common-lisp:make-instance 'retain-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retain-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retain-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retain-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retention-archive-tier common-lisp:nil
                       ((interval-unit :initarg :interval-unit :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor %retention-archive-tier-interval-unit
                         :initform common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or interval common-lisp:null) :accessor
                         %retention-archive-tier-interval :initform
                         common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or count common-lisp:null) :accessor
                         %retention-archive-tier-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'retention-archive-tier 'make-retention-archive-tier))
 (common-lisp:defun make-retention-archive-tier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key interval-unit interval count)
   (common-lisp:apply #'common-lisp:make-instance 'retention-archive-tier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retention-archive-tier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retention-archive-tier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retention-archive-tier))
   common-lisp:nil))
(common-lisp:deftype retention-interval-unit-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schedule common-lisp:nil
                       ((archive-rule :initarg :archive-rule :type
                         (common-lisp:or archive-rule common-lisp:null)
                         :accessor %schedule-archive-rule :initform
                         common-lisp:nil)
                        (deprecate-rule :initarg :deprecate-rule :type
                         (common-lisp:or deprecate-rule common-lisp:null)
                         :accessor %schedule-deprecate-rule :initform
                         common-lisp:nil)
                        (share-rules :initarg :share-rules :type
                         (common-lisp:or share-rules common-lisp:null)
                         :accessor %schedule-share-rules :initform
                         common-lisp:nil)
                        (cross-region-copy-rules :initarg
                         :cross-region-copy-rules :type
                         (common-lisp:or cross-region-copy-rules
                                         common-lisp:null)
                         :accessor %schedule-cross-region-copy-rules :initform
                         common-lisp:nil)
                        (fast-restore-rule :initarg :fast-restore-rule :type
                         (common-lisp:or fast-restore-rule common-lisp:null)
                         :accessor %schedule-fast-restore-rule :initform
                         common-lisp:nil)
                        (retain-rule :initarg :retain-rule :type
                         (common-lisp:or retain-rule common-lisp:null)
                         :accessor %schedule-retain-rule :initform
                         common-lisp:nil)
                        (create-rule :initarg :create-rule :type
                         (common-lisp:or create-rule common-lisp:null)
                         :accessor %schedule-create-rule :initform
                         common-lisp:nil)
                        (variable-tags :initarg :variable-tags :type
                         (common-lisp:or variable-tags-list common-lisp:null)
                         :accessor %schedule-variable-tags :initform
                         common-lisp:nil)
                        (tags-to-add :initarg :tags-to-add :type
                         (common-lisp:or tags-to-add-list common-lisp:null)
                         :accessor %schedule-tags-to-add :initform
                         common-lisp:nil)
                        (copy-tags :initarg :copy-tags :type
                         (common-lisp:or copy-tags common-lisp:null) :accessor
                         %schedule-copy-tags :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or schedule-name common-lisp:null)
                         :accessor %schedule-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defun make-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key archive-rule deprecate-rule share-rules
                     cross-region-copy-rules fast-restore-rule retain-rule
                     create-rule variable-tags tags-to-add copy-tags name)
   (common-lisp:apply #'common-lisp:make-instance 'schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-add))
      (common-lisp:list
       (common-lisp:cons "TagsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-tags))
      (common-lisp:list
       (common-lisp:cons "VariableTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-rule))
      (common-lisp:list
       (common-lisp:cons "CreateRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fast-restore-rule))
      (common-lisp:list
       (common-lisp:cons "FastRestoreRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-region-copy-rules))
      (common-lisp:list
       (common-lisp:cons "CrossRegionCopyRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-rules))
      (common-lisp:list
       (common-lisp:cons "ShareRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecate-rule))
      (common-lisp:list
       (common-lisp:cons "DeprecateRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rule))
      (common-lisp:list
       (common-lisp:cons "ArchiveRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schedule-list () '(trivial-types:proper-list schedule))
 (common-lisp:defun |make-schedule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schedule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schedule-name () 'common-lisp:string)
(common-lisp:deftype settable-policy-state-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass share-rule common-lisp:nil
                       ((unshare-interval-unit :initarg :unshare-interval-unit
                         :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor %share-rule-unshare-interval-unit :initform
                         common-lisp:nil)
                        (unshare-interval :initarg :unshare-interval :type
                         (common-lisp:or interval common-lisp:null) :accessor
                         %share-rule-unshare-interval :initform
                         common-lisp:nil)
                        (target-accounts :initarg :target-accounts :type
                         (common-lisp:or share-target-account-list
                                         common-lisp:null)
                         :accessor %share-rule-target-accounts :initform
                         (common-lisp:error ":target-accounts is required"))))
 (common-lisp:export (common-lisp:list 'share-rule 'make-share-rule))
 (common-lisp:defun make-share-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unshare-interval-unit unshare-interval
                     target-accounts)
   (common-lisp:apply #'common-lisp:make-instance 'share-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-accounts))
      (common-lisp:list
       (common-lisp:cons "TargetAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unshare-interval))
      (common-lisp:list
       (common-lisp:cons "UnshareInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unshare-interval-unit))
      (common-lisp:list
       (common-lisp:cons "UnshareIntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype share-rules () '(trivial-types:proper-list share-rule))
 (common-lisp:defun |make-share-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list share-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype share-target-account-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun |make-share-target-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshot-owner-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun |make-snapshot-owner-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype standard-tier-retain-rule-count () 'common-lisp:integer)
(common-lisp:deftype standard-tier-retain-rule-interval () 'common-lisp:integer)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-filter () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-to-add-filter-list ()
   '(trivial-types:proper-list tag-filter))
 (common-lisp:defun |make-tags-to-add-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tags-to-add-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags-to-add-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target () 'common-lisp:string)
(common-lisp:deftype target-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-target-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype target-tags-filter-list ()
   '(trivial-types:proper-list tag-filter))
 (common-lisp:defun |make-target-tags-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype times-list () '(trivial-types:proper-list time))
 (common-lisp:defun |make-times-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-lifecycle-policy-request common-lisp:nil
                       ((policy-details :initarg :policy-details :type
                         (common-lisp:or policy-details common-lisp:null)
                         :accessor
                         %update-lifecycle-policy-request-policy-details
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor %update-lifecycle-policy-request-description
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or settable-policy-state-values
                                         common-lisp:null)
                         :accessor %update-lifecycle-policy-request-state
                         :initform common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         %update-lifecycle-policy-request-execution-role-arn
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %update-lifecycle-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-lifecycle-policy-request
                    'make-update-lifecycle-policy-request))
 (common-lisp:defun make-update-lifecycle-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-details description state
                     execution-role-arn policy-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "PolicyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-lifecycle-policy-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-lifecycle-policy-response
                    'make-update-lifecycle-policy-response))
 (common-lisp:defun make-update-lifecycle-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variable-tags-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-variable-tags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-role-arn description state
                     policy-details tags)
   (common-lisp:declare
    (common-lisp:ignorable execution-role-arn description state policy-details
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/policies"
                                                        "CreateLifecyclePolicy"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun delete-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-id))))
                                                        "DeleteLifecyclePolicy"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun get-lifecycle-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-ids state resource-types
                     target-tags tags-to-add)
   (common-lisp:declare
    (common-lisp:ignorable policy-ids state resource-types target-tags
     tags-to-add))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lifecycle-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/policies"
                                                        "GetLifecyclePolicies"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lifecycle-policies))
(common-lisp:progn
 (common-lisp:defun get-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-id))))
                                                        "GetLifecyclePolicy"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id execution-role-arn state
                     description policy-details)
   (common-lisp:declare
    (common-lisp:ignorable policy-id execution-role-arn state description
     policy-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-id))))
                                                        "UpdateLifecyclePolicy"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-lifecycle-policy))
