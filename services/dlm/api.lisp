;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/dlm/api
  (:use)
  (:nicknames #:aws/dlm)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/dlm/api)
(common-lisp:progn
 (common-lisp:defclass dlm-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "dlm" :protocol :rest-json))
 (common-lisp:export 'dlm-request))
(common-lisp:progn
 (common-lisp:define-condition dlm-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'dlm-error))
(common-lisp:defvar *error-map*
  '(("InternalServerException" . internal-server-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (action (:copier common-lisp:nil) (:conc-name "struct-shape-action-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or action-name common-lisp:null))
   (cross-region-copy (common-lisp:error ":cross-region-copy is required")
    :type (common-lisp:or cross-region-copy-action-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-region-copy))
      (common-lisp:list
       (common-lisp:cons "CrossRegionCopy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun |make-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (archive-retain-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-archive-retain-rule-"))
   (retention-archive-tier
    (common-lisp:error ":retention-archive-tier is required") :type
    (common-lisp:or retention-archive-tier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'archive-retain-rule 'make-archive-retain-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-retain-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-retain-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-archive-tier))
      (common-lisp:list
       (common-lisp:cons "RetentionArchiveTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-retain-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (archive-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-archive-rule-"))
   (retain-rule (common-lisp:error ":retain-rule is required") :type
    (common-lisp:or archive-retain-rule common-lisp:null)))
 (common-lisp:export (common-lisp:list 'archive-rule 'make-archive-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-rule))
   common-lisp:nil))
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zone-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype cmk-arn () 'common-lisp:string)
(common-lisp:deftype copy-tags () 'common-lisp:boolean)
(common-lisp:deftype copy-tags-nullable () 'common-lisp:boolean)
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (create-lifecycle-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lifecycle-policy-request-"))
   (execution-role-arn (common-lisp:error ":execution-role-arn is required")
    :type (common-lisp:or execution-role-arn common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or policy-description common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or settable-policy-state-values common-lisp:null))
   (policy-details (common-lisp:error ":policy-details is required") :type
    (common-lisp:or policy-details common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lifecycle-policy-request
                    'make-create-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "PolicyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-lifecycle-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-lifecycle-policy-response-"))
   (policy-id common-lisp:nil :type
    (common-lisp:or policy-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lifecycle-policy-response
                    'make-create-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-"))
   (location common-lisp:nil :type
    (common-lisp:or location-values common-lisp:null))
   (interval common-lisp:nil :type (common-lisp:or interval common-lisp:null))
   (interval-unit common-lisp:nil :type
    (common-lisp:or interval-unit-values common-lisp:null))
   (times common-lisp:nil :type (common-lisp:or times-list common-lisp:null))
   (cron-expression common-lisp:nil :type
    (common-lisp:or cron-expression common-lisp:null)))
 (common-lisp:export (common-lisp:list 'create-rule 'make-create-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'times))
      (common-lisp:list
       (common-lisp:cons "Times"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cron-expression))
      (common-lisp:list
       (common-lisp:cons "CronExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule))
   common-lisp:nil))
(common-lisp:deftype cron-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cross-region-copy-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-cross-region-copy-action-"))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or target common-lisp:null))
   (encryption-configuration
    (common-lisp:error ":encryption-configuration is required") :type
    (common-lisp:or encryption-configuration common-lisp:null))
   (retain-rule common-lisp:nil :type
    (common-lisp:or cross-region-copy-retain-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-action 'make-cross-region-copy-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cross-region-copy-action-list ()
   '(trivial-types:proper-list cross-region-copy-action))
 (common-lisp:defun |make-cross-region-copy-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cross-region-copy-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cross-region-copy-deprecate-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-cross-region-copy-deprecate-rule-"))
   (interval common-lisp:nil :type (common-lisp:or interval common-lisp:null))
   (interval-unit common-lisp:nil :type
    (common-lisp:or retention-interval-unit-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-deprecate-rule
                    'make-cross-region-copy-deprecate-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-deprecate-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-deprecate-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-deprecate-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cross-region-copy-retain-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-cross-region-copy-retain-rule-"))
   (interval common-lisp:nil :type (common-lisp:or interval common-lisp:null))
   (interval-unit common-lisp:nil :type
    (common-lisp:or retention-interval-unit-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-retain-rule
                    'make-cross-region-copy-retain-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-retain-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-retain-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-retain-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cross-region-copy-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-cross-region-copy-rule-"))
   (target-region common-lisp:nil :type
    (common-lisp:or target-region common-lisp:null))
   (target common-lisp:nil :type (common-lisp:or target common-lisp:null))
   (encrypted (common-lisp:error ":encrypted is required") :type
    (common-lisp:or encrypted common-lisp:null))
   (cmk-arn common-lisp:nil :type (common-lisp:or cmk-arn common-lisp:null))
   (copy-tags common-lisp:nil :type
    (common-lisp:or copy-tags-nullable common-lisp:null))
   (retain-rule common-lisp:nil :type
    (common-lisp:or cross-region-copy-retain-rule common-lisp:null))
   (deprecate-rule common-lisp:nil :type
    (common-lisp:or cross-region-copy-deprecate-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-rule 'make-cross-region-copy-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "TargetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cmk-arn))
      (common-lisp:list
       (common-lisp:cons "CmkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecate-rule))
      (common-lisp:list
       (common-lisp:cons "DeprecateRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cross-region-copy-rules ()
   '(trivial-types:proper-list cross-region-copy-rule))
 (common-lisp:defun |make-cross-region-copy-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cross-region-copy-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lifecycle-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lifecycle-policy-request-"))
   (policy-id (common-lisp:error ":policy-id is required") :type
    (common-lisp:or policy-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-policy-request
                    'make-delete-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-lifecycle-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-lifecycle-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-policy-response
                    'make-delete-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deprecate-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-deprecate-rule-"))
   (count common-lisp:nil :type (common-lisp:or count common-lisp:null))
   (interval common-lisp:nil :type (common-lisp:or interval common-lisp:null))
   (interval-unit common-lisp:nil :type
    (common-lisp:or retention-interval-unit-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'deprecate-rule 'make-deprecate-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deprecate-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deprecate-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deprecate-rule))
   common-lisp:nil))
(common-lisp:deftype description-regex () 'common-lisp:string)
(common-lisp:deftype encrypted () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-configuration-"))
   (encrypted (common-lisp:error ":encrypted is required") :type
    (common-lisp:or encrypted common-lisp:null))
   (cmk-arn common-lisp:nil :type (common-lisp:or cmk-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cmk-arn))
      (common-lisp:list
       (common-lisp:cons "CmkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-parameters-"))
   (event-type (common-lisp:error ":event-type is required") :type
    (common-lisp:or event-type-values common-lisp:null))
   (snapshot-owner (common-lisp:error ":snapshot-owner is required") :type
    (common-lisp:or snapshot-owner-list common-lisp:null))
   (description-regex (common-lisp:error ":description-regex is required")
    :type (common-lisp:or description-regex common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-parameters 'make-event-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-owner))
      (common-lisp:list
       (common-lisp:cons "SnapshotOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description-regex))
      (common-lisp:list
       (common-lisp:cons "DescriptionRegex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (event-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-source-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or event-source-values common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or event-parameters common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-source 'make-event-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-source))
   common-lisp:nil))
(common-lisp:deftype event-source-values () 'common-lisp:string)
(common-lisp:deftype event-type-values () 'common-lisp:string)
(common-lisp:deftype exclude-boot-volume () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype exclude-data-volume-tag-list ()
   '(trivial-types:proper-list tag))
 (common-lisp:defun |make-exclude-data-volume-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype execution-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (fast-restore-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-fast-restore-rule-"))
   (count common-lisp:nil :type (common-lisp:or count common-lisp:null))
   (interval common-lisp:nil :type (common-lisp:or interval common-lisp:null))
   (interval-unit common-lisp:nil :type
    (common-lisp:or retention-interval-unit-values common-lisp:null))
   (availability-zones (common-lisp:error ":availability-zones is required")
    :type (common-lisp:or availability-zone-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fast-restore-rule 'make-fast-restore-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fast-restore-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fast-restore-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fast-restore-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lifecycle-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lifecycle-policies-request-"))
   (policy-ids common-lisp:nil :type
    (common-lisp:or policy-id-list common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or gettable-policy-state-values common-lisp:null))
   (resource-types common-lisp:nil :type
    (common-lisp:or resource-type-values-list common-lisp:null))
   (target-tags common-lisp:nil :type
    (common-lisp:or target-tags-filter-list common-lisp:null))
   (tags-to-add common-lisp:nil :type
    (common-lisp:or tags-to-add-filter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policies-request
                    'make-get-lifecycle-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lifecycle-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lifecycle-policies-response-"))
   (policies common-lisp:nil :type
    (common-lisp:or lifecycle-policy-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policies-response
                    'make-get-lifecycle-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lifecycle-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lifecycle-policy-request-"))
   (policy-id (common-lisp:error ":policy-id is required") :type
    (common-lisp:or policy-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policy-request
                    'make-get-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lifecycle-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lifecycle-policy-response-"))
   (policy common-lisp:nil :type
    (common-lisp:or lifecycle-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policy-response
                    'make-get-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:deftype gettable-policy-state-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       internal-server-exception-code)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-code)))
(common-lisp:deftype interval () 'common-lisp:integer)
(common-lisp:deftype interval-unit-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       invalid-request-exception-code)
      (required-parameters :initarg :required-parameters :initform
       common-lisp:nil :reader invalid-request-exception-required-parameters)
      (mutually-exclusive-parameters :initarg :mutually-exclusive-parameters
       :initform common-lisp:nil :reader
       invalid-request-exception-mutually-exclusive-parameters)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message
                    'invalid-request-exception-code
                    'invalid-request-exception-required-parameters
                    'invalid-request-exception-mutually-exclusive-parameters)))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-policy-"))
   (policy-id common-lisp:nil :type
    (common-lisp:or policy-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-description common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or gettable-policy-state-values common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (execution-role-arn common-lisp:nil :type
    (common-lisp:or execution-role-arn common-lisp:null))
   (date-created common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (date-modified common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (policy-details common-lisp:nil :type
    (common-lisp:or policy-details common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy 'make-lifecycle-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "PolicyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lifecycle-policy-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-lifecycle-policy-summary-"))
   (policy-id common-lisp:nil :type
    (common-lisp:or policy-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-description common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or gettable-policy-state-values common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (policy-type common-lisp:nil :type
    (common-lisp:or policy-type-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy-summary 'make-lifecycle-policy-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-policy-summary-list ()
   '(trivial-types:proper-list lifecycle-policy-summary))
 (common-lisp:defun |make-lifecycle-policy-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lifecycle-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       limit-exceeded-exception-code)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-code
                    'limit-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or policy-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype location-values () 'common-lisp:string)
(common-lisp:deftype no-reboot () 'common-lisp:boolean)
(common-lisp:deftype parameter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-list () '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameters-"))
   (exclude-boot-volume common-lisp:nil :type
    (common-lisp:or exclude-boot-volume common-lisp:null))
   (no-reboot common-lisp:nil :type
    (common-lisp:or no-reboot common-lisp:null))
   (exclude-data-volume-tags common-lisp:nil :type
    (common-lisp:or exclude-data-volume-tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameters 'make-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-boot-volume))
      (common-lisp:list
       (common-lisp:cons "ExcludeBootVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-reboot))
      (common-lisp:list
       (common-lisp:cons "NoReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-data-volume-tags))
      (common-lisp:list
       (common-lisp:cons "ExcludeDataVolumeTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameters))
   common-lisp:nil))
(common-lisp:deftype policy-arn () 'common-lisp:string)
(common-lisp:deftype policy-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-details-"))
   (policy-type common-lisp:nil :type
    (common-lisp:or policy-type-values common-lisp:null))
   (resource-types common-lisp:nil :type
    (common-lisp:or resource-type-values-list common-lisp:null))
   (resource-locations common-lisp:nil :type
    (common-lisp:or resource-location-list common-lisp:null))
   (target-tags common-lisp:nil :type
    (common-lisp:or target-tag-list common-lisp:null))
   (schedules common-lisp:nil :type
    (common-lisp:or schedule-list common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters common-lisp:null))
   (event-source common-lisp:nil :type
    (common-lisp:or event-source common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or action-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-details 'make-policy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-locations))
      (common-lisp:list
       (common-lisp:cons "ResourceLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-tags))
      (common-lisp:list
       (common-lisp:cons "TargetTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedules))
      (common-lisp:list
       (common-lisp:cons "Schedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "EventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-details))
   common-lisp:nil))
(common-lisp:deftype policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-id-list () '(trivial-types:proper-list policy-id))
 (common-lisp:defun |make-policy-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-type-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-location-list ()
   '(trivial-types:proper-list resource-location-values))
 (common-lisp:defun |make-resource-location-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-location-values))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-location-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (resource-ids :initarg :resource-ids :initform common-lisp:nil :reader
       resource-not-found-exception-resource-ids)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-code
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-resource-ids)))
(common-lisp:deftype resource-type-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-type-values-list ()
   '(trivial-types:proper-list resource-type-values))
 (common-lisp:defun |make-resource-type-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type-values))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (retain-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-retain-rule-"))
   (count common-lisp:nil :type
    (common-lisp:or standard-tier-retain-rule-count common-lisp:null))
   (interval common-lisp:nil :type
    (common-lisp:or standard-tier-retain-rule-interval common-lisp:null))
   (interval-unit common-lisp:nil :type
    (common-lisp:or retention-interval-unit-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'retain-rule 'make-retain-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retain-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retain-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retain-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (retention-archive-tier (:copier common-lisp:nil)
      (:conc-name "struct-shape-retention-archive-tier-"))
   (count common-lisp:nil :type (common-lisp:or count common-lisp:null))
   (interval common-lisp:nil :type (common-lisp:or interval common-lisp:null))
   (interval-unit common-lisp:nil :type
    (common-lisp:or retention-interval-unit-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retention-archive-tier 'make-retention-archive-tier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retention-archive-tier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retention-archive-tier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retention-archive-tier))
   common-lisp:nil))
(common-lisp:deftype retention-interval-unit-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schedule (:copier common-lisp:nil) (:conc-name "struct-shape-schedule-"))
   (name common-lisp:nil :type (common-lisp:or schedule-name common-lisp:null))
   (copy-tags common-lisp:nil :type
    (common-lisp:or copy-tags common-lisp:null))
   (tags-to-add common-lisp:nil :type
    (common-lisp:or tags-to-add-list common-lisp:null))
   (variable-tags common-lisp:nil :type
    (common-lisp:or variable-tags-list common-lisp:null))
   (create-rule common-lisp:nil :type
    (common-lisp:or create-rule common-lisp:null))
   (retain-rule common-lisp:nil :type
    (common-lisp:or retain-rule common-lisp:null))
   (fast-restore-rule common-lisp:nil :type
    (common-lisp:or fast-restore-rule common-lisp:null))
   (cross-region-copy-rules common-lisp:nil :type
    (common-lisp:or cross-region-copy-rules common-lisp:null))
   (share-rules common-lisp:nil :type
    (common-lisp:or share-rules common-lisp:null))
   (deprecate-rule common-lisp:nil :type
    (common-lisp:or deprecate-rule common-lisp:null))
   (archive-rule common-lisp:nil :type
    (common-lisp:or archive-rule common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-add))
      (common-lisp:list
       (common-lisp:cons "TagsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-tags))
      (common-lisp:list
       (common-lisp:cons "VariableTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-rule))
      (common-lisp:list
       (common-lisp:cons "CreateRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fast-restore-rule))
      (common-lisp:list
       (common-lisp:cons "FastRestoreRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-region-copy-rules))
      (common-lisp:list
       (common-lisp:cons "CrossRegionCopyRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-rules))
      (common-lisp:list
       (common-lisp:cons "ShareRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecate-rule))
      (common-lisp:list
       (common-lisp:cons "DeprecateRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rule))
      (common-lisp:list
       (common-lisp:cons "ArchiveRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schedule-list () '(trivial-types:proper-list schedule))
 (common-lisp:defun |make-schedule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schedule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schedule-name () 'common-lisp:string)
(common-lisp:deftype settable-policy-state-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (share-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-share-rule-"))
   (target-accounts (common-lisp:error ":target-accounts is required") :type
    (common-lisp:or share-target-account-list common-lisp:null))
   (unshare-interval common-lisp:nil :type
    (common-lisp:or interval common-lisp:null))
   (unshare-interval-unit common-lisp:nil :type
    (common-lisp:or retention-interval-unit-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'share-rule 'make-share-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-accounts))
      (common-lisp:list
       (common-lisp:cons "TargetAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unshare-interval))
      (common-lisp:list
       (common-lisp:cons "UnshareInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unshare-interval-unit))
      (common-lisp:list
       (common-lisp:cons "UnshareIntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype share-rules () '(trivial-types:proper-list share-rule))
 (common-lisp:defun |make-share-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list share-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype share-target-account-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun |make-share-target-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshot-owner-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun |make-snapshot-owner-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype standard-tier-retain-rule-count () 'common-lisp:integer)
(common-lisp:deftype standard-tier-retain-rule-interval () 'common-lisp:integer)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-filter () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or policy-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-to-add-filter-list ()
   '(trivial-types:proper-list tag-filter))
 (common-lisp:defun |make-tags-to-add-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tags-to-add-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags-to-add-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target () 'common-lisp:string)
(common-lisp:deftype target-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-target-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype target-tags-filter-list ()
   '(trivial-types:proper-list tag-filter))
 (common-lisp:defun |make-target-tags-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype times-list () '(trivial-types:proper-list time))
 (common-lisp:defun |make-times-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or policy-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-lifecycle-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-lifecycle-policy-request-"))
   (policy-id (common-lisp:error ":policy-id is required") :type
    (common-lisp:or policy-id common-lisp:null))
   (execution-role-arn common-lisp:nil :type
    (common-lisp:or execution-role-arn common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or settable-policy-state-values common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or policy-description common-lisp:null))
   (policy-details common-lisp:nil :type
    (common-lisp:or policy-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-lifecycle-policy-request
                    'make-update-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "PolicyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-lifecycle-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-lifecycle-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'update-lifecycle-policy-response
                    'make-update-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variable-tags-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-variable-tags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-role-arn description state
                     policy-details tags)
   (common-lisp:declare
    (common-lisp:ignorable execution-role-arn description state policy-details
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/policies"
                                                        "CreateLifecyclePolicy"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun delete-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-id))))
                                                        "DeleteLifecyclePolicy"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun get-lifecycle-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-ids state resource-types
                     target-tags tags-to-add)
   (common-lisp:declare
    (common-lisp:ignorable policy-ids state resource-types target-tags
     tags-to-add))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lifecycle-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/policies"
                                                        "GetLifecyclePolicies"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lifecycle-policies))
(common-lisp:progn
 (common-lisp:defun get-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-id))))
                                                        "GetLifecyclePolicy"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id execution-role-arn state
                     description policy-details)
   (common-lisp:declare
    (common-lisp:ignorable policy-id execution-role-arn state description
     policy-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-id))))
                                                        "UpdateLifecyclePolicy"
                                                        "2018-01-12"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-lifecycle-policy))
