;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/qldb-session/api
  (:use)
  (:nicknames #:aws/qldb-session)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/qldb-session/api)
(common-lisp:progn
 (common-lisp:defclass qldb-session-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "qldb-session" :protocol
                        :json))
 (common-lisp:export 'qldb-session-request))
(common-lisp:progn
 (common-lisp:define-condition qldb-session-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'qldb-session-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("CapacityExceededException" . capacity-exceeded-exception)
    ("InvalidSessionException" . invalid-session-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("OccConflictException" . occ-conflict-exception)
    ("RateExceededException" . rate-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass abort-transaction-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'abort-transaction-request
                    'make-abort-transaction-request))
 (common-lisp:defun make-abort-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'abort-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass abort-transaction-result common-lisp:nil
                       ((timing-information :initarg :timing-information :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor %abort-transaction-result-timing-information
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'abort-transaction-result 'make-abort-transaction-result))
 (common-lisp:defun make-abort-transaction-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timing-information)
   (common-lisp:apply #'common-lisp:make-instance 'abort-transaction-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          abort-transaction-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       bad-request-exception-code)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message
                    'bad-request-exception-code)))
(common-lisp:progn
 (common-lisp:define-condition capacity-exceeded-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       capacity-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'capacity-exceeded-exception
                    'capacity-exceeded-exception-message)))
(common-lisp:deftype commit-digest ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass commit-transaction-request common-lisp:nil
                       ((commit-digest :initarg :commit-digest :type
                         (common-lisp:or commit-digest common-lisp:null)
                         :accessor %commit-transaction-request-commit-digest
                         :initform
                         (common-lisp:error ":commit-digest is required"))
                        (transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id common-lisp:null)
                         :accessor %commit-transaction-request-transaction-id
                         :initform
                         (common-lisp:error ":transaction-id is required"))))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-request
                    'make-commit-transaction-request))
 (common-lisp:defun make-commit-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key commit-digest transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'commit-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-digest))
      (common-lisp:list
       (common-lisp:cons "CommitDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass commit-transaction-result common-lisp:nil
                       ((consumed-ios :initarg :consumed-ios :type
                         (common-lisp:or iousage common-lisp:null) :accessor
                         %commit-transaction-result-consumed-ios :initform
                         common-lisp:nil)
                        (timing-information :initarg :timing-information :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor
                         %commit-transaction-result-timing-information
                         :initform common-lisp:nil)
                        (commit-digest :initarg :commit-digest :type
                         (common-lisp:or commit-digest common-lisp:null)
                         :accessor %commit-transaction-result-commit-digest
                         :initform common-lisp:nil)
                        (transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id common-lisp:null)
                         :accessor %commit-transaction-result-transaction-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-result
                    'make-commit-transaction-result))
 (common-lisp:defun make-commit-transaction-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key consumed-ios timing-information
                     commit-digest transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'commit-transaction-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-digest))
      (common-lisp:list
       (common-lisp:cons "CommitDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-ios))
      (common-lisp:list
       (common-lisp:cons "ConsumedIOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass end-session-request common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'end-session-request 'make-end-session-request))
 (common-lisp:defun make-end-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'end-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input end-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input end-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input end-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass end-session-result common-lisp:nil
                       ((timing-information :initarg :timing-information :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor %end-session-result-timing-information
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'end-session-result 'make-end-session-result))
 (common-lisp:defun make-end-session-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timing-information)
   (common-lisp:apply #'common-lisp:make-instance 'end-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input end-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input end-session-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input end-session-result))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-statement-request common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or statement-parameters common-lisp:null)
                         :accessor %execute-statement-request-parameters
                         :initform common-lisp:nil)
                        (statement :initarg :statement :type
                         (common-lisp:or statement common-lisp:null) :accessor
                         %execute-statement-request-statement :initform
                         (common-lisp:error ":statement is required"))
                        (transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id common-lisp:null)
                         :accessor %execute-statement-request-transaction-id
                         :initform
                         (common-lisp:error ":transaction-id is required"))))
 (common-lisp:export
  (common-lisp:list 'execute-statement-request
                    'make-execute-statement-request))
 (common-lisp:defun make-execute-statement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters statement transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'execute-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "Statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-statement-result common-lisp:nil
                       ((consumed-ios :initarg :consumed-ios :type
                         (common-lisp:or iousage common-lisp:null) :accessor
                         %execute-statement-result-consumed-ios :initform
                         common-lisp:nil)
                        (timing-information :initarg :timing-information :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor %execute-statement-result-timing-information
                         :initform common-lisp:nil)
                        (first-page :initarg :first-page :type
                         (common-lisp:or page common-lisp:null) :accessor
                         %execute-statement-result-first-page :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execute-statement-result 'make-execute-statement-result))
 (common-lisp:defun make-execute-statement-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key consumed-ios timing-information
                     first-page)
   (common-lisp:apply #'common-lisp:make-instance 'execute-statement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-page))
      (common-lisp:list
       (common-lisp:cons "FirstPage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-ios))
      (common-lisp:list
       (common-lisp:cons "ConsumedIOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fetch-page-request common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %fetch-page-request-next-page-token :initform
                         (common-lisp:error ":next-page-token is required"))
                        (transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id common-lisp:null)
                         :accessor %fetch-page-request-transaction-id :initform
                         (common-lisp:error ":transaction-id is required"))))
 (common-lisp:export
  (common-lisp:list 'fetch-page-request 'make-fetch-page-request))
 (common-lisp:defun make-fetch-page-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'fetch-page-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fetch-page-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fetch-page-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fetch-page-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fetch-page-result common-lisp:nil
                       ((consumed-ios :initarg :consumed-ios :type
                         (common-lisp:or iousage common-lisp:null) :accessor
                         %fetch-page-result-consumed-ios :initform
                         common-lisp:nil)
                        (timing-information :initarg :timing-information :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor %fetch-page-result-timing-information
                         :initform common-lisp:nil)
                        (page :initarg :page :type
                         (common-lisp:or page common-lisp:null) :accessor
                         %fetch-page-result-page :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fetch-page-result 'make-fetch-page-result))
 (common-lisp:defun make-fetch-page-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key consumed-ios timing-information page)
   (common-lisp:apply #'common-lisp:make-instance 'fetch-page-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fetch-page-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fetch-page-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page))
      (common-lisp:list
       (common-lisp:cons "Page"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-ios))
      (common-lisp:list
       (common-lisp:cons "ConsumedIOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fetch-page-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iousage common-lisp:nil
                       ((write-ios :initarg :write-ios :type
                         (common-lisp:or write-ios common-lisp:null) :accessor
                         %iousage-write-ios :initform common-lisp:nil)
                        (read-ios :initarg :read-ios :type
                         (common-lisp:or read-ios common-lisp:null) :accessor
                         %iousage-read-ios :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'iousage 'make-iousage))
 (common-lisp:defun make-iousage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key write-ios read-ios)
   (common-lisp:apply #'common-lisp:make-instance 'iousage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iousage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iousage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-ios))
      (common-lisp:list
       (common-lisp:cons "ReadIOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-ios))
      (common-lisp:list
       (common-lisp:cons "WriteIOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iousage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-session-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-session-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       invalid-session-exception-code)))
 (common-lisp:export
  (common-lisp:list 'invalid-session-exception
                    'invalid-session-exception-message
                    'invalid-session-exception-code)))
(common-lisp:deftype ion-binary ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype ion-text () 'common-lisp:string)
(common-lisp:deftype ledger-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition occ-conflict-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       occ-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'occ-conflict-exception 'occ-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass page common-lisp:nil
                       ((next-page-token :initarg :next-page-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %page-next-page-token :initform common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or value-holders common-lisp:null)
                         :accessor %page-values :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'page 'make-page))
 (common-lisp:defun make-page
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-page-token values)
   (common-lisp:apply #'common-lisp:make-instance 'page
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input page))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "NextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input page))
   common-lisp:nil))
(common-lisp:deftype page-token () 'common-lisp:string)
(common-lisp:deftype processing-time-milliseconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition rate-exceeded-exception
     (qldb-session-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       rate-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'rate-exceeded-exception 'rate-exceeded-exception-message)))
(common-lisp:deftype read-ios () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass send-command-request common-lisp:nil
                       ((fetch-page :initarg :fetch-page :type
                         (common-lisp:or fetch-page-request common-lisp:null)
                         :accessor %send-command-request-fetch-page :initform
                         common-lisp:nil)
                        (execute-statement :initarg :execute-statement :type
                         (common-lisp:or execute-statement-request
                                         common-lisp:null)
                         :accessor %send-command-request-execute-statement
                         :initform common-lisp:nil)
                        (abort-transaction :initarg :abort-transaction :type
                         (common-lisp:or abort-transaction-request
                                         common-lisp:null)
                         :accessor %send-command-request-abort-transaction
                         :initform common-lisp:nil)
                        (commit-transaction :initarg :commit-transaction :type
                         (common-lisp:or commit-transaction-request
                                         common-lisp:null)
                         :accessor %send-command-request-commit-transaction
                         :initform common-lisp:nil)
                        (end-session :initarg :end-session :type
                         (common-lisp:or end-session-request common-lisp:null)
                         :accessor %send-command-request-end-session :initform
                         common-lisp:nil)
                        (start-transaction :initarg :start-transaction :type
                         (common-lisp:or start-transaction-request
                                         common-lisp:null)
                         :accessor %send-command-request-start-transaction
                         :initform common-lisp:nil)
                        (start-session :initarg :start-session :type
                         (common-lisp:or start-session-request
                                         common-lisp:null)
                         :accessor %send-command-request-start-session
                         :initform common-lisp:nil)
                        (session-token :initarg :session-token :type
                         (common-lisp:or session-token common-lisp:null)
                         :accessor %send-command-request-session-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-command-request 'make-send-command-request))
 (common-lisp:defun make-send-command-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fetch-page execute-statement
                     abort-transaction commit-transaction end-session
                     start-transaction start-session session-token)
   (common-lisp:apply #'common-lisp:make-instance 'send-command-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-command-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-command-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-session))
      (common-lisp:list
       (common-lisp:cons "StartSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-transaction))
      (common-lisp:list
       (common-lisp:cons "StartTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-session))
      (common-lisp:list
       (common-lisp:cons "EndSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-transaction))
      (common-lisp:list
       (common-lisp:cons "CommitTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-transaction))
      (common-lisp:list
       (common-lisp:cons "AbortTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execute-statement))
      (common-lisp:list
       (common-lisp:cons "ExecuteStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fetch-page))
      (common-lisp:list
       (common-lisp:cons "FetchPage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-command-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-command-result common-lisp:nil
                       ((fetch-page :initarg :fetch-page :type
                         (common-lisp:or fetch-page-result common-lisp:null)
                         :accessor %send-command-result-fetch-page :initform
                         common-lisp:nil)
                        (execute-statement :initarg :execute-statement :type
                         (common-lisp:or execute-statement-result
                                         common-lisp:null)
                         :accessor %send-command-result-execute-statement
                         :initform common-lisp:nil)
                        (abort-transaction :initarg :abort-transaction :type
                         (common-lisp:or abort-transaction-result
                                         common-lisp:null)
                         :accessor %send-command-result-abort-transaction
                         :initform common-lisp:nil)
                        (commit-transaction :initarg :commit-transaction :type
                         (common-lisp:or commit-transaction-result
                                         common-lisp:null)
                         :accessor %send-command-result-commit-transaction
                         :initform common-lisp:nil)
                        (end-session :initarg :end-session :type
                         (common-lisp:or end-session-result common-lisp:null)
                         :accessor %send-command-result-end-session :initform
                         common-lisp:nil)
                        (start-transaction :initarg :start-transaction :type
                         (common-lisp:or start-transaction-result
                                         common-lisp:null)
                         :accessor %send-command-result-start-transaction
                         :initform common-lisp:nil)
                        (start-session :initarg :start-session :type
                         (common-lisp:or start-session-result common-lisp:null)
                         :accessor %send-command-result-start-session :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-command-result 'make-send-command-result))
 (common-lisp:defun make-send-command-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fetch-page execute-statement
                     abort-transaction commit-transaction end-session
                     start-transaction start-session)
   (common-lisp:apply #'common-lisp:make-instance 'send-command-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-command-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-command-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-session))
      (common-lisp:list
       (common-lisp:cons "StartSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-transaction))
      (common-lisp:list
       (common-lisp:cons "StartTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-session))
      (common-lisp:list
       (common-lisp:cons "EndSession"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-transaction))
      (common-lisp:list
       (common-lisp:cons "CommitTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abort-transaction))
      (common-lisp:list
       (common-lisp:cons "AbortTransaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execute-statement))
      (common-lisp:list
       (common-lisp:cons "ExecuteStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fetch-page))
      (common-lisp:list
       (common-lisp:cons "FetchPage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-command-result))
   common-lisp:nil))
(common-lisp:deftype session-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-session-request common-lisp:nil
                       ((ledger-name :initarg :ledger-name :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor %start-session-request-ledger-name :initform
                         (common-lisp:error ":ledger-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-session-request 'make-start-session-request))
 (common-lisp:defun make-start-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ledger-name)
   (common-lisp:apply #'common-lisp:make-instance 'start-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ledger-name))
      (common-lisp:list
       (common-lisp:cons "LedgerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-session-result common-lisp:nil
                       ((timing-information :initarg :timing-information :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor %start-session-result-timing-information
                         :initform common-lisp:nil)
                        (session-token :initarg :session-token :type
                         (common-lisp:or session-token common-lisp:null)
                         :accessor %start-session-result-session-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-session-result 'make-start-session-result))
 (common-lisp:defun make-start-session-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timing-information session-token)
   (common-lisp:apply #'common-lisp:make-instance 'start-session-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-session-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-session-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "SessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-session-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-transaction-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-transaction-request
                    'make-start-transaction-request))
 (common-lisp:defun make-start-transaction-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'start-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-transaction-result common-lisp:nil
                       ((timing-information :initarg :timing-information :type
                         (common-lisp:or timing-information common-lisp:null)
                         :accessor %start-transaction-result-timing-information
                         :initform common-lisp:nil)
                        (transaction-id :initarg :transaction-id :type
                         (common-lisp:or transaction-id common-lisp:null)
                         :accessor %start-transaction-result-transaction-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-transaction-result 'make-start-transaction-result))
 (common-lisp:defun make-start-transaction-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timing-information transaction-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-transaction-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing-information))
      (common-lisp:list
       (common-lisp:cons "TimingInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transaction-result))
   common-lisp:nil))
(common-lisp:deftype statement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype statement-parameters ()
   '(trivial-types:proper-list value-holder))
 (common-lisp:defun |make-statement-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-holder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass timing-information common-lisp:nil
                       ((processing-time-milliseconds :initarg
                         :processing-time-milliseconds :type
                         (common-lisp:or processing-time-milliseconds
                                         common-lisp:null)
                         :accessor
                         %timing-information-processing-time-milliseconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'timing-information 'make-timing-information))
 (common-lisp:defun make-timing-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key processing-time-milliseconds)
   (common-lisp:apply #'common-lisp:make-instance 'timing-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timing-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timing-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-time-milliseconds))
      (common-lisp:list
       (common-lisp:cons "ProcessingTimeMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timing-information))
   common-lisp:nil))
(common-lisp:deftype transaction-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass value-holder common-lisp:nil
                       ((ion-text :initarg :ion-text :type
                         (common-lisp:or ion-text common-lisp:null) :accessor
                         %value-holder-ion-text :initform common-lisp:nil)
                        (ion-binary :initarg :ion-binary :type
                         (common-lisp:or ion-binary common-lisp:null) :accessor
                         %value-holder-ion-binary :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'value-holder 'make-value-holder))
 (common-lisp:defun make-value-holder
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ion-text ion-binary)
   (common-lisp:apply #'common-lisp:make-instance 'value-holder
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value-holder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value-holder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ion-binary))
      (common-lisp:list
       (common-lisp:cons "IonBinary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ion-text))
      (common-lisp:list
       (common-lisp:cons "IonText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value-holder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype value-holders ()
   '(trivial-types:proper-list value-holder))
 (common-lisp:defun |make-value-holders|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-holder))
   aws-sdk/generator/shape::members))
(common-lisp:deftype write-ios () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun send-command
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-token start-session
                     start-transaction end-session commit-transaction
                     abort-transaction execute-statement fetch-page)
   (common-lisp:declare
    (common-lisp:ignorable session-token start-session start-transaction
     end-session commit-transaction abort-transaction execute-statement
     fetch-page))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-command-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-session-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SendCommand"
                                                        "2019-07-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-command))
