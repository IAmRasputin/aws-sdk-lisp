;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cost-optimization-hub/api
  (:use)
  (:nicknames #:aws/cost-optimization-hub)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cost-optimization-hub/api)
(common-lisp:progn
 (common-lisp:define-condition cost-optimization-hub-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cost-optimization-hub-error))
(common-lisp:progn
 (common-lisp:defclass cost-optimization-hub-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "cost-optimization-hub"
                        :api-version "2022-07-26" :host-prefix
                        "cost-optimization-hub" :signing-name
                        "cost-optimization-hub" :global-host common-lisp:nil
                        :target-prefix "CostOptimizationHubService"
                        :json-version "1.0"))
 (common-lisp:export 'cost-optimization-hub-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (cost-optimization-hub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (account-enrollment-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-enrollment-status-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or enrollment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-enrollment-status
                    'make-account-enrollment-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-enrollment-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-enrollment-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-enrollment-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-enrollment-statuses ()
   '(trivial-types:proper-list account-enrollment-status))
 (common-lisp:defun make-account-enrollment-statuses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            account-enrollment-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-id-list ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-account-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-type-list ()
   '(trivial-types:proper-list action-type))
 (common-lisp:defun make-action-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (block-storage-performance-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-block-storage-performance-configuration-"))
   (iops common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (throughput common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'block-storage-performance-configuration
                    'make-block-storage-performance-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          block-storage-performance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          block-storage-performance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          block-storage-performance-configuration))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (compute-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-compute-configuration-"))
   (architecture common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (memory-size-in-mb common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (v-cpu common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compute-configuration 'make-compute-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compute-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compute-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size-in-mb))
      (common-lisp:list
       (common-lisp:cons "memorySizeInMB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v-cpu))
      (common-lisp:list
       (common-lisp:cons "vCpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compute-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (compute-savings-plans (:copier common-lisp:nil)
      (:conc-name "struct-shape-compute-savings-plans-"))
   (configuration common-lisp:nil :type
    (common-lisp:or compute-savings-plans-configuration common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or savings-plans-cost-calculation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compute-savings-plans 'make-compute-savings-plans))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (compute-savings-plans-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-compute-savings-plans-configuration-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hourly-commitment common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compute-savings-plans-configuration
                    'make-compute-savings-plans-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-commitment))
      (common-lisp:list
       (common-lisp:cons "hourlyCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans-configuration))
   common-lisp:nil))
(common-lisp:deftype datetime () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (ebs-volume (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebs-volume-"))
   (configuration common-lisp:nil :type
    (common-lisp:or ebs-volume-configuration common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or resource-cost-calculation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ebs-volume 'make-ebs-volume))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs-volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs-volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs-volume))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ebs-volume-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebs-volume-configuration-"))
   (attachment-state common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (performance common-lisp:nil :type
    (common-lisp:or block-storage-performance-configuration common-lisp:null))
   (storage common-lisp:nil :type
    (common-lisp:or storage-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ebs-volume-configuration 'make-ebs-volume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-state))
      (common-lisp:list
       (common-lisp:cons "attachmentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance))
      (common-lisp:list
       (common-lisp:cons "performance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-volume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2auto-scaling-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2auto-scaling-group-"))
   (configuration common-lisp:nil :type
    (common-lisp:or ec2auto-scaling-group-configuration common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or resource-cost-calculation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2auto-scaling-group 'make-ec2auto-scaling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2auto-scaling-group-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2auto-scaling-group-configuration-"))
   (instance common-lisp:nil :type
    (common-lisp:or instance-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2auto-scaling-group-configuration
                    'make-ec2auto-scaling-group-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance))
      (common-lisp:list
       (common-lisp:cons "instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2instance (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2instance-"))
   (configuration common-lisp:nil :type
    (common-lisp:or ec2instance-configuration common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or resource-cost-calculation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ec2instance 'make-ec2instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2instance-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2instance-configuration-"))
   (instance common-lisp:nil :type
    (common-lisp:or instance-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-configuration
                    'make-ec2instance-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance))
      (common-lisp:list
       (common-lisp:cons "instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2instance-savings-plans (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2instance-savings-plans-"))
   (configuration common-lisp:nil :type
    (common-lisp:or ec2instance-savings-plans-configuration common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or savings-plans-cost-calculation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-savings-plans
                    'make-ec2instance-savings-plans))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2instance-savings-plans-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2instance-savings-plans-configuration-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hourly-commitment common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (savings-plans-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2instance-savings-plans-configuration
                    'make-ec2instance-savings-plans-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-commitment))
      (common-lisp:list
       (common-lisp:cons "hourlyCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "instanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-region))
      (common-lisp:list
       (common-lisp:cons "savingsPlansRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2reserved-instances (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2reserved-instances-"))
   (configuration common-lisp:nil :type
    (common-lisp:or ec2reserved-instances-configuration common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or reserved-instances-cost-calculation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2reserved-instances 'make-ec2reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ec2reserved-instances-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ec2reserved-instances-configuration-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (monthly-recurring-cost common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (normalized-units-to-purchase common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (number-of-instances-to-purchase common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (offering-class common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (platform common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (reserved-instances-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tenancy common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (upfront-cost common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ec2reserved-instances-configuration
                    'make-ec2reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "currentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "instanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-recurring-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyRecurringCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "normalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "numberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-class))
      (common-lisp:list
       (common-lisp:cons "offeringClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-region))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "sizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "upfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ecs-service (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecs-service-"))
   (configuration common-lisp:nil :type
    (common-lisp:or ecs-service-configuration common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or resource-cost-calculation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ecs-service 'make-ecs-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecs-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecs-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecs-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ecs-service-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecs-service-configuration-"))
   (compute common-lisp:nil :type
    (common-lisp:or compute-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ecs-service-configuration
                    'make-ecs-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecs-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecs-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecs-service-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (elasti-cache-reserved-instances (:copier common-lisp:nil)
      (:conc-name "struct-shape-elasti-cache-reserved-instances-"))
   (configuration common-lisp:nil :type
    (common-lisp:or elasti-cache-reserved-instances-configuration
                    common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or reserved-instances-cost-calculation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasti-cache-reserved-instances
                    'make-elasti-cache-reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (elasti-cache-reserved-instances-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-elasti-cache-reserved-instances-configuration-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (monthly-recurring-cost common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (normalized-units-to-purchase common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (number-of-instances-to-purchase common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-instances-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (upfront-cost common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasti-cache-reserved-instances-configuration
                    'make-elasti-cache-reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "currentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "instanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-recurring-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyRecurringCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "normalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "numberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-region))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "sizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "upfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:deftype enrollment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (estimated-discounts (:copier common-lisp:nil)
      (:conc-name "struct-shape-estimated-discounts-"))
   (other-discount common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (reserved-instances-discount common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (savings-plans-discount common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'estimated-discounts 'make-estimated-discounts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input estimated-discounts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input estimated-discounts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-discount))
      (common-lisp:list
       (common-lisp:cons "otherDiscount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-discount))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesDiscount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-discount))
      (common-lisp:list
       (common-lisp:cons "savingsPlansDiscount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input estimated-discounts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or account-id-list common-lisp:null))
   (action-types common-lisp:nil :type
    (common-lisp:or action-type-list common-lisp:null))
   (implementation-efforts common-lisp:nil :type
    (common-lisp:or implementation-effort-list common-lisp:null))
   (recommendation-ids common-lisp:nil :type
    (common-lisp:or recommendation-id-list common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or region-list common-lisp:null))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-arn-list common-lisp:null))
   (resource-ids common-lisp:nil :type
    (common-lisp:or resource-id-list common-lisp:null))
   (resource-types common-lisp:nil :type
    (common-lisp:or resource-type-list common-lisp:null))
   (restart-needed common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (rollback-possible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-types))
      (common-lisp:list
       (common-lisp:cons "actionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'implementation-efforts))
      (common-lisp:list
       (common-lisp:cons "implementationEfforts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "recommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "resourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-needed))
      (common-lisp:list
       (common-lisp:cons "restartNeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-possible))
      (common-lisp:list
       (common-lisp:cons "rollbackPossible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-preferences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-preferences-request-")))
 (common-lisp:export
  (common-lisp:list 'get-preferences-request 'make-get-preferences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-preferences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-preferences-response-"))
   (member-account-discount-visibility common-lisp:nil :type
    (common-lisp:or member-account-discount-visibility common-lisp:null))
   (savings-estimation-mode common-lisp:nil :type
    (common-lisp:or savings-estimation-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-preferences-response 'make-get-preferences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-discount-visibility))
      (common-lisp:list
       (common-lisp:cons "memberAccountDiscountVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-estimation-mode))
      (common-lisp:list
       (common-lisp:cons "savingsEstimationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recommendation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recommendation-request-"))
   (recommendation-id (common-lisp:error ":recommendationid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recommendation-request
                    'make-get-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recommendation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recommendation-response-"))
   (account-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (action-type common-lisp:nil :type
    (common-lisp:or action-type common-lisp:null))
   (cost-calculation-lookback-period-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-resource-details common-lisp:nil :type
    (common-lisp:or resource-details common-lisp:null))
   (current-resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (estimated-monthly-cost common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (estimated-monthly-savings common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (estimated-savings-over-cost-calculation-lookback-period common-lisp:nil
    :type (common-lisp:or double common-lisp:null))
   (estimated-savings-percentage common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (implementation-effort common-lisp:nil :type
    (common-lisp:or implementation-effort common-lisp:null))
   (last-refresh-timestamp common-lisp:nil :type
    (common-lisp:or datetime common-lisp:null))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (recommendation-lookback-period-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (recommended-resource-details common-lisp:nil :type
    (common-lisp:or resource-details common-lisp:null))
   (recommended-resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (restart-needed common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (rollback-possible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or source common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recommendation-response
                    'make-get-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cost-calculation-lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "costCalculationLookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-resource-details))
      (common-lisp:list
       (common-lisp:cons "currentResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-resource-type))
      (common-lisp:list
       (common-lisp:cons "currentResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-over-cost-calculation-lookback-period))
      (common-lisp:list
       (common-lisp:cons "estimatedSavingsOverCostCalculationLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "estimatedSavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'implementation-effort))
      (common-lisp:list
       (common-lisp:cons "implementationEffort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-refresh-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastRefreshTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "recommendationLookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-resource-details))
      (common-lisp:list
       (common-lisp:cons "recommendedResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-resource-type))
      (common-lisp:list
       (common-lisp:cons "recommendedResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-needed))
      (common-lisp:list
       (common-lisp:cons "restartNeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-possible))
      (common-lisp:list
       (common-lisp:cons "rollbackPossible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-response))
   common-lisp:nil))
(common-lisp:deftype implementation-effort () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype implementation-effort-list ()
   '(trivial-types:proper-list implementation-effort))
 (common-lisp:defun make-implementation-effort-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list implementation-effort))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-configuration-"))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-configuration 'make-instance-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (cost-optimization-hub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-"))
   (configuration common-lisp:nil :type
    (common-lisp:or lambda-function-configuration common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or resource-cost-calculation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lambda-function 'make-lambda-function))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-function))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-function))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-function))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-function-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-function-configuration-"))
   (compute common-lisp:nil :type
    (common-lisp:or compute-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-function-configuration
                    'make-lambda-function-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-enrollment-statuses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-enrollment-statuses-request-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (include-organization-info common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-enrollment-statuses-request
                    'make-list-enrollment-statuses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-organization-info))
      (common-lisp:list
       (common-lisp:cons "includeOrganizationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-enrollment-statuses-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-enrollment-statuses-response-"))
   (include-member-accounts common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or account-enrollment-statuses common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-enrollment-statuses-response
                    'make-list-enrollment-statuses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-member-accounts))
      (common-lisp:list
       (common-lisp:cons "includeMemberAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendation-summaries-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendation-summaries-request-"))
   (filter common-lisp:nil :type (common-lisp:or filter common-lisp:null))
   (group-by (common-lisp:error ":groupby is required") :type
    (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-recommendation-summaries-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendation-summaries-request
                    'make-list-recommendation-summaries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-request))
   common-lisp:nil))
(common-lisp:deftype list-recommendation-summaries-request-max-results-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendation-summaries-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendation-summaries-response-"))
   (currency-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (estimated-total-deduped-savings common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (group-by common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (items common-lisp:nil :type
    (common-lisp:or recommendation-summaries-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendation-summaries-response
                    'make-list-recommendation-summaries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-total-deduped-savings))
      (common-lisp:list
       (common-lisp:cons "estimatedTotalDedupedSavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendations-request-"))
   (filter common-lisp:nil :type (common-lisp:or filter common-lisp:null))
   (include-all-recommendations common-lisp:nil :type
    (common-lisp:or primitive-boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-recommendations-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (order-by common-lisp:nil :type (common-lisp:or order-by common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-request
                    'make-list-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-all-recommendations))
      (common-lisp:list
       (common-lisp:cons "includeAllRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   common-lisp:nil))
(common-lisp:deftype list-recommendations-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-recommendations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recommendations-response-"))
   (items common-lisp:nil :type
    (common-lisp:or recommendation-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-response
                    'make-list-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype member-account-discount-visibility () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (open-search-reserved-instances (:copier common-lisp:nil)
      (:conc-name "struct-shape-open-search-reserved-instances-"))
   (configuration common-lisp:nil :type
    (common-lisp:or open-search-reserved-instances-configuration
                    common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or reserved-instances-cost-calculation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'open-search-reserved-instances
                    'make-open-search-reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (open-search-reserved-instances-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-open-search-reserved-instances-configuration-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (monthly-recurring-cost common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (normalized-units-to-purchase common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (number-of-instances-to-purchase common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-instances-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (upfront-cost common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'open-search-reserved-instances-configuration
                    'make-open-search-reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "currentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-recurring-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyRecurringCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "normalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "numberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-region))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "sizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "upfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:deftype order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (order-by (:copier common-lisp:nil) (:conc-name "struct-shape-order-by-"))
   (dimension common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (order common-lisp:nil :type (common-lisp:or order common-lisp:null)))
 (common-lisp:export (common-lisp:list 'order-by 'make-order-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension))
      (common-lisp:list
       (common-lisp:cons "dimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order-by))
   common-lisp:nil))
(common-lisp:deftype primitive-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (rds-reserved-instances (:copier common-lisp:nil)
      (:conc-name "struct-shape-rds-reserved-instances-"))
   (configuration common-lisp:nil :type
    (common-lisp:or rds-reserved-instances-configuration common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or reserved-instances-cost-calculation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rds-reserved-instances 'make-rds-reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rds-reserved-instances-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-rds-reserved-instances-configuration-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-edition common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (database-engine common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (deployment-option common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (license-model common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (monthly-recurring-cost common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (normalized-units-to-purchase common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (number-of-instances-to-purchase common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-instances-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (upfront-cost common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rds-reserved-instances-configuration
                    'make-rds-reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "currentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-edition))
      (common-lisp:list
       (common-lisp:cons "databaseEdition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-engine))
      (common-lisp:list
       (common-lisp:cons "databaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-option))
      (common-lisp:list
       (common-lisp:cons "deploymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "instanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "licenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-recurring-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyRecurringCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "normalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "numberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-region))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "sizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "upfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-"))
   (account-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (action-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-resource-summary common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-resource-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (estimated-monthly-cost common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (estimated-monthly-savings common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (estimated-savings-percentage common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (implementation-effort common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-refresh-timestamp common-lisp:nil :type
    (common-lisp:or datetime common-lisp:null))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (recommendation-lookback-period-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (recommended-resource-summary common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (recommended-resource-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (restart-needed common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (rollback-possible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or source common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-resource-summary))
      (common-lisp:list
       (common-lisp:cons "currentResourceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-resource-type))
      (common-lisp:list
       (common-lisp:cons "currentResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "estimatedSavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'implementation-effort))
      (common-lisp:list
       (common-lisp:cons "implementationEffort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-refresh-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastRefreshTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "recommendationLookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-resource-summary))
      (common-lisp:list
       (common-lisp:cons "recommendedResourceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-resource-type))
      (common-lisp:list
       (common-lisp:cons "recommendedResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-needed))
      (common-lisp:list
       (common-lisp:cons "restartNeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-possible))
      (common-lisp:list
       (common-lisp:cons "rollbackPossible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-recommendation-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendation-list ()
   '(trivial-types:proper-list recommendation))
 (common-lisp:defun make-recommendation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendation-summaries-list ()
   '(trivial-types:proper-list recommendation-summary))
 (common-lisp:defun make-recommendation-summaries-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-summary-"))
   (estimated-monthly-savings common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (group common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (recommendation-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-summary 'make-recommendation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-count))
      (common-lisp:list
       (common-lisp:cons "recommendationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-reserved-instances (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-reserved-instances-"))
   (configuration common-lisp:nil :type
    (common-lisp:or redshift-reserved-instances-configuration
                    common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or reserved-instances-cost-calculation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-reserved-instances
                    'make-redshift-reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-reserved-instances-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-reserved-instances-configuration-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (current-generation common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-family common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (monthly-recurring-cost common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (normalized-units-to-purchase common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (number-of-instances-to-purchase common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (reserved-instances-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (service common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (size-flex-eligible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (upfront-cost common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-reserved-instances-configuration
                    'make-redshift-reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "currentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "instanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-recurring-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyRecurringCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "normalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "numberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-region))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "sizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "upfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instances-cost-calculation (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instances-cost-calculation-"))
   (pricing common-lisp:nil :type
    (common-lisp:or reserved-instances-pricing common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instances-cost-calculation
                    'make-reserved-instances-cost-calculation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-cost-calculation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-cost-calculation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing))
      (common-lisp:list
       (common-lisp:cons "pricing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-cost-calculation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reserved-instances-pricing (:copier common-lisp:nil)
      (:conc-name "struct-shape-reserved-instances-pricing-"))
   (estimated-monthly-amortized-reservation-cost common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (estimated-on-demand-cost common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (monthly-reservation-eligible-cost common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (savings-percentage common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reserved-instances-pricing
                    'make-reserved-instances-pricing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-pricing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-pricing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-amortized-reservation-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlyAmortizedReservationCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-reservation-eligible-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyReservationEligibleCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-percentage))
      (common-lisp:list
       (common-lisp:cons "savingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-pricing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-arn-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-resource-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-cost-calculation (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-cost-calculation-"))
   (pricing common-lisp:nil :type
    (common-lisp:or resource-pricing common-lisp:null))
   (usages common-lisp:nil :type (common-lisp:or usage-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-cost-calculation
                    'make-resource-cost-calculation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-cost-calculation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-cost-calculation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing))
      (common-lisp:list
       (common-lisp:cons "pricing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usages))
      (common-lisp:list
       (common-lisp:cons "usages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-cost-calculation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-details-"))
   (compute-savings-plans common-lisp:nil :type
    (common-lisp:or compute-savings-plans common-lisp:null))
   (ebs-volume common-lisp:nil :type
    (common-lisp:or ebs-volume common-lisp:null))
   (ec2auto-scaling-group common-lisp:nil :type
    (common-lisp:or ec2auto-scaling-group common-lisp:null))
   (ec2instance common-lisp:nil :type
    (common-lisp:or ec2instance common-lisp:null))
   (ec2instance-savings-plans common-lisp:nil :type
    (common-lisp:or ec2instance-savings-plans common-lisp:null))
   (ec2reserved-instances common-lisp:nil :type
    (common-lisp:or ec2reserved-instances common-lisp:null))
   (ecs-service common-lisp:nil :type
    (common-lisp:or ecs-service common-lisp:null))
   (elasti-cache-reserved-instances common-lisp:nil :type
    (common-lisp:or elasti-cache-reserved-instances common-lisp:null))
   (lambda-function common-lisp:nil :type
    (common-lisp:or lambda-function common-lisp:null))
   (open-search-reserved-instances common-lisp:nil :type
    (common-lisp:or open-search-reserved-instances common-lisp:null))
   (rds-reserved-instances common-lisp:nil :type
    (common-lisp:or rds-reserved-instances common-lisp:null))
   (redshift-reserved-instances common-lisp:nil :type
    (common-lisp:or redshift-reserved-instances common-lisp:null))
   (sage-maker-savings-plans common-lisp:nil :type
    (common-lisp:or sage-maker-savings-plans common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-details 'make-resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compute-savings-plans))
      (common-lisp:list
       (common-lisp:cons "computeSavingsPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-volume))
      (common-lisp:list
       (common-lisp:cons "ebsVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2auto-scaling-group))
      (common-lisp:list
       (common-lisp:cons "ec2AutoScalingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance))
      (common-lisp:list
       (common-lisp:cons "ec2Instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2instance-savings-plans))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceSavingsPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2reserved-instances))
      (common-lisp:list
       (common-lisp:cons "ec2ReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-service))
      (common-lisp:list
       (common-lisp:cons "ecsService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasti-cache-reserved-instances))
      (common-lisp:list
       (common-lisp:cons "elastiCacheReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function))
      (common-lisp:list
       (common-lisp:cons "lambdaFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-search-reserved-instances))
      (common-lisp:list
       (common-lisp:cons "openSearchReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-reserved-instances))
      (common-lisp:list
       (common-lisp:cons "rdsReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-reserved-instances))
      (common-lisp:list
       (common-lisp:cons "redshiftReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sage-maker-savings-plans))
      (common-lisp:list
       (common-lisp:cons "sageMakerSavingsPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-resource-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (cost-optimization-hub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-pricing (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-pricing-"))
   (estimated-cost-after-discounts common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (estimated-cost-before-discounts common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (estimated-discounts common-lisp:nil :type
    (common-lisp:or estimated-discounts common-lisp:null))
   (estimated-net-unused-amortized-commitments common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-pricing 'make-resource-pricing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-pricing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-pricing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-cost-after-discounts))
      (common-lisp:list
       (common-lisp:cons "estimatedCostAfterDiscounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-cost-before-discounts))
      (common-lisp:list
       (common-lisp:cons "estimatedCostBeforeDiscounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-discounts))
      (common-lisp:list
       (common-lisp:cons "estimatedDiscounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-net-unused-amortized-commitments))
      (common-lisp:list
       (common-lisp:cons "estimatedNetUnusedAmortizedCommitments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-pricing))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-type-list ()
   '(trivial-types:proper-list resource-type))
 (common-lisp:defun make-resource-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sage-maker-savings-plans (:copier common-lisp:nil)
      (:conc-name "struct-shape-sage-maker-savings-plans-"))
   (configuration common-lisp:nil :type
    (common-lisp:or sage-maker-savings-plans-configuration common-lisp:null))
   (cost-calculation common-lisp:nil :type
    (common-lisp:or savings-plans-cost-calculation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sage-maker-savings-plans 'make-sage-maker-savings-plans))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sage-maker-savings-plans-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sage-maker-savings-plans-configuration-"))
   (account-scope common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (hourly-commitment common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payment-option common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (term common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sage-maker-savings-plans-configuration
                    'make-sage-maker-savings-plans-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-commitment))
      (common-lisp:list
       (common-lisp:cons "hourlyCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans-configuration))
   common-lisp:nil))
(common-lisp:deftype savings-estimation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-cost-calculation (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-cost-calculation-"))
   (pricing common-lisp:nil :type
    (common-lisp:or savings-plans-pricing common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-cost-calculation
                    'make-savings-plans-cost-calculation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-cost-calculation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-cost-calculation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing))
      (common-lisp:list
       (common-lisp:cons "pricing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-cost-calculation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (savings-plans-pricing (:copier common-lisp:nil)
      (:conc-name "struct-shape-savings-plans-pricing-"))
   (estimated-monthly-commitment common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (estimated-on-demand-cost common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (monthly-savings-plans-eligible-cost common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (savings-percentage common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'savings-plans-pricing 'make-savings-plans-pricing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-pricing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-pricing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-commitment))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlyCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-savings-plans-eligible-cost))
      (common-lisp:list
       (common-lisp:cons "monthlySavingsPlansEligibleCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-percentage))
      (common-lisp:list
       (common-lisp:cons "savingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-pricing))
   common-lisp:nil))
(common-lisp:deftype source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (storage-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-storage-configuration-"))
   (size-in-gb common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-configuration 'make-storage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (cost-optimization-hub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-enrollment-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-enrollment-status-request-"))
   (include-member-accounts common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or enrollment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-enrollment-status-request
                    'make-update-enrollment-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-member-accounts))
      (common-lisp:list
       (common-lisp:cons "includeMemberAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-enrollment-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-enrollment-status-response-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-enrollment-status-response
                    'make-update-enrollment-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-preferences-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-preferences-request-"))
   (member-account-discount-visibility common-lisp:nil :type
    (common-lisp:or member-account-discount-visibility common-lisp:null))
   (savings-estimation-mode common-lisp:nil :type
    (common-lisp:or savings-estimation-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-preferences-request
                    'make-update-preferences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-discount-visibility))
      (common-lisp:list
       (common-lisp:cons "memberAccountDiscountVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-estimation-mode))
      (common-lisp:list
       (common-lisp:cons "savingsEstimationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-preferences-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-preferences-response-"))
   (member-account-discount-visibility common-lisp:nil :type
    (common-lisp:or member-account-discount-visibility common-lisp:null))
   (savings-estimation-mode common-lisp:nil :type
    (common-lisp:or savings-estimation-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-preferences-response
                    'make-update-preferences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-discount-visibility))
      (common-lisp:list
       (common-lisp:cons "memberAccountDiscountVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-estimation-mode))
      (common-lisp:list
       (common-lisp:cons "savingsEstimationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (usage (:copier common-lisp:nil) (:conc-name "struct-shape-usage-"))
   (operation common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (product-code common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (usage-amount common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (usage-type common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'usage 'make-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code))
      (common-lisp:list
       (common-lisp:cons "productCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-amount))
      (common-lisp:list
       (common-lisp:cons "usageAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-type))
      (common-lisp:list
       (common-lisp:cons "usageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-list () '(trivial-types:proper-list usage))
 (common-lisp:defun make-usage-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (cost-optimization-hub-error)
     ((fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-fields
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-detail-"))
   (field-name (common-lisp:error ":fieldname is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-detail
                    'make-validation-exception-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-details ()
   '(trivial-types:proper-list validation-exception-detail))
 (common-lisp:defun make-validation-exception-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun get-preferences ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'cost-optimization-hub-request :method "POST"
                                :path "/" :operation "GetPreferences"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-preferences))
(common-lisp:progn
 (common-lisp:defun get-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recommendation-id)
   (common-lisp:declare (common-lisp:ignorable recommendation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-recommendation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "GetRecommendation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-recommendation))
(common-lisp:progn
 (common-lisp:defun list-enrollment-statuses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id include-organization-info
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id include-organization-info max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-enrollment-statuses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "ListEnrollmentStatuses"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-enrollment-statuses))
(common-lisp:progn
 (common-lisp:defun list-recommendation-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter group-by max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter group-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-recommendation-summaries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "ListRecommendationSummaries"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recommendation-summaries))
(common-lisp:progn
 (common-lisp:defun list-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter include-all-recommendations
                     max-results next-token order-by)
   (common-lisp:declare
    (common-lisp:ignorable filter include-all-recommendations max-results
     next-token order-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "ListRecommendations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recommendations))
(common-lisp:progn
 (common-lisp:defun update-enrollment-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-member-accounts status)
   (common-lisp:declare (common-lisp:ignorable include-member-accounts status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-enrollment-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "UpdateEnrollmentStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-enrollment-status))
(common-lisp:progn
 (common-lisp:defun update-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-account-discount-visibility
                     savings-estimation-mode)
   (common-lisp:declare
    (common-lisp:ignorable member-account-discount-visibility
     savings-estimation-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-preferences-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "UpdatePreferences"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-preferences))
