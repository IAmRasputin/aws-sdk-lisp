;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/accessanalyzer/api
  (:use)
  (:nicknames #:aws/accessanalyzer)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/accessanalyzer/api)
(common-lisp:progn
 (common-lisp:defclass accessanalyzer-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "accessanalyzer"))
 (common-lisp:export 'accessanalyzer-request))
(common-lisp:progn
 (common-lisp:define-condition accessanalyzer-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'accessanalyzer-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-point-arn () 'common-lisp:string)
(common-lisp:deftype access-point-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (access-preview (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-preview-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-preview-id common-lisp:null))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (configurations (common-lisp:error ":configurations is required") :type
    (common-lisp:or configurations-map common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or access-preview-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or access-preview-status-reason common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-preview 'make-access-preview))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-preview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-preview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-preview))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-preview-finding (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-preview-finding-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-preview-finding-id common-lisp:null))
   (existing-finding-id common-lisp:nil :type
    (common-lisp:or finding-id common-lisp:null))
   (existing-finding-status common-lisp:nil :type
    (common-lisp:or finding-status common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or principal-map common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action-list common-lisp:null))
   (condition common-lisp:nil :type
    (common-lisp:or condition-key-map common-lisp:null))
   (resource common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (is-public common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (change-type (common-lisp:error ":changetype is required") :type
    (common-lisp:or finding-change-type common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or finding-status common-lisp:null))
   (resource-owner-account
    (common-lisp:error ":resourceowneraccount is required") :type
    (common-lisp:or string common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or finding-source-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-preview-finding 'make-access-preview-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'existing-finding-id))
      (common-lisp:list
       (common-lisp:cons "existingFindingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-finding-status))
      (common-lisp:list
       (common-lisp:cons "existingFindingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-finding))
   common-lisp:nil))
(common-lisp:deftype access-preview-finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-preview-findings-list ()
   '(trivial-types:proper-list access-preview-finding))
 (common-lisp:defun |make-access-preview-findings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-preview-finding))
   aws-sdk/generator/shape::members))
(common-lisp:deftype access-preview-id () 'common-lisp:string)
(common-lisp:deftype access-preview-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (access-preview-status-reason (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-preview-status-reason-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or access-preview-status-reason-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-preview-status-reason
                    'make-access-preview-status-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-status-reason))
   common-lisp:nil))
(common-lisp:deftype access-preview-status-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (access-preview-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-preview-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-preview-id common-lisp:null))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or access-preview-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or access-preview-status-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-preview-summary 'make-access-preview-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-previews-list ()
   '(trivial-types:proper-list access-preview-summary))
 (common-lisp:defun |make-access-previews-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-preview-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype acl-canonical-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (acl-grantee (:copier common-lisp:nil)
      (:conc-name "struct-shape-acl-grantee-"))
   (id common-lisp:nil :type
    (common-lisp:or acl-canonical-id common-lisp:null))
   (uri common-lisp:nil :type (common-lisp:or acl-uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 'acl-grantee 'make-acl-grantee))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input acl-grantee))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input acl-grantee))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input acl-grantee))
   common-lisp:nil))
(common-lisp:deftype acl-permission () 'common-lisp:string)
(common-lisp:deftype acl-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (analyzed-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyzed-resource-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (analyzed-at (common-lisp:error ":analyzedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (is-public (common-lisp:error ":ispublic is required") :type
    (common-lisp:or boolean common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or action-list common-lisp:null))
   (shared-via common-lisp:nil :type
    (common-lisp:or shared-via-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or finding-status common-lisp:null))
   (resource-owner-account
    (common-lisp:error ":resourceowneraccount is required") :type
    (common-lisp:or string common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyzed-resource 'make-analyzed-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyzed-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyzed-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-via))
      (common-lisp:list
       (common-lisp:cons "sharedVia"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyzed-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (analyzed-resource-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyzed-resource-summary-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (resource-owner-account
    (common-lisp:error ":resourceowneraccount is required") :type
    (common-lisp:or string common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyzed-resource-summary
                    'make-analyzed-resource-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analyzed-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analyzed-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analyzed-resource-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analyzed-resources-list ()
   '(trivial-types:proper-list analyzed-resource-summary))
 (common-lisp:defun |make-analyzed-resources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analyzed-resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analyzer-arn () 'common-lisp:string)
(common-lisp:deftype analyzer-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (analyzer-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-analyzer-summary-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or type common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-resource-analyzed common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-resource-analyzed-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or analyzer-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or status-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'analyzer-summary 'make-analyzer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyzer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyzer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-resource-analyzed))
      (common-lisp:list
       (common-lisp:cons "lastResourceAnalyzed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-resource-analyzed-at))
      (common-lisp:list
       (common-lisp:cons "lastResourceAnalyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyzer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analyzers-list ()
   '(trivial-types:proper-list analyzer-summary))
 (common-lisp:defun |make-analyzers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analyzer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (apply-archive-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-apply-archive-rule-request-"))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-archive-rule-request
                    'make-apply-archive-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-archive-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (archive-rule-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-archive-rule-summary-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or name common-lisp:null))
   (filter (common-lisp:error ":filter is required") :type
    (common-lisp:or filter-criteria-map common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'archive-rule-summary 'make-archive-rule-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-rule-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-rule-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-rule-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype archive-rules-list ()
   '(trivial-types:proper-list archive-rule-summary))
 (common-lisp:defun |make-archive-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list archive-rule-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-policy-generation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-policy-generation-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-policy-generation-request
                    'make-cancel-policy-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-policy-generation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-policy-generation-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-policy-generation-response
                    'make-cancel-policy-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-response))
   common-lisp:nil))
(common-lisp:deftype cloud-trail-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-trail-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-trail-details-"))
   (trails (common-lisp:error ":trails is required") :type
    (common-lisp:or trail-list common-lisp:null))
   (access-role (common-lisp:error ":accessrole is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-trail-details 'make-cloud-trail-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cloud-trail-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cloud-trail-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trails))
      (common-lisp:list
       (common-lisp:cons "trails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "accessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cloud-trail-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-trail-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-trail-properties-"))
   (trail-properties (common-lisp:error ":trailproperties is required") :type
    (common-lisp:or trail-properties-list common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-trail-properties 'make-cloud-trail-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-properties))
      (common-lisp:list
       (common-lisp:cons "trailProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype condition-key-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-condition-key-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-"))
   (ebs-snapshot common-lisp:nil :type
    (common-lisp:or ebs-snapshot-configuration common-lisp:null))
   (ecr-repository common-lisp:nil :type
    (common-lisp:or ecr-repository-configuration common-lisp:null))
   (iam-role common-lisp:nil :type
    (common-lisp:or iam-role-configuration common-lisp:null))
   (efs-file-system common-lisp:nil :type
    (common-lisp:or efs-file-system-configuration common-lisp:null))
   (kms-key common-lisp:nil :type
    (common-lisp:or kms-key-configuration common-lisp:null))
   (rds-db-cluster-snapshot common-lisp:nil :type
    (common-lisp:or rds-db-cluster-snapshot-configuration common-lisp:null))
   (rds-db-snapshot common-lisp:nil :type
    (common-lisp:or rds-db-snapshot-configuration common-lisp:null))
   (secrets-manager-secret common-lisp:nil :type
    (common-lisp:or secrets-manager-secret-configuration common-lisp:null))
   (s3bucket common-lisp:nil :type
    (common-lisp:or s3bucket-configuration common-lisp:null))
   (sns-topic common-lisp:nil :type
    (common-lisp:or sns-topic-configuration common-lisp:null))
   (sqs-queue common-lisp:nil :type
    (common-lisp:or sqs-queue-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-snapshot))
      (common-lisp:list
       (common-lisp:cons "ebsSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-repository))
      (common-lisp:list
       (common-lisp:cons "ecrRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'efs-file-system))
      (common-lisp:list
       (common-lisp:cons "efsFileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-db-cluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "rdsDbClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-db-snapshot))
      (common-lisp:list
       (common-lisp:cons "rdsDbSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret))
      (common-lisp:list
       (common-lisp:cons "secretsManagerSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic))
      (common-lisp:list
       (common-lisp:cons "snsTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqs-queue))
      (common-lisp:list
       (common-lisp:cons "sqsQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configurations-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-configurations-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype configurations-map-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-preview-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-preview-request-"))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (configurations (common-lisp:error ":configurations is required") :type
    (common-lisp:or configurations-map common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-preview-request
                    'make-create-access-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-preview-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-preview-response-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or access-preview-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-preview-response
                    'make-create-access-preview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-analyzer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-analyzer-request-"))
   (analyzer-name (common-lisp:error ":analyzername is required") :type
    (common-lisp:or name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or type common-lisp:null))
   (archive-rules common-lisp:nil :type
    (common-lisp:or inline-archive-rules-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-analyzer-request 'make-create-analyzer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-name))
      (common-lisp:list
       (common-lisp:cons "analyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rules))
      (common-lisp:list
       (common-lisp:cons "archiveRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-analyzer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-analyzer-response-"))
   (arn common-lisp:nil :type (common-lisp:or analyzer-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-analyzer-response 'make-create-analyzer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-archive-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-archive-rule-request-"))
   (analyzer-name (common-lisp:error ":analyzername is required") :type
    (common-lisp:or name common-lisp:null))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or name common-lisp:null))
   (filter (common-lisp:error ":filter is required") :type
    (common-lisp:or filter-criteria-map common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-archive-rule-request
                    'make-create-archive-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (criterion (:copier common-lisp:nil)
      (:conc-name "struct-shape-criterion-"))
   (eq common-lisp:nil :type (common-lisp:or value-list common-lisp:null))
   (neq common-lisp:nil :type (common-lisp:or value-list common-lisp:null))
   (contains common-lisp:nil :type
    (common-lisp:or value-list common-lisp:null))
   (exists common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'criterion 'make-criterion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "eq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neq))
      (common-lisp:list
       (common-lisp:cons "neq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains))
      (common-lisp:list
       (common-lisp:cons "contains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exists))
      (common-lisp:list
       (common-lisp:cons "exists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input criterion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-analyzer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-analyzer-request-"))
   (analyzer-name (common-lisp:error ":analyzername is required") :type
    (common-lisp:or name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-analyzer-request 'make-delete-analyzer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analyzer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-archive-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-archive-rule-request-"))
   (analyzer-name (common-lisp:error ":analyzername is required") :type
    (common-lisp:or name common-lisp:null))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-archive-rule-request
                    'make-delete-archive-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-rule-request))
   common-lisp:nil))
(common-lisp:deftype ebs-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ebs-group-list () '(trivial-types:proper-list ebs-group))
 (common-lisp:defun |make-ebs-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebs-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ebs-snapshot-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebs-snapshot-configuration-"))
   (user-ids common-lisp:nil :type
    (common-lisp:or ebs-user-id-list common-lisp:null))
   (groups common-lisp:nil :type
    (common-lisp:or ebs-group-list common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or ebs-snapshot-data-encryption-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ebs-snapshot-configuration
                    'make-ebs-snapshot-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "userIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-snapshot-configuration))
   common-lisp:nil))
(common-lisp:deftype ebs-snapshot-data-encryption-key-id () 'common-lisp:string)
(common-lisp:deftype ebs-user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ebs-user-id-list ()
   '(trivial-types:proper-list ebs-user-id))
 (common-lisp:defun |make-ebs-user-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebs-user-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ecr-repository-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ecr-repository-configuration-"))
   (repository-policy common-lisp:nil :type
    (common-lisp:or ecr-repository-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ecr-repository-configuration
                    'make-ecr-repository-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-policy))
      (common-lisp:list
       (common-lisp:cons "repositoryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-configuration))
   common-lisp:nil))
(common-lisp:deftype ecr-repository-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (efs-file-system-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-efs-file-system-configuration-"))
   (file-system-policy common-lisp:nil :type
    (common-lisp:or efs-file-system-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'efs-file-system-configuration
                    'make-efs-file-system-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          efs-file-system-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          efs-file-system-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-policy))
      (common-lisp:list
       (common-lisp:cons "fileSystemPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          efs-file-system-configuration))
   common-lisp:nil))
(common-lisp:deftype efs-file-system-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-criteria-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-filter-criteria-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (finding (:copier common-lisp:nil) (:conc-name "struct-shape-finding-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or finding-id common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or principal-map common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action-list common-lisp:null))
   (resource common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (is-public common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (condition (common-lisp:error ":condition is required") :type
    (common-lisp:or condition-key-map common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (analyzed-at (common-lisp:error ":analyzedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or finding-status common-lisp:null))
   (resource-owner-account
    (common-lisp:error ":resourceowneraccount is required") :type
    (common-lisp:or string common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or finding-source-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'finding 'make-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding))
   common-lisp:nil))
(common-lisp:deftype finding-change-type () 'common-lisp:string)
(common-lisp:deftype finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-id-list ()
   '(trivial-types:proper-list finding-id))
 (common-lisp:defun |make-finding-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (finding-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-source-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or finding-source-type common-lisp:null))
   (detail common-lisp:nil :type
    (common-lisp:or finding-source-detail common-lisp:null)))
 (common-lisp:export (common-lisp:list 'finding-source 'make-finding-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (finding-source-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-source-detail-"))
   (access-point-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (access-point-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'finding-source-detail 'make-finding-source-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-source-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-source-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "accessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-point-account))
      (common-lisp:list
       (common-lisp:cons "accessPointAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-source-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype finding-source-list ()
   '(trivial-types:proper-list finding-source))
 (common-lisp:defun |make-finding-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype finding-source-type () 'common-lisp:string)
(common-lisp:deftype finding-status () 'common-lisp:string)
(common-lisp:deftype finding-status-update () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (finding-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or finding-id common-lisp:null))
   (principal common-lisp:nil :type
    (common-lisp:or principal-map common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action-list common-lisp:null))
   (resource common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (is-public common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (condition (common-lisp:error ":condition is required") :type
    (common-lisp:or condition-key-map common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (analyzed-at (common-lisp:error ":analyzedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or finding-status common-lisp:null))
   (resource-owner-account
    (common-lisp:error ":resourceowneraccount is required") :type
    (common-lisp:or string common-lisp:null))
   (error common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or finding-source-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'finding-summary 'make-finding-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype findings-list ()
   '(trivial-types:proper-list finding-summary))
 (common-lisp:defun |make-findings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (generated-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-generated-policy-"))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generated-policy 'make-generated-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generated-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generated-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generated-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype generated-policy-list ()
   '(trivial-types:proper-list generated-policy))
 (common-lisp:defun |make-generated-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generated-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (generated-policy-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-generated-policy-properties-"))
   (is-complete common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (principal-arn (common-lisp:error ":principalarn is required") :type
    (common-lisp:or principal-arn common-lisp:null))
   (cloud-trail-properties common-lisp:nil :type
    (common-lisp:or cloud-trail-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generated-policy-properties
                    'make-generated-policy-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-complete))
      (common-lisp:list
       (common-lisp:cons "isComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-trail-properties))
      (common-lisp:list
       (common-lisp:cons "cloudTrailProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generated-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-generated-policy-result-"))
   (properties (common-lisp:error ":properties is required") :type
    (common-lisp:or generated-policy-properties common-lisp:null))
   (generated-policies common-lisp:nil :type
    (common-lisp:or generated-policy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generated-policy-result 'make-generated-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-policies))
      (common-lisp:list
       (common-lisp:cons "generatedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-preview-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-preview-request-"))
   (access-preview-id (common-lisp:error ":accesspreviewid is required") :type
    (common-lisp:or access-preview-id common-lisp:null))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-preview-request
                    'make-get-access-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-preview-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-preview-response-"))
   (access-preview (common-lisp:error ":accesspreview is required") :type
    (common-lisp:or access-preview common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-preview-response
                    'make-get-access-preview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-preview))
      (common-lisp:list
       (common-lisp:cons "accessPreview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-analyzed-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-analyzed-resource-request-"))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-analyzed-resource-request
                    'make-get-analyzed-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-analyzed-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-analyzed-resource-response-"))
   (resource common-lisp:nil :type
    (common-lisp:or analyzed-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-analyzed-resource-response
                    'make-get-analyzed-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-analyzer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-analyzer-request-"))
   (analyzer-name (common-lisp:error ":analyzername is required") :type
    (common-lisp:or name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-analyzer-request 'make-get-analyzer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-analyzer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-analyzer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-analyzer-response-"))
   (analyzer (common-lisp:error ":analyzer is required") :type
    (common-lisp:or analyzer-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-analyzer-response 'make-get-analyzer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer))
      (common-lisp:list
       (common-lisp:cons "analyzer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-archive-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-archive-rule-request-"))
   (analyzer-name (common-lisp:error ":analyzername is required") :type
    (common-lisp:or name common-lisp:null))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-archive-rule-request 'make-get-archive-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-archive-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-archive-rule-response-"))
   (archive-rule (common-lisp:error ":archiverule is required") :type
    (common-lisp:or archive-rule-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-archive-rule-response
                    'make-get-archive-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rule))
      (common-lisp:list
       (common-lisp:cons "archiveRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-finding-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-finding-request-"))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or finding-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-finding-request 'make-get-finding-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-finding-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-finding-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-finding-response-"))
   (finding common-lisp:nil :type (common-lisp:or finding common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-finding-response 'make-get-finding-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-finding-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-finding-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding))
      (common-lisp:list
       (common-lisp:cons "finding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-finding-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-generated-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-generated-policy-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (include-resource-placeholders common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-service-level-template common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-generated-policy-request
                    'make-get-generated-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-generated-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-generated-policy-response-"))
   (job-details (common-lisp:error ":jobdetails is required") :type
    (common-lisp:or job-details common-lisp:null))
   (generated-policy-result
    (common-lisp:error ":generatedpolicyresult is required") :type
    (common-lisp:or generated-policy-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-generated-policy-response
                    'make-get-generated-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-policy-result))
      (common-lisp:list
       (common-lisp:cons "generatedPolicyResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-response))
   common-lisp:nil))
(common-lisp:deftype grantee-principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (iam-role-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-iam-role-configuration-"))
   (trust-policy common-lisp:nil :type
    (common-lisp:or iam-trust-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iam-role-configuration 'make-iam-role-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iam-role-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iam-role-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-policy))
      (common-lisp:list
       (common-lisp:cons "trustPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iam-role-configuration))
   common-lisp:nil))
(common-lisp:deftype iam-trust-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (inline-archive-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-inline-archive-rule-"))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or name common-lisp:null))
   (filter (common-lisp:error ":filter is required") :type
    (common-lisp:or filter-criteria-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inline-archive-rule 'make-inline-archive-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inline-archive-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inline-archive-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inline-archive-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inline-archive-rules-list ()
   '(trivial-types:proper-list inline-archive-rule))
 (common-lisp:defun |make-inline-archive-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inline-archive-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defstruct
     (internet-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-internet-configuration-")))
 (common-lisp:export
  (common-lisp:list 'internet-configuration 'make-internet-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internet-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internet-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internet-configuration))
   common-lisp:nil))
(common-lisp:deftype issue-code () 'common-lisp:string)
(common-lisp:deftype issuing-account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-details-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or job-status common-lisp:null))
   (started-on (common-lisp:error ":startedon is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (job-error common-lisp:nil :type
    (common-lisp:or job-error common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-details 'make-job-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "startedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "completedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-error))
      (common-lisp:list
       (common-lisp:cons "jobError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-error-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or job-error-code common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-error 'make-job-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-error))
   common-lisp:nil))
(common-lisp:deftype job-error-code () 'common-lisp:string)
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype kms-constraints-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kms-constraints-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-kms-constraints-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype kms-constraints-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kms-grant-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-kms-grant-configuration-"))
   (operations (common-lisp:error ":operations is required") :type
    (common-lisp:or kms-grant-operations-list common-lisp:null))
   (grantee-principal (common-lisp:error ":granteeprincipal is required") :type
    (common-lisp:or grantee-principal common-lisp:null))
   (retiring-principal common-lisp:nil :type
    (common-lisp:or retiring-principal common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or kms-grant-constraints common-lisp:null))
   (issuing-account (common-lisp:error ":issuingaccount is required") :type
    (common-lisp:or issuing-account common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kms-grant-configuration 'make-kms-grant-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-principal))
      (common-lisp:list
       (common-lisp:cons "granteePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retiring-principal))
      (common-lisp:list
       (common-lisp:cons "retiringPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuing-account))
      (common-lisp:list
       (common-lisp:cons "issuingAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kms-grant-configurations-list ()
   '(trivial-types:proper-list kms-grant-configuration))
 (common-lisp:defun |make-kms-grant-configurations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kms-grant-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (kms-grant-constraints (:copier common-lisp:nil)
      (:conc-name "struct-shape-kms-grant-constraints-"))
   (encryption-context-equals common-lisp:nil :type
    (common-lisp:or kms-constraints-map common-lisp:null))
   (encryption-context-subset common-lisp:nil :type
    (common-lisp:or kms-constraints-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kms-grant-constraints 'make-kms-grant-constraints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-context-equals))
      (common-lisp:list
       (common-lisp:cons "encryptionContextEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-context-subset))
      (common-lisp:list
       (common-lisp:cons "encryptionContextSubset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-constraints))
   common-lisp:nil))
(common-lisp:deftype kms-grant-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kms-grant-operations-list ()
   '(trivial-types:proper-list kms-grant-operation))
 (common-lisp:defun |make-kms-grant-operations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kms-grant-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (kms-key-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-kms-key-configuration-"))
   (key-policies common-lisp:nil :type
    (common-lisp:or kms-key-policies-map common-lisp:null))
   (grants common-lisp:nil :type
    (common-lisp:or kms-grant-configurations-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kms-key-configuration 'make-kms-key-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kms-key-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kms-key-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-policies))
      (common-lisp:list
       (common-lisp:cons "keyPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kms-key-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kms-key-policies-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-kms-key-policies-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype kms-key-policy () 'common-lisp:string)
(common-lisp:deftype learn-more-link () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-preview-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-preview-findings-request-"))
   (access-preview-id (common-lisp:error ":accesspreviewid is required") :type
    (common-lisp:or access-preview-id common-lisp:null))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or filter-criteria-map common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-preview-findings-request
                    'make-list-access-preview-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-preview-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-preview-findings-response-"))
   (findings (common-lisp:error ":findings is required") :type
    (common-lisp:or access-preview-findings-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-preview-findings-response
                    'make-list-access-preview-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-previews-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-previews-request-"))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-previews-request
                    'make-list-access-previews-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-previews-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-previews-response-"))
   (access-previews (common-lisp:error ":accesspreviews is required") :type
    (common-lisp:or access-previews-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-previews-response
                    'make-list-access-previews-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-previews))
      (common-lisp:list
       (common-lisp:cons "accessPreviews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-analyzed-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-analyzed-resources-request-"))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-analyzed-resources-request
                    'make-list-analyzed-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-analyzed-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-analyzed-resources-response-"))
   (analyzed-resources (common-lisp:error ":analyzedresources is required")
    :type (common-lisp:or analyzed-resources-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-analyzed-resources-response
                    'make-list-analyzed-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-resources))
      (common-lisp:list
       (common-lisp:cons "analyzedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-analyzers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-analyzers-request-"))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-analyzers-request 'make-list-analyzers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-analyzers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-analyzers-response-"))
   (analyzers (common-lisp:error ":analyzers is required") :type
    (common-lisp:or analyzers-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-analyzers-response 'make-list-analyzers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzers))
      (common-lisp:list
       (common-lisp:cons "analyzers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-archive-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-archive-rules-request-"))
   (analyzer-name (common-lisp:error ":analyzername is required") :type
    (common-lisp:or name common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-archive-rules-request
                    'make-list-archive-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-archive-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-archive-rules-response-"))
   (archive-rules (common-lisp:error ":archiverules is required") :type
    (common-lisp:or archive-rules-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-archive-rules-response
                    'make-list-archive-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rules))
      (common-lisp:list
       (common-lisp:cons "archiveRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-findings-request-"))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or filter-criteria-map common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or sort-criteria common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-findings-request 'make-list-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-findings-response-"))
   (findings (common-lisp:error ":findings is required") :type
    (common-lisp:or findings-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-findings-response 'make-list-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-generations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-generations-request-"))
   (principal-arn common-lisp:nil :type
    (common-lisp:or principal-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-policy-generations-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-generations-request
                    'make-list-policy-generations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-request))
   common-lisp:nil))
(common-lisp:deftype list-policy-generations-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-generations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-generations-response-"))
   (policy-generations (common-lisp:error ":policygenerations is required")
    :type (common-lisp:or policy-generation-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-generations-response
                    'make-list-policy-generations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-generations))
      (common-lisp:list
       (common-lisp:cons "policyGenerations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype locale () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (location (:copier common-lisp:nil) (:conc-name "struct-shape-location-"))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or path-element-list common-lisp:null))
   (span (common-lisp:error ":span is required") :type
    (common-lisp:or span common-lisp:null)))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'span))
      (common-lisp:list
       (common-lisp:cons "span"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype location-list () '(trivial-types:proper-list location))
 (common-lisp:defun |make-location-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-origin-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-origin-configuration-"))
   (vpc-configuration common-lisp:nil :type
    (common-lisp:or vpc-configuration common-lisp:null))
   (internet-configuration common-lisp:nil :type
    (common-lisp:or internet-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-origin-configuration
                    'make-network-origin-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-origin-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-origin-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internet-configuration))
      (common-lisp:list
       (common-lisp:cons "internetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-origin-configuration))
   common-lisp:nil))
(common-lisp:deftype order-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (path-element (:copier common-lisp:nil)
      (:conc-name "struct-shape-path-element-"))
   (index common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (substring common-lisp:nil :type
    (common-lisp:or substring common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'path-element 'make-path-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input path-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input path-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substring))
      (common-lisp:list
       (common-lisp:cons "substring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input path-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype path-element-list ()
   '(trivial-types:proper-list path-element))
 (common-lisp:defun |make-path-element-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-generation (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-generation-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (principal-arn (common-lisp:error ":principalarn is required") :type
    (common-lisp:or principal-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or job-status common-lisp:null))
   (started-on (common-lisp:error ":startedon is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-generation 'make-policy-generation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-generation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-generation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "startedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "completedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-generation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-generation-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-generation-details-"))
   (principal-arn (common-lisp:error ":principalarn is required") :type
    (common-lisp:or principal-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-generation-details
                    'make-policy-generation-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-generation-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-generation-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-generation-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-generation-list ()
   '(trivial-types:proper-list policy-generation))
 (common-lisp:defun |make-policy-generation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-generation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (position (:copier common-lisp:nil) (:conc-name "struct-shape-position-"))
   (line (common-lisp:error ":line is required") :type
    (common-lisp:or integer common-lisp:null))
   (column (common-lisp:error ":column is required") :type
    (common-lisp:or integer common-lisp:null))
   (offset (common-lisp:error ":offset is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'position 'make-position))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line))
      (common-lisp:list
       (common-lisp:cons "line"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input position))
   common-lisp:nil))
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principal-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-principal-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype rds-db-cluster-snapshot-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rds-db-cluster-snapshot-account-ids-list ()
   '(trivial-types:proper-list rds-db-cluster-snapshot-account-id))
 (common-lisp:defun |make-rds-db-cluster-snapshot-account-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rds-db-cluster-snapshot-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rds-db-cluster-snapshot-attribute-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rds-db-cluster-snapshot-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-rds-db-cluster-snapshot-attribute-value-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or rds-db-cluster-snapshot-account-ids-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rds-db-cluster-snapshot-attribute-value
                    'make-rds-db-cluster-snapshot-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rds-db-cluster-snapshot-attributes-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-rds-db-cluster-snapshot-attributes-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (rds-db-cluster-snapshot-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-rds-db-cluster-snapshot-configuration-"))
   (attributes common-lisp:nil :type
    (common-lisp:or rds-db-cluster-snapshot-attributes-map common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or rds-db-cluster-snapshot-kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rds-db-cluster-snapshot-configuration
                    'make-rds-db-cluster-snapshot-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-configuration))
   common-lisp:nil))
(common-lisp:deftype rds-db-cluster-snapshot-kms-key-id () 'common-lisp:string)
(common-lisp:deftype rds-db-snapshot-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rds-db-snapshot-account-ids-list ()
   '(trivial-types:proper-list rds-db-snapshot-account-id))
 (common-lisp:defun |make-rds-db-snapshot-account-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rds-db-snapshot-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rds-db-snapshot-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rds-db-snapshot-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-rds-db-snapshot-attribute-value-"))
   (account-ids common-lisp:nil :type
    (common-lisp:or rds-db-snapshot-account-ids-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rds-db-snapshot-attribute-value
                    'make-rds-db-snapshot-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rds-db-snapshot-attributes-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-rds-db-snapshot-attributes-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (rds-db-snapshot-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-rds-db-snapshot-configuration-"))
   (attributes common-lisp:nil :type
    (common-lisp:or rds-db-snapshot-attributes-map common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or rds-db-snapshot-kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rds-db-snapshot-configuration
                    'make-rds-db-snapshot-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-configuration))
   common-lisp:nil))
(common-lisp:deftype rds-db-snapshot-kms-key-id () 'common-lisp:string)
(common-lisp:deftype reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retiring-principal () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3access-point-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3access-point-configuration-"))
   (access-point-policy common-lisp:nil :type
    (common-lisp:or access-point-policy common-lisp:null))
   (public-access-block common-lisp:nil :type
    (common-lisp:or s3public-access-block-configuration common-lisp:null))
   (network-origin common-lisp:nil :type
    (common-lisp:or network-origin-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3access-point-configuration
                    'make-s3access-point-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3access-point-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3access-point-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-policy))
      (common-lisp:list
       (common-lisp:cons "accessPointPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-block))
      (common-lisp:list
       (common-lisp:cons "publicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-origin))
      (common-lisp:list
       (common-lisp:cons "networkOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3access-point-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3access-point-configurations-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-s3access-point-configurations-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (s3bucket-acl-grant-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3bucket-acl-grant-configuration-"))
   (permission (common-lisp:error ":permission is required") :type
    (common-lisp:or acl-permission common-lisp:null))
   (grantee (common-lisp:error ":grantee is required") :type
    (common-lisp:or acl-grantee common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3bucket-acl-grant-configuration
                    'make-s3bucket-acl-grant-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-acl-grant-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-acl-grant-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-acl-grant-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3bucket-acl-grant-configurations-list ()
   '(trivial-types:proper-list s3bucket-acl-grant-configuration))
 (common-lisp:defun |make-s3bucket-acl-grant-configurations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            s3bucket-acl-grant-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (s3bucket-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3bucket-configuration-"))
   (bucket-policy common-lisp:nil :type
    (common-lisp:or s3bucket-policy common-lisp:null))
   (bucket-acl-grants common-lisp:nil :type
    (common-lisp:or s3bucket-acl-grant-configurations-list common-lisp:null))
   (bucket-public-access-block common-lisp:nil :type
    (common-lisp:or s3public-access-block-configuration common-lisp:null))
   (access-points common-lisp:nil :type
    (common-lisp:or s3access-point-configurations-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3bucket-configuration 'make-s3bucket-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-policy))
      (common-lisp:list
       (common-lisp:cons "bucketPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-acl-grants))
      (common-lisp:list
       (common-lisp:cons "bucketAclGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-public-access-block))
      (common-lisp:list
       (common-lisp:cons "bucketPublicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-points))
      (common-lisp:list
       (common-lisp:cons "accessPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-configuration))
   common-lisp:nil))
(common-lisp:deftype s3bucket-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3public-access-block-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3public-access-block-configuration-"))
   (ignore-public-acls (common-lisp:error ":ignorepublicacls is required")
    :type (common-lisp:or boolean common-lisp:null))
   (restrict-public-buckets
    (common-lisp:error ":restrictpublicbuckets is required") :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3public-access-block-configuration
                    'make-s3public-access-block-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3public-access-block-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3public-access-block-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "ignorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "restrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3public-access-block-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (secrets-manager-secret-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-secrets-manager-secret-configuration-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or secrets-manager-secret-kms-id common-lisp:null))
   (secret-policy common-lisp:nil :type
    (common-lisp:or secrets-manager-secret-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'secrets-manager-secret-configuration
                    'make-secrets-manager-secret-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          secrets-manager-secret-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          secrets-manager-secret-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-policy))
      (common-lisp:list
       (common-lisp:cons "secretPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          secrets-manager-secret-configuration))
   common-lisp:nil))
(common-lisp:deftype secrets-manager-secret-kms-id () 'common-lisp:string)
(common-lisp:deftype secrets-manager-secret-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:deftype shared-via-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-shared-via-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sns-topic-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sns-topic-configuration-"))
   (topic-policy common-lisp:nil :type
    (common-lisp:or sns-topic-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sns-topic-configuration 'make-sns-topic-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-policy))
      (common-lisp:list
       (common-lisp:cons "topicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-configuration))
   common-lisp:nil))
(common-lisp:deftype sns-topic-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sort-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-sort-criteria-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (order-by common-lisp:nil :type (common-lisp:or order-by common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sort-criteria 'make-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (span (:copier common-lisp:nil) (:conc-name "struct-shape-span-"))
   (start (common-lisp:error ":start is required") :type
    (common-lisp:or position common-lisp:null))
   (end (common-lisp:error ":end is required") :type
    (common-lisp:or position common-lisp:null)))
 (common-lisp:export (common-lisp:list 'span 'make-span))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input span))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input span))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input span))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sqs-queue-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-sqs-queue-configuration-"))
   (queue-policy common-lisp:nil :type
    (common-lisp:or sqs-queue-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sqs-queue-configuration 'make-sqs-queue-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-policy))
      (common-lisp:list
       (common-lisp:cons "queuePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-configuration))
   common-lisp:nil))
(common-lisp:deftype sqs-queue-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-policy-generation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-policy-generation-request-"))
   (policy-generation-details
    (common-lisp:error ":policygenerationdetails is required") :type
    (common-lisp:or policy-generation-details common-lisp:null))
   (cloud-trail-details common-lisp:nil :type
    (common-lisp:or cloud-trail-details common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-policy-generation-request
                    'make-start-policy-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-generation-details))
      (common-lisp:list
       (common-lisp:cons "policyGenerationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail-details))
      (common-lisp:list
       (common-lisp:cons "cloudTrailDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-policy-generation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-policy-generation-response-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-policy-generation-response
                    'make-start-policy-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-resource-scan-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-resource-scan-request-"))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (resource-owner-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-resource-scan-request
                    'make-start-resource-scan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-scan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-scan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-scan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (status-reason (:copier common-lisp:nil)
      (:conc-name "struct-shape-status-reason-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or reason-code common-lisp:null)))
 (common-lisp:export (common-lisp:list 'status-reason 'make-status-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status-reason))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (substring (:copier common-lisp:nil)
      (:conc-name "struct-shape-substring-"))
   (start (common-lisp:error ":start is required") :type
    (common-lisp:or integer common-lisp:null))
   (length (common-lisp:error ":length is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'substring 'make-substring))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input substring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input substring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input substring))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (trail (:copier common-lisp:nil) (:conc-name "struct-shape-trail-"))
   (cloud-trail-arn (common-lisp:error ":cloudtrailarn is required") :type
    (common-lisp:or cloud-trail-arn common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or region-list common-lisp:null))
   (all-regions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trail 'make-trail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail-arn))
      (common-lisp:list
       (common-lisp:cons "cloudTrailArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-regions))
      (common-lisp:list
       (common-lisp:cons "allRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trail-list () '(trivial-types:proper-list trail))
 (common-lisp:defun |make-trail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (trail-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-trail-properties-"))
   (cloud-trail-arn (common-lisp:error ":cloudtrailarn is required") :type
    (common-lisp:or cloud-trail-arn common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or region-list common-lisp:null))
   (all-regions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trail-properties 'make-trail-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trail-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trail-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail-arn))
      (common-lisp:list
       (common-lisp:cons "cloudTrailArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-regions))
      (common-lisp:list
       (common-lisp:cons "allRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trail-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trail-properties-list ()
   '(trivial-types:proper-list trail-properties))
 (common-lisp:defun |make-trail-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trail-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-archive-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-archive-rule-request-"))
   (analyzer-name (common-lisp:error ":analyzername is required") :type
    (common-lisp:or name common-lisp:null))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or name common-lisp:null))
   (filter (common-lisp:error ":filter is required") :type
    (common-lisp:or filter-criteria-map common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-archive-rule-request
                    'make-update-archive-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-findings-request-"))
   (analyzer-arn (common-lisp:error ":analyzerarn is required") :type
    (common-lisp:or analyzer-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or finding-status-update common-lisp:null))
   (ids common-lisp:nil :type
    (common-lisp:or finding-id-list common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-findings-request 'make-update-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (validate-policy-finding (:copier common-lisp:nil)
      (:conc-name "struct-shape-validate-policy-finding-"))
   (finding-details (common-lisp:error ":findingdetails is required") :type
    (common-lisp:or string common-lisp:null))
   (finding-type (common-lisp:error ":findingtype is required") :type
    (common-lisp:or validate-policy-finding-type common-lisp:null))
   (issue-code (common-lisp:error ":issuecode is required") :type
    (common-lisp:or issue-code common-lisp:null))
   (learn-more-link (common-lisp:error ":learnmorelink is required") :type
    (common-lisp:or learn-more-link common-lisp:null))
   (locations (common-lisp:error ":locations is required") :type
    (common-lisp:or location-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-policy-finding 'make-validate-policy-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-details))
      (common-lisp:list
       (common-lisp:cons "findingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-type))
      (common-lisp:list
       (common-lisp:cons "findingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-code))
      (common-lisp:list
       (common-lisp:cons "issueCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'learn-more-link))
      (common-lisp:list
       (common-lisp:cons "learnMoreLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locations))
      (common-lisp:list
       (common-lisp:cons "locations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validate-policy-finding-list ()
   '(trivial-types:proper-list validate-policy-finding))
 (common-lisp:defun |make-validate-policy-finding-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validate-policy-finding))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validate-policy-finding-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (validate-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-validate-policy-request-"))
   (locale common-lisp:nil :type (common-lisp:or locale common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (policy-document (common-lisp:error ":policydocument is required") :type
    (common-lisp:or policy-document common-lisp:null))
   (policy-type (common-lisp:error ":policytype is required") :type
    (common-lisp:or policy-type common-lisp:null))
   (validate-policy-resource-type common-lisp:nil :type
    (common-lisp:or validate-policy-resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-policy-request 'make-validate-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validate-policy-resource-type))
      (common-lisp:list
       (common-lisp:cons "validatePolicyResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-request))
   common-lisp:nil))
(common-lisp:deftype validate-policy-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (validate-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-validate-policy-response-"))
   (findings (common-lisp:error ":findings is required") :type
    (common-lisp:or validate-policy-finding-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-policy-response 'make-validate-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype value-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-configuration-"))
   (vpc-id (common-lisp:error ":vpcid is required") :type
    (common-lisp:or vpc-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun apply-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn rule-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn rule-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-apply-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/archive-rule"
                                                        "ApplyArchiveRule"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'apply-archive-rule))
(common-lisp:progn
 (common-lisp:defun cancel-policy-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-policy-generation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/generation/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CancelPolicyGeneration"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-policy-generation))
(common-lisp:progn
 (common-lisp:defun create-access-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn configurations client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn configurations client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-preview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/access-preview"
                                                        "CreateAccessPreview"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-preview))
(common-lisp:progn
 (common-lisp:defun create-analyzer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name type archive-rules tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name type archive-rules tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-analyzer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/analyzer"
                                                        "CreateAnalyzer"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-analyzer))
(common-lisp:progn
 (common-lisp:defun create-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name filter
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name rule-name filter client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "CreateArchiveRule"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-archive-rule))
(common-lisp:progn
 (common-lisp:defun delete-analyzer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name client-token)
   (common-lisp:declare (common-lisp:ignorable analyzer-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-analyzer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "DeleteAnalyzer"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-analyzer))
(common-lisp:progn
 (common-lisp:defun delete-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name rule-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "DeleteArchiveRule"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-archive-rule))
(common-lisp:progn
 (common-lisp:defun get-access-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-preview-id analyzer-arn)
   (common-lisp:declare (common-lisp:ignorable access-preview-id analyzer-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-preview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-preview/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-preview-id))))
                                                        "GetAccessPreview"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-preview))
(common-lisp:progn
 (common-lisp:defun get-analyzed-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn resource-arn)
   (common-lisp:declare (common-lisp:ignorable analyzer-arn resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-analyzed-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/analyzed-resource"
                                                        "GetAnalyzedResource"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-analyzed-resource))
(common-lisp:progn
 (common-lisp:defun get-analyzer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name)
   (common-lisp:declare (common-lisp:ignorable analyzer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-analyzer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "GetAnalyzer"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-analyzer))
(common-lisp:progn
 (common-lisp:defun get-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name)
   (common-lisp:declare (common-lisp:ignorable analyzer-name rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "GetArchiveRule"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-archive-rule))
(common-lisp:progn
 (common-lisp:defun get-finding
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn id)
   (common-lisp:declare (common-lisp:ignorable analyzer-arn id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-finding-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/finding/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFinding"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-finding))
(common-lisp:progn
 (common-lisp:defun get-generated-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id include-resource-placeholders
                     include-service-level-template)
   (common-lisp:declare
    (common-lisp:ignorable job-id include-resource-placeholders
     include-service-level-template))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-generated-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/generation/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetGeneratedPolicy"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-generated-policy))
(common-lisp:progn
 (common-lisp:defun list-access-preview-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-preview-id analyzer-arn filter
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable access-preview-id analyzer-arn filter next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-access-preview-findings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-preview/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-preview-id))))
                                                        "ListAccessPreviewFindings"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-preview-findings))
(common-lisp:progn
 (common-lisp:defun list-access-previews
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-previews-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/access-preview"
                                                        "ListAccessPreviews"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-previews))
(common-lisp:progn
 (common-lisp:defun list-analyzed-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn resource-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn resource-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-analyzed-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/analyzed-resource"
                                                        "ListAnalyzedResources"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-analyzed-resources))
(common-lisp:progn
 (common-lisp:defun list-analyzers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results type)
   (common-lisp:declare (common-lisp:ignorable next-token max-results type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-analyzers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/analyzer"
                                                        "ListAnalyzers"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-analyzers))
(common-lisp:progn
 (common-lisp:defun list-archive-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-archive-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "ListArchiveRules"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-archive-rules))
(common-lisp:progn
 (common-lisp:defun list-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn filter sort next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn filter sort next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/finding"
                                                        "ListFindings"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-findings))
(common-lisp:progn
 (common-lisp:defun list-policy-generations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable principal-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-generations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/policy/generation"
                                                        "ListPolicyGenerations"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policy-generations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-policy-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-generation-details
                     cloud-trail-details client-token)
   (common-lisp:declare
    (common-lisp:ignorable policy-generation-details cloud-trail-details
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-policy-generation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/policy/generation"
                                                        "StartPolicyGeneration"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-policy-generation))
(common-lisp:progn
 (common-lisp:defun start-resource-scan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn resource-arn
                     resource-owner-account)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn resource-arn resource-owner-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-resource-scan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/resource/scan"
                                                        "StartResourceScan"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-resource-scan))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name filter
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name rule-name filter client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "UpdateArchiveRule"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-archive-rule))
(common-lisp:progn
 (common-lisp:defun update-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn status ids resource-arn
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn status ids resource-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/finding"
                                                        "UpdateFindings"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-findings))
(common-lisp:progn
 (common-lisp:defun validate-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key locale max-results next-token
                     policy-document policy-type validate-policy-resource-type)
   (common-lisp:declare
    (common-lisp:ignorable locale max-results next-token policy-document
     policy-type validate-policy-resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-validate-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/policy/validation"
                                                        "ValidatePolicy"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'validate-policy))
