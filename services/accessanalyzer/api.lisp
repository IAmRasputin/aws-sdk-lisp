;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/accessanalyzer/api
  (:use)
  (:nicknames #:aws/accessanalyzer)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/accessanalyzer/api)
(common-lisp:progn
 (common-lisp:defclass accessanalyzer-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "accessanalyzer" :protocol
                        :rest-json))
 (common-lisp:export 'accessanalyzer-request))
(common-lisp:progn
 (common-lisp:define-condition accessanalyzer-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'accessanalyzer-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (accessanalyzer-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-point-arn () 'common-lisp:string)
(common-lisp:deftype access-point-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-preview common-lisp:nil
                       ((status-reason :initarg :|statusReason| :type
                         (common-lisp:or access-preview-status-reason
                                         common-lisp:null)
                         :accessor %access-preview-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or access-preview-status
                                         common-lisp:null)
                         :accessor %access-preview-status :initform
                         (common-lisp:error ":status is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %access-preview-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (configurations :initarg :|configurations| :type
                         (common-lisp:or configurations-map common-lisp:null)
                         :accessor %access-preview-configurations :initform
                         (common-lisp:error ":configurations is required"))
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %access-preview-analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or access-preview-id common-lisp:null)
                         :accessor %access-preview-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'access-preview 'make-access-preview))
 (common-lisp:defun make-access-preview
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-reason status created-at
                     configurations analyzer-arn id)
   (common-lisp:apply #'common-lisp:make-instance 'access-preview
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-preview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-preview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-preview))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-preview-finding common-lisp:nil
                       ((sources :initarg :|sources| :type
                         (common-lisp:or finding-source-list common-lisp:null)
                         :accessor %access-preview-finding-sources :initform
                         common-lisp:nil)
                        (error :initarg :|error| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %access-preview-finding-error :initform
                         common-lisp:nil)
                        (resource-owner-account :initarg
                         :|resourceOwnerAccount| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %access-preview-finding-resource-owner-account
                         :initform
                         (common-lisp:error
                          ":resourceowneraccount is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or finding-status common-lisp:null)
                         :accessor %access-preview-finding-status :initform
                         (common-lisp:error ":status is required"))
                        (change-type :initarg :|changeType| :type
                         (common-lisp:or finding-change-type common-lisp:null)
                         :accessor %access-preview-finding-change-type
                         :initform
                         (common-lisp:error ":changetype is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %access-preview-finding-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %access-preview-finding-resource-type
                         :initform
                         (common-lisp:error ":resourcetype is required"))
                        (is-public :initarg :|isPublic| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %access-preview-finding-is-public :initform
                         common-lisp:nil)
                        (resource :initarg :|resource| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %access-preview-finding-resource :initform
                         common-lisp:nil)
                        (condition :initarg :|condition| :type
                         (common-lisp:or condition-key-map common-lisp:null)
                         :accessor %access-preview-finding-condition :initform
                         common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or action-list common-lisp:null)
                         :accessor %access-preview-finding-action :initform
                         common-lisp:nil)
                        (principal :initarg :|principal| :type
                         (common-lisp:or principal-map common-lisp:null)
                         :accessor %access-preview-finding-principal :initform
                         common-lisp:nil)
                        (existing-finding-status :initarg
                         :|existingFindingStatus| :type
                         (common-lisp:or finding-status common-lisp:null)
                         :accessor
                         %access-preview-finding-existing-finding-status
                         :initform common-lisp:nil)
                        (existing-finding-id :initarg :|existingFindingId|
                         :type (common-lisp:or finding-id common-lisp:null)
                         :accessor %access-preview-finding-existing-finding-id
                         :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or access-preview-finding-id
                                         common-lisp:null)
                         :accessor %access-preview-finding-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'access-preview-finding 'make-access-preview-finding))
 (common-lisp:defun make-access-preview-finding
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources error resource-owner-account
                     status change-type created-at resource-type is-public
                     resource condition action principal
                     existing-finding-status existing-finding-id id)
   (common-lisp:apply #'common-lisp:make-instance 'access-preview-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'existing-finding-id))
      (common-lisp:list
       (common-lisp:cons "existingFindingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-finding-status))
      (common-lisp:list
       (common-lisp:cons "existingFindingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-finding))
   common-lisp:nil))
(common-lisp:deftype access-preview-finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-preview-findings-list ()
   '(trivial-types:proper-list access-preview-finding))
 (common-lisp:defun |make-access-preview-findings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-preview-finding))
   aws-sdk/generator/shape::members))
(common-lisp:deftype access-preview-id () 'common-lisp:string)
(common-lisp:deftype access-preview-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-preview-status-reason common-lisp:nil
                       ((code :initarg :|code| :type
                         (common-lisp:or access-preview-status-reason-code
                                         common-lisp:null)
                         :accessor %access-preview-status-reason-code :initform
                         (common-lisp:error ":code is required"))))
 (common-lisp:export
  (common-lisp:list 'access-preview-status-reason
                    'make-access-preview-status-reason))
 (common-lisp:defun make-access-preview-status-reason
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code)
   (common-lisp:apply #'common-lisp:make-instance 'access-preview-status-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-status-reason))
   common-lisp:nil))
(common-lisp:deftype access-preview-status-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-preview-summary common-lisp:nil
                       ((status-reason :initarg :|statusReason| :type
                         (common-lisp:or access-preview-status-reason
                                         common-lisp:null)
                         :accessor %access-preview-summary-status-reason
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or access-preview-status
                                         common-lisp:null)
                         :accessor %access-preview-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %access-preview-summary-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %access-preview-summary-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or access-preview-id common-lisp:null)
                         :accessor %access-preview-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'access-preview-summary 'make-access-preview-summary))
 (common-lisp:defun make-access-preview-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-reason status created-at
                     analyzer-arn id)
   (common-lisp:apply #'common-lisp:make-instance 'access-preview-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-previews-list ()
   '(trivial-types:proper-list access-preview-summary))
 (common-lisp:defun |make-access-previews-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-preview-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype acl-canonical-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass acl-grantee common-lisp:nil
                       ((uri :initarg :|uri| :type
                         (common-lisp:or acl-uri common-lisp:null) :accessor
                         %acl-grantee-uri :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or acl-canonical-id common-lisp:null)
                         :accessor %acl-grantee-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'acl-grantee 'make-acl-grantee))
 (common-lisp:defun make-acl-grantee
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uri id)
   (common-lisp:apply #'common-lisp:make-instance 'acl-grantee
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input acl-grantee))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input acl-grantee))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input acl-grantee))
   common-lisp:nil))
(common-lisp:deftype acl-permission () 'common-lisp:string)
(common-lisp:deftype acl-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analyzed-resource common-lisp:nil
                       ((error :initarg :|error| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %analyzed-resource-error :initform common-lisp:nil)
                        (resource-owner-account :initarg
                         :|resourceOwnerAccount| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %analyzed-resource-resource-owner-account :initform
                         (common-lisp:error
                          ":resourceowneraccount is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or finding-status common-lisp:null)
                         :accessor %analyzed-resource-status :initform
                         common-lisp:nil)
                        (shared-via :initarg :|sharedVia| :type
                         (common-lisp:or shared-via-list common-lisp:null)
                         :accessor %analyzed-resource-shared-via :initform
                         common-lisp:nil)
                        (actions :initarg :|actions| :type
                         (common-lisp:or action-list common-lisp:null)
                         :accessor %analyzed-resource-actions :initform
                         common-lisp:nil)
                        (is-public :initarg :|isPublic| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %analyzed-resource-is-public :initform
                         (common-lisp:error ":ispublic is required"))
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analyzed-resource-updated-at :initform
                         (common-lisp:error ":updatedat is required"))
                        (analyzed-at :initarg :|analyzedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analyzed-resource-analyzed-at :initform
                         (common-lisp:error ":analyzedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analyzed-resource-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %analyzed-resource-resource-type :initform
                         (common-lisp:error ":resourcetype is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %analyzed-resource-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'analyzed-resource 'make-analyzed-resource))
 (common-lisp:defun make-analyzed-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error resource-owner-account status
                     shared-via actions is-public updated-at analyzed-at
                     created-at resource-type resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'analyzed-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyzed-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyzed-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-via))
      (common-lisp:list
       (common-lisp:cons "sharedVia"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyzed-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analyzed-resource-summary common-lisp:nil
                       ((resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %analyzed-resource-summary-resource-type
                         :initform
                         (common-lisp:error ":resourcetype is required"))
                        (resource-owner-account :initarg
                         :|resourceOwnerAccount| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %analyzed-resource-summary-resource-owner-account
                         :initform
                         (common-lisp:error
                          ":resourceowneraccount is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %analyzed-resource-summary-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'analyzed-resource-summary
                    'make-analyzed-resource-summary))
 (common-lisp:defun make-analyzed-resource-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-owner-account
                     resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'analyzed-resource-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analyzed-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analyzed-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analyzed-resource-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analyzed-resources-list ()
   '(trivial-types:proper-list analyzed-resource-summary))
 (common-lisp:defun |make-analyzed-resources-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analyzed-resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analyzer-arn () 'common-lisp:string)
(common-lisp:deftype analyzer-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analyzer-summary common-lisp:nil
                       ((status-reason :initarg :|statusReason| :type
                         (common-lisp:or status-reason common-lisp:null)
                         :accessor %analyzer-summary-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or analyzer-status common-lisp:null)
                         :accessor %analyzer-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %analyzer-summary-tags :initform common-lisp:nil)
                        (last-resource-analyzed-at :initarg
                         :|lastResourceAnalyzedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analyzer-summary-last-resource-analyzed-at :initform
                         common-lisp:nil)
                        (last-resource-analyzed :initarg
                         :|lastResourceAnalyzed| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %analyzer-summary-last-resource-analyzed :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %analyzer-summary-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (type :initarg :|type| :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %analyzer-summary-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %analyzer-summary-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %analyzer-summary-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'analyzer-summary 'make-analyzer-summary))
 (common-lisp:defun make-analyzer-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-reason status tags
                     last-resource-analyzed-at last-resource-analyzed
                     created-at type name arn)
   (common-lisp:apply #'common-lisp:make-instance 'analyzer-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyzer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyzer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-resource-analyzed))
      (common-lisp:list
       (common-lisp:cons "lastResourceAnalyzed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-resource-analyzed-at))
      (common-lisp:list
       (common-lisp:cons "lastResourceAnalyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyzer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analyzers-list ()
   '(trivial-types:proper-list analyzer-summary))
 (common-lisp:defun |make-analyzers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analyzer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass apply-archive-rule-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %apply-archive-rule-request-client-token :initform
                         common-lisp:nil)
                        (rule-name :initarg :|ruleName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %apply-archive-rule-request-rule-name :initform
                         (common-lisp:error ":rulename is required"))
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %apply-archive-rule-request-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))))
 (common-lisp:export
  (common-lisp:list 'apply-archive-rule-request
                    'make-apply-archive-rule-request))
 (common-lisp:defun make-apply-archive-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token rule-name analyzer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'apply-archive-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-archive-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-rule-summary common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %archive-rule-summary-updated-at :initform
                         (common-lisp:error ":updatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %archive-rule-summary-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (filter :initarg :|filter| :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor %archive-rule-summary-filter :initform
                         (common-lisp:error ":filter is required"))
                        (rule-name :initarg :|ruleName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %archive-rule-summary-rule-name :initform
                         (common-lisp:error ":rulename is required"))))
 (common-lisp:export
  (common-lisp:list 'archive-rule-summary 'make-archive-rule-summary))
 (common-lisp:defun make-archive-rule-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at created-at filter rule-name)
   (common-lisp:apply #'common-lisp:make-instance 'archive-rule-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-rule-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-rule-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-rule-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype archive-rules-list ()
   '(trivial-types:proper-list archive-rule-summary))
 (common-lisp:defun |make-archive-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list archive-rule-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-policy-generation-request common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %cancel-policy-generation-request-job-id :initform
                         (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-policy-generation-request
                    'make-cancel-policy-generation-request))
 (common-lisp:defun make-cancel-policy-generation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-policy-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-policy-generation-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-policy-generation-response
                    'make-cancel-policy-generation-response))
 (common-lisp:defun make-cancel-policy-generation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-policy-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-response))
   common-lisp:nil))
(common-lisp:deftype cloud-trail-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-trail-details common-lisp:nil
                       ((end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %cloud-trail-details-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %cloud-trail-details-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (access-role :initarg :|accessRole| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %cloud-trail-details-access-role :initform
                         (common-lisp:error ":accessrole is required"))
                        (trails :initarg :|trails| :type
                         (common-lisp:or trail-list common-lisp:null) :accessor
                         %cloud-trail-details-trails :initform
                         (common-lisp:error ":trails is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-trail-details 'make-cloud-trail-details))
 (common-lisp:defun make-cloud-trail-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time access-role trails)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-trail-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cloud-trail-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cloud-trail-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trails))
      (common-lisp:list
       (common-lisp:cons "trails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "accessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cloud-trail-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-trail-properties common-lisp:nil
                       ((end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %cloud-trail-properties-end-time :initform
                         (common-lisp:error ":endtime is required"))
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %cloud-trail-properties-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (trail-properties :initarg :|trailProperties| :type
                         (common-lisp:or trail-properties-list
                                         common-lisp:null)
                         :accessor %cloud-trail-properties-trail-properties
                         :initform
                         (common-lisp:error ":trailproperties is required"))))
 (common-lisp:export
  (common-lisp:list 'cloud-trail-properties 'make-cloud-trail-properties))
 (common-lisp:defun make-cloud-trail-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time trail-properties)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-trail-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-properties))
      (common-lisp:list
       (common-lisp:cons "trailProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype condition-key-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-condition-key-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass configuration common-lisp:nil
                       ((sqs-queue :initarg :|sqsQueue| :type
                         (common-lisp:or sqs-queue-configuration
                                         common-lisp:null)
                         :accessor %configuration-sqs-queue :initform
                         common-lisp:nil)
                        (sns-topic :initarg :|snsTopic| :type
                         (common-lisp:or sns-topic-configuration
                                         common-lisp:null)
                         :accessor %configuration-sns-topic :initform
                         common-lisp:nil)
                        (s3bucket :initarg :|s3Bucket| :type
                         (common-lisp:or s3bucket-configuration
                                         common-lisp:null)
                         :accessor %configuration-s3bucket :initform
                         common-lisp:nil)
                        (secrets-manager-secret :initarg
                         :|secretsManagerSecret| :type
                         (common-lisp:or secrets-manager-secret-configuration
                                         common-lisp:null)
                         :accessor %configuration-secrets-manager-secret
                         :initform common-lisp:nil)
                        (rds-db-snapshot :initarg :|rdsDbSnapshot| :type
                         (common-lisp:or rds-db-snapshot-configuration
                                         common-lisp:null)
                         :accessor %configuration-rds-db-snapshot :initform
                         common-lisp:nil)
                        (rds-db-cluster-snapshot :initarg
                         :|rdsDbClusterSnapshot| :type
                         (common-lisp:or rds-db-cluster-snapshot-configuration
                                         common-lisp:null)
                         :accessor %configuration-rds-db-cluster-snapshot
                         :initform common-lisp:nil)
                        (kms-key :initarg :|kmsKey| :type
                         (common-lisp:or kms-key-configuration
                                         common-lisp:null)
                         :accessor %configuration-kms-key :initform
                         common-lisp:nil)
                        (efs-file-system :initarg :|efsFileSystem| :type
                         (common-lisp:or efs-file-system-configuration
                                         common-lisp:null)
                         :accessor %configuration-efs-file-system :initform
                         common-lisp:nil)
                        (iam-role :initarg :|iamRole| :type
                         (common-lisp:or iam-role-configuration
                                         common-lisp:null)
                         :accessor %configuration-iam-role :initform
                         common-lisp:nil)
                        (ecr-repository :initarg :|ecrRepository| :type
                         (common-lisp:or ecr-repository-configuration
                                         common-lisp:null)
                         :accessor %configuration-ecr-repository :initform
                         common-lisp:nil)
                        (ebs-snapshot :initarg :|ebsSnapshot| :type
                         (common-lisp:or ebs-snapshot-configuration
                                         common-lisp:null)
                         :accessor %configuration-ebs-snapshot :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defun make-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sqs-queue sns-topic s3bucket
                     secrets-manager-secret rds-db-snapshot
                     rds-db-cluster-snapshot kms-key efs-file-system iam-role
                     ecr-repository ebs-snapshot)
   (common-lisp:apply #'common-lisp:make-instance 'configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-snapshot))
      (common-lisp:list
       (common-lisp:cons "ebsSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-repository))
      (common-lisp:list
       (common-lisp:cons "ecrRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'efs-file-system))
      (common-lisp:list
       (common-lisp:cons "efsFileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-db-cluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "rdsDbClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-db-snapshot))
      (common-lisp:list
       (common-lisp:cons "rdsDbSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret))
      (common-lisp:list
       (common-lisp:cons "secretsManagerSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic))
      (common-lisp:list
       (common-lisp:cons "snsTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqs-queue))
      (common-lisp:list
       (common-lisp:cons "sqsQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configurations-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-configurations-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype configurations-map-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (accessanalyzer-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-access-preview-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-access-preview-request-client-token :initform
                         common-lisp:nil)
                        (configurations :initarg :|configurations| :type
                         (common-lisp:or configurations-map common-lisp:null)
                         :accessor
                         %create-access-preview-request-configurations
                         :initform
                         (common-lisp:error ":configurations is required"))
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %create-access-preview-request-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-access-preview-request
                    'make-create-access-preview-request))
 (common-lisp:defun make-create-access-preview-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token configurations analyzer-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-access-preview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-preview-response common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or access-preview-id common-lisp:null)
                         :accessor %create-access-preview-response-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-access-preview-response
                    'make-create-access-preview-response))
 (common-lisp:defun make-create-access-preview-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-access-preview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-analyzer-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-analyzer-request-client-token :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %create-analyzer-request-tags :initform
                         common-lisp:nil)
                        (archive-rules :initarg :|archiveRules| :type
                         (common-lisp:or inline-archive-rules-list
                                         common-lisp:null)
                         :accessor %create-analyzer-request-archive-rules
                         :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %create-analyzer-request-type :initform
                         (common-lisp:error ":type is required"))
                        (analyzer-name :initarg :|analyzerName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-analyzer-request-analyzer-name :initform
                         (common-lisp:error ":analyzername is required"))))
 (common-lisp:export
  (common-lisp:list 'create-analyzer-request 'make-create-analyzer-request))
 (common-lisp:defun make-create-analyzer-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token tags archive-rules type
                     analyzer-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-analyzer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-name))
      (common-lisp:list
       (common-lisp:cons "analyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rules))
      (common-lisp:list
       (common-lisp:cons "archiveRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-analyzer-response common-lisp:nil
                       ((arn :initarg :|arn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %create-analyzer-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-analyzer-response 'make-create-analyzer-response))
 (common-lisp:defun make-create-analyzer-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-analyzer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-archive-rule-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-archive-rule-request-client-token :initform
                         common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor %create-archive-rule-request-filter
                         :initform (common-lisp:error ":filter is required"))
                        (rule-name :initarg :|ruleName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-archive-rule-request-rule-name :initform
                         (common-lisp:error ":rulename is required"))
                        (analyzer-name :initarg :|analyzerName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %create-archive-rule-request-analyzer-name :initform
                         (common-lisp:error ":analyzername is required"))))
 (common-lisp:export
  (common-lisp:list 'create-archive-rule-request
                    'make-create-archive-rule-request))
 (common-lisp:defun make-create-archive-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token filter rule-name
                     analyzer-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-archive-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass criterion common-lisp:nil
                       ((exists :initarg :|exists| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %criterion-exists :initform common-lisp:nil)
                        (contains :initarg :|contains| :type
                         (common-lisp:or value-list common-lisp:null) :accessor
                         %criterion-contains :initform common-lisp:nil)
                        (neq :initarg :|neq| :type
                         (common-lisp:or value-list common-lisp:null) :accessor
                         %criterion-neq :initform common-lisp:nil)
                        (eq :initarg :|eq| :type
                         (common-lisp:or value-list common-lisp:null) :accessor
                         %criterion-eq :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'criterion 'make-criterion))
 (common-lisp:defun make-criterion
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key exists contains neq eq)
   (common-lisp:apply #'common-lisp:make-instance 'criterion
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "eq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neq))
      (common-lisp:list
       (common-lisp:cons "neq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains))
      (common-lisp:list
       (common-lisp:cons "contains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exists))
      (common-lisp:list
       (common-lisp:cons "exists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input criterion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-analyzer-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-analyzer-request-client-token :initform
                         common-lisp:nil)
                        (analyzer-name :initarg :|analyzerName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-analyzer-request-analyzer-name :initform
                         (common-lisp:error ":analyzername is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-analyzer-request 'make-delete-analyzer-request))
 (common-lisp:defun make-delete-analyzer-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token analyzer-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-analyzer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analyzer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-archive-rule-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %delete-archive-rule-request-client-token :initform
                         common-lisp:nil)
                        (rule-name :initarg :|ruleName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-archive-rule-request-rule-name :initform
                         (common-lisp:error ":rulename is required"))
                        (analyzer-name :initarg :|analyzerName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %delete-archive-rule-request-analyzer-name :initform
                         (common-lisp:error ":analyzername is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-archive-rule-request
                    'make-delete-archive-rule-request))
 (common-lisp:defun make-delete-archive-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token rule-name analyzer-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-archive-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-rule-request))
   common-lisp:nil))
(common-lisp:deftype ebs-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ebs-group-list () '(trivial-types:proper-list ebs-group))
 (common-lisp:defun |make-ebs-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebs-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ebs-snapshot-configuration common-lisp:nil
                       ((kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or ebs-snapshot-data-encryption-key-id
                                         common-lisp:null)
                         :accessor %ebs-snapshot-configuration-kms-key-id
                         :initform common-lisp:nil)
                        (groups :initarg :|groups| :type
                         (common-lisp:or ebs-group-list common-lisp:null)
                         :accessor %ebs-snapshot-configuration-groups :initform
                         common-lisp:nil)
                        (user-ids :initarg :|userIds| :type
                         (common-lisp:or ebs-user-id-list common-lisp:null)
                         :accessor %ebs-snapshot-configuration-user-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ebs-snapshot-configuration
                    'make-ebs-snapshot-configuration))
 (common-lisp:defun make-ebs-snapshot-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id groups user-ids)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-snapshot-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "userIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-snapshot-configuration))
   common-lisp:nil))
(common-lisp:deftype ebs-snapshot-data-encryption-key-id () 'common-lisp:string)
(common-lisp:deftype ebs-user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ebs-user-id-list ()
   '(trivial-types:proper-list ebs-user-id))
 (common-lisp:defun |make-ebs-user-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebs-user-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ecr-repository-configuration common-lisp:nil
                       ((repository-policy :initarg :|repositoryPolicy| :type
                         (common-lisp:or ecr-repository-policy
                                         common-lisp:null)
                         :accessor
                         %ecr-repository-configuration-repository-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ecr-repository-configuration
                    'make-ecr-repository-configuration))
 (common-lisp:defun make-ecr-repository-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository-policy)
   (common-lisp:apply #'common-lisp:make-instance 'ecr-repository-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-policy))
      (common-lisp:list
       (common-lisp:cons "repositoryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-configuration))
   common-lisp:nil))
(common-lisp:deftype ecr-repository-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass efs-file-system-configuration common-lisp:nil
                       ((file-system-policy :initarg :|fileSystemPolicy| :type
                         (common-lisp:or efs-file-system-policy
                                         common-lisp:null)
                         :accessor
                         %efs-file-system-configuration-file-system-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'efs-file-system-configuration
                    'make-efs-file-system-configuration))
 (common-lisp:defun make-efs-file-system-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-system-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'efs-file-system-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          efs-file-system-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          efs-file-system-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-policy))
      (common-lisp:list
       (common-lisp:cons "fileSystemPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          efs-file-system-configuration))
   common-lisp:nil))
(common-lisp:deftype efs-file-system-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-criteria-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-filter-criteria-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass finding common-lisp:nil
                       ((sources :initarg :|sources| :type
                         (common-lisp:or finding-source-list common-lisp:null)
                         :accessor %finding-sources :initform common-lisp:nil)
                        (error :initarg :|error| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %finding-error :initform common-lisp:nil)
                        (resource-owner-account :initarg
                         :|resourceOwnerAccount| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %finding-resource-owner-account :initform
                         (common-lisp:error
                          ":resourceowneraccount is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or finding-status common-lisp:null)
                         :accessor %finding-status :initform
                         (common-lisp:error ":status is required"))
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %finding-updated-at :initform
                         (common-lisp:error ":updatedat is required"))
                        (analyzed-at :initarg :|analyzedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %finding-analyzed-at :initform
                         (common-lisp:error ":analyzedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %finding-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (condition :initarg :|condition| :type
                         (common-lisp:or condition-key-map common-lisp:null)
                         :accessor %finding-condition :initform
                         (common-lisp:error ":condition is required"))
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %finding-resource-type :initform
                         (common-lisp:error ":resourcetype is required"))
                        (is-public :initarg :|isPublic| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %finding-is-public :initform common-lisp:nil)
                        (resource :initarg :|resource| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %finding-resource :initform common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or action-list common-lisp:null)
                         :accessor %finding-action :initform common-lisp:nil)
                        (principal :initarg :|principal| :type
                         (common-lisp:or principal-map common-lisp:null)
                         :accessor %finding-principal :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         %finding-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'finding 'make-finding))
 (common-lisp:defun make-finding
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources error resource-owner-account
                     status updated-at analyzed-at created-at condition
                     resource-type is-public resource action principal id)
   (common-lisp:apply #'common-lisp:make-instance 'finding
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding))
   common-lisp:nil))
(common-lisp:deftype finding-change-type () 'common-lisp:string)
(common-lisp:deftype finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-id-list ()
   '(trivial-types:proper-list finding-id))
 (common-lisp:defun |make-finding-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass finding-source common-lisp:nil
                       ((detail :initarg :|detail| :type
                         (common-lisp:or finding-source-detail
                                         common-lisp:null)
                         :accessor %finding-source-detail :initform
                         common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or finding-source-type common-lisp:null)
                         :accessor %finding-source-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'finding-source 'make-finding-source))
 (common-lisp:defun make-finding-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detail type)
   (common-lisp:apply #'common-lisp:make-instance 'finding-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass finding-source-detail common-lisp:nil
                       ((access-point-account :initarg :|accessPointAccount|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %finding-source-detail-access-point-account
                         :initform common-lisp:nil)
                        (access-point-arn :initarg :|accessPointArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %finding-source-detail-access-point-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'finding-source-detail 'make-finding-source-detail))
 (common-lisp:defun make-finding-source-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-point-account access-point-arn)
   (common-lisp:apply #'common-lisp:make-instance 'finding-source-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-source-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-source-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "accessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-point-account))
      (common-lisp:list
       (common-lisp:cons "accessPointAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-source-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype finding-source-list ()
   '(trivial-types:proper-list finding-source))
 (common-lisp:defun |make-finding-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype finding-source-type () 'common-lisp:string)
(common-lisp:deftype finding-status () 'common-lisp:string)
(common-lisp:deftype finding-status-update () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass finding-summary common-lisp:nil
                       ((sources :initarg :|sources| :type
                         (common-lisp:or finding-source-list common-lisp:null)
                         :accessor %finding-summary-sources :initform
                         common-lisp:nil)
                        (error :initarg :|error| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %finding-summary-error :initform common-lisp:nil)
                        (resource-owner-account :initarg
                         :|resourceOwnerAccount| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %finding-summary-resource-owner-account :initform
                         (common-lisp:error
                          ":resourceowneraccount is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or finding-status common-lisp:null)
                         :accessor %finding-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %finding-summary-updated-at :initform
                         (common-lisp:error ":updatedat is required"))
                        (analyzed-at :initarg :|analyzedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %finding-summary-analyzed-at :initform
                         (common-lisp:error ":analyzedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %finding-summary-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (condition :initarg :|condition| :type
                         (common-lisp:or condition-key-map common-lisp:null)
                         :accessor %finding-summary-condition :initform
                         (common-lisp:error ":condition is required"))
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %finding-summary-resource-type :initform
                         (common-lisp:error ":resourcetype is required"))
                        (is-public :initarg :|isPublic| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %finding-summary-is-public :initform common-lisp:nil)
                        (resource :initarg :|resource| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %finding-summary-resource :initform common-lisp:nil)
                        (action :initarg :|action| :type
                         (common-lisp:or action-list common-lisp:null)
                         :accessor %finding-summary-action :initform
                         common-lisp:nil)
                        (principal :initarg :|principal| :type
                         (common-lisp:or principal-map common-lisp:null)
                         :accessor %finding-summary-principal :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         %finding-summary-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'finding-summary 'make-finding-summary))
 (common-lisp:defun make-finding-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources error resource-owner-account
                     status updated-at analyzed-at created-at condition
                     resource-type is-public resource action principal id)
   (common-lisp:apply #'common-lisp:make-instance 'finding-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype findings-list ()
   '(trivial-types:proper-list finding-summary))
 (common-lisp:defun |make-findings-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass generated-policy common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %generated-policy-policy :initform
                         (common-lisp:error ":policy is required"))))
 (common-lisp:export
  (common-lisp:list 'generated-policy 'make-generated-policy))
 (common-lisp:defun make-generated-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance 'generated-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generated-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generated-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generated-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype generated-policy-list ()
   '(trivial-types:proper-list generated-policy))
 (common-lisp:defun |make-generated-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generated-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass generated-policy-properties common-lisp:nil
                       ((cloud-trail-properties :initarg
                         :|cloudTrailProperties| :type
                         (common-lisp:or cloud-trail-properties
                                         common-lisp:null)
                         :accessor
                         %generated-policy-properties-cloud-trail-properties
                         :initform common-lisp:nil)
                        (principal-arn :initarg :|principalArn| :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor %generated-policy-properties-principal-arn
                         :initform
                         (common-lisp:error ":principalarn is required"))
                        (is-complete :initarg :|isComplete| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %generated-policy-properties-is-complete :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'generated-policy-properties
                    'make-generated-policy-properties))
 (common-lisp:defun make-generated-policy-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-trail-properties principal-arn
                     is-complete)
   (common-lisp:apply #'common-lisp:make-instance 'generated-policy-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-complete))
      (common-lisp:list
       (common-lisp:cons "isComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-trail-properties))
      (common-lisp:list
       (common-lisp:cons "cloudTrailProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generated-policy-result common-lisp:nil
                       ((generated-policies :initarg :|generatedPolicies| :type
                         (common-lisp:or generated-policy-list
                                         common-lisp:null)
                         :accessor %generated-policy-result-generated-policies
                         :initform common-lisp:nil)
                        (properties :initarg :|properties| :type
                         (common-lisp:or generated-policy-properties
                                         common-lisp:null)
                         :accessor %generated-policy-result-properties
                         :initform
                         (common-lisp:error ":properties is required"))))
 (common-lisp:export
  (common-lisp:list 'generated-policy-result 'make-generated-policy-result))
 (common-lisp:defun make-generated-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key generated-policies properties)
   (common-lisp:apply #'common-lisp:make-instance 'generated-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-policies))
      (common-lisp:list
       (common-lisp:cons "generatedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-preview-request common-lisp:nil
                       ((analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %get-access-preview-request-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))
                        (access-preview-id :initarg :|accessPreviewId| :type
                         (common-lisp:or access-preview-id common-lisp:null)
                         :accessor
                         %get-access-preview-request-access-preview-id
                         :initform
                         (common-lisp:error ":accesspreviewid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-preview-request
                    'make-get-access-preview-request))
 (common-lisp:defun make-get-access-preview-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analyzer-arn access-preview-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-access-preview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-preview-response common-lisp:nil
                       ((access-preview :initarg :|accessPreview| :type
                         (common-lisp:or access-preview common-lisp:null)
                         :accessor %get-access-preview-response-access-preview
                         :initform
                         (common-lisp:error ":accesspreview is required"))))
 (common-lisp:export
  (common-lisp:list 'get-access-preview-response
                    'make-get-access-preview-response))
 (common-lisp:defun make-get-access-preview-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-preview)
   (common-lisp:apply #'common-lisp:make-instance 'get-access-preview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-preview))
      (common-lisp:list
       (common-lisp:cons "accessPreview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-analyzed-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %get-analyzed-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %get-analyzed-resource-request-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-analyzed-resource-request
                    'make-get-analyzed-resource-request))
 (common-lisp:defun make-get-analyzed-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn analyzer-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-analyzed-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-analyzed-resource-response common-lisp:nil
                       ((resource :initarg :|resource| :type
                         (common-lisp:or analyzed-resource common-lisp:null)
                         :accessor %get-analyzed-resource-response-resource
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-analyzed-resource-response
                    'make-get-analyzed-resource-response))
 (common-lisp:defun make-get-analyzed-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-analyzed-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-analyzer-request common-lisp:nil
                       ((analyzer-name :initarg :|analyzerName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %get-analyzer-request-analyzer-name :initform
                         (common-lisp:error ":analyzername is required"))))
 (common-lisp:export
  (common-lisp:list 'get-analyzer-request 'make-get-analyzer-request))
 (common-lisp:defun make-get-analyzer-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analyzer-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-analyzer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-analyzer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-analyzer-response common-lisp:nil
                       ((analyzer :initarg :|analyzer| :type
                         (common-lisp:or analyzer-summary common-lisp:null)
                         :accessor %get-analyzer-response-analyzer :initform
                         (common-lisp:error ":analyzer is required"))))
 (common-lisp:export
  (common-lisp:list 'get-analyzer-response 'make-get-analyzer-response))
 (common-lisp:defun make-get-analyzer-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key analyzer)
   (common-lisp:apply #'common-lisp:make-instance 'get-analyzer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer))
      (common-lisp:list
       (common-lisp:cons "analyzer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-archive-rule-request common-lisp:nil
                       ((rule-name :initarg :|ruleName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %get-archive-rule-request-rule-name :initform
                         (common-lisp:error ":rulename is required"))
                        (analyzer-name :initarg :|analyzerName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %get-archive-rule-request-analyzer-name :initform
                         (common-lisp:error ":analyzername is required"))))
 (common-lisp:export
  (common-lisp:list 'get-archive-rule-request 'make-get-archive-rule-request))
 (common-lisp:defun make-get-archive-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rule-name analyzer-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-archive-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-archive-rule-response common-lisp:nil
                       ((archive-rule :initarg :|archiveRule| :type
                         (common-lisp:or archive-rule-summary common-lisp:null)
                         :accessor %get-archive-rule-response-archive-rule
                         :initform
                         (common-lisp:error ":archiverule is required"))))
 (common-lisp:export
  (common-lisp:list 'get-archive-rule-response
                    'make-get-archive-rule-response))
 (common-lisp:defun make-get-archive-rule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key archive-rule)
   (common-lisp:apply #'common-lisp:make-instance 'get-archive-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rule))
      (common-lisp:list
       (common-lisp:cons "archiveRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-finding-request common-lisp:nil
                       ((id :initarg :|id| :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         %get-finding-request-id :initform
                         (common-lisp:error ":id is required"))
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %get-finding-request-analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-finding-request 'make-get-finding-request))
 (common-lisp:defun make-get-finding-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id analyzer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-finding-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-finding-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-finding-response common-lisp:nil
                       ((finding :initarg :|finding| :type
                         (common-lisp:or finding common-lisp:null) :accessor
                         %get-finding-response-finding :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-finding-response 'make-get-finding-response))
 (common-lisp:defun make-get-finding-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key finding)
   (common-lisp:apply #'common-lisp:make-instance 'get-finding-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-finding-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-finding-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding))
      (common-lisp:list
       (common-lisp:cons "finding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-finding-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-generated-policy-request common-lisp:nil
                       ((include-service-level-template :initarg
                         :|includeServiceLevelTemplate| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-generated-policy-request-include-service-level-template
                         :initform common-lisp:nil)
                        (include-resource-placeholders :initarg
                         :|includeResourcePlaceholders| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-generated-policy-request-include-resource-placeholders
                         :initform common-lisp:nil)
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %get-generated-policy-request-job-id :initform
                         (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'get-generated-policy-request
                    'make-get-generated-policy-request))
 (common-lisp:defun make-get-generated-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-service-level-template
                     include-resource-placeholders job-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-generated-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-generated-policy-response common-lisp:nil
                       ((generated-policy-result :initarg
                         :|generatedPolicyResult| :type
                         (common-lisp:or generated-policy-result
                                         common-lisp:null)
                         :accessor
                         %get-generated-policy-response-generated-policy-result
                         :initform
                         (common-lisp:error
                          ":generatedpolicyresult is required"))
                        (job-details :initarg :|jobDetails| :type
                         (common-lisp:or job-details common-lisp:null)
                         :accessor %get-generated-policy-response-job-details
                         :initform
                         (common-lisp:error ":jobdetails is required"))))
 (common-lisp:export
  (common-lisp:list 'get-generated-policy-response
                    'make-get-generated-policy-response))
 (common-lisp:defun make-get-generated-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key generated-policy-result job-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-generated-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-policy-result))
      (common-lisp:list
       (common-lisp:cons "generatedPolicyResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-response))
   common-lisp:nil))
(common-lisp:deftype grantee-principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass iam-role-configuration common-lisp:nil
                       ((trust-policy :initarg :|trustPolicy| :type
                         (common-lisp:or iam-trust-policy common-lisp:null)
                         :accessor %iam-role-configuration-trust-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'iam-role-configuration 'make-iam-role-configuration))
 (common-lisp:defun make-iam-role-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key trust-policy)
   (common-lisp:apply #'common-lisp:make-instance 'iam-role-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iam-role-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iam-role-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-policy))
      (common-lisp:list
       (common-lisp:cons "trustPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iam-role-configuration))
   common-lisp:nil))
(common-lisp:deftype iam-trust-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass inline-archive-rule common-lisp:nil
                       ((filter :initarg :|filter| :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor %inline-archive-rule-filter :initform
                         (common-lisp:error ":filter is required"))
                        (rule-name :initarg :|ruleName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %inline-archive-rule-rule-name :initform
                         (common-lisp:error ":rulename is required"))))
 (common-lisp:export
  (common-lisp:list 'inline-archive-rule 'make-inline-archive-rule))
 (common-lisp:defun make-inline-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter rule-name)
   (common-lisp:apply #'common-lisp:make-instance 'inline-archive-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inline-archive-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inline-archive-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inline-archive-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inline-archive-rules-list ()
   '(trivial-types:proper-list inline-archive-rule))
 (common-lisp:defun |make-inline-archive-rules-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inline-archive-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (accessanalyzer-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass internet-configuration common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'internet-configuration 'make-internet-configuration))
 (common-lisp:defun make-internet-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'internet-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internet-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internet-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internet-configuration))
   common-lisp:nil))
(common-lisp:deftype issue-code () 'common-lisp:string)
(common-lisp:deftype issuing-account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-details common-lisp:nil
                       ((job-error :initarg :|jobError| :type
                         (common-lisp:or job-error common-lisp:null) :accessor
                         %job-details-job-error :initform common-lisp:nil)
                        (completed-on :initarg :|completedOn| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %job-details-completed-on :initform common-lisp:nil)
                        (started-on :initarg :|startedOn| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %job-details-started-on :initform
                         (common-lisp:error ":startedon is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %job-details-status :initform
                         (common-lisp:error ":status is required"))
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %job-details-job-id :initform
                         (common-lisp:error ":jobid is required"))))
 (common-lisp:export (common-lisp:list 'job-details 'make-job-details))
 (common-lisp:defun make-job-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-error completed-on started-on status
                     job-id)
   (common-lisp:apply #'common-lisp:make-instance 'job-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "startedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "completedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-error))
      (common-lisp:list
       (common-lisp:cons "jobError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-error common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %job-error-message :initform
                         (common-lisp:error ":message is required"))
                        (code :initarg :|code| :type
                         (common-lisp:or job-error-code common-lisp:null)
                         :accessor %job-error-code :initform
                         (common-lisp:error ":code is required"))))
 (common-lisp:export (common-lisp:list 'job-error 'make-job-error))
 (common-lisp:defun make-job-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code)
   (common-lisp:apply #'common-lisp:make-instance 'job-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-error))
   common-lisp:nil))
(common-lisp:deftype job-error-code () 'common-lisp:string)
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype kms-constraints-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kms-constraints-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-kms-constraints-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype kms-constraints-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kms-grant-configuration common-lisp:nil
                       ((issuing-account :initarg :|issuingAccount| :type
                         (common-lisp:or issuing-account common-lisp:null)
                         :accessor %kms-grant-configuration-issuing-account
                         :initform
                         (common-lisp:error ":issuingaccount is required"))
                        (constraints :initarg :|constraints| :type
                         (common-lisp:or kms-grant-constraints
                                         common-lisp:null)
                         :accessor %kms-grant-configuration-constraints
                         :initform common-lisp:nil)
                        (retiring-principal :initarg :|retiringPrincipal| :type
                         (common-lisp:or retiring-principal common-lisp:null)
                         :accessor %kms-grant-configuration-retiring-principal
                         :initform common-lisp:nil)
                        (grantee-principal :initarg :|granteePrincipal| :type
                         (common-lisp:or grantee-principal common-lisp:null)
                         :accessor %kms-grant-configuration-grantee-principal
                         :initform
                         (common-lisp:error ":granteeprincipal is required"))
                        (operations :initarg :|operations| :type
                         (common-lisp:or kms-grant-operations-list
                                         common-lisp:null)
                         :accessor %kms-grant-configuration-operations
                         :initform
                         (common-lisp:error ":operations is required"))))
 (common-lisp:export
  (common-lisp:list 'kms-grant-configuration 'make-kms-grant-configuration))
 (common-lisp:defun make-kms-grant-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key issuing-account constraints
                     retiring-principal grantee-principal operations)
   (common-lisp:apply #'common-lisp:make-instance 'kms-grant-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-principal))
      (common-lisp:list
       (common-lisp:cons "granteePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retiring-principal))
      (common-lisp:list
       (common-lisp:cons "retiringPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuing-account))
      (common-lisp:list
       (common-lisp:cons "issuingAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kms-grant-configurations-list ()
   '(trivial-types:proper-list kms-grant-configuration))
 (common-lisp:defun |make-kms-grant-configurations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kms-grant-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kms-grant-constraints common-lisp:nil
                       ((encryption-context-subset :initarg
                         :|encryptionContextSubset| :type
                         (common-lisp:or kms-constraints-map common-lisp:null)
                         :accessor
                         %kms-grant-constraints-encryption-context-subset
                         :initform common-lisp:nil)
                        (encryption-context-equals :initarg
                         :|encryptionContextEquals| :type
                         (common-lisp:or kms-constraints-map common-lisp:null)
                         :accessor
                         %kms-grant-constraints-encryption-context-equals
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kms-grant-constraints 'make-kms-grant-constraints))
 (common-lisp:defun make-kms-grant-constraints
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-context-subset
                     encryption-context-equals)
   (common-lisp:apply #'common-lisp:make-instance 'kms-grant-constraints
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-context-equals))
      (common-lisp:list
       (common-lisp:cons "encryptionContextEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-context-subset))
      (common-lisp:list
       (common-lisp:cons "encryptionContextSubset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-constraints))
   common-lisp:nil))
(common-lisp:deftype kms-grant-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kms-grant-operations-list ()
   '(trivial-types:proper-list kms-grant-operation))
 (common-lisp:defun |make-kms-grant-operations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kms-grant-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kms-key-configuration common-lisp:nil
                       ((grants :initarg :|grants| :type
                         (common-lisp:or kms-grant-configurations-list
                                         common-lisp:null)
                         :accessor %kms-key-configuration-grants :initform
                         common-lisp:nil)
                        (key-policies :initarg :|keyPolicies| :type
                         (common-lisp:or kms-key-policies-map common-lisp:null)
                         :accessor %kms-key-configuration-key-policies
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kms-key-configuration 'make-kms-key-configuration))
 (common-lisp:defun make-kms-key-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grants key-policies)
   (common-lisp:apply #'common-lisp:make-instance 'kms-key-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kms-key-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kms-key-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-policies))
      (common-lisp:list
       (common-lisp:cons "keyPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kms-key-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kms-key-policies-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-kms-key-policies-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype kms-key-policy () 'common-lisp:string)
(common-lisp:deftype learn-more-link () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-access-preview-findings-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-access-preview-findings-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-access-preview-findings-request-next-token
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor %list-access-preview-findings-request-filter
                         :initform common-lisp:nil)
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         %list-access-preview-findings-request-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))
                        (access-preview-id :initarg :|accessPreviewId| :type
                         (common-lisp:or access-preview-id common-lisp:null)
                         :accessor
                         %list-access-preview-findings-request-access-preview-id
                         :initform
                         (common-lisp:error ":accesspreviewid is required"))))
 (common-lisp:export
  (common-lisp:list 'list-access-preview-findings-request
                    'make-list-access-preview-findings-request))
 (common-lisp:defun make-list-access-preview-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter
                     analyzer-arn access-preview-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-preview-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-preview-findings-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-access-preview-findings-response-next-token
                         :initform common-lisp:nil)
                        (findings :initarg :|findings| :type
                         (common-lisp:or access-preview-findings-list
                                         common-lisp:null)
                         :accessor
                         %list-access-preview-findings-response-findings
                         :initform
                         (common-lisp:error ":findings is required"))))
 (common-lisp:export
  (common-lisp:list 'list-access-preview-findings-response
                    'make-list-access-preview-findings-response))
 (common-lisp:defun make-list-access-preview-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token findings)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-preview-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-previews-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-access-previews-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-access-previews-request-next-token :initform
                         common-lisp:nil)
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %list-access-previews-request-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-access-previews-request
                    'make-list-access-previews-request))
 (common-lisp:defun make-list-access-previews-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token analyzer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-previews-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-previews-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-access-previews-response-next-token :initform
                         common-lisp:nil)
                        (access-previews :initarg :|accessPreviews| :type
                         (common-lisp:or access-previews-list common-lisp:null)
                         :accessor
                         %list-access-previews-response-access-previews
                         :initform
                         (common-lisp:error ":accesspreviews is required"))))
 (common-lisp:export
  (common-lisp:list 'list-access-previews-response
                    'make-list-access-previews-response))
 (common-lisp:defun make-list-access-previews-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token access-previews)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-previews-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-previews))
      (common-lisp:list
       (common-lisp:cons "accessPreviews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analyzed-resources-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-analyzed-resources-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-analyzed-resources-request-next-token :initform
                         common-lisp:nil)
                        (resource-type :initarg :|resourceType| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %list-analyzed-resources-request-resource-type
                         :initform common-lisp:nil)
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         %list-analyzed-resources-request-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-analyzed-resources-request
                    'make-list-analyzed-resources-request))
 (common-lisp:defun make-list-analyzed-resources-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token resource-type
                     analyzer-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-analyzed-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analyzed-resources-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-analyzed-resources-response-next-token :initform
                         common-lisp:nil)
                        (analyzed-resources :initarg :|analyzedResources| :type
                         (common-lisp:or analyzed-resources-list
                                         common-lisp:null)
                         :accessor
                         %list-analyzed-resources-response-analyzed-resources
                         :initform
                         (common-lisp:error
                          ":analyzedresources is required"))))
 (common-lisp:export
  (common-lisp:list 'list-analyzed-resources-response
                    'make-list-analyzed-resources-response))
 (common-lisp:defun make-list-analyzed-resources-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token analyzed-resources)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-analyzed-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-resources))
      (common-lisp:list
       (common-lisp:cons "analyzedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analyzers-request common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %list-analyzers-request-type :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-analyzers-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-analyzers-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-analyzers-request 'make-list-analyzers-request))
 (common-lisp:defun make-list-analyzers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-analyzers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analyzers-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-analyzers-response-next-token :initform
                         common-lisp:nil)
                        (analyzers :initarg :|analyzers| :type
                         (common-lisp:or analyzers-list common-lisp:null)
                         :accessor %list-analyzers-response-analyzers :initform
                         (common-lisp:error ":analyzers is required"))))
 (common-lisp:export
  (common-lisp:list 'list-analyzers-response 'make-list-analyzers-response))
 (common-lisp:defun make-list-analyzers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token analyzers)
   (common-lisp:apply #'common-lisp:make-instance 'list-analyzers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzers))
      (common-lisp:list
       (common-lisp:cons "analyzers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-archive-rules-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-archive-rules-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-archive-rules-request-next-token :initform
                         common-lisp:nil)
                        (analyzer-name :initarg :|analyzerName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %list-archive-rules-request-analyzer-name :initform
                         (common-lisp:error ":analyzername is required"))))
 (common-lisp:export
  (common-lisp:list 'list-archive-rules-request
                    'make-list-archive-rules-request))
 (common-lisp:defun make-list-archive-rules-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token analyzer-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-archive-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-archive-rules-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-archive-rules-response-next-token :initform
                         common-lisp:nil)
                        (archive-rules :initarg :|archiveRules| :type
                         (common-lisp:or archive-rules-list common-lisp:null)
                         :accessor %list-archive-rules-response-archive-rules
                         :initform
                         (common-lisp:error ":archiverules is required"))))
 (common-lisp:export
  (common-lisp:list 'list-archive-rules-response
                    'make-list-archive-rules-response))
 (common-lisp:defun make-list-archive-rules-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token archive-rules)
   (common-lisp:apply #'common-lisp:make-instance 'list-archive-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rules))
      (common-lisp:list
       (common-lisp:cons "archiveRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-findings-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-findings-request-next-token :initform
                         common-lisp:nil)
                        (sort :initarg :|sort| :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor %list-findings-request-sort :initform
                         common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor %list-findings-request-filter :initform
                         common-lisp:nil)
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %list-findings-request-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-findings-request 'make-list-findings-request))
 (common-lisp:defun make-list-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token sort filter
                     analyzer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-findings-response-next-token :initform
                         common-lisp:nil)
                        (findings :initarg :|findings| :type
                         (common-lisp:or findings-list common-lisp:null)
                         :accessor %list-findings-response-findings :initform
                         (common-lisp:error ":findings is required"))))
 (common-lisp:export
  (common-lisp:list 'list-findings-response 'make-list-findings-response))
 (common-lisp:defun make-list-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token findings)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policy-generations-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-policy-generations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-policy-generations-request-max-results-integer
                          common-lisp:null)
                         :accessor %list-policy-generations-request-max-results
                         :initform common-lisp:nil)
                        (principal-arn :initarg :|principalArn| :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor
                         %list-policy-generations-request-principal-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-policy-generations-request
                    'make-list-policy-generations-request))
 (common-lisp:defun make-list-policy-generations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results principal-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policy-generations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-request))
   common-lisp:nil))
(common-lisp:deftype list-policy-generations-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-policy-generations-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %list-policy-generations-response-next-token :initform
                         common-lisp:nil)
                        (policy-generations :initarg :|policyGenerations| :type
                         (common-lisp:or policy-generation-list
                                         common-lisp:null)
                         :accessor
                         %list-policy-generations-response-policy-generations
                         :initform
                         (common-lisp:error
                          ":policygenerations is required"))))
 (common-lisp:export
  (common-lisp:list 'list-policy-generations-response
                    'make-list-policy-generations-response))
 (common-lisp:defun make-list-policy-generations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token policy-generations)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policy-generations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-generations))
      (common-lisp:list
       (common-lisp:cons "policyGenerations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype locale () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass location common-lisp:nil
                       ((span :initarg :|span| :type
                         (common-lisp:or span common-lisp:null) :accessor
                         %location-span :initform
                         (common-lisp:error ":span is required"))
                        (path :initarg :|path| :type
                         (common-lisp:or path-element-list common-lisp:null)
                         :accessor %location-path :initform
                         (common-lisp:error ":path is required"))))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defun make-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key span path)
   (common-lisp:apply #'common-lisp:make-instance 'location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'span))
      (common-lisp:list
       (common-lisp:cons "span"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype location-list () '(trivial-types:proper-list location))
 (common-lisp:defun |make-location-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-origin-configuration common-lisp:nil
                       ((internet-configuration :initarg
                         :|internetConfiguration| :type
                         (common-lisp:or internet-configuration
                                         common-lisp:null)
                         :accessor
                         %network-origin-configuration-internet-configuration
                         :initform common-lisp:nil)
                        (vpc-configuration :initarg :|vpcConfiguration| :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         %network-origin-configuration-vpc-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-origin-configuration
                    'make-network-origin-configuration))
 (common-lisp:defun make-network-origin-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key internet-configuration vpc-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'network-origin-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-origin-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-origin-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internet-configuration))
      (common-lisp:list
       (common-lisp:cons "internetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-origin-configuration))
   common-lisp:nil))
(common-lisp:deftype order-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass path-element common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %path-element-value :initform common-lisp:nil)
                        (substring :initarg :|substring| :type
                         (common-lisp:or substring common-lisp:null) :accessor
                         %path-element-substring :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %path-element-key :initform common-lisp:nil)
                        (index :initarg :|index| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %path-element-index :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'path-element 'make-path-element))
 (common-lisp:defun make-path-element
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value substring key index)
   (common-lisp:apply #'common-lisp:make-instance 'path-element
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input path-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input path-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substring))
      (common-lisp:list
       (common-lisp:cons "substring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input path-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype path-element-list ()
   '(trivial-types:proper-list path-element))
 (common-lisp:defun |make-path-element-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-generation common-lisp:nil
                       ((completed-on :initarg :|completedOn| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %policy-generation-completed-on :initform
                         common-lisp:nil)
                        (started-on :initarg :|startedOn| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %policy-generation-started-on :initform
                         (common-lisp:error ":startedon is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %policy-generation-status :initform
                         (common-lisp:error ":status is required"))
                        (principal-arn :initarg :|principalArn| :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor %policy-generation-principal-arn :initform
                         (common-lisp:error ":principalarn is required"))
                        (job-id :initarg :|jobId| :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %policy-generation-job-id :initform
                         (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'policy-generation 'make-policy-generation))
 (common-lisp:defun make-policy-generation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key completed-on started-on status
                     principal-arn job-id)
   (common-lisp:apply #'common-lisp:make-instance 'policy-generation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-generation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-generation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "startedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "completedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-generation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy-generation-details common-lisp:nil
                       ((principal-arn :initarg :|principalArn| :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor %policy-generation-details-principal-arn
                         :initform
                         (common-lisp:error ":principalarn is required"))))
 (common-lisp:export
  (common-lisp:list 'policy-generation-details
                    'make-policy-generation-details))
 (common-lisp:defun make-policy-generation-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal-arn)
   (common-lisp:apply #'common-lisp:make-instance 'policy-generation-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-generation-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-generation-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-generation-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-generation-list ()
   '(trivial-types:proper-list policy-generation))
 (common-lisp:defun |make-policy-generation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-generation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass position common-lisp:nil
                       ((offset :initarg :|offset| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %position-offset :initform
                         (common-lisp:error ":offset is required"))
                        (column :initarg :|column| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %position-column :initform
                         (common-lisp:error ":column is required"))
                        (line :initarg :|line| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %position-line :initform
                         (common-lisp:error ":line is required"))))
 (common-lisp:export (common-lisp:list 'position 'make-position))
 (common-lisp:defun make-position
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key offset column line)
   (common-lisp:apply #'common-lisp:make-instance 'position
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line))
      (common-lisp:list
       (common-lisp:cons "line"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input position))
   common-lisp:nil))
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principal-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-principal-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype rds-db-cluster-snapshot-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rds-db-cluster-snapshot-account-ids-list ()
   '(trivial-types:proper-list rds-db-cluster-snapshot-account-id))
 (common-lisp:defun |make-rds-db-cluster-snapshot-account-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rds-db-cluster-snapshot-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rds-db-cluster-snapshot-attribute-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rds-db-cluster-snapshot-attribute-value common-lisp:nil
                       ((account-ids :initarg :|accountIds| :type
                         (common-lisp:or
                          rds-db-cluster-snapshot-account-ids-list
                          common-lisp:null)
                         :accessor
                         %rds-db-cluster-snapshot-attribute-value-account-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rds-db-cluster-snapshot-attribute-value
                    'make-rds-db-cluster-snapshot-attribute-value))
 (common-lisp:defun make-rds-db-cluster-snapshot-attribute-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'rds-db-cluster-snapshot-attribute-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rds-db-cluster-snapshot-attributes-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-rds-db-cluster-snapshot-attributes-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass rds-db-cluster-snapshot-configuration common-lisp:nil
                       ((kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or rds-db-cluster-snapshot-kms-key-id
                                         common-lisp:null)
                         :accessor
                         %rds-db-cluster-snapshot-configuration-kms-key-id
                         :initform common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or rds-db-cluster-snapshot-attributes-map
                                         common-lisp:null)
                         :accessor
                         %rds-db-cluster-snapshot-configuration-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rds-db-cluster-snapshot-configuration
                    'make-rds-db-cluster-snapshot-configuration))
 (common-lisp:defun make-rds-db-cluster-snapshot-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'rds-db-cluster-snapshot-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-configuration))
   common-lisp:nil))
(common-lisp:deftype rds-db-cluster-snapshot-kms-key-id () 'common-lisp:string)
(common-lisp:deftype rds-db-snapshot-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rds-db-snapshot-account-ids-list ()
   '(trivial-types:proper-list rds-db-snapshot-account-id))
 (common-lisp:defun |make-rds-db-snapshot-account-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rds-db-snapshot-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rds-db-snapshot-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rds-db-snapshot-attribute-value common-lisp:nil
                       ((account-ids :initarg :|accountIds| :type
                         (common-lisp:or rds-db-snapshot-account-ids-list
                                         common-lisp:null)
                         :accessor %rds-db-snapshot-attribute-value-account-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rds-db-snapshot-attribute-value
                    'make-rds-db-snapshot-attribute-value))
 (common-lisp:defun make-rds-db-snapshot-attribute-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'rds-db-snapshot-attribute-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rds-db-snapshot-attributes-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-rds-db-snapshot-attributes-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass rds-db-snapshot-configuration common-lisp:nil
                       ((kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or rds-db-snapshot-kms-key-id
                                         common-lisp:null)
                         :accessor %rds-db-snapshot-configuration-kms-key-id
                         :initform common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or rds-db-snapshot-attributes-map
                                         common-lisp:null)
                         :accessor %rds-db-snapshot-configuration-attributes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rds-db-snapshot-configuration
                    'make-rds-db-snapshot-configuration))
 (common-lisp:defun make-rds-db-snapshot-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id attributes)
   (common-lisp:apply #'common-lisp:make-instance
                      'rds-db-snapshot-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-configuration))
   common-lisp:nil))
(common-lisp:deftype rds-db-snapshot-kms-key-id () 'common-lisp:string)
(common-lisp:deftype reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (accessanalyzer-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retiring-principal () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3access-point-configuration common-lisp:nil
                       ((network-origin :initarg :|networkOrigin| :type
                         (common-lisp:or network-origin-configuration
                                         common-lisp:null)
                         :accessor %s3access-point-configuration-network-origin
                         :initform common-lisp:nil)
                        (public-access-block :initarg :|publicAccessBlock|
                         :type
                         (common-lisp:or s3public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %s3access-point-configuration-public-access-block
                         :initform common-lisp:nil)
                        (access-point-policy :initarg :|accessPointPolicy|
                         :type
                         (common-lisp:or access-point-policy common-lisp:null)
                         :accessor
                         %s3access-point-configuration-access-point-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3access-point-configuration
                    'make-s3access-point-configuration))
 (common-lisp:defun make-s3access-point-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-origin public-access-block
                     access-point-policy)
   (common-lisp:apply #'common-lisp:make-instance 's3access-point-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3access-point-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3access-point-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-policy))
      (common-lisp:list
       (common-lisp:cons "accessPointPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-block))
      (common-lisp:list
       (common-lisp:cons "publicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-origin))
      (common-lisp:list
       (common-lisp:cons "networkOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3access-point-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3access-point-configurations-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-s3access-point-configurations-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass s3bucket-acl-grant-configuration common-lisp:nil
                       ((grantee :initarg :|grantee| :type
                         (common-lisp:or acl-grantee common-lisp:null)
                         :accessor %s3bucket-acl-grant-configuration-grantee
                         :initform (common-lisp:error ":grantee is required"))
                        (permission :initarg :|permission| :type
                         (common-lisp:or acl-permission common-lisp:null)
                         :accessor %s3bucket-acl-grant-configuration-permission
                         :initform
                         (common-lisp:error ":permission is required"))))
 (common-lisp:export
  (common-lisp:list 's3bucket-acl-grant-configuration
                    'make-s3bucket-acl-grant-configuration))
 (common-lisp:defun make-s3bucket-acl-grant-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grantee permission)
   (common-lisp:apply #'common-lisp:make-instance
                      's3bucket-acl-grant-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-acl-grant-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-acl-grant-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-acl-grant-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3bucket-acl-grant-configurations-list ()
   '(trivial-types:proper-list s3bucket-acl-grant-configuration))
 (common-lisp:defun |make-s3bucket-acl-grant-configurations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            s3bucket-acl-grant-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3bucket-configuration common-lisp:nil
                       ((access-points :initarg :|accessPoints| :type
                         (common-lisp:or s3access-point-configurations-map
                                         common-lisp:null)
                         :accessor %s3bucket-configuration-access-points
                         :initform common-lisp:nil)
                        (bucket-public-access-block :initarg
                         :|bucketPublicAccessBlock| :type
                         (common-lisp:or s3public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         %s3bucket-configuration-bucket-public-access-block
                         :initform common-lisp:nil)
                        (bucket-acl-grants :initarg :|bucketAclGrants| :type
                         (common-lisp:or s3bucket-acl-grant-configurations-list
                                         common-lisp:null)
                         :accessor %s3bucket-configuration-bucket-acl-grants
                         :initform common-lisp:nil)
                        (bucket-policy :initarg :|bucketPolicy| :type
                         (common-lisp:or s3bucket-policy common-lisp:null)
                         :accessor %s3bucket-configuration-bucket-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3bucket-configuration 'make-s3bucket-configuration))
 (common-lisp:defun make-s3bucket-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-points bucket-public-access-block
                     bucket-acl-grants bucket-policy)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-policy))
      (common-lisp:list
       (common-lisp:cons "bucketPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-acl-grants))
      (common-lisp:list
       (common-lisp:cons "bucketAclGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-public-access-block))
      (common-lisp:list
       (common-lisp:cons "bucketPublicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-points))
      (common-lisp:list
       (common-lisp:cons "accessPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-configuration))
   common-lisp:nil))
(common-lisp:deftype s3bucket-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3public-access-block-configuration common-lisp:nil
                       ((restrict-public-buckets :initarg
                         :|restrictPublicBuckets| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %s3public-access-block-configuration-restrict-public-buckets
                         :initform
                         (common-lisp:error
                          ":restrictpublicbuckets is required"))
                        (ignore-public-acls :initarg :|ignorePublicAcls| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %s3public-access-block-configuration-ignore-public-acls
                         :initform
                         (common-lisp:error ":ignorepublicacls is required"))))
 (common-lisp:export
  (common-lisp:list 's3public-access-block-configuration
                    'make-s3public-access-block-configuration))
 (common-lisp:defun make-s3public-access-block-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restrict-public-buckets
                     ignore-public-acls)
   (common-lisp:apply #'common-lisp:make-instance
                      's3public-access-block-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3public-access-block-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3public-access-block-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "ignorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "restrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3public-access-block-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass secrets-manager-secret-configuration common-lisp:nil
                       ((secret-policy :initarg :|secretPolicy| :type
                         (common-lisp:or secrets-manager-secret-policy
                                         common-lisp:null)
                         :accessor
                         %secrets-manager-secret-configuration-secret-policy
                         :initform common-lisp:nil)
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or secrets-manager-secret-kms-id
                                         common-lisp:null)
                         :accessor
                         %secrets-manager-secret-configuration-kms-key-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'secrets-manager-secret-configuration
                    'make-secrets-manager-secret-configuration))
 (common-lisp:defun make-secrets-manager-secret-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secret-policy kms-key-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'secrets-manager-secret-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          secrets-manager-secret-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          secrets-manager-secret-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-policy))
      (common-lisp:list
       (common-lisp:cons "secretPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          secrets-manager-secret-configuration))
   common-lisp:nil))
(common-lisp:deftype secrets-manager-secret-kms-id () 'common-lisp:string)
(common-lisp:deftype secrets-manager-secret-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (accessanalyzer-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:deftype shared-via-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-shared-via-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sns-topic-configuration common-lisp:nil
                       ((topic-policy :initarg :|topicPolicy| :type
                         (common-lisp:or sns-topic-policy common-lisp:null)
                         :accessor %sns-topic-configuration-topic-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sns-topic-configuration 'make-sns-topic-configuration))
 (common-lisp:defun make-sns-topic-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-policy)
   (common-lisp:apply #'common-lisp:make-instance 'sns-topic-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-policy))
      (common-lisp:list
       (common-lisp:cons "topicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-configuration))
   common-lisp:nil))
(common-lisp:deftype sns-topic-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sort-criteria common-lisp:nil
                       ((order-by :initarg :|orderBy| :type
                         (common-lisp:or order-by common-lisp:null) :accessor
                         %sort-criteria-order-by :initform common-lisp:nil)
                        (attribute-name :initarg :|attributeName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %sort-criteria-attribute-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sort-criteria 'make-sort-criteria))
 (common-lisp:defun make-sort-criteria
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order-by attribute-name)
   (common-lisp:apply #'common-lisp:make-instance 'sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass span common-lisp:nil
                       ((end :initarg :|end| :type
                         (common-lisp:or position common-lisp:null) :accessor
                         %span-end :initform
                         (common-lisp:error ":end is required"))
                        (start :initarg :|start| :type
                         (common-lisp:or position common-lisp:null) :accessor
                         %span-start :initform
                         (common-lisp:error ":start is required"))))
 (common-lisp:export (common-lisp:list 'span 'make-span))
 (common-lisp:defun make-span
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end start)
   (common-lisp:apply #'common-lisp:make-instance 'span
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input span))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input span))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input span))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sqs-queue-configuration common-lisp:nil
                       ((queue-policy :initarg :|queuePolicy| :type
                         (common-lisp:or sqs-queue-policy common-lisp:null)
                         :accessor %sqs-queue-configuration-queue-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sqs-queue-configuration 'make-sqs-queue-configuration))
 (common-lisp:defun make-sqs-queue-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queue-policy)
   (common-lisp:apply #'common-lisp:make-instance 'sqs-queue-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-policy))
      (common-lisp:list
       (common-lisp:cons "queuePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-configuration))
   common-lisp:nil))
(common-lisp:deftype sqs-queue-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-policy-generation-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-policy-generation-request-client-token
                         :initform common-lisp:nil)
                        (cloud-trail-details :initarg :|cloudTrailDetails|
                         :type
                         (common-lisp:or cloud-trail-details common-lisp:null)
                         :accessor
                         %start-policy-generation-request-cloud-trail-details
                         :initform common-lisp:nil)
                        (policy-generation-details :initarg
                         :|policyGenerationDetails| :type
                         (common-lisp:or policy-generation-details
                                         common-lisp:null)
                         :accessor
                         %start-policy-generation-request-policy-generation-details
                         :initform
                         (common-lisp:error
                          ":policygenerationdetails is required"))))
 (common-lisp:export
  (common-lisp:list 'start-policy-generation-request
                    'make-start-policy-generation-request))
 (common-lisp:defun make-start-policy-generation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token cloud-trail-details
                     policy-generation-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-policy-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-generation-details))
      (common-lisp:list
       (common-lisp:cons "policyGenerationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail-details))
      (common-lisp:list
       (common-lisp:cons "cloudTrailDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-policy-generation-response common-lisp:nil
                       ((job-id :initarg :|jobId| :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         %start-policy-generation-response-job-id :initform
                         (common-lisp:error ":jobid is required"))))
 (common-lisp:export
  (common-lisp:list 'start-policy-generation-response
                    'make-start-policy-generation-response))
 (common-lisp:defun make-start-policy-generation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-policy-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-resource-scan-request common-lisp:nil
                       ((resource-owner-account :initarg
                         :|resourceOwnerAccount| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %start-resource-scan-request-resource-owner-account
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %start-resource-scan-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %start-resource-scan-request-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))))
 (common-lisp:export
  (common-lisp:list 'start-resource-scan-request
                    'make-start-resource-scan-request))
 (common-lisp:defun make-start-resource-scan-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-owner-account resource-arn
                     analyzer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-resource-scan-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-scan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-scan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-scan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass status-reason common-lisp:nil
                       ((code :initarg :|code| :type
                         (common-lisp:or reason-code common-lisp:null)
                         :accessor %status-reason-code :initform
                         (common-lisp:error ":code is required"))))
 (common-lisp:export (common-lisp:list 'status-reason 'make-status-reason))
 (common-lisp:defun make-status-reason
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code)
   (common-lisp:apply #'common-lisp:make-instance 'status-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status-reason))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass substring common-lisp:nil
                       ((length :initarg :|length| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %substring-length :initform
                         (common-lisp:error ":length is required"))
                        (start :initarg :|start| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %substring-start :initform
                         (common-lisp:error ":start is required"))))
 (common-lisp:export (common-lisp:list 'substring 'make-substring))
 (common-lisp:defun make-substring
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key length start)
   (common-lisp:apply #'common-lisp:make-instance 'substring
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input substring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input substring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input substring))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (accessanalyzer-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trail common-lisp:nil
                       ((all-regions :initarg :|allRegions| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %trail-all-regions :initform common-lisp:nil)
                        (regions :initarg :|regions| :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor %trail-regions :initform common-lisp:nil)
                        (cloud-trail-arn :initarg :|cloudTrailArn| :type
                         (common-lisp:or cloud-trail-arn common-lisp:null)
                         :accessor %trail-cloud-trail-arn :initform
                         (common-lisp:error ":cloudtrailarn is required"))))
 (common-lisp:export (common-lisp:list 'trail 'make-trail))
 (common-lisp:defun make-trail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key all-regions regions cloud-trail-arn)
   (common-lisp:apply #'common-lisp:make-instance 'trail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail-arn))
      (common-lisp:list
       (common-lisp:cons "cloudTrailArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-regions))
      (common-lisp:list
       (common-lisp:cons "allRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trail-list () '(trivial-types:proper-list trail))
 (common-lisp:defun |make-trail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trail-properties common-lisp:nil
                       ((all-regions :initarg :|allRegions| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %trail-properties-all-regions :initform
                         common-lisp:nil)
                        (regions :initarg :|regions| :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor %trail-properties-regions :initform
                         common-lisp:nil)
                        (cloud-trail-arn :initarg :|cloudTrailArn| :type
                         (common-lisp:or cloud-trail-arn common-lisp:null)
                         :accessor %trail-properties-cloud-trail-arn :initform
                         (common-lisp:error ":cloudtrailarn is required"))))
 (common-lisp:export
  (common-lisp:list 'trail-properties 'make-trail-properties))
 (common-lisp:defun make-trail-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key all-regions regions cloud-trail-arn)
   (common-lisp:apply #'common-lisp:make-instance 'trail-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trail-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trail-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail-arn))
      (common-lisp:list
       (common-lisp:cons "cloudTrailArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-regions))
      (common-lisp:list
       (common-lisp:cons "allRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trail-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trail-properties-list ()
   '(trivial-types:proper-list trail-properties))
 (common-lisp:defun |make-trail-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trail-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-archive-rule-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-archive-rule-request-client-token :initform
                         common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor %update-archive-rule-request-filter
                         :initform (common-lisp:error ":filter is required"))
                        (rule-name :initarg :|ruleName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-archive-rule-request-rule-name :initform
                         (common-lisp:error ":rulename is required"))
                        (analyzer-name :initarg :|analyzerName| :type
                         (common-lisp:or name common-lisp:null) :accessor
                         %update-archive-rule-request-analyzer-name :initform
                         (common-lisp:error ":analyzername is required"))))
 (common-lisp:export
  (common-lisp:list 'update-archive-rule-request
                    'make-update-archive-rule-request))
 (common-lisp:defun make-update-archive-rule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token filter rule-name
                     analyzer-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-archive-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-findings-request common-lisp:nil
                       ((client-token :initarg :|clientToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-findings-request-client-token :initform
                         common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %update-findings-request-resource-arn
                         :initform common-lisp:nil)
                        (ids :initarg :|ids| :type
                         (common-lisp:or finding-id-list common-lisp:null)
                         :accessor %update-findings-request-ids :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or finding-status-update
                                         common-lisp:null)
                         :accessor %update-findings-request-status :initform
                         (common-lisp:error ":status is required"))
                        (analyzer-arn :initarg :|analyzerArn| :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor %update-findings-request-analyzer-arn
                         :initform
                         (common-lisp:error ":analyzerarn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-findings-request 'make-update-findings-request))
 (common-lisp:defun make-update-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token resource-arn ids status
                     analyzer-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-policy-finding common-lisp:nil
                       ((locations :initarg :|locations| :type
                         (common-lisp:or location-list common-lisp:null)
                         :accessor %validate-policy-finding-locations :initform
                         (common-lisp:error ":locations is required"))
                        (learn-more-link :initarg :|learnMoreLink| :type
                         (common-lisp:or learn-more-link common-lisp:null)
                         :accessor %validate-policy-finding-learn-more-link
                         :initform
                         (common-lisp:error ":learnmorelink is required"))
                        (issue-code :initarg :|issueCode| :type
                         (common-lisp:or issue-code common-lisp:null) :accessor
                         %validate-policy-finding-issue-code :initform
                         (common-lisp:error ":issuecode is required"))
                        (finding-type :initarg :|findingType| :type
                         (common-lisp:or validate-policy-finding-type
                                         common-lisp:null)
                         :accessor %validate-policy-finding-finding-type
                         :initform
                         (common-lisp:error ":findingtype is required"))
                        (finding-details :initarg :|findingDetails| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validate-policy-finding-finding-details :initform
                         (common-lisp:error ":findingdetails is required"))))
 (common-lisp:export
  (common-lisp:list 'validate-policy-finding 'make-validate-policy-finding))
 (common-lisp:defun make-validate-policy-finding
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locations learn-more-link issue-code
                     finding-type finding-details)
   (common-lisp:apply #'common-lisp:make-instance 'validate-policy-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-details))
      (common-lisp:list
       (common-lisp:cons "findingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-type))
      (common-lisp:list
       (common-lisp:cons "findingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-code))
      (common-lisp:list
       (common-lisp:cons "issueCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'learn-more-link))
      (common-lisp:list
       (common-lisp:cons "learnMoreLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locations))
      (common-lisp:list
       (common-lisp:cons "locations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validate-policy-finding-list ()
   '(trivial-types:proper-list validate-policy-finding))
 (common-lisp:defun |make-validate-policy-finding-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validate-policy-finding))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validate-policy-finding-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validate-policy-request common-lisp:nil
                       ((validate-policy-resource-type :initarg
                         :|validatePolicyResourceType| :type
                         (common-lisp:or validate-policy-resource-type
                                         common-lisp:null)
                         :accessor
                         %validate-policy-request-validate-policy-resource-type
                         :initform common-lisp:nil)
                        (policy-type :initarg :|policyType| :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor %validate-policy-request-policy-type
                         :initform
                         (common-lisp:error ":policytype is required"))
                        (policy-document :initarg :|policyDocument| :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor %validate-policy-request-policy-document
                         :initform
                         (common-lisp:error ":policydocument is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %validate-policy-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %validate-policy-request-max-results :initform
                         common-lisp:nil)
                        (locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %validate-policy-request-locale :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validate-policy-request 'make-validate-policy-request))
 (common-lisp:defun make-validate-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validate-policy-resource-type policy-type
                     policy-document next-token max-results locale)
   (common-lisp:apply #'common-lisp:make-instance 'validate-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validate-policy-resource-type))
      (common-lisp:list
       (common-lisp:cons "validatePolicyResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-request))
   common-lisp:nil))
(common-lisp:deftype validate-policy-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validate-policy-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %validate-policy-response-next-token :initform
                         common-lisp:nil)
                        (findings :initarg :|findings| :type
                         (common-lisp:or validate-policy-finding-list
                                         common-lisp:null)
                         :accessor %validate-policy-response-findings :initform
                         (common-lisp:error ":findings is required"))))
 (common-lisp:export
  (common-lisp:list 'validate-policy-response 'make-validate-policy-response))
 (common-lisp:defun make-validate-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token findings)
   (common-lisp:apply #'common-lisp:make-instance 'validate-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (accessanalyzer-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       validation-exception-reason)
      (field-list :initarg :|fieldList| :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((message :initarg :|message| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-message :initform
                         (common-lisp:error ":message is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-exception-field-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defun make-validation-exception-field
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message name)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun |make-validation-exception-field-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype value-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-configuration common-lisp:nil
                       ((vpc-id :initarg :|vpcId| :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %vpc-configuration-vpc-id :initform
                         (common-lisp:error ":vpcid is required"))))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defun make-vpc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-id)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun apply-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn rule-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn rule-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-apply-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/archive-rule"
                                                        "ApplyArchiveRule"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'apply-archive-rule))
(common-lisp:progn
 (common-lisp:defun cancel-policy-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-policy-generation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/generation/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CancelPolicyGeneration"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-policy-generation))
(common-lisp:progn
 (common-lisp:defun create-access-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn configurations client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn configurations client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-preview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/access-preview"
                                                        "CreateAccessPreview"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-preview))
(common-lisp:progn
 (common-lisp:defun create-analyzer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name type archive-rules tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name type archive-rules tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-analyzer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/analyzer"
                                                        "CreateAnalyzer"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-analyzer))
(common-lisp:progn
 (common-lisp:defun create-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name filter
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name rule-name filter client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "CreateArchiveRule"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-archive-rule))
(common-lisp:progn
 (common-lisp:defun delete-analyzer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name client-token)
   (common-lisp:declare (common-lisp:ignorable analyzer-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-analyzer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "DeleteAnalyzer"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-analyzer))
(common-lisp:progn
 (common-lisp:defun delete-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name rule-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "DeleteArchiveRule"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-archive-rule))
(common-lisp:progn
 (common-lisp:defun get-access-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-preview-id analyzer-arn)
   (common-lisp:declare (common-lisp:ignorable access-preview-id analyzer-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-preview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-preview/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-preview-id))))
                                                        "GetAccessPreview"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-access-preview))
(common-lisp:progn
 (common-lisp:defun get-analyzed-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn resource-arn)
   (common-lisp:declare (common-lisp:ignorable analyzer-arn resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-analyzed-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/analyzed-resource"
                                                        "GetAnalyzedResource"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-analyzed-resource))
(common-lisp:progn
 (common-lisp:defun get-analyzer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name)
   (common-lisp:declare (common-lisp:ignorable analyzer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-analyzer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "GetAnalyzer"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-analyzer))
(common-lisp:progn
 (common-lisp:defun get-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name)
   (common-lisp:declare (common-lisp:ignorable analyzer-name rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "GetArchiveRule"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-archive-rule))
(common-lisp:progn
 (common-lisp:defun get-finding
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn id)
   (common-lisp:declare (common-lisp:ignorable analyzer-arn id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-finding-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/finding/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFinding"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-finding))
(common-lisp:progn
 (common-lisp:defun get-generated-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id include-resource-placeholders
                     include-service-level-template)
   (common-lisp:declare
    (common-lisp:ignorable job-id include-resource-placeholders
     include-service-level-template))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-generated-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/generation/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetGeneratedPolicy"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-generated-policy))
(common-lisp:progn
 (common-lisp:defun list-access-preview-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-preview-id analyzer-arn filter
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable access-preview-id analyzer-arn filter next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-access-preview-findings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-preview/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-preview-id))))
                                                        "ListAccessPreviewFindings"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-preview-findings))
(common-lisp:progn
 (common-lisp:defun list-access-previews
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-previews-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/access-preview"
                                                        "ListAccessPreviews"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-previews))
(common-lisp:progn
 (common-lisp:defun list-analyzed-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn resource-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn resource-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-analyzed-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/analyzed-resource"
                                                        "ListAnalyzedResources"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-analyzed-resources))
(common-lisp:progn
 (common-lisp:defun list-analyzers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results type)
   (common-lisp:declare (common-lisp:ignorable next-token max-results type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-analyzers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/analyzer"
                                                        "ListAnalyzers"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-analyzers))
(common-lisp:progn
 (common-lisp:defun list-archive-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-archive-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "ListArchiveRules"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-archive-rules))
(common-lisp:progn
 (common-lisp:defun list-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn filter sort next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn filter sort next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/finding"
                                                        "ListFindings"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-findings))
(common-lisp:progn
 (common-lisp:defun list-policy-generations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable principal-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-generations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/policy/generation"
                                                        "ListPolicyGenerations"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policy-generations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-policy-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-generation-details
                     cloud-trail-details client-token)
   (common-lisp:declare
    (common-lisp:ignorable policy-generation-details cloud-trail-details
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-policy-generation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/policy/generation"
                                                        "StartPolicyGeneration"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-policy-generation))
(common-lisp:progn
 (common-lisp:defun start-resource-scan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn resource-arn
                     resource-owner-account)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn resource-arn resource-owner-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-resource-scan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/resource/scan"
                                                        "StartResourceScan"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-resource-scan))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name filter
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name rule-name filter client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "UpdateArchiveRule"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-archive-rule))
(common-lisp:progn
 (common-lisp:defun update-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn status ids resource-arn
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn status ids resource-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/finding"
                                                        "UpdateFindings"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-findings))
(common-lisp:progn
 (common-lisp:defun validate-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key locale max-results next-token
                     policy-document policy-type validate-policy-resource-type)
   (common-lisp:declare
    (common-lisp:ignorable locale max-results next-token policy-document
     policy-type validate-policy-resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-validate-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/policy/validation"
                                                        "ValidatePolicy"
                                                        "2019-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'validate-policy))
