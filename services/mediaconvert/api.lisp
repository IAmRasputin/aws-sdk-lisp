;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/mediaconvert/api
  (:use)
  (:nicknames #:aws/mediaconvert)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/mediaconvert/api)
(common-lisp:progn
 (common-lisp:defclass mediaconvert-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "mediaconvert" :protocol
                        :rest-json))
 (common-lisp:export 'mediaconvert-request))
(common-lisp:progn
 (common-lisp:define-condition mediaconvert-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'mediaconvert-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:deftype aac-audio-description-broadcaster-mix ()
  'common-lisp:string)
(common-lisp:deftype aac-codec-profile () 'common-lisp:string)
(common-lisp:deftype aac-coding-mode () 'common-lisp:string)
(common-lisp:deftype aac-rate-control-mode () 'common-lisp:string)
(common-lisp:deftype aac-raw-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aac-settings common-lisp:nil
                       ((vbr-quality :initarg :vbr-quality :type
                         (common-lisp:or aac-vbr-quality common-lisp:null)
                         :accessor %aac-settings-vbr-quality :initform
                         common-lisp:nil)
                        (specification :initarg :specification :type
                         (common-lisp:or aac-specification common-lisp:null)
                         :accessor %aac-settings-specification :initform
                         common-lisp:nil)
                        (sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__integerMin8000Max96000|
                                         common-lisp:null)
                         :accessor %aac-settings-sample-rate :initform
                         common-lisp:nil)
                        (raw-format :initarg :raw-format :type
                         (common-lisp:or aac-raw-format common-lisp:null)
                         :accessor %aac-settings-raw-format :initform
                         common-lisp:nil)
                        (rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or aac-rate-control-mode
                                         common-lisp:null)
                         :accessor %aac-settings-rate-control-mode :initform
                         common-lisp:nil)
                        (coding-mode :initarg :coding-mode :type
                         (common-lisp:or aac-coding-mode common-lisp:null)
                         :accessor %aac-settings-coding-mode :initform
                         common-lisp:nil)
                        (codec-profile :initarg :codec-profile :type
                         (common-lisp:or aac-codec-profile common-lisp:null)
                         :accessor %aac-settings-codec-profile :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin6000Max1024000|
                                         common-lisp:null)
                         :accessor %aac-settings-bitrate :initform
                         common-lisp:nil)
                        (audio-description-broadcaster-mix :initarg
                         :audio-description-broadcaster-mix :type
                         (common-lisp:or aac-audio-description-broadcaster-mix
                                         common-lisp:null)
                         :accessor
                         %aac-settings-audio-description-broadcaster-mix
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'aac-settings 'make-aac-settings))
 (common-lisp:defun make-aac-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vbr-quality specification sample-rate
                     raw-format rate-control-mode coding-mode codec-profile
                     bitrate audio-description-broadcaster-mix)
   (common-lisp:apply #'common-lisp:make-instance 'aac-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aac-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aac-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-description-broadcaster-mix))
      (common-lisp:list
       (common-lisp:cons "AudioDescriptionBroadcasterMix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-profile))
      (common-lisp:list
       (common-lisp:cons "CodecProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-format))
      (common-lisp:list
       (common-lisp:cons "RawFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specification))
      (common-lisp:list
       (common-lisp:cons "Specification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vbr-quality))
      (common-lisp:list
       (common-lisp:cons "VbrQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aac-settings))
   common-lisp:nil))
(common-lisp:deftype aac-specification () 'common-lisp:string)
(common-lisp:deftype aac-vbr-quality () 'common-lisp:string)
(common-lisp:deftype ac3bitstream-mode () 'common-lisp:string)
(common-lisp:deftype ac3coding-mode () 'common-lisp:string)
(common-lisp:deftype ac3dynamic-range-compression-line () 'common-lisp:string)
(common-lisp:deftype ac3dynamic-range-compression-profile ()
  'common-lisp:string)
(common-lisp:deftype ac3dynamic-range-compression-rf () 'common-lisp:string)
(common-lisp:deftype ac3lfe-filter () 'common-lisp:string)
(common-lisp:deftype ac3metadata-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ac3settings common-lisp:nil
                       ((sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__integerMin48000Max48000|
                                         common-lisp:null)
                         :accessor %ac3settings-sample-rate :initform
                         common-lisp:nil)
                        (metadata-control :initarg :metadata-control :type
                         (common-lisp:or ac3metadata-control common-lisp:null)
                         :accessor %ac3settings-metadata-control :initform
                         common-lisp:nil)
                        (lfe-filter :initarg :lfe-filter :type
                         (common-lisp:or ac3lfe-filter common-lisp:null)
                         :accessor %ac3settings-lfe-filter :initform
                         common-lisp:nil)
                        (dynamic-range-compression-rf :initarg
                         :dynamic-range-compression-rf :type
                         (common-lisp:or ac3dynamic-range-compression-rf
                                         common-lisp:null)
                         :accessor %ac3settings-dynamic-range-compression-rf
                         :initform common-lisp:nil)
                        (dynamic-range-compression-profile :initarg
                         :dynamic-range-compression-profile :type
                         (common-lisp:or ac3dynamic-range-compression-profile
                                         common-lisp:null)
                         :accessor
                         %ac3settings-dynamic-range-compression-profile
                         :initform common-lisp:nil)
                        (dynamic-range-compression-line :initarg
                         :dynamic-range-compression-line :type
                         (common-lisp:or ac3dynamic-range-compression-line
                                         common-lisp:null)
                         :accessor %ac3settings-dynamic-range-compression-line
                         :initform common-lisp:nil)
                        (dialnorm :initarg :dialnorm :type
                         (common-lisp:or |__integerMin1Max31| common-lisp:null)
                         :accessor %ac3settings-dialnorm :initform
                         common-lisp:nil)
                        (coding-mode :initarg :coding-mode :type
                         (common-lisp:or ac3coding-mode common-lisp:null)
                         :accessor %ac3settings-coding-mode :initform
                         common-lisp:nil)
                        (bitstream-mode :initarg :bitstream-mode :type
                         (common-lisp:or ac3bitstream-mode common-lisp:null)
                         :accessor %ac3settings-bitstream-mode :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin64000Max640000|
                                         common-lisp:null)
                         :accessor %ac3settings-bitrate :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ac3settings 'make-ac3settings))
 (common-lisp:defun make-ac3settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-rate metadata-control lfe-filter
                     dynamic-range-compression-rf
                     dynamic-range-compression-profile
                     dynamic-range-compression-line dialnorm coding-mode
                     bitstream-mode bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'ac3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ac3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ac3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitstream-mode))
      (common-lisp:list
       (common-lisp:cons "BitstreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-range-compression-line))
      (common-lisp:list
       (common-lisp:cons "DynamicRangeCompressionLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-range-compression-profile))
      (common-lisp:list
       (common-lisp:cons "DynamicRangeCompressionProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-range-compression-rf))
      (common-lisp:list
       (common-lisp:cons "DynamicRangeCompressionRf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-filter))
      (common-lisp:list
       (common-lisp:cons "LfeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-control))
      (common-lisp:list
       (common-lisp:cons "MetadataControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ac3settings))
   common-lisp:nil))
(common-lisp:deftype acceleration-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass acceleration-settings common-lisp:nil
                       ((mode :initarg :mode :type
                         (common-lisp:or acceleration-mode common-lisp:null)
                         :accessor %acceleration-settings-mode :initform
                         (common-lisp:error ":mode is required"))))
 (common-lisp:export
  (common-lisp:list 'acceleration-settings 'make-acceleration-settings))
 (common-lisp:defun make-acceleration-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mode)
   (common-lisp:apply #'common-lisp:make-instance 'acceleration-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          acceleration-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          acceleration-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          acceleration-settings))
   common-lisp:nil))
(common-lisp:deftype acceleration-status () 'common-lisp:string)
(common-lisp:deftype advanced-input-filter () 'common-lisp:string)
(common-lisp:deftype advanced-input-filter-add-texture () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass advanced-input-filter-settings common-lisp:nil
                       ((sharpening :initarg :sharpening :type
                         (common-lisp:or advanced-input-filter-sharpen
                                         common-lisp:null)
                         :accessor %advanced-input-filter-settings-sharpening
                         :initform common-lisp:nil)
                        (add-texture :initarg :add-texture :type
                         (common-lisp:or advanced-input-filter-add-texture
                                         common-lisp:null)
                         :accessor %advanced-input-filter-settings-add-texture
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'advanced-input-filter-settings
                    'make-advanced-input-filter-settings))
 (common-lisp:defun make-advanced-input-filter-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sharpening add-texture)
   (common-lisp:apply #'common-lisp:make-instance
                      'advanced-input-filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-input-filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-input-filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-texture))
      (common-lisp:list
       (common-lisp:cons "AddTexture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sharpening))
      (common-lisp:list
       (common-lisp:cons "Sharpening"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-input-filter-settings))
   common-lisp:nil))
(common-lisp:deftype advanced-input-filter-sharpen () 'common-lisp:string)
(common-lisp:deftype afd-signaling () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aiff-settings common-lisp:nil
                       ((sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__integerMin8000Max192000|
                                         common-lisp:null)
                         :accessor %aiff-settings-sample-rate :initform
                         common-lisp:nil)
                        (channels :initarg :channels :type
                         (common-lisp:or |__integerMin1Max64| common-lisp:null)
                         :accessor %aiff-settings-channels :initform
                         common-lisp:nil)
                        (bit-depth :initarg :bit-depth :type
                         (common-lisp:or |__integerMin16Max24|
                                         common-lisp:null)
                         :accessor %aiff-settings-bit-depth :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'aiff-settings 'make-aiff-settings))
 (common-lisp:defun make-aiff-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-rate channels bit-depth)
   (common-lisp:apply #'common-lisp:make-instance 'aiff-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aiff-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aiff-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-depth))
      (common-lisp:list
       (common-lisp:cons "BitDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aiff-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass allowed-rendition-size common-lisp:nil
                       ((width :initarg :width :type
                         (common-lisp:or |__integerMin32Max8192|
                                         common-lisp:null)
                         :accessor %allowed-rendition-size-width :initform
                         common-lisp:nil)
                        (required :initarg :required :type
                         (common-lisp:or required-flag common-lisp:null)
                         :accessor %allowed-rendition-size-required :initform
                         common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or |__integerMin32Max8192|
                                         common-lisp:null)
                         :accessor %allowed-rendition-size-height :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'allowed-rendition-size 'make-allowed-rendition-size))
 (common-lisp:defun make-allowed-rendition-size
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width required height)
   (common-lisp:apply #'common-lisp:make-instance 'allowed-rendition-size
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allowed-rendition-size))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allowed-rendition-size))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required))
      (common-lisp:list
       (common-lisp:cons "Required"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allowed-rendition-size))
   common-lisp:nil))
(common-lisp:deftype alpha-behavior () 'common-lisp:string)
(common-lisp:deftype ancillary-convert608to708 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ancillary-source-settings common-lisp:nil
                       ((terminate-captions :initarg :terminate-captions :type
                         (common-lisp:or ancillary-terminate-captions
                                         common-lisp:null)
                         :accessor
                         %ancillary-source-settings-terminate-captions
                         :initform common-lisp:nil)
                        (source-ancillary-channel-number :initarg
                         :source-ancillary-channel-number :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor
                         %ancillary-source-settings-source-ancillary-channel-number
                         :initform common-lisp:nil)
                        (convert608to708 :initarg :convert608to708 :type
                         (common-lisp:or ancillary-convert608to708
                                         common-lisp:null)
                         :accessor %ancillary-source-settings-convert608to708
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ancillary-source-settings
                    'make-ancillary-source-settings))
 (common-lisp:defun make-ancillary-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key terminate-captions
                     source-ancillary-channel-number convert608to708)
   (common-lisp:apply #'common-lisp:make-instance 'ancillary-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'convert608to708))
      (common-lisp:list
       (common-lisp:cons "Convert608To708"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-ancillary-channel-number))
      (common-lisp:list
       (common-lisp:cons "SourceAncillaryChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminate-captions))
      (common-lisp:list
       (common-lisp:cons "TerminateCaptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   common-lisp:nil))
(common-lisp:deftype ancillary-terminate-captions () 'common-lisp:string)
(common-lisp:deftype anti-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-certificate-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %associate-certificate-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-certificate-request
                    'make-associate-certificate-request))
 (common-lisp:defun make-associate-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-certificate-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-certificate-response
                    'make-associate-certificate-response))
 (common-lisp:defun make-associate-certificate-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-certificate-response))
   common-lisp:nil))
(common-lisp:deftype audio-channel-tag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-channel-tagging-settings common-lisp:nil
                       ((channel-tag :initarg :channel-tag :type
                         (common-lisp:or audio-channel-tag common-lisp:null)
                         :accessor %audio-channel-tagging-settings-channel-tag
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-channel-tagging-settings
                    'make-audio-channel-tagging-settings))
 (common-lisp:defun make-audio-channel-tagging-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel-tag)
   (common-lisp:apply #'common-lisp:make-instance
                      'audio-channel-tagging-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-tagging-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-tagging-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-tag))
      (common-lisp:list
       (common-lisp:cons "ChannelTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-tagging-settings))
   common-lisp:nil))
(common-lisp:deftype audio-codec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-codec-settings common-lisp:nil
                       ((wav-settings :initarg :wav-settings :type
                         (common-lisp:or wav-settings common-lisp:null)
                         :accessor %audio-codec-settings-wav-settings :initform
                         common-lisp:nil)
                        (vorbis-settings :initarg :vorbis-settings :type
                         (common-lisp:or vorbis-settings common-lisp:null)
                         :accessor %audio-codec-settings-vorbis-settings
                         :initform common-lisp:nil)
                        (opus-settings :initarg :opus-settings :type
                         (common-lisp:or opus-settings common-lisp:null)
                         :accessor %audio-codec-settings-opus-settings
                         :initform common-lisp:nil)
                        (mp3settings :initarg :mp3settings :type
                         (common-lisp:or mp3settings common-lisp:null)
                         :accessor %audio-codec-settings-mp3settings :initform
                         common-lisp:nil)
                        (mp2settings :initarg :mp2settings :type
                         (common-lisp:or mp2settings common-lisp:null)
                         :accessor %audio-codec-settings-mp2settings :initform
                         common-lisp:nil)
                        (eac3settings :initarg :eac3settings :type
                         (common-lisp:or eac3settings common-lisp:null)
                         :accessor %audio-codec-settings-eac3settings :initform
                         common-lisp:nil)
                        (eac3atmos-settings :initarg :eac3atmos-settings :type
                         (common-lisp:or eac3atmos-settings common-lisp:null)
                         :accessor %audio-codec-settings-eac3atmos-settings
                         :initform common-lisp:nil)
                        (codec :initarg :codec :type
                         (common-lisp:or audio-codec common-lisp:null)
                         :accessor %audio-codec-settings-codec :initform
                         common-lisp:nil)
                        (aiff-settings :initarg :aiff-settings :type
                         (common-lisp:or aiff-settings common-lisp:null)
                         :accessor %audio-codec-settings-aiff-settings
                         :initform common-lisp:nil)
                        (ac3settings :initarg :ac3settings :type
                         (common-lisp:or ac3settings common-lisp:null)
                         :accessor %audio-codec-settings-ac3settings :initform
                         common-lisp:nil)
                        (aac-settings :initarg :aac-settings :type
                         (common-lisp:or aac-settings common-lisp:null)
                         :accessor %audio-codec-settings-aac-settings :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-codec-settings 'make-audio-codec-settings))
 (common-lisp:defun make-audio-codec-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wav-settings vorbis-settings
                     opus-settings mp3settings mp2settings eac3settings
                     eac3atmos-settings codec aiff-settings ac3settings
                     aac-settings)
   (common-lisp:apply #'common-lisp:make-instance 'audio-codec-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aac-settings))
      (common-lisp:list
       (common-lisp:cons "AacSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ac3settings))
      (common-lisp:list
       (common-lisp:cons "Ac3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aiff-settings))
      (common-lisp:list
       (common-lisp:cons "AiffSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eac3atmos-settings))
      (common-lisp:list
       (common-lisp:cons "Eac3AtmosSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eac3settings))
      (common-lisp:list
       (common-lisp:cons "Eac3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mp2settings))
      (common-lisp:list
       (common-lisp:cons "Mp2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mp3settings))
      (common-lisp:list
       (common-lisp:cons "Mp3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opus-settings))
      (common-lisp:list
       (common-lisp:cons "OpusSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vorbis-settings))
      (common-lisp:list
       (common-lisp:cons "VorbisSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wav-settings))
      (common-lisp:list
       (common-lisp:cons "WavSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   common-lisp:nil))
(common-lisp:deftype audio-default-selection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-description common-lisp:nil
                       ((stream-name :initarg :stream-name :type
                         (common-lisp:or |__stringPatternWS| common-lisp:null)
                         :accessor %audio-description-stream-name :initform
                         common-lisp:nil)
                        (remix-settings :initarg :remix-settings :type
                         (common-lisp:or remix-settings common-lisp:null)
                         :accessor %audio-description-remix-settings :initform
                         common-lisp:nil)
                        (language-code-control :initarg :language-code-control
                         :type
                         (common-lisp:or audio-language-code-control
                                         common-lisp:null)
                         :accessor %audio-description-language-code-control
                         :initform common-lisp:nil)
                        (language-code :initarg :language-code :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor %audio-description-language-code :initform
                         common-lisp:nil)
                        (custom-language-code :initarg :custom-language-code
                         :type
                         (common-lisp:or |__stringPatternAZaZ23AZaZ|
                                         common-lisp:null)
                         :accessor %audio-description-custom-language-code
                         :initform common-lisp:nil)
                        (codec-settings :initarg :codec-settings :type
                         (common-lisp:or audio-codec-settings common-lisp:null)
                         :accessor %audio-description-codec-settings :initform
                         common-lisp:nil)
                        (audio-type-control :initarg :audio-type-control :type
                         (common-lisp:or audio-type-control common-lisp:null)
                         :accessor %audio-description-audio-type-control
                         :initform common-lisp:nil)
                        (audio-type :initarg :audio-type :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor %audio-description-audio-type :initform
                         common-lisp:nil)
                        (audio-source-name :initarg :audio-source-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %audio-description-audio-source-name :initform
                         common-lisp:nil)
                        (audio-normalization-settings :initarg
                         :audio-normalization-settings :type
                         (common-lisp:or audio-normalization-settings
                                         common-lisp:null)
                         :accessor
                         %audio-description-audio-normalization-settings
                         :initform common-lisp:nil)
                        (audio-channel-tagging-settings :initarg
                         :audio-channel-tagging-settings :type
                         (common-lisp:or audio-channel-tagging-settings
                                         common-lisp:null)
                         :accessor
                         %audio-description-audio-channel-tagging-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-description 'make-audio-description))
 (common-lisp:defun make-audio-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream-name remix-settings
                     language-code-control language-code custom-language-code
                     codec-settings audio-type-control audio-type
                     audio-source-name audio-normalization-settings
                     audio-channel-tagging-settings)
   (common-lisp:apply #'common-lisp:make-instance 'audio-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-channel-tagging-settings))
      (common-lisp:list
       (common-lisp:cons "AudioChannelTaggingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-normalization-settings))
      (common-lisp:list
       (common-lisp:cons "AudioNormalizationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-source-name))
      (common-lisp:list
       (common-lisp:cons "AudioSourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-type))
      (common-lisp:list
       (common-lisp:cons "AudioType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-type-control))
      (common-lisp:list
       (common-lisp:cons "AudioTypeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-settings))
      (common-lisp:list
       (common-lisp:cons "CodecSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-language-code))
      (common-lisp:list
       (common-lisp:cons "CustomLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-code-control))
      (common-lisp:list
       (common-lisp:cons "LanguageCodeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remix-settings))
      (common-lisp:list
       (common-lisp:cons "RemixSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-description))
   common-lisp:nil))
(common-lisp:deftype audio-duration-correction () 'common-lisp:string)
(common-lisp:deftype audio-language-code-control () 'common-lisp:string)
(common-lisp:deftype audio-normalization-algorithm () 'common-lisp:string)
(common-lisp:deftype audio-normalization-algorithm-control ()
  'common-lisp:string)
(common-lisp:deftype audio-normalization-loudness-logging ()
  'common-lisp:string)
(common-lisp:deftype audio-normalization-peak-calculation ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-normalization-settings common-lisp:nil
                       ((true-peak-limiter-threshold :initarg
                         :true-peak-limiter-threshold :type
                         (common-lisp:or |__doubleMinNegative8Max0|
                                         common-lisp:null)
                         :accessor
                         %audio-normalization-settings-true-peak-limiter-threshold
                         :initform common-lisp:nil)
                        (target-lkfs :initarg :target-lkfs :type
                         (common-lisp:or |__doubleMinNegative59Max0|
                                         common-lisp:null)
                         :accessor %audio-normalization-settings-target-lkfs
                         :initform common-lisp:nil)
                        (peak-calculation :initarg :peak-calculation :type
                         (common-lisp:or audio-normalization-peak-calculation
                                         common-lisp:null)
                         :accessor
                         %audio-normalization-settings-peak-calculation
                         :initform common-lisp:nil)
                        (loudness-logging :initarg :loudness-logging :type
                         (common-lisp:or audio-normalization-loudness-logging
                                         common-lisp:null)
                         :accessor
                         %audio-normalization-settings-loudness-logging
                         :initform common-lisp:nil)
                        (correction-gate-level :initarg :correction-gate-level
                         :type
                         (common-lisp:or |__integerMinNegative70Max0|
                                         common-lisp:null)
                         :accessor
                         %audio-normalization-settings-correction-gate-level
                         :initform common-lisp:nil)
                        (algorithm-control :initarg :algorithm-control :type
                         (common-lisp:or audio-normalization-algorithm-control
                                         common-lisp:null)
                         :accessor
                         %audio-normalization-settings-algorithm-control
                         :initform common-lisp:nil)
                        (algorithm :initarg :algorithm :type
                         (common-lisp:or audio-normalization-algorithm
                                         common-lisp:null)
                         :accessor %audio-normalization-settings-algorithm
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-normalization-settings
                    'make-audio-normalization-settings))
 (common-lisp:defun make-audio-normalization-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key true-peak-limiter-threshold target-lkfs
                     peak-calculation loudness-logging correction-gate-level
                     algorithm-control algorithm)
   (common-lisp:apply #'common-lisp:make-instance 'audio-normalization-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-control))
      (common-lisp:list
       (common-lisp:cons "AlgorithmControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'correction-gate-level))
      (common-lisp:list
       (common-lisp:cons "CorrectionGateLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'loudness-logging))
      (common-lisp:list
       (common-lisp:cons "LoudnessLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peak-calculation))
      (common-lisp:list
       (common-lisp:cons "PeakCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-lkfs))
      (common-lisp:list
       (common-lisp:cons "TargetLkfs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'true-peak-limiter-threshold))
      (common-lisp:list
       (common-lisp:cons "TruePeakLimiterThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-selector common-lisp:nil
                       ((tracks :initarg :tracks :type
                         (common-lisp:or |__listOf__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %audio-selector-tracks :initform
                         common-lisp:nil)
                        (selector-type :initarg :selector-type :type
                         (common-lisp:or audio-selector-type common-lisp:null)
                         :accessor %audio-selector-selector-type :initform
                         common-lisp:nil)
                        (remix-settings :initarg :remix-settings :type
                         (common-lisp:or remix-settings common-lisp:null)
                         :accessor %audio-selector-remix-settings :initform
                         common-lisp:nil)
                        (program-selection :initarg :program-selection :type
                         (common-lisp:or |__integerMin0Max8| common-lisp:null)
                         :accessor %audio-selector-program-selection :initform
                         common-lisp:nil)
                        (pids :initarg :pids :type
                         (common-lisp:or |__listOf__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %audio-selector-pids :initform
                         common-lisp:nil)
                        (offset :initarg :offset :type
                         (common-lisp:or
                          |__integerMinNegative2147483648Max2147483647|
                          common-lisp:null)
                         :accessor %audio-selector-offset :initform
                         common-lisp:nil)
                        (language-code :initarg :language-code :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor %audio-selector-language-code :initform
                         common-lisp:nil)
                        (hls-rendition-group-settings :initarg
                         :hls-rendition-group-settings :type
                         (common-lisp:or hls-rendition-group-settings
                                         common-lisp:null)
                         :accessor %audio-selector-hls-rendition-group-settings
                         :initform common-lisp:nil)
                        (external-audio-file-input :initarg
                         :external-audio-file-input :type
                         (common-lisp:or |__stringPatternS3Https|
                                         common-lisp:null)
                         :accessor %audio-selector-external-audio-file-input
                         :initform common-lisp:nil)
                        (default-selection :initarg :default-selection :type
                         (common-lisp:or audio-default-selection
                                         common-lisp:null)
                         :accessor %audio-selector-default-selection :initform
                         common-lisp:nil)
                        (custom-language-code :initarg :custom-language-code
                         :type
                         (common-lisp:or |__stringMin3Max3PatternAZaZ3|
                                         common-lisp:null)
                         :accessor %audio-selector-custom-language-code
                         :initform common-lisp:nil)
                        (audio-duration-correction :initarg
                         :audio-duration-correction :type
                         (common-lisp:or audio-duration-correction
                                         common-lisp:null)
                         :accessor %audio-selector-audio-duration-correction
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'audio-selector 'make-audio-selector))
 (common-lisp:defun make-audio-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tracks selector-type remix-settings
                     program-selection pids offset language-code
                     hls-rendition-group-settings external-audio-file-input
                     default-selection custom-language-code
                     audio-duration-correction)
   (common-lisp:apply #'common-lisp:make-instance 'audio-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-duration-correction))
      (common-lisp:list
       (common-lisp:cons "AudioDurationCorrection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-language-code))
      (common-lisp:list
       (common-lisp:cons "CustomLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-selection))
      (common-lisp:list
       (common-lisp:cons "DefaultSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-audio-file-input))
      (common-lisp:list
       (common-lisp:cons "ExternalAudioFileInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-rendition-group-settings))
      (common-lisp:list
       (common-lisp:cons "HlsRenditionGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "Offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pids))
      (common-lisp:list
       (common-lisp:cons "Pids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-selection))
      (common-lisp:list
       (common-lisp:cons "ProgramSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remix-settings))
      (common-lisp:list
       (common-lisp:cons "RemixSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-type))
      (common-lisp:list
       (common-lisp:cons "SelectorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracks))
      (common-lisp:list
       (common-lisp:cons "Tracks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-selector-group common-lisp:nil
                       ((audio-selector-names :initarg :audio-selector-names
                         :type
                         (common-lisp:or |__listOf__stringMin1|
                                         common-lisp:null)
                         :accessor %audio-selector-group-audio-selector-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-selector-group 'make-audio-selector-group))
 (common-lisp:defun make-audio-selector-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audio-selector-names)
   (common-lisp:apply #'common-lisp:make-instance 'audio-selector-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-selector-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-selector-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-selector-names))
      (common-lisp:list
       (common-lisp:cons "AudioSelectorNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-selector-group))
   common-lisp:nil))
(common-lisp:deftype audio-selector-type () 'common-lisp:string)
(common-lisp:deftype audio-type-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass automated-abr-rule common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or rule-type common-lisp:null) :accessor
                         %automated-abr-rule-type :initform common-lisp:nil)
                        (min-top-rendition-size :initarg
                         :min-top-rendition-size :type
                         (common-lisp:or min-top-rendition-size
                                         common-lisp:null)
                         :accessor %automated-abr-rule-min-top-rendition-size
                         :initform common-lisp:nil)
                        (min-bottom-rendition-size :initarg
                         :min-bottom-rendition-size :type
                         (common-lisp:or min-bottom-rendition-size
                                         common-lisp:null)
                         :accessor
                         %automated-abr-rule-min-bottom-rendition-size
                         :initform common-lisp:nil)
                        (force-include-renditions :initarg
                         :force-include-renditions :type
                         (common-lisp:or |__listOfForceIncludeRenditionSize|
                                         common-lisp:null)
                         :accessor %automated-abr-rule-force-include-renditions
                         :initform common-lisp:nil)
                        (allowed-renditions :initarg :allowed-renditions :type
                         (common-lisp:or |__listOfAllowedRenditionSize|
                                         common-lisp:null)
                         :accessor %automated-abr-rule-allowed-renditions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'automated-abr-rule 'make-automated-abr-rule))
 (common-lisp:defun make-automated-abr-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type min-top-rendition-size
                     min-bottom-rendition-size force-include-renditions
                     allowed-renditions)
   (common-lisp:apply #'common-lisp:make-instance 'automated-abr-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input automated-abr-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input automated-abr-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-renditions))
      (common-lisp:list
       (common-lisp:cons "AllowedRenditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-include-renditions))
      (common-lisp:list
       (common-lisp:cons "ForceIncludeRenditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-bottom-rendition-size))
      (common-lisp:list
       (common-lisp:cons "MinBottomRenditionSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-top-rendition-size))
      (common-lisp:list
       (common-lisp:cons "MinTopRenditionSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input automated-abr-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass automated-abr-settings common-lisp:nil
                       ((rules :initarg :rules :type
                         (common-lisp:or |__listOfAutomatedAbrRule|
                                         common-lisp:null)
                         :accessor %automated-abr-settings-rules :initform
                         common-lisp:nil)
                        (min-abr-bitrate :initarg :min-abr-bitrate :type
                         (common-lisp:or |__integerMin100000Max100000000|
                                         common-lisp:null)
                         :accessor %automated-abr-settings-min-abr-bitrate
                         :initform common-lisp:nil)
                        (max-renditions :initarg :max-renditions :type
                         (common-lisp:or |__integerMin3Max15| common-lisp:null)
                         :accessor %automated-abr-settings-max-renditions
                         :initform common-lisp:nil)
                        (max-abr-bitrate :initarg :max-abr-bitrate :type
                         (common-lisp:or |__integerMin100000Max100000000|
                                         common-lisp:null)
                         :accessor %automated-abr-settings-max-abr-bitrate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'automated-abr-settings 'make-automated-abr-settings))
 (common-lisp:defun make-automated-abr-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules min-abr-bitrate max-renditions
                     max-abr-bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'automated-abr-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          automated-abr-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          automated-abr-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-abr-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxAbrBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-renditions))
      (common-lisp:list
       (common-lisp:cons "MaxRenditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-abr-bitrate))
      (common-lisp:list
       (common-lisp:cons "MinAbrBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          automated-abr-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass automated-encoding-settings common-lisp:nil
                       ((abr-settings :initarg :abr-settings :type
                         (common-lisp:or automated-abr-settings
                                         common-lisp:null)
                         :accessor %automated-encoding-settings-abr-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'automated-encoding-settings
                    'make-automated-encoding-settings))
 (common-lisp:defun make-automated-encoding-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key abr-settings)
   (common-lisp:apply #'common-lisp:make-instance 'automated-encoding-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          automated-encoding-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          automated-encoding-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abr-settings))
      (common-lisp:list
       (common-lisp:cons "AbrSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          automated-encoding-settings))
   common-lisp:nil))
(common-lisp:deftype av1adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype av1bit-depth () 'common-lisp:string)
(common-lisp:deftype av1framerate-control () 'common-lisp:string)
(common-lisp:deftype av1framerate-conversion-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass av1qvbr-settings common-lisp:nil
                       ((qvbr-quality-level-fine-tune :initarg
                         :qvbr-quality-level-fine-tune :type
                         (common-lisp:or |__doubleMin0Max1| common-lisp:null)
                         :accessor
                         %av1qvbr-settings-qvbr-quality-level-fine-tune
                         :initform common-lisp:nil)
                        (qvbr-quality-level :initarg :qvbr-quality-level :type
                         (common-lisp:or |__integerMin1Max10| common-lisp:null)
                         :accessor %av1qvbr-settings-qvbr-quality-level
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'av1qvbr-settings 'make-av1qvbr-settings))
 (common-lisp:defun make-av1qvbr-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key qvbr-quality-level-fine-tune
                     qvbr-quality-level)
   (common-lisp:apply #'common-lisp:make-instance 'av1qvbr-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input av1qvbr-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input av1qvbr-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-quality-level))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qvbr-quality-level-fine-tune))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevelFineTune"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input av1qvbr-settings))
   common-lisp:nil))
(common-lisp:deftype av1rate-control-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass av1settings common-lisp:nil
                       ((spatial-adaptive-quantization :initarg
                         :spatial-adaptive-quantization :type
                         (common-lisp:or av1spatial-adaptive-quantization
                                         common-lisp:null)
                         :accessor %av1settings-spatial-adaptive-quantization
                         :initform common-lisp:nil)
                        (slices :initarg :slices :type
                         (common-lisp:or |__integerMin1Max32| common-lisp:null)
                         :accessor %av1settings-slices :initform
                         common-lisp:nil)
                        (rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or av1rate-control-mode common-lisp:null)
                         :accessor %av1settings-rate-control-mode :initform
                         common-lisp:nil)
                        (qvbr-settings :initarg :qvbr-settings :type
                         (common-lisp:or av1qvbr-settings common-lisp:null)
                         :accessor %av1settings-qvbr-settings :initform
                         common-lisp:nil)
                        (number-bframes-between-reference-frames :initarg
                         :number-bframes-between-reference-frames :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor
                         %av1settings-number-bframes-between-reference-frames
                         :initform common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integerMin1000Max1152000000|
                                         common-lisp:null)
                         :accessor %av1settings-max-bitrate :initform
                         common-lisp:nil)
                        (gop-size :initarg :gop-size :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %av1settings-gop-size :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %av1settings-framerate-numerator :initform
                         common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %av1settings-framerate-denominator :initform
                         common-lisp:nil)
                        (framerate-conversion-algorithm :initarg
                         :framerate-conversion-algorithm :type
                         (common-lisp:or av1framerate-conversion-algorithm
                                         common-lisp:null)
                         :accessor %av1settings-framerate-conversion-algorithm
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or av1framerate-control common-lisp:null)
                         :accessor %av1settings-framerate-control :initform
                         common-lisp:nil)
                        (bit-depth :initarg :bit-depth :type
                         (common-lisp:or av1bit-depth common-lisp:null)
                         :accessor %av1settings-bit-depth :initform
                         common-lisp:nil)
                        (adaptive-quantization :initarg :adaptive-quantization
                         :type
                         (common-lisp:or av1adaptive-quantization
                                         common-lisp:null)
                         :accessor %av1settings-adaptive-quantization :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'av1settings 'make-av1settings))
 (common-lisp:defun make-av1settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key spatial-adaptive-quantization slices
                     rate-control-mode qvbr-settings
                     number-bframes-between-reference-frames max-bitrate
                     gop-size framerate-numerator framerate-denominator
                     framerate-conversion-algorithm framerate-control bit-depth
                     adaptive-quantization)
   (common-lisp:apply #'common-lisp:make-instance 'av1settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input av1settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input av1settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-depth))
      (common-lisp:list
       (common-lisp:cons "BitDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-conversion-algorithm))
      (common-lisp:list
       (common-lisp:cons "FramerateConversionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-bframes-between-reference-frames))
      (common-lisp:list
       (common-lisp:cons "NumberBFramesBetweenReferenceFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-settings))
      (common-lisp:list
       (common-lisp:cons "QvbrSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spatial-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "SpatialAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input av1settings))
   common-lisp:nil))
(common-lisp:deftype av1spatial-adaptive-quantization () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass avail-blanking common-lisp:nil
                       ((avail-blanking-image :initarg :avail-blanking-image
                         :type
                         (common-lisp:or
                          |__stringMin14PatternS3BmpBMPPngPNGHttpsBmpBMPPngPNG|
                          common-lisp:null)
                         :accessor %avail-blanking-avail-blanking-image
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'avail-blanking 'make-avail-blanking))
 (common-lisp:defun make-avail-blanking
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key avail-blanking-image)
   (common-lisp:apply #'common-lisp:make-instance 'avail-blanking
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avail-blanking))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avail-blanking))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'avail-blanking-image))
      (common-lisp:list
       (common-lisp:cons "AvailBlankingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avail-blanking))
   common-lisp:nil))
(common-lisp:deftype avc-intra-class () 'common-lisp:string)
(common-lisp:deftype avc-intra-framerate-control () 'common-lisp:string)
(common-lisp:deftype avc-intra-framerate-conversion-algorithm ()
  'common-lisp:string)
(common-lisp:deftype avc-intra-interlace-mode () 'common-lisp:string)
(common-lisp:deftype avc-intra-scan-type-conversion-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass avc-intra-settings common-lisp:nil
                       ((telecine :initarg :telecine :type
                         (common-lisp:or avc-intra-telecine common-lisp:null)
                         :accessor %avc-intra-settings-telecine :initform
                         common-lisp:nil)
                        (slow-pal :initarg :slow-pal :type
                         (common-lisp:or avc-intra-slow-pal common-lisp:null)
                         :accessor %avc-intra-settings-slow-pal :initform
                         common-lisp:nil)
                        (scan-type-conversion-mode :initarg
                         :scan-type-conversion-mode :type
                         (common-lisp:or avc-intra-scan-type-conversion-mode
                                         common-lisp:null)
                         :accessor
                         %avc-intra-settings-scan-type-conversion-mode
                         :initform common-lisp:nil)
                        (interlace-mode :initarg :interlace-mode :type
                         (common-lisp:or avc-intra-interlace-mode
                                         common-lisp:null)
                         :accessor %avc-intra-settings-interlace-mode :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin24Max60000|
                                         common-lisp:null)
                         :accessor %avc-intra-settings-framerate-numerator
                         :initform common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max1001|
                                         common-lisp:null)
                         :accessor %avc-intra-settings-framerate-denominator
                         :initform common-lisp:nil)
                        (framerate-conversion-algorithm :initarg
                         :framerate-conversion-algorithm :type
                         (common-lisp:or
                          avc-intra-framerate-conversion-algorithm
                          common-lisp:null)
                         :accessor
                         %avc-intra-settings-framerate-conversion-algorithm
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or avc-intra-framerate-control
                                         common-lisp:null)
                         :accessor %avc-intra-settings-framerate-control
                         :initform common-lisp:nil)
                        (avc-intra-uhd-settings :initarg
                         :avc-intra-uhd-settings :type
                         (common-lisp:or avc-intra-uhd-settings
                                         common-lisp:null)
                         :accessor %avc-intra-settings-avc-intra-uhd-settings
                         :initform common-lisp:nil)
                        (avc-intra-class :initarg :avc-intra-class :type
                         (common-lisp:or avc-intra-class common-lisp:null)
                         :accessor %avc-intra-settings-avc-intra-class
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'avc-intra-settings 'make-avc-intra-settings))
 (common-lisp:defun make-avc-intra-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key telecine slow-pal
                     scan-type-conversion-mode interlace-mode
                     framerate-numerator framerate-denominator
                     framerate-conversion-algorithm framerate-control
                     avc-intra-uhd-settings avc-intra-class)
   (common-lisp:apply #'common-lisp:make-instance 'avc-intra-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avc-intra-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avc-intra-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avc-intra-class))
      (common-lisp:list
       (common-lisp:cons "AvcIntraClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'avc-intra-uhd-settings))
      (common-lisp:list
       (common-lisp:cons "AvcIntraUhdSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-conversion-algorithm))
      (common-lisp:list
       (common-lisp:cons "FramerateConversionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interlace-mode))
      (common-lisp:list
       (common-lisp:cons "InterlaceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-type-conversion-mode))
      (common-lisp:list
       (common-lisp:cons "ScanTypeConversionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slow-pal))
      (common-lisp:list
       (common-lisp:cons "SlowPal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telecine))
      (common-lisp:list
       (common-lisp:cons "Telecine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avc-intra-settings))
   common-lisp:nil))
(common-lisp:deftype avc-intra-slow-pal () 'common-lisp:string)
(common-lisp:deftype avc-intra-telecine () 'common-lisp:string)
(common-lisp:deftype avc-intra-uhd-quality-tuning-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass avc-intra-uhd-settings common-lisp:nil
                       ((quality-tuning-level :initarg :quality-tuning-level
                         :type
                         (common-lisp:or avc-intra-uhd-quality-tuning-level
                                         common-lisp:null)
                         :accessor %avc-intra-uhd-settings-quality-tuning-level
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'avc-intra-uhd-settings 'make-avc-intra-uhd-settings))
 (common-lisp:defun make-avc-intra-uhd-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quality-tuning-level)
   (common-lisp:apply #'common-lisp:make-instance 'avc-intra-uhd-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          avc-intra-uhd-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          avc-intra-uhd-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quality-tuning-level))
      (common-lisp:list
       (common-lisp:cons "QualityTuningLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          avc-intra-uhd-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (mediaconvert-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass bandwidth-reduction-filter common-lisp:nil
                       ((strength :initarg :strength :type
                         (common-lisp:or bandwidth-reduction-filter-strength
                                         common-lisp:null)
                         :accessor %bandwidth-reduction-filter-strength
                         :initform common-lisp:nil)
                        (sharpening :initarg :sharpening :type
                         (common-lisp:or bandwidth-reduction-filter-sharpening
                                         common-lisp:null)
                         :accessor %bandwidth-reduction-filter-sharpening
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bandwidth-reduction-filter
                    'make-bandwidth-reduction-filter))
 (common-lisp:defun make-bandwidth-reduction-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key strength sharpening)
   (common-lisp:apply #'common-lisp:make-instance 'bandwidth-reduction-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bandwidth-reduction-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bandwidth-reduction-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sharpening))
      (common-lisp:list
       (common-lisp:cons "Sharpening"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strength))
      (common-lisp:list
       (common-lisp:cons "Strength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bandwidth-reduction-filter))
   common-lisp:nil))
(common-lisp:deftype bandwidth-reduction-filter-sharpening ()
  'common-lisp:string)
(common-lisp:deftype bandwidth-reduction-filter-strength () 'common-lisp:string)
(common-lisp:deftype billing-tags-source () 'common-lisp:string)
(common-lisp:deftype burn-in-subtitle-style-passthrough () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass burnin-destination-settings common-lisp:nil
                       ((yposition :initarg :yposition :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %burnin-destination-settings-yposition
                         :initform common-lisp:nil)
                        (xposition :initarg :xposition :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %burnin-destination-settings-xposition
                         :initform common-lisp:nil)
                        (teletext-spacing :initarg :teletext-spacing :type
                         (common-lisp:or burnin-subtitle-teletext-spacing
                                         common-lisp:null)
                         :accessor
                         %burnin-destination-settings-teletext-spacing
                         :initform common-lisp:nil)
                        (style-passthrough :initarg :style-passthrough :type
                         (common-lisp:or burn-in-subtitle-style-passthrough
                                         common-lisp:null)
                         :accessor
                         %burnin-destination-settings-style-passthrough
                         :initform common-lisp:nil)
                        (shadow-yoffset :initarg :shadow-yoffset :type
                         (common-lisp:or
                          |__integerMinNegative2147483648Max2147483647|
                          common-lisp:null)
                         :accessor %burnin-destination-settings-shadow-yoffset
                         :initform common-lisp:nil)
                        (shadow-xoffset :initarg :shadow-xoffset :type
                         (common-lisp:or
                          |__integerMinNegative2147483648Max2147483647|
                          common-lisp:null)
                         :accessor %burnin-destination-settings-shadow-xoffset
                         :initform common-lisp:nil)
                        (shadow-opacity :initarg :shadow-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor %burnin-destination-settings-shadow-opacity
                         :initform common-lisp:nil)
                        (shadow-color :initarg :shadow-color :type
                         (common-lisp:or burnin-subtitle-shadow-color
                                         common-lisp:null)
                         :accessor %burnin-destination-settings-shadow-color
                         :initform common-lisp:nil)
                        (outline-size :initarg :outline-size :type
                         (common-lisp:or |__integerMin0Max10| common-lisp:null)
                         :accessor %burnin-destination-settings-outline-size
                         :initform common-lisp:nil)
                        (outline-color :initarg :outline-color :type
                         (common-lisp:or burnin-subtitle-outline-color
                                         common-lisp:null)
                         :accessor %burnin-destination-settings-outline-color
                         :initform common-lisp:nil)
                        (hex-font-color :initarg :hex-font-color :type
                         (common-lisp:or
                          |__stringMin6Max8Pattern09aFAF609aFAF2|
                          common-lisp:null)
                         :accessor %burnin-destination-settings-hex-font-color
                         :initform common-lisp:nil)
                        (font-size :initarg :font-size :type
                         (common-lisp:or |__integerMin0Max96| common-lisp:null)
                         :accessor %burnin-destination-settings-font-size
                         :initform common-lisp:nil)
                        (font-script :initarg :font-script :type
                         (common-lisp:or font-script common-lisp:null)
                         :accessor %burnin-destination-settings-font-script
                         :initform common-lisp:nil)
                        (font-resolution :initarg :font-resolution :type
                         (common-lisp:or |__integerMin96Max600|
                                         common-lisp:null)
                         :accessor %burnin-destination-settings-font-resolution
                         :initform common-lisp:nil)
                        (font-opacity :initarg :font-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor %burnin-destination-settings-font-opacity
                         :initform common-lisp:nil)
                        (font-color :initarg :font-color :type
                         (common-lisp:or burnin-subtitle-font-color
                                         common-lisp:null)
                         :accessor %burnin-destination-settings-font-color
                         :initform common-lisp:nil)
                        (fallback-font :initarg :fallback-font :type
                         (common-lisp:or burnin-subtitle-fallback-font
                                         common-lisp:null)
                         :accessor %burnin-destination-settings-fallback-font
                         :initform common-lisp:nil)
                        (background-opacity :initarg :background-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         %burnin-destination-settings-background-opacity
                         :initform common-lisp:nil)
                        (background-color :initarg :background-color :type
                         (common-lisp:or burnin-subtitle-background-color
                                         common-lisp:null)
                         :accessor
                         %burnin-destination-settings-background-color
                         :initform common-lisp:nil)
                        (apply-font-color :initarg :apply-font-color :type
                         (common-lisp:or burnin-subtitle-apply-font-color
                                         common-lisp:null)
                         :accessor
                         %burnin-destination-settings-apply-font-color
                         :initform common-lisp:nil)
                        (alignment :initarg :alignment :type
                         (common-lisp:or burnin-subtitle-alignment
                                         common-lisp:null)
                         :accessor %burnin-destination-settings-alignment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'burnin-destination-settings
                    'make-burnin-destination-settings))
 (common-lisp:defun make-burnin-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key yposition xposition teletext-spacing
                     style-passthrough shadow-yoffset shadow-xoffset
                     shadow-opacity shadow-color outline-size outline-color
                     hex-font-color font-size font-script font-resolution
                     font-opacity font-color fallback-font background-opacity
                     background-color apply-font-color alignment)
   (common-lisp:apply #'common-lisp:make-instance 'burnin-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          burnin-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          burnin-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "Alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-font-color))
      (common-lisp:list
       (common-lisp:cons "ApplyFontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-opacity))
      (common-lisp:list
       (common-lisp:cons "BackgroundOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fallback-font))
      (common-lisp:list
       (common-lisp:cons "FallbackFont"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-opacity))
      (common-lisp:list
       (common-lisp:cons "FontOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-resolution))
      (common-lisp:list
       (common-lisp:cons "FontResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-script))
      (common-lisp:list
       (common-lisp:cons "FontScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hex-font-color))
      (common-lisp:list
       (common-lisp:cons "HexFontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-color))
      (common-lisp:list
       (common-lisp:cons "OutlineColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-size))
      (common-lisp:list
       (common-lisp:cons "OutlineSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-color))
      (common-lisp:list
       (common-lisp:cons "ShadowColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-opacity))
      (common-lisp:list
       (common-lisp:cons "ShadowOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-xoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowXOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-yoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowYOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-passthrough))
      (common-lisp:list
       (common-lisp:cons "StylePassthrough"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'teletext-spacing))
      (common-lisp:list
       (common-lisp:cons "TeletextSpacing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xposition))
      (common-lisp:list
       (common-lisp:cons "XPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yposition))
      (common-lisp:list
       (common-lisp:cons "YPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          burnin-destination-settings))
   common-lisp:nil))
(common-lisp:deftype burnin-subtitle-alignment () 'common-lisp:string)
(common-lisp:deftype burnin-subtitle-apply-font-color () 'common-lisp:string)
(common-lisp:deftype burnin-subtitle-background-color () 'common-lisp:string)
(common-lisp:deftype burnin-subtitle-fallback-font () 'common-lisp:string)
(common-lisp:deftype burnin-subtitle-font-color () 'common-lisp:string)
(common-lisp:deftype burnin-subtitle-outline-color () 'common-lisp:string)
(common-lisp:deftype burnin-subtitle-shadow-color () 'common-lisp:string)
(common-lisp:deftype burnin-subtitle-teletext-spacing () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-job-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cancel-job-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defun make-cancel-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-job-response 'make-cancel-job-response))
 (common-lisp:defun make-cancel-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-description common-lisp:nil
                       ((language-description :initarg :language-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %caption-description-language-description
                         :initform common-lisp:nil)
                        (language-code :initarg :language-code :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor %caption-description-language-code :initform
                         common-lisp:nil)
                        (destination-settings :initarg :destination-settings
                         :type
                         (common-lisp:or caption-destination-settings
                                         common-lisp:null)
                         :accessor %caption-description-destination-settings
                         :initform common-lisp:nil)
                        (custom-language-code :initarg :custom-language-code
                         :type
                         (common-lisp:or |__stringPatternAZaZ23AZaZ|
                                         common-lisp:null)
                         :accessor %caption-description-custom-language-code
                         :initform common-lisp:nil)
                        (caption-selector-name :initarg :caption-selector-name
                         :type (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor %caption-description-caption-selector-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'caption-description 'make-caption-description))
 (common-lisp:defun make-caption-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language-description language-code
                     destination-settings custom-language-code
                     caption-selector-name)
   (common-lisp:apply #'common-lisp:make-instance 'caption-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-selector-name))
      (common-lisp:list
       (common-lisp:cons "CaptionSelectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-language-code))
      (common-lisp:list
       (common-lisp:cons "CustomLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-settings))
      (common-lisp:list
       (common-lisp:cons "DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-description))
      (common-lisp:list
       (common-lisp:cons "LanguageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-description-preset common-lisp:nil
                       ((language-description :initarg :language-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %caption-description-preset-language-description
                         :initform common-lisp:nil)
                        (language-code :initarg :language-code :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor %caption-description-preset-language-code
                         :initform common-lisp:nil)
                        (destination-settings :initarg :destination-settings
                         :type
                         (common-lisp:or caption-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-description-preset-destination-settings
                         :initform common-lisp:nil)
                        (custom-language-code :initarg :custom-language-code
                         :type
                         (common-lisp:or |__stringPatternAZaZ23AZaZ|
                                         common-lisp:null)
                         :accessor
                         %caption-description-preset-custom-language-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'caption-description-preset
                    'make-caption-description-preset))
 (common-lisp:defun make-caption-description-preset
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language-description language-code
                     destination-settings custom-language-code)
   (common-lisp:apply #'common-lisp:make-instance 'caption-description-preset
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-description-preset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-description-preset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-language-code))
      (common-lisp:list
       (common-lisp:cons "CustomLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-settings))
      (common-lisp:list
       (common-lisp:cons "DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-description))
      (common-lisp:list
       (common-lisp:cons "LanguageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-description-preset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-destination-settings common-lisp:nil
                       ((webvtt-destination-settings :initarg
                         :webvtt-destination-settings :type
                         (common-lisp:or webvtt-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-webvtt-destination-settings
                         :initform common-lisp:nil)
                        (ttml-destination-settings :initarg
                         :ttml-destination-settings :type
                         (common-lisp:or ttml-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-ttml-destination-settings
                         :initform common-lisp:nil)
                        (teletext-destination-settings :initarg
                         :teletext-destination-settings :type
                         (common-lisp:or teletext-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-teletext-destination-settings
                         :initform common-lisp:nil)
                        (srt-destination-settings :initarg
                         :srt-destination-settings :type
                         (common-lisp:or srt-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-srt-destination-settings
                         :initform common-lisp:nil)
                        (scc-destination-settings :initarg
                         :scc-destination-settings :type
                         (common-lisp:or scc-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-scc-destination-settings
                         :initform common-lisp:nil)
                        (imsc-destination-settings :initarg
                         :imsc-destination-settings :type
                         (common-lisp:or imsc-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-imsc-destination-settings
                         :initform common-lisp:nil)
                        (embedded-destination-settings :initarg
                         :embedded-destination-settings :type
                         (common-lisp:or embedded-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-embedded-destination-settings
                         :initform common-lisp:nil)
                        (dvb-sub-destination-settings :initarg
                         :dvb-sub-destination-settings :type
                         (common-lisp:or dvb-sub-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-dvb-sub-destination-settings
                         :initform common-lisp:nil)
                        (destination-type :initarg :destination-type :type
                         (common-lisp:or caption-destination-type
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-destination-type
                         :initform common-lisp:nil)
                        (burnin-destination-settings :initarg
                         :burnin-destination-settings :type
                         (common-lisp:or burnin-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-burnin-destination-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'caption-destination-settings
                    'make-caption-destination-settings))
 (common-lisp:defun make-caption-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key webvtt-destination-settings
                     ttml-destination-settings teletext-destination-settings
                     srt-destination-settings scc-destination-settings
                     imsc-destination-settings embedded-destination-settings
                     dvb-sub-destination-settings destination-type
                     burnin-destination-settings)
   (common-lisp:apply #'common-lisp:make-instance 'caption-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'burnin-destination-settings))
      (common-lisp:list
       (common-lisp:cons "BurninDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dvb-sub-destination-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSubDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-destination-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imsc-destination-settings))
      (common-lisp:list
       (common-lisp:cons "ImscDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scc-destination-settings))
      (common-lisp:list
       (common-lisp:cons "SccDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'srt-destination-settings))
      (common-lisp:list
       (common-lisp:cons "SrtDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-destination-settings))
      (common-lisp:list
       (common-lisp:cons "TeletextDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ttml-destination-settings))
      (common-lisp:list
       (common-lisp:cons "TtmlDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'webvtt-destination-settings))
      (common-lisp:list
       (common-lisp:cons "WebvttDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   common-lisp:nil))
(common-lisp:deftype caption-destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass caption-selector common-lisp:nil
                       ((source-settings :initarg :source-settings :type
                         (common-lisp:or caption-source-settings
                                         common-lisp:null)
                         :accessor %caption-selector-source-settings :initform
                         common-lisp:nil)
                        (language-code :initarg :language-code :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor %caption-selector-language-code :initform
                         common-lisp:nil)
                        (custom-language-code :initarg :custom-language-code
                         :type
                         (common-lisp:or |__stringMin3Max3PatternAZaZ3|
                                         common-lisp:null)
                         :accessor %caption-selector-custom-language-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'caption-selector 'make-caption-selector))
 (common-lisp:defun make-caption-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-settings language-code
                     custom-language-code)
   (common-lisp:apply #'common-lisp:make-instance 'caption-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-language-code))
      (common-lisp:list
       (common-lisp:cons "CustomLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-settings))
      (common-lisp:list
       (common-lisp:cons "SourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-selector))
   common-lisp:nil))
(common-lisp:deftype caption-source-convert-paint-on-to-pop-on ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass caption-source-framerate common-lisp:nil
                       ((framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1Max60000|
                                         common-lisp:null)
                         :accessor
                         %caption-source-framerate-framerate-numerator
                         :initform common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max1001|
                                         common-lisp:null)
                         :accessor
                         %caption-source-framerate-framerate-denominator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'caption-source-framerate 'make-caption-source-framerate))
 (common-lisp:defun make-caption-source-framerate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key framerate-numerator
                     framerate-denominator)
   (common-lisp:apply #'common-lisp:make-instance 'caption-source-framerate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-source-framerate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-source-framerate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-source-framerate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-source-settings common-lisp:nil
                       ((webvtt-hls-source-settings :initarg
                         :webvtt-hls-source-settings :type
                         (common-lisp:or webvtt-hls-source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-source-settings-webvtt-hls-source-settings
                         :initform common-lisp:nil)
                        (track-source-settings :initarg :track-source-settings
                         :type
                         (common-lisp:or track-source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-source-settings-track-source-settings
                         :initform common-lisp:nil)
                        (teletext-source-settings :initarg
                         :teletext-source-settings :type
                         (common-lisp:or teletext-source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-source-settings-teletext-source-settings
                         :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or caption-source-type common-lisp:null)
                         :accessor %caption-source-settings-source-type
                         :initform common-lisp:nil)
                        (file-source-settings :initarg :file-source-settings
                         :type
                         (common-lisp:or file-source-settings common-lisp:null)
                         :accessor
                         %caption-source-settings-file-source-settings
                         :initform common-lisp:nil)
                        (embedded-source-settings :initarg
                         :embedded-source-settings :type
                         (common-lisp:or embedded-source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-source-settings-embedded-source-settings
                         :initform common-lisp:nil)
                        (dvb-sub-source-settings :initarg
                         :dvb-sub-source-settings :type
                         (common-lisp:or dvb-sub-source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-source-settings-dvb-sub-source-settings
                         :initform common-lisp:nil)
                        (ancillary-source-settings :initarg
                         :ancillary-source-settings :type
                         (common-lisp:or ancillary-source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-source-settings-ancillary-source-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'caption-source-settings 'make-caption-source-settings))
 (common-lisp:defun make-caption-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key webvtt-hls-source-settings
                     track-source-settings teletext-source-settings source-type
                     file-source-settings embedded-source-settings
                     dvb-sub-source-settings ancillary-source-settings)
   (common-lisp:apply #'common-lisp:make-instance 'caption-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ancillary-source-settings))
      (common-lisp:list
       (common-lisp:cons "AncillarySourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dvb-sub-source-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSubSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-source-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-source-settings))
      (common-lisp:list
       (common-lisp:cons "FileSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-source-settings))
      (common-lisp:list
       (common-lisp:cons "TeletextSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'track-source-settings))
      (common-lisp:list
       (common-lisp:cons "TrackSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'webvtt-hls-source-settings))
      (common-lisp:list
       (common-lisp:cons "WebvttHlsSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-source-settings))
   common-lisp:nil))
(common-lisp:deftype caption-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass channel-mapping common-lisp:nil
                       ((output-channels :initarg :output-channels :type
                         (common-lisp:or |__listOfOutputChannelMapping|
                                         common-lisp:null)
                         :accessor %channel-mapping-output-channels :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'channel-mapping 'make-channel-mapping))
 (common-lisp:defun make-channel-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-channels)
   (common-lisp:apply #'common-lisp:make-instance 'channel-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-channels))
      (common-lisp:list
       (common-lisp:cons "OutputChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clip-limits common-lisp:nil
                       ((minimum-yuv :initarg :minimum-yuv :type
                         (common-lisp:or |__integerMin0Max128|
                                         common-lisp:null)
                         :accessor %clip-limits-minimum-yuv :initform
                         common-lisp:nil)
                        (minimum-rgbtolerance :initarg :minimum-rgbtolerance
                         :type
                         (common-lisp:or |__integerMinNegative5Max10|
                                         common-lisp:null)
                         :accessor %clip-limits-minimum-rgbtolerance :initform
                         common-lisp:nil)
                        (maximum-yuv :initarg :maximum-yuv :type
                         (common-lisp:or |__integerMin920Max1023|
                                         common-lisp:null)
                         :accessor %clip-limits-maximum-yuv :initform
                         common-lisp:nil)
                        (maximum-rgbtolerance :initarg :maximum-rgbtolerance
                         :type
                         (common-lisp:or |__integerMin90Max105|
                                         common-lisp:null)
                         :accessor %clip-limits-maximum-rgbtolerance :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'clip-limits 'make-clip-limits))
 (common-lisp:defun make-clip-limits
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minimum-yuv minimum-rgbtolerance
                     maximum-yuv maximum-rgbtolerance)
   (common-lisp:apply #'common-lisp:make-instance 'clip-limits
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input clip-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input clip-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-rgbtolerance))
      (common-lisp:list
       (common-lisp:cons "MaximumRGBTolerance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-yuv))
      (common-lisp:list
       (common-lisp:cons "MaximumYUV"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-rgbtolerance))
      (common-lisp:list
       (common-lisp:cons "MinimumRGBTolerance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-yuv))
      (common-lisp:list
       (common-lisp:cons "MinimumYUV"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input clip-limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cmaf-additional-manifest common-lisp:nil
                       ((selected-outputs :initarg :selected-outputs :type
                         (common-lisp:or |__listOf__stringMin1|
                                         common-lisp:null)
                         :accessor %cmaf-additional-manifest-selected-outputs
                         :initform common-lisp:nil)
                        (manifest-name-modifier :initarg
                         :manifest-name-modifier :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         %cmaf-additional-manifest-manifest-name-modifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cmaf-additional-manifest 'make-cmaf-additional-manifest))
 (common-lisp:defun make-cmaf-additional-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selected-outputs manifest-name-modifier)
   (common-lisp:apply #'common-lisp:make-instance 'cmaf-additional-manifest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cmaf-additional-manifest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cmaf-additional-manifest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-name-modifier))
      (common-lisp:list
       (common-lisp:cons "ManifestNameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-outputs))
      (common-lisp:list
       (common-lisp:cons "SelectedOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cmaf-additional-manifest))
   common-lisp:nil))
(common-lisp:deftype cmaf-client-cache () 'common-lisp:string)
(common-lisp:deftype cmaf-codec-specification () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cmaf-encryption-settings common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or cmaf-key-provider-type
                                         common-lisp:null)
                         :accessor %cmaf-encryption-settings-type :initform
                         common-lisp:nil)
                        (static-key-provider :initarg :static-key-provider
                         :type
                         (common-lisp:or static-key-provider common-lisp:null)
                         :accessor
                         %cmaf-encryption-settings-static-key-provider
                         :initform common-lisp:nil)
                        (speke-key-provider :initarg :speke-key-provider :type
                         (common-lisp:or speke-key-provider-cmaf
                                         common-lisp:null)
                         :accessor %cmaf-encryption-settings-speke-key-provider
                         :initform common-lisp:nil)
                        (initialization-vector-in-manifest :initarg
                         :initialization-vector-in-manifest :type
                         (common-lisp:or cmaf-initialization-vector-in-manifest
                                         common-lisp:null)
                         :accessor
                         %cmaf-encryption-settings-initialization-vector-in-manifest
                         :initform common-lisp:nil)
                        (encryption-method :initarg :encryption-method :type
                         (common-lisp:or cmaf-encryption-type common-lisp:null)
                         :accessor %cmaf-encryption-settings-encryption-method
                         :initform common-lisp:nil)
                        (constant-initialization-vector :initarg
                         :constant-initialization-vector :type
                         (common-lisp:or |__stringMin32Max32Pattern09aFAF32|
                                         common-lisp:null)
                         :accessor
                         %cmaf-encryption-settings-constant-initialization-vector
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cmaf-encryption-settings 'make-cmaf-encryption-settings))
 (common-lisp:defun make-cmaf-encryption-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type static-key-provider
                     speke-key-provider initialization-vector-in-manifest
                     encryption-method constant-initialization-vector)
   (common-lisp:apply #'common-lisp:make-instance 'cmaf-encryption-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cmaf-encryption-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cmaf-encryption-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constant-initialization-vector))
      (common-lisp:list
       (common-lisp:cons "ConstantInitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-method))
      (common-lisp:list
       (common-lisp:cons "EncryptionMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-vector-in-manifest))
      (common-lisp:list
       (common-lisp:cons "InitializationVectorInManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speke-key-provider))
      (common-lisp:list
       (common-lisp:cons "SpekeKeyProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-key-provider))
      (common-lisp:list
       (common-lisp:cons "StaticKeyProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cmaf-encryption-settings))
   common-lisp:nil))
(common-lisp:deftype cmaf-encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cmaf-group-settings common-lisp:nil
                       ((write-segment-timeline-in-representation :initarg
                         :write-segment-timeline-in-representation :type
                         (common-lisp:or
                          cmaf-write-segment-timeline-in-representation
                          common-lisp:null)
                         :accessor
                         %cmaf-group-settings-write-segment-timeline-in-representation
                         :initform common-lisp:nil)
                        (write-hls-manifest :initarg :write-hls-manifest :type
                         (common-lisp:or cmaf-write-hlsmanifest
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-write-hls-manifest
                         :initform common-lisp:nil)
                        (write-dash-manifest :initarg :write-dash-manifest
                         :type
                         (common-lisp:or cmaf-write-dashmanifest
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-write-dash-manifest
                         :initform common-lisp:nil)
                        (video-composition-offsets :initarg
                         :video-composition-offsets :type
                         (common-lisp:or cmaf-video-composition-offsets
                                         common-lisp:null)
                         :accessor
                         %cmaf-group-settings-video-composition-offsets
                         :initform common-lisp:nil)
                        (target-duration-compatibility-mode :initarg
                         :target-duration-compatibility-mode :type
                         (common-lisp:or
                          cmaf-target-duration-compatibility-mode
                          common-lisp:null)
                         :accessor
                         %cmaf-group-settings-target-duration-compatibility-mode
                         :initform common-lisp:nil)
                        (stream-inf-resolution :initarg :stream-inf-resolution
                         :type
                         (common-lisp:or cmaf-stream-inf-resolution
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-stream-inf-resolution
                         :initform common-lisp:nil)
                        (segment-length-control :initarg
                         :segment-length-control :type
                         (common-lisp:or cmaf-segment-length-control
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-segment-length-control
                         :initform common-lisp:nil)
                        (segment-length :initarg :segment-length :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-segment-length
                         :initform common-lisp:nil)
                        (segment-control :initarg :segment-control :type
                         (common-lisp:or cmaf-segment-control common-lisp:null)
                         :accessor %cmaf-group-settings-segment-control
                         :initform common-lisp:nil)
                        (pts-offset-handling-for-bframes :initarg
                         :pts-offset-handling-for-bframes :type
                         (common-lisp:or cmaf-pts-offset-handling-for-bframes
                                         common-lisp:null)
                         :accessor
                         %cmaf-group-settings-pts-offset-handling-for-bframes
                         :initform common-lisp:nil)
                        (mpd-profile :initarg :mpd-profile :type
                         (common-lisp:or cmaf-mpd-profile common-lisp:null)
                         :accessor %cmaf-group-settings-mpd-profile :initform
                         common-lisp:nil)
                        (mpd-manifest-bandwidth-type :initarg
                         :mpd-manifest-bandwidth-type :type
                         (common-lisp:or cmaf-mpd-manifest-bandwidth-type
                                         common-lisp:null)
                         :accessor
                         %cmaf-group-settings-mpd-manifest-bandwidth-type
                         :initform common-lisp:nil)
                        (min-final-segment-length :initarg
                         :min-final-segment-length :type
                         (common-lisp:or |__doubleMin0Max2147483647|
                                         common-lisp:null)
                         :accessor
                         %cmaf-group-settings-min-final-segment-length
                         :initform common-lisp:nil)
                        (min-buffer-time :initarg :min-buffer-time :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-min-buffer-time
                         :initform common-lisp:nil)
                        (manifest-duration-format :initarg
                         :manifest-duration-format :type
                         (common-lisp:or cmaf-manifest-duration-format
                                         common-lisp:null)
                         :accessor
                         %cmaf-group-settings-manifest-duration-format
                         :initform common-lisp:nil)
                        (manifest-compression :initarg :manifest-compression
                         :type
                         (common-lisp:or cmaf-manifest-compression
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-manifest-compression
                         :initform common-lisp:nil)
                        (image-based-trick-play-settings :initarg
                         :image-based-trick-play-settings :type
                         (common-lisp:or cmaf-image-based-trick-play-settings
                                         common-lisp:null)
                         :accessor
                         %cmaf-group-settings-image-based-trick-play-settings
                         :initform common-lisp:nil)
                        (image-based-trick-play :initarg
                         :image-based-trick-play :type
                         (common-lisp:or cmaf-image-based-trick-play
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-image-based-trick-play
                         :initform common-lisp:nil)
                        (fragment-length :initarg :fragment-length :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-fragment-length
                         :initform common-lisp:nil)
                        (encryption :initarg :encryption :type
                         (common-lisp:or cmaf-encryption-settings
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-encryption :initform
                         common-lisp:nil)
                        (destination-settings :initarg :destination-settings
                         :type
                         (common-lisp:or destination-settings common-lisp:null)
                         :accessor %cmaf-group-settings-destination-settings
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or |__stringPatternS3| common-lisp:null)
                         :accessor %cmaf-group-settings-destination :initform
                         common-lisp:nil)
                        (dash-manifest-style :initarg :dash-manifest-style
                         :type
                         (common-lisp:or dash-manifest-style common-lisp:null)
                         :accessor %cmaf-group-settings-dash-manifest-style
                         :initform common-lisp:nil)
                        (codec-specification :initarg :codec-specification
                         :type
                         (common-lisp:or cmaf-codec-specification
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-codec-specification
                         :initform common-lisp:nil)
                        (client-cache :initarg :client-cache :type
                         (common-lisp:or cmaf-client-cache common-lisp:null)
                         :accessor %cmaf-group-settings-client-cache :initform
                         common-lisp:nil)
                        (base-url :initarg :base-url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cmaf-group-settings-base-url :initform
                         common-lisp:nil)
                        (additional-manifests :initarg :additional-manifests
                         :type
                         (common-lisp:or |__listOfCmafAdditionalManifest|
                                         common-lisp:null)
                         :accessor %cmaf-group-settings-additional-manifests
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cmaf-group-settings 'make-cmaf-group-settings))
 (common-lisp:defun make-cmaf-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key write-segment-timeline-in-representation
                     write-hls-manifest write-dash-manifest
                     video-composition-offsets
                     target-duration-compatibility-mode stream-inf-resolution
                     segment-length-control segment-length segment-control
                     pts-offset-handling-for-bframes mpd-profile
                     mpd-manifest-bandwidth-type min-final-segment-length
                     min-buffer-time manifest-duration-format
                     manifest-compression image-based-trick-play-settings
                     image-based-trick-play fragment-length encryption
                     destination-settings destination dash-manifest-style
                     codec-specification client-cache base-url
                     additional-manifests)
   (common-lisp:apply #'common-lisp:make-instance 'cmaf-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cmaf-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cmaf-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-manifests))
      (common-lisp:list
       (common-lisp:cons "AdditionalManifests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url))
      (common-lisp:list
       (common-lisp:cons "BaseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-cache))
      (common-lisp:list
       (common-lisp:cons "ClientCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-specification))
      (common-lisp:list
       (common-lisp:cons "CodecSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dash-manifest-style))
      (common-lisp:list
       (common-lisp:cons "DashManifestStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-settings))
      (common-lisp:list
       (common-lisp:cons "DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-length))
      (common-lisp:list
       (common-lisp:cons "FragmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-based-trick-play))
      (common-lisp:list
       (common-lisp:cons "ImageBasedTrickPlay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-based-trick-play-settings))
      (common-lisp:list
       (common-lisp:cons "ImageBasedTrickPlaySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-compression))
      (common-lisp:list
       (common-lisp:cons "ManifestCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-duration-format))
      (common-lisp:list
       (common-lisp:cons "ManifestDurationFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-buffer-time))
      (common-lisp:list
       (common-lisp:cons "MinBufferTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-final-segment-length))
      (common-lisp:list
       (common-lisp:cons "MinFinalSegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mpd-manifest-bandwidth-type))
      (common-lisp:list
       (common-lisp:cons "MpdManifestBandwidthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mpd-profile))
      (common-lisp:list
       (common-lisp:cons "MpdProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pts-offset-handling-for-bframes))
      (common-lisp:list
       (common-lisp:cons "PtsOffsetHandlingForBFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-control))
      (common-lisp:list
       (common-lisp:cons "SegmentControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-length))
      (common-lisp:list
       (common-lisp:cons "SegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-length-control))
      (common-lisp:list
       (common-lisp:cons "SegmentLengthControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-inf-resolution))
      (common-lisp:list
       (common-lisp:cons "StreamInfResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-duration-compatibility-mode))
      (common-lisp:list
       (common-lisp:cons "TargetDurationCompatibilityMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-composition-offsets))
      (common-lisp:list
       (common-lisp:cons "VideoCompositionOffsets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-dash-manifest))
      (common-lisp:list
       (common-lisp:cons "WriteDashManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-hls-manifest))
      (common-lisp:list
       (common-lisp:cons "WriteHlsManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-segment-timeline-in-representation))
      (common-lisp:list
       (common-lisp:cons "WriteSegmentTimelineInRepresentation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cmaf-group-settings))
   common-lisp:nil))
(common-lisp:deftype cmaf-image-based-trick-play () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cmaf-image-based-trick-play-settings common-lisp:nil
                       ((tile-width :initarg :tile-width :type
                         (common-lisp:or |__integerMin1Max512|
                                         common-lisp:null)
                         :accessor
                         %cmaf-image-based-trick-play-settings-tile-width
                         :initform common-lisp:nil)
                        (tile-height :initarg :tile-height :type
                         (common-lisp:or |__integerMin1Max2048|
                                         common-lisp:null)
                         :accessor
                         %cmaf-image-based-trick-play-settings-tile-height
                         :initform common-lisp:nil)
                        (thumbnail-width :initarg :thumbnail-width :type
                         (common-lisp:or |__integerMin8Max4096|
                                         common-lisp:null)
                         :accessor
                         %cmaf-image-based-trick-play-settings-thumbnail-width
                         :initform common-lisp:nil)
                        (thumbnail-interval :initarg :thumbnail-interval :type
                         (common-lisp:or |__doubleMin0Max2147483647|
                                         common-lisp:null)
                         :accessor
                         %cmaf-image-based-trick-play-settings-thumbnail-interval
                         :initform common-lisp:nil)
                        (thumbnail-height :initarg :thumbnail-height :type
                         (common-lisp:or |__integerMin2Max4096|
                                         common-lisp:null)
                         :accessor
                         %cmaf-image-based-trick-play-settings-thumbnail-height
                         :initform common-lisp:nil)
                        (interval-cadence :initarg :interval-cadence :type
                         (common-lisp:or cmaf-interval-cadence
                                         common-lisp:null)
                         :accessor
                         %cmaf-image-based-trick-play-settings-interval-cadence
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cmaf-image-based-trick-play-settings
                    'make-cmaf-image-based-trick-play-settings))
 (common-lisp:defun make-cmaf-image-based-trick-play-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tile-width tile-height thumbnail-width
                     thumbnail-interval thumbnail-height interval-cadence)
   (common-lisp:apply #'common-lisp:make-instance
                      'cmaf-image-based-trick-play-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cmaf-image-based-trick-play-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cmaf-image-based-trick-play-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-cadence))
      (common-lisp:list
       (common-lisp:cons "IntervalCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-height))
      (common-lisp:list
       (common-lisp:cons "ThumbnailHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-interval))
      (common-lisp:list
       (common-lisp:cons "ThumbnailInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-width))
      (common-lisp:list
       (common-lisp:cons "ThumbnailWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-height))
      (common-lisp:list
       (common-lisp:cons "TileHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-width))
      (common-lisp:list
       (common-lisp:cons "TileWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cmaf-image-based-trick-play-settings))
   common-lisp:nil))
(common-lisp:deftype cmaf-initialization-vector-in-manifest ()
  'common-lisp:string)
(common-lisp:deftype cmaf-interval-cadence () 'common-lisp:string)
(common-lisp:deftype cmaf-key-provider-type () 'common-lisp:string)
(common-lisp:deftype cmaf-manifest-compression () 'common-lisp:string)
(common-lisp:deftype cmaf-manifest-duration-format () 'common-lisp:string)
(common-lisp:deftype cmaf-mpd-manifest-bandwidth-type () 'common-lisp:string)
(common-lisp:deftype cmaf-mpd-profile () 'common-lisp:string)
(common-lisp:deftype cmaf-pts-offset-handling-for-bframes ()
  'common-lisp:string)
(common-lisp:deftype cmaf-segment-control () 'common-lisp:string)
(common-lisp:deftype cmaf-segment-length-control () 'common-lisp:string)
(common-lisp:deftype cmaf-stream-inf-resolution () 'common-lisp:string)
(common-lisp:deftype cmaf-target-duration-compatibility-mode ()
  'common-lisp:string)
(common-lisp:deftype cmaf-video-composition-offsets () 'common-lisp:string)
(common-lisp:deftype cmaf-write-dashmanifest () 'common-lisp:string)
(common-lisp:deftype cmaf-write-hlsmanifest () 'common-lisp:string)
(common-lisp:deftype cmaf-write-segment-timeline-in-representation ()
  'common-lisp:string)
(common-lisp:deftype cmfc-audio-duration () 'common-lisp:string)
(common-lisp:deftype cmfc-audio-track-type () 'common-lisp:string)
(common-lisp:deftype cmfc-descriptive-video-service-flag () 'common-lisp:string)
(common-lisp:deftype cmfc-iframe-only-manifest () 'common-lisp:string)
(common-lisp:deftype cmfc-klv-metadata () 'common-lisp:string)
(common-lisp:deftype cmfc-manifest-metadata-signaling () 'common-lisp:string)
(common-lisp:deftype cmfc-scte35esam () 'common-lisp:string)
(common-lisp:deftype cmfc-scte35source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cmfc-settings common-lisp:nil
                       ((timed-metadata-value :initarg :timed-metadata-value
                         :type
                         (common-lisp:or |__stringMax1000| common-lisp:null)
                         :accessor %cmfc-settings-timed-metadata-value
                         :initform common-lisp:nil)
                        (timed-metadata-scheme-id-uri :initarg
                         :timed-metadata-scheme-id-uri :type
                         (common-lisp:or |__stringMax1000| common-lisp:null)
                         :accessor %cmfc-settings-timed-metadata-scheme-id-uri
                         :initform common-lisp:nil)
                        (timed-metadata-box-version :initarg
                         :timed-metadata-box-version :type
                         (common-lisp:or cmfc-timed-metadata-box-version
                                         common-lisp:null)
                         :accessor %cmfc-settings-timed-metadata-box-version
                         :initform common-lisp:nil)
                        (timed-metadata :initarg :timed-metadata :type
                         (common-lisp:or cmfc-timed-metadata common-lisp:null)
                         :accessor %cmfc-settings-timed-metadata :initform
                         common-lisp:nil)
                        (scte35source :initarg :scte35source :type
                         (common-lisp:or cmfc-scte35source common-lisp:null)
                         :accessor %cmfc-settings-scte35source :initform
                         common-lisp:nil)
                        (scte35esam :initarg :scte35esam :type
                         (common-lisp:or cmfc-scte35esam common-lisp:null)
                         :accessor %cmfc-settings-scte35esam :initform
                         common-lisp:nil)
                        (manifest-metadata-signaling :initarg
                         :manifest-metadata-signaling :type
                         (common-lisp:or cmfc-manifest-metadata-signaling
                                         common-lisp:null)
                         :accessor %cmfc-settings-manifest-metadata-signaling
                         :initform common-lisp:nil)
                        (klv-metadata :initarg :klv-metadata :type
                         (common-lisp:or cmfc-klv-metadata common-lisp:null)
                         :accessor %cmfc-settings-klv-metadata :initform
                         common-lisp:nil)
                        (iframe-only-manifest :initarg :iframe-only-manifest
                         :type
                         (common-lisp:or cmfc-iframe-only-manifest
                                         common-lisp:null)
                         :accessor %cmfc-settings-iframe-only-manifest
                         :initform common-lisp:nil)
                        (descriptive-video-service-flag :initarg
                         :descriptive-video-service-flag :type
                         (common-lisp:or cmfc-descriptive-video-service-flag
                                         common-lisp:null)
                         :accessor
                         %cmfc-settings-descriptive-video-service-flag
                         :initform common-lisp:nil)
                        (audio-track-type :initarg :audio-track-type :type
                         (common-lisp:or cmfc-audio-track-type
                                         common-lisp:null)
                         :accessor %cmfc-settings-audio-track-type :initform
                         common-lisp:nil)
                        (audio-rendition-sets :initarg :audio-rendition-sets
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %cmfc-settings-audio-rendition-sets
                         :initform common-lisp:nil)
                        (audio-group-id :initarg :audio-group-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cmfc-settings-audio-group-id :initform
                         common-lisp:nil)
                        (audio-duration :initarg :audio-duration :type
                         (common-lisp:or cmfc-audio-duration common-lisp:null)
                         :accessor %cmfc-settings-audio-duration :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cmfc-settings 'make-cmfc-settings))
 (common-lisp:defun make-cmfc-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timed-metadata-value
                     timed-metadata-scheme-id-uri timed-metadata-box-version
                     timed-metadata scte35source scte35esam
                     manifest-metadata-signaling klv-metadata
                     iframe-only-manifest descriptive-video-service-flag
                     audio-track-type audio-rendition-sets audio-group-id
                     audio-duration)
   (common-lisp:apply #'common-lisp:make-instance 'cmfc-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cmfc-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cmfc-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-duration))
      (common-lisp:list
       (common-lisp:cons "AudioDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-group-id))
      (common-lisp:list
       (common-lisp:cons "AudioGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-rendition-sets))
      (common-lisp:list
       (common-lisp:cons "AudioRenditionSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-track-type))
      (common-lisp:list
       (common-lisp:cons "AudioTrackType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'descriptive-video-service-flag))
      (common-lisp:list
       (common-lisp:cons "DescriptiveVideoServiceFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iframe-only-manifest))
      (common-lisp:list
       (common-lisp:cons "IFrameOnlyManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-metadata))
      (common-lisp:list
       (common-lisp:cons "KlvMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-metadata-signaling))
      (common-lisp:list
       (common-lisp:cons "ManifestMetadataSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35esam))
      (common-lisp:list
       (common-lisp:cons "Scte35Esam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35source))
      (common-lisp:list
       (common-lisp:cons "Scte35Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata))
      (common-lisp:list
       (common-lisp:cons "TimedMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-box-version))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBoxVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-scheme-id-uri))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataSchemeIdUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-value))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cmfc-settings))
   common-lisp:nil))
(common-lisp:deftype cmfc-timed-metadata () 'common-lisp:string)
(common-lisp:deftype cmfc-timed-metadata-box-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass color-corrector common-lisp:nil
                       ((sdr-reference-white-level :initarg
                         :sdr-reference-white-level :type
                         (common-lisp:or |__integerMin100Max1000|
                                         common-lisp:null)
                         :accessor %color-corrector-sdr-reference-white-level
                         :initform common-lisp:nil)
                        (saturation :initarg :saturation :type
                         (common-lisp:or |__integerMin1Max100|
                                         common-lisp:null)
                         :accessor %color-corrector-saturation :initform
                         common-lisp:nil)
                        (sample-range-conversion :initarg
                         :sample-range-conversion :type
                         (common-lisp:or sample-range-conversion
                                         common-lisp:null)
                         :accessor %color-corrector-sample-range-conversion
                         :initform common-lisp:nil)
                        (hue :initarg :hue :type
                         (common-lisp:or |__integerMinNegative180Max180|
                                         common-lisp:null)
                         :accessor %color-corrector-hue :initform
                         common-lisp:nil)
                        (hdr-to-sdr-tone-mapper :initarg
                         :hdr-to-sdr-tone-mapper :type
                         (common-lisp:or hdrto-sdrtone-mapper common-lisp:null)
                         :accessor %color-corrector-hdr-to-sdr-tone-mapper
                         :initform common-lisp:nil)
                        (hdr10metadata :initarg :hdr10metadata :type
                         (common-lisp:or hdr10metadata common-lisp:null)
                         :accessor %color-corrector-hdr10metadata :initform
                         common-lisp:nil)
                        (contrast :initarg :contrast :type
                         (common-lisp:or |__integerMin1Max100|
                                         common-lisp:null)
                         :accessor %color-corrector-contrast :initform
                         common-lisp:nil)
                        (color-space-conversion :initarg
                         :color-space-conversion :type
                         (common-lisp:or color-space-conversion
                                         common-lisp:null)
                         :accessor %color-corrector-color-space-conversion
                         :initform common-lisp:nil)
                        (clip-limits :initarg :clip-limits :type
                         (common-lisp:or clip-limits common-lisp:null)
                         :accessor %color-corrector-clip-limits :initform
                         common-lisp:nil)
                        (brightness :initarg :brightness :type
                         (common-lisp:or |__integerMin1Max100|
                                         common-lisp:null)
                         :accessor %color-corrector-brightness :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'color-corrector 'make-color-corrector))
 (common-lisp:defun make-color-corrector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sdr-reference-white-level saturation
                     sample-range-conversion hue hdr-to-sdr-tone-mapper
                     hdr10metadata contrast color-space-conversion clip-limits
                     brightness)
   (common-lisp:apply #'common-lisp:make-instance 'color-corrector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input color-corrector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input color-corrector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'brightness))
      (common-lisp:list
       (common-lisp:cons "Brightness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clip-limits))
      (common-lisp:list
       (common-lisp:cons "ClipLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-conversion))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceConversion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contrast))
      (common-lisp:list
       (common-lisp:cons "Contrast"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hdr10metadata))
      (common-lisp:list
       (common-lisp:cons "Hdr10Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hdr-to-sdr-tone-mapper))
      (common-lisp:list
       (common-lisp:cons "HdrToSdrToneMapper"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hue))
      (common-lisp:list
       (common-lisp:cons "Hue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-range-conversion))
      (common-lisp:list
       (common-lisp:cons "SampleRangeConversion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saturation))
      (common-lisp:list
       (common-lisp:cons "Saturation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sdr-reference-white-level))
      (common-lisp:list
       (common-lisp:cons "SdrReferenceWhiteLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input color-corrector))
   common-lisp:nil))
(common-lisp:deftype color-metadata () 'common-lisp:string)
(common-lisp:deftype color-space () 'common-lisp:string)
(common-lisp:deftype color-space-conversion () 'common-lisp:string)
(common-lisp:deftype color-space-usage () 'common-lisp:string)
(common-lisp:deftype commitment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (mediaconvert-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass container-settings common-lisp:nil
                       ((mxf-settings :initarg :mxf-settings :type
                         (common-lisp:or mxf-settings common-lisp:null)
                         :accessor %container-settings-mxf-settings :initform
                         common-lisp:nil)
                        (mpd-settings :initarg :mpd-settings :type
                         (common-lisp:or mpd-settings common-lisp:null)
                         :accessor %container-settings-mpd-settings :initform
                         common-lisp:nil)
                        (mp4settings :initarg :mp4settings :type
                         (common-lisp:or mp4settings common-lisp:null)
                         :accessor %container-settings-mp4settings :initform
                         common-lisp:nil)
                        (mov-settings :initarg :mov-settings :type
                         (common-lisp:or mov-settings common-lisp:null)
                         :accessor %container-settings-mov-settings :initform
                         common-lisp:nil)
                        (m3u8settings :initarg :m3u8settings :type
                         (common-lisp:or m3u8settings common-lisp:null)
                         :accessor %container-settings-m3u8settings :initform
                         common-lisp:nil)
                        (m2ts-settings :initarg :m2ts-settings :type
                         (common-lisp:or m2ts-settings common-lisp:null)
                         :accessor %container-settings-m2ts-settings :initform
                         common-lisp:nil)
                        (f4v-settings :initarg :f4v-settings :type
                         (common-lisp:or f4v-settings common-lisp:null)
                         :accessor %container-settings-f4v-settings :initform
                         common-lisp:nil)
                        (container :initarg :container :type
                         (common-lisp:or container-type common-lisp:null)
                         :accessor %container-settings-container :initform
                         common-lisp:nil)
                        (cmfc-settings :initarg :cmfc-settings :type
                         (common-lisp:or cmfc-settings common-lisp:null)
                         :accessor %container-settings-cmfc-settings :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'container-settings 'make-container-settings))
 (common-lisp:defun make-container-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mxf-settings mpd-settings mp4settings
                     mov-settings m3u8settings m2ts-settings f4v-settings
                     container cmfc-settings)
   (common-lisp:apply #'common-lisp:make-instance 'container-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cmfc-settings))
      (common-lisp:list
       (common-lisp:cons "CmfcSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container))
      (common-lisp:list
       (common-lisp:cons "Container"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'f4v-settings))
      (common-lisp:list
       (common-lisp:cons "F4vSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm2ts-settings))
      (common-lisp:list
       (common-lisp:cons "M2tsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm3u8settings))
      (common-lisp:list
       (common-lisp:cons "M3u8Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mov-settings))
      (common-lisp:list
       (common-lisp:cons "MovSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mp4settings))
      (common-lisp:list
       (common-lisp:cons "Mp4Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mpd-settings))
      (common-lisp:list
       (common-lisp:cons "MpdSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mxf-settings))
      (common-lisp:list
       (common-lisp:cons "MxfSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-settings))
   common-lisp:nil))
(common-lisp:deftype container-type () 'common-lisp:string)
(common-lisp:deftype copy-protection-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-job-request common-lisp:nil
                       ((user-metadata :initarg :user-metadata :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %create-job-request-user-metadata :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %create-job-request-tags :initform
                         common-lisp:nil)
                        (status-update-interval :initarg
                         :status-update-interval :type
                         (common-lisp:or status-update-interval
                                         common-lisp:null)
                         :accessor %create-job-request-status-update-interval
                         :initform common-lisp:nil)
                        (simulate-reserved-queue :initarg
                         :simulate-reserved-queue :type
                         (common-lisp:or simulate-reserved-queue
                                         common-lisp:null)
                         :accessor %create-job-request-simulate-reserved-queue
                         :initform common-lisp:nil)
                        (settings :initarg :settings :type
                         (common-lisp:or job-settings common-lisp:null)
                         :accessor %create-job-request-settings :initform
                         (common-lisp:error ":settings is required"))
                        (role :initarg :role :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-job-request-role :initform
                         (common-lisp:error ":role is required"))
                        (queue :initarg :queue :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-job-request-queue :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or |__integerMinNegative50Max50|
                                         common-lisp:null)
                         :accessor %create-job-request-priority :initform
                         common-lisp:nil)
                        (job-template :initarg :job-template :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-job-request-job-template :initform
                         common-lisp:nil)
                        (hop-destinations :initarg :hop-destinations :type
                         (common-lisp:or |__listOfHopDestination|
                                         common-lisp:null)
                         :accessor %create-job-request-hop-destinations
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %create-job-request-client-request-token
                         :initform common-lisp:nil)
                        (billing-tags-source :initarg :billing-tags-source
                         :type
                         (common-lisp:or billing-tags-source common-lisp:null)
                         :accessor %create-job-request-billing-tags-source
                         :initform common-lisp:nil)
                        (acceleration-settings :initarg :acceleration-settings
                         :type
                         (common-lisp:or acceleration-settings
                                         common-lisp:null)
                         :accessor %create-job-request-acceleration-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defun make-create-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-metadata tags status-update-interval
                     simulate-reserved-queue settings role queue priority
                     job-template hop-destinations client-request-token
                     billing-tags-source acceleration-settings)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acceleration-settings))
      (common-lisp:list
       (common-lisp:cons "AccelerationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-tags-source))
      (common-lisp:list
       (common-lisp:cons "BillingTagsSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hop-destinations))
      (common-lisp:list
       (common-lisp:cons "HopDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template))
      (common-lisp:list
       (common-lisp:cons "JobTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulate-reserved-queue))
      (common-lisp:list
       (common-lisp:cons "SimulateReservedQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-update-interval))
      (common-lisp:list
       (common-lisp:cons "StatusUpdateInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-metadata))
      (common-lisp:list
       (common-lisp:cons "UserMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-response common-lisp:nil
                       ((job :initarg :job :type
                         (common-lisp:or job common-lisp:null) :accessor
                         %create-job-response-job :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defun make-create-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-template-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %create-job-template-request-tags :initform
                         common-lisp:nil)
                        (status-update-interval :initarg
                         :status-update-interval :type
                         (common-lisp:or status-update-interval
                                         common-lisp:null)
                         :accessor
                         %create-job-template-request-status-update-interval
                         :initform common-lisp:nil)
                        (settings :initarg :settings :type
                         (common-lisp:or job-template-settings
                                         common-lisp:null)
                         :accessor %create-job-template-request-settings
                         :initform (common-lisp:error ":settings is required"))
                        (queue :initarg :queue :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-job-template-request-queue :initform
                         common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or |__integerMinNegative50Max50|
                                         common-lisp:null)
                         :accessor %create-job-template-request-priority
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-job-template-request-name :initform
                         (common-lisp:error ":name is required"))
                        (hop-destinations :initarg :hop-destinations :type
                         (common-lisp:or |__listOfHopDestination|
                                         common-lisp:null)
                         :accessor
                         %create-job-template-request-hop-destinations
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-job-template-request-description :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-job-template-request-category :initform
                         common-lisp:nil)
                        (acceleration-settings :initarg :acceleration-settings
                         :type
                         (common-lisp:or acceleration-settings
                                         common-lisp:null)
                         :accessor
                         %create-job-template-request-acceleration-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-job-template-request
                    'make-create-job-template-request))
 (common-lisp:defun make-create-job-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status-update-interval settings
                     queue priority name hop-destinations description category
                     acceleration-settings)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acceleration-settings))
      (common-lisp:list
       (common-lisp:cons "AccelerationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hop-destinations))
      (common-lisp:list
       (common-lisp:cons "HopDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-update-interval))
      (common-lisp:list
       (common-lisp:cons "StatusUpdateInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-template-response common-lisp:nil
                       ((job-template :initarg :job-template :type
                         (common-lisp:or job-template common-lisp:null)
                         :accessor %create-job-template-response-job-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-job-template-response
                    'make-create-job-template-response))
 (common-lisp:defun make-create-job-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-template)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template))
      (common-lisp:list
       (common-lisp:cons "JobTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-job-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-preset-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %create-preset-request-tags :initform
                         common-lisp:nil)
                        (settings :initarg :settings :type
                         (common-lisp:or preset-settings common-lisp:null)
                         :accessor %create-preset-request-settings :initform
                         (common-lisp:error ":settings is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-preset-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-preset-request-description :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-preset-request-category :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-preset-request 'make-create-preset-request))
 (common-lisp:defun make-create-preset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags settings name description category)
   (common-lisp:apply #'common-lisp:make-instance 'create-preset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-preset-response common-lisp:nil
                       ((preset :initarg :preset :type
                         (common-lisp:or preset common-lisp:null) :accessor
                         %create-preset-response-preset :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-preset-response 'make-create-preset-response))
 (common-lisp:defun make-create-preset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preset)
   (common-lisp:apply #'common-lisp:make-instance 'create-preset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preset))
      (common-lisp:list
       (common-lisp:cons "Preset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-preset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-queue-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %create-queue-request-tags :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or queue-status common-lisp:null)
                         :accessor %create-queue-request-status :initform
                         common-lisp:nil)
                        (reservation-plan-settings :initarg
                         :reservation-plan-settings :type
                         (common-lisp:or reservation-plan-settings
                                         common-lisp:null)
                         :accessor
                         %create-queue-request-reservation-plan-settings
                         :initform common-lisp:nil)
                        (pricing-plan :initarg :pricing-plan :type
                         (common-lisp:or pricing-plan common-lisp:null)
                         :accessor %create-queue-request-pricing-plan :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-queue-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-queue-request-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-queue-request 'make-create-queue-request))
 (common-lisp:defun make-create-queue-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status reservation-plan-settings
                     pricing-plan name description)
   (common-lisp:apply #'common-lisp:make-instance 'create-queue-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-queue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-queue-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reservation-plan-settings))
      (common-lisp:list
       (common-lisp:cons "ReservationPlanSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-queue-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-queue-response common-lisp:nil
                       ((queue :initarg :queue :type
                         (common-lisp:or queue common-lisp:null) :accessor
                         %create-queue-response-queue :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-queue-response 'make-create-queue-response))
 (common-lisp:defun make-create-queue-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queue)
   (common-lisp:apply #'common-lisp:make-instance 'create-queue-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-queue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-queue-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-queue-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dash-additional-manifest common-lisp:nil
                       ((selected-outputs :initarg :selected-outputs :type
                         (common-lisp:or |__listOf__stringMin1|
                                         common-lisp:null)
                         :accessor %dash-additional-manifest-selected-outputs
                         :initform common-lisp:nil)
                        (manifest-name-modifier :initarg
                         :manifest-name-modifier :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         %dash-additional-manifest-manifest-name-modifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dash-additional-manifest 'make-dash-additional-manifest))
 (common-lisp:defun make-dash-additional-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selected-outputs manifest-name-modifier)
   (common-lisp:apply #'common-lisp:make-instance 'dash-additional-manifest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dash-additional-manifest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dash-additional-manifest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-name-modifier))
      (common-lisp:list
       (common-lisp:cons "ManifestNameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-outputs))
      (common-lisp:list
       (common-lisp:cons "SelectedOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dash-additional-manifest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dash-iso-encryption-settings common-lisp:nil
                       ((speke-key-provider :initarg :speke-key-provider :type
                         (common-lisp:or speke-key-provider common-lisp:null)
                         :accessor
                         %dash-iso-encryption-settings-speke-key-provider
                         :initform common-lisp:nil)
                        (playback-device-compatibility :initarg
                         :playback-device-compatibility :type
                         (common-lisp:or dash-iso-playback-device-compatibility
                                         common-lisp:null)
                         :accessor
                         %dash-iso-encryption-settings-playback-device-compatibility
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dash-iso-encryption-settings
                    'make-dash-iso-encryption-settings))
 (common-lisp:defun make-dash-iso-encryption-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key speke-key-provider
                     playback-device-compatibility)
   (common-lisp:apply #'common-lisp:make-instance 'dash-iso-encryption-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dash-iso-encryption-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dash-iso-encryption-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'playback-device-compatibility))
      (common-lisp:list
       (common-lisp:cons "PlaybackDeviceCompatibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speke-key-provider))
      (common-lisp:list
       (common-lisp:cons "SpekeKeyProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dash-iso-encryption-settings))
   common-lisp:nil))
(common-lisp:deftype dash-iso-group-audio-channel-config-scheme-id-uri ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dash-iso-group-settings common-lisp:nil
                       ((write-segment-timeline-in-representation :initarg
                         :write-segment-timeline-in-representation :type
                         (common-lisp:or
                          dash-iso-write-segment-timeline-in-representation
                          common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-write-segment-timeline-in-representation
                         :initform common-lisp:nil)
                        (video-composition-offsets :initarg
                         :video-composition-offsets :type
                         (common-lisp:or dash-iso-video-composition-offsets
                                         common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-video-composition-offsets
                         :initform common-lisp:nil)
                        (segment-length-control :initarg
                         :segment-length-control :type
                         (common-lisp:or dash-iso-segment-length-control
                                         common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-segment-length-control
                         :initform common-lisp:nil)
                        (segment-length :initarg :segment-length :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %dash-iso-group-settings-segment-length
                         :initform common-lisp:nil)
                        (segment-control :initarg :segment-control :type
                         (common-lisp:or dash-iso-segment-control
                                         common-lisp:null)
                         :accessor %dash-iso-group-settings-segment-control
                         :initform common-lisp:nil)
                        (pts-offset-handling-for-bframes :initarg
                         :pts-offset-handling-for-bframes :type
                         (common-lisp:or
                          dash-iso-pts-offset-handling-for-bframes
                          common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-pts-offset-handling-for-bframes
                         :initform common-lisp:nil)
                        (mpd-profile :initarg :mpd-profile :type
                         (common-lisp:or dash-iso-mpd-profile common-lisp:null)
                         :accessor %dash-iso-group-settings-mpd-profile
                         :initform common-lisp:nil)
                        (mpd-manifest-bandwidth-type :initarg
                         :mpd-manifest-bandwidth-type :type
                         (common-lisp:or dash-iso-mpd-manifest-bandwidth-type
                                         common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-mpd-manifest-bandwidth-type
                         :initform common-lisp:nil)
                        (min-final-segment-length :initarg
                         :min-final-segment-length :type
                         (common-lisp:or |__doubleMin0Max2147483647|
                                         common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-min-final-segment-length
                         :initform common-lisp:nil)
                        (min-buffer-time :initarg :min-buffer-time :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %dash-iso-group-settings-min-buffer-time
                         :initform common-lisp:nil)
                        (image-based-trick-play-settings :initarg
                         :image-based-trick-play-settings :type
                         (common-lisp:or
                          dash-iso-image-based-trick-play-settings
                          common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-image-based-trick-play-settings
                         :initform common-lisp:nil)
                        (image-based-trick-play :initarg
                         :image-based-trick-play :type
                         (common-lisp:or dash-iso-image-based-trick-play
                                         common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-image-based-trick-play
                         :initform common-lisp:nil)
                        (hbbtv-compliance :initarg :hbbtv-compliance :type
                         (common-lisp:or dash-iso-hbbtv-compliance
                                         common-lisp:null)
                         :accessor %dash-iso-group-settings-hbbtv-compliance
                         :initform common-lisp:nil)
                        (fragment-length :initarg :fragment-length :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %dash-iso-group-settings-fragment-length
                         :initform common-lisp:nil)
                        (encryption :initarg :encryption :type
                         (common-lisp:or dash-iso-encryption-settings
                                         common-lisp:null)
                         :accessor %dash-iso-group-settings-encryption
                         :initform common-lisp:nil)
                        (destination-settings :initarg :destination-settings
                         :type
                         (common-lisp:or destination-settings common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-destination-settings
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or |__stringPatternS3| common-lisp:null)
                         :accessor %dash-iso-group-settings-destination
                         :initform common-lisp:nil)
                        (dash-manifest-style :initarg :dash-manifest-style
                         :type
                         (common-lisp:or dash-manifest-style common-lisp:null)
                         :accessor %dash-iso-group-settings-dash-manifest-style
                         :initform common-lisp:nil)
                        (base-url :initarg :base-url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %dash-iso-group-settings-base-url :initform
                         common-lisp:nil)
                        (audio-channel-config-scheme-id-uri :initarg
                         :audio-channel-config-scheme-id-uri :type
                         (common-lisp:or
                          dash-iso-group-audio-channel-config-scheme-id-uri
                          common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-audio-channel-config-scheme-id-uri
                         :initform common-lisp:nil)
                        (additional-manifests :initarg :additional-manifests
                         :type
                         (common-lisp:or |__listOfDashAdditionalManifest|
                                         common-lisp:null)
                         :accessor
                         %dash-iso-group-settings-additional-manifests
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dash-iso-group-settings 'make-dash-iso-group-settings))
 (common-lisp:defun make-dash-iso-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key write-segment-timeline-in-representation
                     video-composition-offsets segment-length-control
                     segment-length segment-control
                     pts-offset-handling-for-bframes mpd-profile
                     mpd-manifest-bandwidth-type min-final-segment-length
                     min-buffer-time image-based-trick-play-settings
                     image-based-trick-play hbbtv-compliance fragment-length
                     encryption destination-settings destination
                     dash-manifest-style base-url
                     audio-channel-config-scheme-id-uri additional-manifests)
   (common-lisp:apply #'common-lisp:make-instance 'dash-iso-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dash-iso-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dash-iso-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-manifests))
      (common-lisp:list
       (common-lisp:cons "AdditionalManifests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-channel-config-scheme-id-uri))
      (common-lisp:list
       (common-lisp:cons "AudioChannelConfigSchemeIdUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url))
      (common-lisp:list
       (common-lisp:cons "BaseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dash-manifest-style))
      (common-lisp:list
       (common-lisp:cons "DashManifestStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-settings))
      (common-lisp:list
       (common-lisp:cons "DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-length))
      (common-lisp:list
       (common-lisp:cons "FragmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hbbtv-compliance))
      (common-lisp:list
       (common-lisp:cons "HbbtvCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-based-trick-play))
      (common-lisp:list
       (common-lisp:cons "ImageBasedTrickPlay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-based-trick-play-settings))
      (common-lisp:list
       (common-lisp:cons "ImageBasedTrickPlaySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-buffer-time))
      (common-lisp:list
       (common-lisp:cons "MinBufferTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-final-segment-length))
      (common-lisp:list
       (common-lisp:cons "MinFinalSegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mpd-manifest-bandwidth-type))
      (common-lisp:list
       (common-lisp:cons "MpdManifestBandwidthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mpd-profile))
      (common-lisp:list
       (common-lisp:cons "MpdProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pts-offset-handling-for-bframes))
      (common-lisp:list
       (common-lisp:cons "PtsOffsetHandlingForBFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-control))
      (common-lisp:list
       (common-lisp:cons "SegmentControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-length))
      (common-lisp:list
       (common-lisp:cons "SegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-length-control))
      (common-lisp:list
       (common-lisp:cons "SegmentLengthControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-composition-offsets))
      (common-lisp:list
       (common-lisp:cons "VideoCompositionOffsets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-segment-timeline-in-representation))
      (common-lisp:list
       (common-lisp:cons "WriteSegmentTimelineInRepresentation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dash-iso-group-settings))
   common-lisp:nil))
(common-lisp:deftype dash-iso-hbbtv-compliance () 'common-lisp:string)
(common-lisp:deftype dash-iso-image-based-trick-play () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dash-iso-image-based-trick-play-settings common-lisp:nil
                       ((tile-width :initarg :tile-width :type
                         (common-lisp:or |__integerMin1Max512|
                                         common-lisp:null)
                         :accessor
                         %dash-iso-image-based-trick-play-settings-tile-width
                         :initform common-lisp:nil)
                        (tile-height :initarg :tile-height :type
                         (common-lisp:or |__integerMin1Max2048|
                                         common-lisp:null)
                         :accessor
                         %dash-iso-image-based-trick-play-settings-tile-height
                         :initform common-lisp:nil)
                        (thumbnail-width :initarg :thumbnail-width :type
                         (common-lisp:or |__integerMin8Max4096|
                                         common-lisp:null)
                         :accessor
                         %dash-iso-image-based-trick-play-settings-thumbnail-width
                         :initform common-lisp:nil)
                        (thumbnail-interval :initarg :thumbnail-interval :type
                         (common-lisp:or |__doubleMin0Max2147483647|
                                         common-lisp:null)
                         :accessor
                         %dash-iso-image-based-trick-play-settings-thumbnail-interval
                         :initform common-lisp:nil)
                        (thumbnail-height :initarg :thumbnail-height :type
                         (common-lisp:or |__integerMin1Max4096|
                                         common-lisp:null)
                         :accessor
                         %dash-iso-image-based-trick-play-settings-thumbnail-height
                         :initform common-lisp:nil)
                        (interval-cadence :initarg :interval-cadence :type
                         (common-lisp:or dash-iso-interval-cadence
                                         common-lisp:null)
                         :accessor
                         %dash-iso-image-based-trick-play-settings-interval-cadence
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dash-iso-image-based-trick-play-settings
                    'make-dash-iso-image-based-trick-play-settings))
 (common-lisp:defun make-dash-iso-image-based-trick-play-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tile-width tile-height thumbnail-width
                     thumbnail-interval thumbnail-height interval-cadence)
   (common-lisp:apply #'common-lisp:make-instance
                      'dash-iso-image-based-trick-play-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dash-iso-image-based-trick-play-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dash-iso-image-based-trick-play-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-cadence))
      (common-lisp:list
       (common-lisp:cons "IntervalCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-height))
      (common-lisp:list
       (common-lisp:cons "ThumbnailHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-interval))
      (common-lisp:list
       (common-lisp:cons "ThumbnailInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-width))
      (common-lisp:list
       (common-lisp:cons "ThumbnailWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-height))
      (common-lisp:list
       (common-lisp:cons "TileHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-width))
      (common-lisp:list
       (common-lisp:cons "TileWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dash-iso-image-based-trick-play-settings))
   common-lisp:nil))
(common-lisp:deftype dash-iso-interval-cadence () 'common-lisp:string)
(common-lisp:deftype dash-iso-mpd-manifest-bandwidth-type ()
  'common-lisp:string)
(common-lisp:deftype dash-iso-mpd-profile () 'common-lisp:string)
(common-lisp:deftype dash-iso-playback-device-compatibility ()
  'common-lisp:string)
(common-lisp:deftype dash-iso-pts-offset-handling-for-bframes ()
  'common-lisp:string)
(common-lisp:deftype dash-iso-segment-control () 'common-lisp:string)
(common-lisp:deftype dash-iso-segment-length-control () 'common-lisp:string)
(common-lisp:deftype dash-iso-video-composition-offsets () 'common-lisp:string)
(common-lisp:deftype dash-iso-write-segment-timeline-in-representation ()
  'common-lisp:string)
(common-lisp:deftype dash-manifest-style () 'common-lisp:string)
(common-lisp:deftype decryption-mode () 'common-lisp:string)
(common-lisp:deftype deinterlace-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deinterlacer common-lisp:nil
                       ((mode :initarg :mode :type
                         (common-lisp:or deinterlacer-mode common-lisp:null)
                         :accessor %deinterlacer-mode :initform
                         common-lisp:nil)
                        (control :initarg :control :type
                         (common-lisp:or deinterlacer-control common-lisp:null)
                         :accessor %deinterlacer-control :initform
                         common-lisp:nil)
                        (algorithm :initarg :algorithm :type
                         (common-lisp:or deinterlace-algorithm
                                         common-lisp:null)
                         :accessor %deinterlacer-algorithm :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'deinterlacer 'make-deinterlacer))
 (common-lisp:defun make-deinterlacer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mode control algorithm)
   (common-lisp:apply #'common-lisp:make-instance 'deinterlacer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deinterlacer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deinterlacer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'control))
      (common-lisp:list
       (common-lisp:cons "Control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deinterlacer))
   common-lisp:nil))
(common-lisp:deftype deinterlacer-control () 'common-lisp:string)
(common-lisp:deftype deinterlacer-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-job-template-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-job-template-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-job-template-request
                    'make-delete-job-template-request))
 (common-lisp:defun make-delete-job-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-job-template-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-job-template-response
                    'make-delete-job-template-response))
 (common-lisp:defun make-delete-job-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-job-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-policy-request common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defun make-delete-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-policy-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-policy-response 'make-delete-policy-response))
 (common-lisp:defun make-delete-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-preset-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-preset-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-preset-request 'make-delete-preset-request))
 (common-lisp:defun make-delete-preset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-preset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-preset-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-preset-response 'make-delete-preset-response))
 (common-lisp:defun make-delete-preset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-preset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-preset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-queue-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-queue-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-queue-request 'make-delete-queue-request))
 (common-lisp:defun make-delete-queue-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-queue-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-queue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-queue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-queue-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-queue-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-queue-response 'make-delete-queue-response))
 (common-lisp:defun make-delete-queue-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-queue-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-queue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-queue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-queue-response))
   common-lisp:nil))
(common-lisp:deftype describe-endpoints-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-endpoints-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-endpoints-request-next-token :initform
                         common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or describe-endpoints-mode
                                         common-lisp:null)
                         :accessor %describe-endpoints-request-mode :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %describe-endpoints-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoints-request
                    'make-describe-endpoints-request))
 (common-lisp:defun make-describe-endpoints-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token mode max-results)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-endpoints-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-endpoints-response-next-token :initform
                         common-lisp:nil)
                        (endpoints :initarg :endpoints :type
                         (common-lisp:or |__listOfEndpoint| common-lisp:null)
                         :accessor %describe-endpoints-response-endpoints
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoints-response
                    'make-describe-endpoints-response))
 (common-lisp:defun make-describe-endpoints-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token endpoints)
   (common-lisp:apply #'common-lisp:make-instance 'describe-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass destination-settings common-lisp:nil
                       ((s3settings :initarg :s3settings :type
                         (common-lisp:or s3destination-settings
                                         common-lisp:null)
                         :accessor %destination-settings-s3settings :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'destination-settings 'make-destination-settings))
 (common-lisp:defun make-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3settings)
   (common-lisp:apply #'common-lisp:make-instance 'destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3settings))
      (common-lisp:list
       (common-lisp:cons "S3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-certificate-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %disassociate-certificate-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-certificate-request
                    'make-disassociate-certificate-request))
 (common-lisp:defun make-disassociate-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-certificate-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-certificate-response
                    'make-disassociate-certificate-response))
 (common-lisp:defun make-disassociate-certificate-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dolby-vision common-lisp:nil
                       ((profile :initarg :profile :type
                         (common-lisp:or dolby-vision-profile common-lisp:null)
                         :accessor %dolby-vision-profile :initform
                         common-lisp:nil)
                        (mapping :initarg :mapping :type
                         (common-lisp:or dolby-vision-mapping common-lisp:null)
                         :accessor %dolby-vision-mapping :initform
                         common-lisp:nil)
                        (l6mode :initarg :l6mode :type
                         (common-lisp:or dolby-vision-level6mode
                                         common-lisp:null)
                         :accessor %dolby-vision-l6mode :initform
                         common-lisp:nil)
                        (l6metadata :initarg :l6metadata :type
                         (common-lisp:or dolby-vision-level6metadata
                                         common-lisp:null)
                         :accessor %dolby-vision-l6metadata :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dolby-vision 'make-dolby-vision))
 (common-lisp:defun make-dolby-vision
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile mapping l6mode l6metadata)
   (common-lisp:apply #'common-lisp:make-instance 'dolby-vision
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dolby-vision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dolby-vision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'l6metadata))
      (common-lisp:list
       (common-lisp:cons "L6Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'l6mode))
      (common-lisp:list
       (common-lisp:cons "L6Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping))
      (common-lisp:list
       (common-lisp:cons "Mapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dolby-vision))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dolby-vision-level6metadata common-lisp:nil
                       ((max-fall :initarg :max-fall :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %dolby-vision-level6metadata-max-fall
                         :initform common-lisp:nil)
                        (max-cll :initarg :max-cll :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %dolby-vision-level6metadata-max-cll
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dolby-vision-level6metadata
                    'make-dolby-vision-level6metadata))
 (common-lisp:defun make-dolby-vision-level6metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-fall max-cll)
   (common-lisp:apply #'common-lisp:make-instance 'dolby-vision-level6metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision-level6metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision-level6metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-cll))
      (common-lisp:list
       (common-lisp:cons "MaxCll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-fall))
      (common-lisp:list
       (common-lisp:cons "MaxFall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision-level6metadata))
   common-lisp:nil))
(common-lisp:deftype dolby-vision-level6mode () 'common-lisp:string)
(common-lisp:deftype dolby-vision-mapping () 'common-lisp:string)
(common-lisp:deftype dolby-vision-profile () 'common-lisp:string)
(common-lisp:deftype drop-frame-timecode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dvb-nit-settings common-lisp:nil
                       ((nit-interval :initarg :nit-interval :type
                         (common-lisp:or |__integerMin25Max10000|
                                         common-lisp:null)
                         :accessor %dvb-nit-settings-nit-interval :initform
                         common-lisp:nil)
                        (network-name :initarg :network-name :type
                         (common-lisp:or |__stringMin1Max256| common-lisp:null)
                         :accessor %dvb-nit-settings-network-name :initform
                         common-lisp:nil)
                        (network-id :initarg :network-id :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %dvb-nit-settings-network-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dvb-nit-settings 'make-dvb-nit-settings))
 (common-lisp:defun make-dvb-nit-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nit-interval network-name network-id)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-nit-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nit-interval))
      (common-lisp:list
       (common-lisp:cons "NitInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dvb-sdt-settings common-lisp:nil
                       ((service-provider-name :initarg :service-provider-name
                         :type
                         (common-lisp:or |__stringMin1Max256| common-lisp:null)
                         :accessor %dvb-sdt-settings-service-provider-name
                         :initform common-lisp:nil)
                        (service-name :initarg :service-name :type
                         (common-lisp:or |__stringMin1Max256| common-lisp:null)
                         :accessor %dvb-sdt-settings-service-name :initform
                         common-lisp:nil)
                        (sdt-interval :initarg :sdt-interval :type
                         (common-lisp:or |__integerMin25Max2000|
                                         common-lisp:null)
                         :accessor %dvb-sdt-settings-sdt-interval :initform
                         common-lisp:nil)
                        (output-sdt :initarg :output-sdt :type
                         (common-lisp:or output-sdt common-lisp:null) :accessor
                         %dvb-sdt-settings-output-sdt :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dvb-sdt-settings 'make-dvb-sdt-settings))
 (common-lisp:defun make-dvb-sdt-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-provider-name service-name
                     sdt-interval output-sdt)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-sdt-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-sdt))
      (common-lisp:list
       (common-lisp:cons "OutputSdt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sdt-interval))
      (common-lisp:list
       (common-lisp:cons "SdtInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-provider-name))
      (common-lisp:list
       (common-lisp:cons "ServiceProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dvb-sub-destination-settings common-lisp:nil
                       ((yposition :initarg :yposition :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-yposition
                         :initform common-lisp:nil)
                        (xposition :initarg :xposition :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-xposition
                         :initform common-lisp:nil)
                        (width :initarg :width :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-width
                         :initform common-lisp:nil)
                        (teletext-spacing :initarg :teletext-spacing :type
                         (common-lisp:or dvb-subtitle-teletext-spacing
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-teletext-spacing
                         :initform common-lisp:nil)
                        (subtitling-type :initarg :subtitling-type :type
                         (common-lisp:or dvb-subtitling-type common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-subtitling-type
                         :initform common-lisp:nil)
                        (style-passthrough :initarg :style-passthrough :type
                         (common-lisp:or dvb-subtitle-style-passthrough
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-style-passthrough
                         :initform common-lisp:nil)
                        (shadow-yoffset :initarg :shadow-yoffset :type
                         (common-lisp:or
                          |__integerMinNegative2147483648Max2147483647|
                          common-lisp:null)
                         :accessor %dvb-sub-destination-settings-shadow-yoffset
                         :initform common-lisp:nil)
                        (shadow-xoffset :initarg :shadow-xoffset :type
                         (common-lisp:or
                          |__integerMinNegative2147483648Max2147483647|
                          common-lisp:null)
                         :accessor %dvb-sub-destination-settings-shadow-xoffset
                         :initform common-lisp:nil)
                        (shadow-opacity :initarg :shadow-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-shadow-opacity
                         :initform common-lisp:nil)
                        (shadow-color :initarg :shadow-color :type
                         (common-lisp:or dvb-subtitle-shadow-color
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-shadow-color
                         :initform common-lisp:nil)
                        (outline-size :initarg :outline-size :type
                         (common-lisp:or |__integerMin0Max10| common-lisp:null)
                         :accessor %dvb-sub-destination-settings-outline-size
                         :initform common-lisp:nil)
                        (outline-color :initarg :outline-color :type
                         (common-lisp:or dvb-subtitle-outline-color
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-outline-color
                         :initform common-lisp:nil)
                        (hex-font-color :initarg :hex-font-color :type
                         (common-lisp:or
                          |__stringMin6Max8Pattern09aFAF609aFAF2|
                          common-lisp:null)
                         :accessor %dvb-sub-destination-settings-hex-font-color
                         :initform common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-height
                         :initform common-lisp:nil)
                        (font-size :initarg :font-size :type
                         (common-lisp:or |__integerMin0Max96| common-lisp:null)
                         :accessor %dvb-sub-destination-settings-font-size
                         :initform common-lisp:nil)
                        (font-script :initarg :font-script :type
                         (common-lisp:or font-script common-lisp:null)
                         :accessor %dvb-sub-destination-settings-font-script
                         :initform common-lisp:nil)
                        (font-resolution :initarg :font-resolution :type
                         (common-lisp:or |__integerMin96Max600|
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-font-resolution
                         :initform common-lisp:nil)
                        (font-opacity :initarg :font-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-font-opacity
                         :initform common-lisp:nil)
                        (font-color :initarg :font-color :type
                         (common-lisp:or dvb-subtitle-font-color
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-font-color
                         :initform common-lisp:nil)
                        (fallback-font :initarg :fallback-font :type
                         (common-lisp:or dvb-sub-subtitle-fallback-font
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-fallback-font
                         :initform common-lisp:nil)
                        (dds-ycoordinate :initarg :dds-ycoordinate :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-dds-ycoordinate
                         :initform common-lisp:nil)
                        (dds-xcoordinate :initarg :dds-xcoordinate :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-dds-xcoordinate
                         :initform common-lisp:nil)
                        (dds-handling :initarg :dds-handling :type
                         (common-lisp:or dvbdds-handling common-lisp:null)
                         :accessor %dvb-sub-destination-settings-dds-handling
                         :initform common-lisp:nil)
                        (background-opacity :initarg :background-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-background-opacity
                         :initform common-lisp:nil)
                        (background-color :initarg :background-color :type
                         (common-lisp:or dvb-subtitle-background-color
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-background-color
                         :initform common-lisp:nil)
                        (apply-font-color :initarg :apply-font-color :type
                         (common-lisp:or dvb-subtitle-apply-font-color
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-apply-font-color
                         :initform common-lisp:nil)
                        (alignment :initarg :alignment :type
                         (common-lisp:or dvb-subtitle-alignment
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-alignment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dvb-sub-destination-settings
                    'make-dvb-sub-destination-settings))
 (common-lisp:defun make-dvb-sub-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key yposition xposition width
                     teletext-spacing subtitling-type style-passthrough
                     shadow-yoffset shadow-xoffset shadow-opacity shadow-color
                     outline-size outline-color hex-font-color height font-size
                     font-script font-resolution font-opacity font-color
                     fallback-font dds-ycoordinate dds-xcoordinate dds-handling
                     background-opacity background-color apply-font-color
                     alignment)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-sub-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "Alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-font-color))
      (common-lisp:list
       (common-lisp:cons "ApplyFontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-opacity))
      (common-lisp:list
       (common-lisp:cons "BackgroundOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dds-handling))
      (common-lisp:list
       (common-lisp:cons "DdsHandling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dds-xcoordinate))
      (common-lisp:list
       (common-lisp:cons "DdsXCoordinate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dds-ycoordinate))
      (common-lisp:list
       (common-lisp:cons "DdsYCoordinate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fallback-font))
      (common-lisp:list
       (common-lisp:cons "FallbackFont"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-opacity))
      (common-lisp:list
       (common-lisp:cons "FontOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-resolution))
      (common-lisp:list
       (common-lisp:cons "FontResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-script))
      (common-lisp:list
       (common-lisp:cons "FontScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hex-font-color))
      (common-lisp:list
       (common-lisp:cons "HexFontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-color))
      (common-lisp:list
       (common-lisp:cons "OutlineColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-size))
      (common-lisp:list
       (common-lisp:cons "OutlineSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-color))
      (common-lisp:list
       (common-lisp:cons "ShadowColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-opacity))
      (common-lisp:list
       (common-lisp:cons "ShadowOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-xoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowXOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-yoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowYOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-passthrough))
      (common-lisp:list
       (common-lisp:cons "StylePassthrough"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitling-type))
      (common-lisp:list
       (common-lisp:cons "SubtitlingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'teletext-spacing))
      (common-lisp:list
       (common-lisp:cons "TeletextSpacing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xposition))
      (common-lisp:list
       (common-lisp:cons "XPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yposition))
      (common-lisp:list
       (common-lisp:cons "YPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dvb-sub-source-settings common-lisp:nil
                       ((pid :initarg :pid :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %dvb-sub-source-settings-pid :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dvb-sub-source-settings 'make-dvb-sub-source-settings))
 (common-lisp:defun make-dvb-sub-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pid)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-sub-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   common-lisp:nil))
(common-lisp:deftype dvb-sub-subtitle-fallback-font () 'common-lisp:string)
(common-lisp:deftype dvb-subtitle-alignment () 'common-lisp:string)
(common-lisp:deftype dvb-subtitle-apply-font-color () 'common-lisp:string)
(common-lisp:deftype dvb-subtitle-background-color () 'common-lisp:string)
(common-lisp:deftype dvb-subtitle-font-color () 'common-lisp:string)
(common-lisp:deftype dvb-subtitle-outline-color () 'common-lisp:string)
(common-lisp:deftype dvb-subtitle-shadow-color () 'common-lisp:string)
(common-lisp:deftype dvb-subtitle-style-passthrough () 'common-lisp:string)
(common-lisp:deftype dvb-subtitle-teletext-spacing () 'common-lisp:string)
(common-lisp:deftype dvb-subtitling-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dvb-tdt-settings common-lisp:nil
                       ((tdt-interval :initarg :tdt-interval :type
                         (common-lisp:or |__integerMin1000Max30000|
                                         common-lisp:null)
                         :accessor %dvb-tdt-settings-tdt-interval :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dvb-tdt-settings 'make-dvb-tdt-settings))
 (common-lisp:defun make-dvb-tdt-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tdt-interval)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-tdt-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tdt-interval))
      (common-lisp:list
       (common-lisp:cons "TdtInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   common-lisp:nil))
(common-lisp:deftype dvbdds-handling () 'common-lisp:string)
(common-lisp:deftype eac3atmos-bitstream-mode () 'common-lisp:string)
(common-lisp:deftype eac3atmos-coding-mode () 'common-lisp:string)
(common-lisp:deftype eac3atmos-dialogue-intelligence () 'common-lisp:string)
(common-lisp:deftype eac3atmos-downmix-control () 'common-lisp:string)
(common-lisp:deftype eac3atmos-dynamic-range-compression-line ()
  'common-lisp:string)
(common-lisp:deftype eac3atmos-dynamic-range-compression-rf ()
  'common-lisp:string)
(common-lisp:deftype eac3atmos-dynamic-range-control () 'common-lisp:string)
(common-lisp:deftype eac3atmos-metering-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass eac3atmos-settings common-lisp:nil
                       ((surround-ex-mode :initarg :surround-ex-mode :type
                         (common-lisp:or eac3atmos-surround-ex-mode
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-surround-ex-mode
                         :initform common-lisp:nil)
                        (stereo-downmix :initarg :stereo-downmix :type
                         (common-lisp:or eac3atmos-stereo-downmix
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-stereo-downmix :initform
                         common-lisp:nil)
                        (speech-threshold :initarg :speech-threshold :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-speech-threshold
                         :initform common-lisp:nil)
                        (sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__integerMin48000Max48000|
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-sample-rate :initform
                         common-lisp:nil)
                        (metering-mode :initarg :metering-mode :type
                         (common-lisp:or eac3atmos-metering-mode
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-metering-mode :initform
                         common-lisp:nil)
                        (lt-rt-surround-mix-level :initarg
                         :lt-rt-surround-mix-level :type
                         (common-lisp:or |__doubleMinNegative60MaxNegative1|
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-lt-rt-surround-mix-level
                         :initform common-lisp:nil)
                        (lt-rt-center-mix-level :initarg
                         :lt-rt-center-mix-level :type
                         (common-lisp:or |__doubleMinNegative6Max3|
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-lt-rt-center-mix-level
                         :initform common-lisp:nil)
                        (lo-ro-surround-mix-level :initarg
                         :lo-ro-surround-mix-level :type
                         (common-lisp:or |__doubleMinNegative60MaxNegative1|
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-lo-ro-surround-mix-level
                         :initform common-lisp:nil)
                        (lo-ro-center-mix-level :initarg
                         :lo-ro-center-mix-level :type
                         (common-lisp:or |__doubleMinNegative6Max3|
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-lo-ro-center-mix-level
                         :initform common-lisp:nil)
                        (dynamic-range-control :initarg :dynamic-range-control
                         :type
                         (common-lisp:or eac3atmos-dynamic-range-control
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-dynamic-range-control
                         :initform common-lisp:nil)
                        (dynamic-range-compression-rf :initarg
                         :dynamic-range-compression-rf :type
                         (common-lisp:or eac3atmos-dynamic-range-compression-rf
                                         common-lisp:null)
                         :accessor
                         %eac3atmos-settings-dynamic-range-compression-rf
                         :initform common-lisp:nil)
                        (dynamic-range-compression-line :initarg
                         :dynamic-range-compression-line :type
                         (common-lisp:or
                          eac3atmos-dynamic-range-compression-line
                          common-lisp:null)
                         :accessor
                         %eac3atmos-settings-dynamic-range-compression-line
                         :initform common-lisp:nil)
                        (downmix-control :initarg :downmix-control :type
                         (common-lisp:or eac3atmos-downmix-control
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-downmix-control
                         :initform common-lisp:nil)
                        (dialogue-intelligence :initarg :dialogue-intelligence
                         :type
                         (common-lisp:or eac3atmos-dialogue-intelligence
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-dialogue-intelligence
                         :initform common-lisp:nil)
                        (coding-mode :initarg :coding-mode :type
                         (common-lisp:or eac3atmos-coding-mode
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-coding-mode :initform
                         common-lisp:nil)
                        (bitstream-mode :initarg :bitstream-mode :type
                         (common-lisp:or eac3atmos-bitstream-mode
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-bitstream-mode :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin384000Max1024000|
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-bitrate :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'eac3atmos-settings 'make-eac3atmos-settings))
 (common-lisp:defun make-eac3atmos-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key surround-ex-mode stereo-downmix
                     speech-threshold sample-rate metering-mode
                     lt-rt-surround-mix-level lt-rt-center-mix-level
                     lo-ro-surround-mix-level lo-ro-center-mix-level
                     dynamic-range-control dynamic-range-compression-rf
                     dynamic-range-compression-line downmix-control
                     dialogue-intelligence coding-mode bitstream-mode bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'eac3atmos-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitstream-mode))
      (common-lisp:list
       (common-lisp:cons "BitstreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dialogue-intelligence))
      (common-lisp:list
       (common-lisp:cons "DialogueIntelligence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'downmix-control))
      (common-lisp:list
       (common-lisp:cons "DownmixControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-range-compression-line))
      (common-lisp:list
       (common-lisp:cons "DynamicRangeCompressionLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-range-compression-rf))
      (common-lisp:list
       (common-lisp:cons "DynamicRangeCompressionRf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-range-control))
      (common-lisp:list
       (common-lisp:cons "DynamicRangeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ro-center-mix-level))
      (common-lisp:list
       (common-lisp:cons "LoRoCenterMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ro-surround-mix-level))
      (common-lisp:list
       (common-lisp:cons "LoRoSurroundMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lt-rt-center-mix-level))
      (common-lisp:list
       (common-lisp:cons "LtRtCenterMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lt-rt-surround-mix-level))
      (common-lisp:list
       (common-lisp:cons "LtRtSurroundMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metering-mode))
      (common-lisp:list
       (common-lisp:cons "MeteringMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speech-threshold))
      (common-lisp:list
       (common-lisp:cons "SpeechThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stereo-downmix))
      (common-lisp:list
       (common-lisp:cons "StereoDownmix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-ex-mode))
      (common-lisp:list
       (common-lisp:cons "SurroundExMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   common-lisp:nil))
(common-lisp:deftype eac3atmos-stereo-downmix () 'common-lisp:string)
(common-lisp:deftype eac3atmos-surround-ex-mode () 'common-lisp:string)
(common-lisp:deftype eac3attenuation-control () 'common-lisp:string)
(common-lisp:deftype eac3bitstream-mode () 'common-lisp:string)
(common-lisp:deftype eac3coding-mode () 'common-lisp:string)
(common-lisp:deftype eac3dc-filter () 'common-lisp:string)
(common-lisp:deftype eac3dynamic-range-compression-line () 'common-lisp:string)
(common-lisp:deftype eac3dynamic-range-compression-rf () 'common-lisp:string)
(common-lisp:deftype eac3lfe-control () 'common-lisp:string)
(common-lisp:deftype eac3lfe-filter () 'common-lisp:string)
(common-lisp:deftype eac3metadata-control () 'common-lisp:string)
(common-lisp:deftype eac3passthrough-control () 'common-lisp:string)
(common-lisp:deftype eac3phase-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass eac3settings common-lisp:nil
                       ((surround-mode :initarg :surround-mode :type
                         (common-lisp:or eac3surround-mode common-lisp:null)
                         :accessor %eac3settings-surround-mode :initform
                         common-lisp:nil)
                        (surround-ex-mode :initarg :surround-ex-mode :type
                         (common-lisp:or eac3surround-ex-mode common-lisp:null)
                         :accessor %eac3settings-surround-ex-mode :initform
                         common-lisp:nil)
                        (stereo-downmix :initarg :stereo-downmix :type
                         (common-lisp:or eac3stereo-downmix common-lisp:null)
                         :accessor %eac3settings-stereo-downmix :initform
                         common-lisp:nil)
                        (sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__integerMin48000Max48000|
                                         common-lisp:null)
                         :accessor %eac3settings-sample-rate :initform
                         common-lisp:nil)
                        (phase-control :initarg :phase-control :type
                         (common-lisp:or eac3phase-control common-lisp:null)
                         :accessor %eac3settings-phase-control :initform
                         common-lisp:nil)
                        (passthrough-control :initarg :passthrough-control
                         :type
                         (common-lisp:or eac3passthrough-control
                                         common-lisp:null)
                         :accessor %eac3settings-passthrough-control :initform
                         common-lisp:nil)
                        (metadata-control :initarg :metadata-control :type
                         (common-lisp:or eac3metadata-control common-lisp:null)
                         :accessor %eac3settings-metadata-control :initform
                         common-lisp:nil)
                        (lt-rt-surround-mix-level :initarg
                         :lt-rt-surround-mix-level :type
                         (common-lisp:or |__doubleMinNegative60MaxNegative1|
                                         common-lisp:null)
                         :accessor %eac3settings-lt-rt-surround-mix-level
                         :initform common-lisp:nil)
                        (lt-rt-center-mix-level :initarg
                         :lt-rt-center-mix-level :type
                         (common-lisp:or |__doubleMinNegative60Max3|
                                         common-lisp:null)
                         :accessor %eac3settings-lt-rt-center-mix-level
                         :initform common-lisp:nil)
                        (lo-ro-surround-mix-level :initarg
                         :lo-ro-surround-mix-level :type
                         (common-lisp:or |__doubleMinNegative60MaxNegative1|
                                         common-lisp:null)
                         :accessor %eac3settings-lo-ro-surround-mix-level
                         :initform common-lisp:nil)
                        (lo-ro-center-mix-level :initarg
                         :lo-ro-center-mix-level :type
                         (common-lisp:or |__doubleMinNegative60Max3|
                                         common-lisp:null)
                         :accessor %eac3settings-lo-ro-center-mix-level
                         :initform common-lisp:nil)
                        (lfe-filter :initarg :lfe-filter :type
                         (common-lisp:or eac3lfe-filter common-lisp:null)
                         :accessor %eac3settings-lfe-filter :initform
                         common-lisp:nil)
                        (lfe-control :initarg :lfe-control :type
                         (common-lisp:or eac3lfe-control common-lisp:null)
                         :accessor %eac3settings-lfe-control :initform
                         common-lisp:nil)
                        (dynamic-range-compression-rf :initarg
                         :dynamic-range-compression-rf :type
                         (common-lisp:or eac3dynamic-range-compression-rf
                                         common-lisp:null)
                         :accessor %eac3settings-dynamic-range-compression-rf
                         :initform common-lisp:nil)
                        (dynamic-range-compression-line :initarg
                         :dynamic-range-compression-line :type
                         (common-lisp:or eac3dynamic-range-compression-line
                                         common-lisp:null)
                         :accessor %eac3settings-dynamic-range-compression-line
                         :initform common-lisp:nil)
                        (dialnorm :initarg :dialnorm :type
                         (common-lisp:or |__integerMin1Max31| common-lisp:null)
                         :accessor %eac3settings-dialnorm :initform
                         common-lisp:nil)
                        (dc-filter :initarg :dc-filter :type
                         (common-lisp:or eac3dc-filter common-lisp:null)
                         :accessor %eac3settings-dc-filter :initform
                         common-lisp:nil)
                        (coding-mode :initarg :coding-mode :type
                         (common-lisp:or eac3coding-mode common-lisp:null)
                         :accessor %eac3settings-coding-mode :initform
                         common-lisp:nil)
                        (bitstream-mode :initarg :bitstream-mode :type
                         (common-lisp:or eac3bitstream-mode common-lisp:null)
                         :accessor %eac3settings-bitstream-mode :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin32000Max3024000|
                                         common-lisp:null)
                         :accessor %eac3settings-bitrate :initform
                         common-lisp:nil)
                        (attenuation-control :initarg :attenuation-control
                         :type
                         (common-lisp:or eac3attenuation-control
                                         common-lisp:null)
                         :accessor %eac3settings-attenuation-control :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'eac3settings 'make-eac3settings))
 (common-lisp:defun make-eac3settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key surround-mode surround-ex-mode
                     stereo-downmix sample-rate phase-control
                     passthrough-control metadata-control
                     lt-rt-surround-mix-level lt-rt-center-mix-level
                     lo-ro-surround-mix-level lo-ro-center-mix-level lfe-filter
                     lfe-control dynamic-range-compression-rf
                     dynamic-range-compression-line dialnorm dc-filter
                     coding-mode bitstream-mode bitrate attenuation-control)
   (common-lisp:apply #'common-lisp:make-instance 'eac3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eac3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eac3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attenuation-control))
      (common-lisp:list
       (common-lisp:cons "AttenuationControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitstream-mode))
      (common-lisp:list
       (common-lisp:cons "BitstreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dc-filter))
      (common-lisp:list
       (common-lisp:cons "DcFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-range-compression-line))
      (common-lisp:list
       (common-lisp:cons "DynamicRangeCompressionLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-range-compression-rf))
      (common-lisp:list
       (common-lisp:cons "DynamicRangeCompressionRf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-control))
      (common-lisp:list
       (common-lisp:cons "LfeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-filter))
      (common-lisp:list
       (common-lisp:cons "LfeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ro-center-mix-level))
      (common-lisp:list
       (common-lisp:cons "LoRoCenterMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ro-surround-mix-level))
      (common-lisp:list
       (common-lisp:cons "LoRoSurroundMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lt-rt-center-mix-level))
      (common-lisp:list
       (common-lisp:cons "LtRtCenterMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lt-rt-surround-mix-level))
      (common-lisp:list
       (common-lisp:cons "LtRtSurroundMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-control))
      (common-lisp:list
       (common-lisp:cons "MetadataControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passthrough-control))
      (common-lisp:list
       (common-lisp:cons "PassthroughControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phase-control))
      (common-lisp:list
       (common-lisp:cons "PhaseControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stereo-downmix))
      (common-lisp:list
       (common-lisp:cons "StereoDownmix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-ex-mode))
      (common-lisp:list
       (common-lisp:cons "SurroundExMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-mode))
      (common-lisp:list
       (common-lisp:cons "SurroundMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eac3settings))
   common-lisp:nil))
(common-lisp:deftype eac3stereo-downmix () 'common-lisp:string)
(common-lisp:deftype eac3surround-ex-mode () 'common-lisp:string)
(common-lisp:deftype eac3surround-mode () 'common-lisp:string)
(common-lisp:deftype embedded-convert608to708 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass embedded-destination-settings common-lisp:nil
                       ((destination708service-number :initarg
                         :destination708service-number :type
                         (common-lisp:or |__integerMin1Max6| common-lisp:null)
                         :accessor
                         %embedded-destination-settings-destination708service-number
                         :initform common-lisp:nil)
                        (destination608channel-number :initarg
                         :destination608channel-number :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor
                         %embedded-destination-settings-destination608channel-number
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'embedded-destination-settings
                    'make-embedded-destination-settings))
 (common-lisp:defun make-embedded-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination708service-number
                     destination608channel-number)
   (common-lisp:apply #'common-lisp:make-instance
                      'embedded-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination608channel-number))
      (common-lisp:list
       (common-lisp:cons "Destination608ChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination708service-number))
      (common-lisp:list
       (common-lisp:cons "Destination708ServiceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass embedded-source-settings common-lisp:nil
                       ((terminate-captions :initarg :terminate-captions :type
                         (common-lisp:or embedded-terminate-captions
                                         common-lisp:null)
                         :accessor %embedded-source-settings-terminate-captions
                         :initform common-lisp:nil)
                        (source608track-number :initarg :source608track-number
                         :type
                         (common-lisp:or |__integerMin1Max1| common-lisp:null)
                         :accessor
                         %embedded-source-settings-source608track-number
                         :initform common-lisp:nil)
                        (source608channel-number :initarg
                         :source608channel-number :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor
                         %embedded-source-settings-source608channel-number
                         :initform common-lisp:nil)
                        (convert608to708 :initarg :convert608to708 :type
                         (common-lisp:or embedded-convert608to708
                                         common-lisp:null)
                         :accessor %embedded-source-settings-convert608to708
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'embedded-source-settings 'make-embedded-source-settings))
 (common-lisp:defun make-embedded-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key terminate-captions source608track-number
                     source608channel-number convert608to708)
   (common-lisp:apply #'common-lisp:make-instance 'embedded-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'convert608to708))
      (common-lisp:list
       (common-lisp:cons "Convert608To708"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608channel-number))
      (common-lisp:list
       (common-lisp:cons "Source608ChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608track-number))
      (common-lisp:list
       (common-lisp:cons "Source608TrackNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'terminate-captions))
      (common-lisp:list
       (common-lisp:cons "TerminateCaptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   common-lisp:nil))
(common-lisp:deftype embedded-terminate-captions () 'common-lisp:string)
(common-lisp:deftype embedded-timecode-override () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass endpoint common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %endpoint-url :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defun make-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass esam-manifest-confirm-condition-notification
                       common-lisp:nil
                       ((mcc-xml :initarg :mcc-xml :type
                         (common-lisp:or
                          |__stringPatternSNManifestConfirmConditionNotificationNS|
                          common-lisp:null)
                         :accessor
                         %esam-manifest-confirm-condition-notification-mcc-xml
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'esam-manifest-confirm-condition-notification
                    'make-esam-manifest-confirm-condition-notification))
 (common-lisp:defun make-esam-manifest-confirm-condition-notification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mcc-xml)
   (common-lisp:apply #'common-lisp:make-instance
                      'esam-manifest-confirm-condition-notification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          esam-manifest-confirm-condition-notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          esam-manifest-confirm-condition-notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcc-xml))
      (common-lisp:list
       (common-lisp:cons "MccXml"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          esam-manifest-confirm-condition-notification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass esam-settings common-lisp:nil
                       ((signal-processing-notification :initarg
                         :signal-processing-notification :type
                         (common-lisp:or esam-signal-processing-notification
                                         common-lisp:null)
                         :accessor
                         %esam-settings-signal-processing-notification
                         :initform common-lisp:nil)
                        (response-signal-preroll :initarg
                         :response-signal-preroll :type
                         (common-lisp:or |__integerMin0Max30000|
                                         common-lisp:null)
                         :accessor %esam-settings-response-signal-preroll
                         :initform common-lisp:nil)
                        (manifest-confirm-condition-notification :initarg
                         :manifest-confirm-condition-notification :type
                         (common-lisp:or
                          esam-manifest-confirm-condition-notification
                          common-lisp:null)
                         :accessor
                         %esam-settings-manifest-confirm-condition-notification
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'esam-settings 'make-esam-settings))
 (common-lisp:defun make-esam-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key signal-processing-notification
                     response-signal-preroll
                     manifest-confirm-condition-notification)
   (common-lisp:apply #'common-lisp:make-instance 'esam-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input esam-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input esam-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-confirm-condition-notification))
      (common-lisp:list
       (common-lisp:cons "ManifestConfirmConditionNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-signal-preroll))
      (common-lisp:list
       (common-lisp:cons "ResponseSignalPreroll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'signal-processing-notification))
      (common-lisp:list
       (common-lisp:cons "SignalProcessingNotification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input esam-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass esam-signal-processing-notification common-lisp:nil
                       ((scc-xml :initarg :scc-xml :type
                         (common-lisp:or
                          |__stringPatternSNSignalProcessingNotificationNS|
                          common-lisp:null)
                         :accessor %esam-signal-processing-notification-scc-xml
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'esam-signal-processing-notification
                    'make-esam-signal-processing-notification))
 (common-lisp:defun make-esam-signal-processing-notification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scc-xml)
   (common-lisp:apply #'common-lisp:make-instance
                      'esam-signal-processing-notification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          esam-signal-processing-notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          esam-signal-processing-notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scc-xml))
      (common-lisp:list
       (common-lisp:cons "SccXml"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          esam-signal-processing-notification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass exception-body common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %exception-body-message :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'exception-body 'make-exception-body))
 (common-lisp:defun make-exception-body
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'exception-body
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exception-body))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exception-body))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exception-body))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extended-data-services common-lisp:nil
                       ((vchip-action :initarg :vchip-action :type
                         (common-lisp:or vchip-action common-lisp:null)
                         :accessor %extended-data-services-vchip-action
                         :initform common-lisp:nil)
                        (copy-protection-action :initarg
                         :copy-protection-action :type
                         (common-lisp:or copy-protection-action
                                         common-lisp:null)
                         :accessor
                         %extended-data-services-copy-protection-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'extended-data-services 'make-extended-data-services))
 (common-lisp:defun make-extended-data-services
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vchip-action copy-protection-action)
   (common-lisp:apply #'common-lisp:make-instance 'extended-data-services
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          extended-data-services))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          extended-data-services))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'copy-protection-action))
      (common-lisp:list
       (common-lisp:cons "CopyProtectionAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vchip-action))
      (common-lisp:list
       (common-lisp:cons "VchipAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          extended-data-services))
   common-lisp:nil))
(common-lisp:deftype f4v-moov-placement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass f4v-settings common-lisp:nil
                       ((moov-placement :initarg :moov-placement :type
                         (common-lisp:or f4v-moov-placement common-lisp:null)
                         :accessor %f4v-settings-moov-placement :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'f4v-settings 'make-f4v-settings))
 (common-lisp:defun make-f4v-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key moov-placement)
   (common-lisp:apply #'common-lisp:make-instance 'f4v-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input f4v-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input f4v-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'moov-placement))
      (common-lisp:list
       (common-lisp:cons "MoovPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input f4v-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass file-group-settings common-lisp:nil
                       ((destination-settings :initarg :destination-settings
                         :type
                         (common-lisp:or destination-settings common-lisp:null)
                         :accessor %file-group-settings-destination-settings
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or |__stringPatternS3| common-lisp:null)
                         :accessor %file-group-settings-destination :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-group-settings 'make-file-group-settings))
 (common-lisp:defun make-file-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-settings destination)
   (common-lisp:apply #'common-lisp:make-instance 'file-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-settings))
      (common-lisp:list
       (common-lisp:cons "DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-group-settings))
   common-lisp:nil))
(common-lisp:deftype file-source-convert608to708 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file-source-settings common-lisp:nil
                       ((time-delta-units :initarg :time-delta-units :type
                         (common-lisp:or file-source-time-delta-units
                                         common-lisp:null)
                         :accessor %file-source-settings-time-delta-units
                         :initform common-lisp:nil)
                        (time-delta :initarg :time-delta :type
                         (common-lisp:or
                          |__integerMinNegative2147483648Max2147483647|
                          common-lisp:null)
                         :accessor %file-source-settings-time-delta :initform
                         common-lisp:nil)
                        (source-file :initarg :source-file :type
                         (common-lisp:or
                          |__stringMin14PatternS3SccSCCTtmlTTMLDfxpDFXPStlSTLSrtSRTXmlXMLSmiSMIVttVTTWebvttWEBVTTHttpsSccSCCTtmlTTMLDfxpDFXPStlSTLSrtSRTXmlXMLSmiSMIVttVTTWebvttWEBVTT|
                          common-lisp:null)
                         :accessor %file-source-settings-source-file :initform
                         common-lisp:nil)
                        (framerate :initarg :framerate :type
                         (common-lisp:or caption-source-framerate
                                         common-lisp:null)
                         :accessor %file-source-settings-framerate :initform
                         common-lisp:nil)
                        (convert-paint-to-pop :initarg :convert-paint-to-pop
                         :type
                         (common-lisp:or
                          caption-source-convert-paint-on-to-pop-on
                          common-lisp:null)
                         :accessor %file-source-settings-convert-paint-to-pop
                         :initform common-lisp:nil)
                        (convert608to708 :initarg :convert608to708 :type
                         (common-lisp:or file-source-convert608to708
                                         common-lisp:null)
                         :accessor %file-source-settings-convert608to708
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'file-source-settings 'make-file-source-settings))
 (common-lisp:defun make-file-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-delta-units time-delta source-file
                     framerate convert-paint-to-pop convert608to708)
   (common-lisp:apply #'common-lisp:make-instance 'file-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'convert608to708))
      (common-lisp:list
       (common-lisp:cons "Convert608To708"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'convert-paint-to-pop))
      (common-lisp:list
       (common-lisp:cons "ConvertPaintToPop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate))
      (common-lisp:list
       (common-lisp:cons "Framerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-file))
      (common-lisp:list
       (common-lisp:cons "SourceFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-delta))
      (common-lisp:list
       (common-lisp:cons "TimeDelta"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-delta-units))
      (common-lisp:list
       (common-lisp:cons "TimeDeltaUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-source-settings))
   common-lisp:nil))
(common-lisp:deftype file-source-time-delta-units () 'common-lisp:string)
(common-lisp:deftype font-script () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (mediaconvert-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass force-include-rendition-size common-lisp:nil
                       ((width :initarg :width :type
                         (common-lisp:or |__integerMin32Max8192|
                                         common-lisp:null)
                         :accessor %force-include-rendition-size-width
                         :initform common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or |__integerMin32Max8192|
                                         common-lisp:null)
                         :accessor %force-include-rendition-size-height
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'force-include-rendition-size
                    'make-force-include-rendition-size))
 (common-lisp:defun make-force-include-rendition-size
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width height)
   (common-lisp:apply #'common-lisp:make-instance 'force-include-rendition-size
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          force-include-rendition-size))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          force-include-rendition-size))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          force-include-rendition-size))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass frame-capture-settings common-lisp:nil
                       ((quality :initarg :quality :type
                         (common-lisp:or |__integerMin1Max100|
                                         common-lisp:null)
                         :accessor %frame-capture-settings-quality :initform
                         common-lisp:nil)
                        (max-captures :initarg :max-captures :type
                         (common-lisp:or |__integerMin1Max10000000|
                                         common-lisp:null)
                         :accessor %frame-capture-settings-max-captures
                         :initform common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %frame-capture-settings-framerate-numerator
                         :initform common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor
                         %frame-capture-settings-framerate-denominator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'frame-capture-settings 'make-frame-capture-settings))
 (common-lisp:defun make-frame-capture-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quality max-captures framerate-numerator
                     framerate-denominator)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-captures))
      (common-lisp:list
       (common-lisp:cons "MaxCaptures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "Quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-job-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export (common-lisp:list 'get-job-request 'make-get-job-request))
 (common-lisp:defun make-get-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-response common-lisp:nil
                       ((job :initarg :job :type
                         (common-lisp:or job common-lisp:null) :accessor
                         %get-job-response-job :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-job-response 'make-get-job-response))
 (common-lisp:defun make-get-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-template-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-job-template-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-job-template-request 'make-get-job-template-request))
 (common-lisp:defun make-get-job-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-template-response common-lisp:nil
                       ((job-template :initarg :job-template :type
                         (common-lisp:or job-template common-lisp:null)
                         :accessor %get-job-template-response-job-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-job-template-response
                    'make-get-job-template-response))
 (common-lisp:defun make-get-job-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-template)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template))
      (common-lisp:list
       (common-lisp:cons "JobTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-request common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defun make-get-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-response common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %get-policy-response-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defun make-get-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-preset-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-preset-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-preset-request 'make-get-preset-request))
 (common-lisp:defun make-get-preset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-preset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-preset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-preset-response common-lisp:nil
                       ((preset :initarg :preset :type
                         (common-lisp:or preset common-lisp:null) :accessor
                         %get-preset-response-preset :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-preset-response 'make-get-preset-response))
 (common-lisp:defun make-get-preset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preset)
   (common-lisp:apply #'common-lisp:make-instance 'get-preset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-preset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-preset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preset))
      (common-lisp:list
       (common-lisp:cons "Preset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-preset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-queue-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-queue-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-queue-request 'make-get-queue-request))
 (common-lisp:defun make-get-queue-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-queue-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-queue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-queue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-queue-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-queue-response common-lisp:nil
                       ((queue :initarg :queue :type
                         (common-lisp:or queue common-lisp:null) :accessor
                         %get-queue-response-queue :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-queue-response 'make-get-queue-response))
 (common-lisp:defun make-get-queue-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queue)
   (common-lisp:apply #'common-lisp:make-instance 'get-queue-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-queue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-queue-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-queue-response))
   common-lisp:nil))
(common-lisp:deftype h264adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h264codec-level () 'common-lisp:string)
(common-lisp:deftype h264codec-profile () 'common-lisp:string)
(common-lisp:deftype h264dynamic-sub-gop () 'common-lisp:string)
(common-lisp:deftype h264entropy-encoding () 'common-lisp:string)
(common-lisp:deftype h264field-encoding () 'common-lisp:string)
(common-lisp:deftype h264flicker-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h264framerate-control () 'common-lisp:string)
(common-lisp:deftype h264framerate-conversion-algorithm () 'common-lisp:string)
(common-lisp:deftype h264gop-breference () 'common-lisp:string)
(common-lisp:deftype h264gop-size-units () 'common-lisp:string)
(common-lisp:deftype h264interlace-mode () 'common-lisp:string)
(common-lisp:deftype h264par-control () 'common-lisp:string)
(common-lisp:deftype h264quality-tuning-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h264qvbr-settings common-lisp:nil
                       ((qvbr-quality-level-fine-tune :initarg
                         :qvbr-quality-level-fine-tune :type
                         (common-lisp:or |__doubleMin0Max1| common-lisp:null)
                         :accessor
                         %h264qvbr-settings-qvbr-quality-level-fine-tune
                         :initform common-lisp:nil)
                        (qvbr-quality-level :initarg :qvbr-quality-level :type
                         (common-lisp:or |__integerMin1Max10| common-lisp:null)
                         :accessor %h264qvbr-settings-qvbr-quality-level
                         :initform common-lisp:nil)
                        (max-average-bitrate :initarg :max-average-bitrate
                         :type
                         (common-lisp:or |__integerMin1000Max1152000000|
                                         common-lisp:null)
                         :accessor %h264qvbr-settings-max-average-bitrate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'h264qvbr-settings 'make-h264qvbr-settings))
 (common-lisp:defun make-h264qvbr-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key qvbr-quality-level-fine-tune
                     qvbr-quality-level max-average-bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'h264qvbr-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h264qvbr-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h264qvbr-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-average-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxAverageBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-quality-level))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qvbr-quality-level-fine-tune))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevelFineTune"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h264qvbr-settings))
   common-lisp:nil))
(common-lisp:deftype h264rate-control-mode () 'common-lisp:string)
(common-lisp:deftype h264repeat-pps () 'common-lisp:string)
(common-lisp:deftype h264scan-type-conversion-mode () 'common-lisp:string)
(common-lisp:deftype h264scene-change-detect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h264settings common-lisp:nil
                       ((unregistered-sei-timecode :initarg
                         :unregistered-sei-timecode :type
                         (common-lisp:or h264unregistered-sei-timecode
                                         common-lisp:null)
                         :accessor %h264settings-unregistered-sei-timecode
                         :initform common-lisp:nil)
                        (temporal-adaptive-quantization :initarg
                         :temporal-adaptive-quantization :type
                         (common-lisp:or h264temporal-adaptive-quantization
                                         common-lisp:null)
                         :accessor %h264settings-temporal-adaptive-quantization
                         :initform common-lisp:nil)
                        (telecine :initarg :telecine :type
                         (common-lisp:or h264telecine common-lisp:null)
                         :accessor %h264settings-telecine :initform
                         common-lisp:nil)
                        (syntax :initarg :syntax :type
                         (common-lisp:or h264syntax common-lisp:null) :accessor
                         %h264settings-syntax :initform common-lisp:nil)
                        (spatial-adaptive-quantization :initarg
                         :spatial-adaptive-quantization :type
                         (common-lisp:or h264spatial-adaptive-quantization
                                         common-lisp:null)
                         :accessor %h264settings-spatial-adaptive-quantization
                         :initform common-lisp:nil)
                        (softness :initarg :softness :type
                         (common-lisp:or |__integerMin0Max128|
                                         common-lisp:null)
                         :accessor %h264settings-softness :initform
                         common-lisp:nil)
                        (slow-pal :initarg :slow-pal :type
                         (common-lisp:or h264slow-pal common-lisp:null)
                         :accessor %h264settings-slow-pal :initform
                         common-lisp:nil)
                        (slices :initarg :slices :type
                         (common-lisp:or |__integerMin1Max32| common-lisp:null)
                         :accessor %h264settings-slices :initform
                         common-lisp:nil)
                        (scene-change-detect :initarg :scene-change-detect
                         :type
                         (common-lisp:or h264scene-change-detect
                                         common-lisp:null)
                         :accessor %h264settings-scene-change-detect :initform
                         common-lisp:nil)
                        (scan-type-conversion-mode :initarg
                         :scan-type-conversion-mode :type
                         (common-lisp:or h264scan-type-conversion-mode
                                         common-lisp:null)
                         :accessor %h264settings-scan-type-conversion-mode
                         :initform common-lisp:nil)
                        (repeat-pps :initarg :repeat-pps :type
                         (common-lisp:or h264repeat-pps common-lisp:null)
                         :accessor %h264settings-repeat-pps :initform
                         common-lisp:nil)
                        (rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or h264rate-control-mode
                                         common-lisp:null)
                         :accessor %h264settings-rate-control-mode :initform
                         common-lisp:nil)
                        (qvbr-settings :initarg :qvbr-settings :type
                         (common-lisp:or h264qvbr-settings common-lisp:null)
                         :accessor %h264settings-qvbr-settings :initform
                         common-lisp:nil)
                        (quality-tuning-level :initarg :quality-tuning-level
                         :type
                         (common-lisp:or h264quality-tuning-level
                                         common-lisp:null)
                         :accessor %h264settings-quality-tuning-level :initform
                         common-lisp:nil)
                        (par-numerator :initarg :par-numerator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %h264settings-par-numerator :initform
                         common-lisp:nil)
                        (par-denominator :initarg :par-denominator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %h264settings-par-denominator :initform
                         common-lisp:nil)
                        (par-control :initarg :par-control :type
                         (common-lisp:or h264par-control common-lisp:null)
                         :accessor %h264settings-par-control :initform
                         common-lisp:nil)
                        (number-reference-frames :initarg
                         :number-reference-frames :type
                         (common-lisp:or |__integerMin1Max6| common-lisp:null)
                         :accessor %h264settings-number-reference-frames
                         :initform common-lisp:nil)
                        (number-bframes-between-reference-frames :initarg
                         :number-bframes-between-reference-frames :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor
                         %h264settings-number-bframes-between-reference-frames
                         :initform common-lisp:nil)
                        (min-iinterval :initarg :min-iinterval :type
                         (common-lisp:or |__integerMin0Max30| common-lisp:null)
                         :accessor %h264settings-min-iinterval :initform
                         common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integerMin1000Max1152000000|
                                         common-lisp:null)
                         :accessor %h264settings-max-bitrate :initform
                         common-lisp:nil)
                        (interlace-mode :initarg :interlace-mode :type
                         (common-lisp:or h264interlace-mode common-lisp:null)
                         :accessor %h264settings-interlace-mode :initform
                         common-lisp:nil)
                        (hrd-buffer-size :initarg :hrd-buffer-size :type
                         (common-lisp:or |__integerMin0Max1152000000|
                                         common-lisp:null)
                         :accessor %h264settings-hrd-buffer-size :initform
                         common-lisp:nil)
                        (hrd-buffer-initial-fill-percentage :initarg
                         :hrd-buffer-initial-fill-percentage :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor
                         %h264settings-hrd-buffer-initial-fill-percentage
                         :initform common-lisp:nil)
                        (hrd-buffer-final-fill-percentage :initarg
                         :hrd-buffer-final-fill-percentage :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor
                         %h264settings-hrd-buffer-final-fill-percentage
                         :initform common-lisp:nil)
                        (gop-size-units :initarg :gop-size-units :type
                         (common-lisp:or h264gop-size-units common-lisp:null)
                         :accessor %h264settings-gop-size-units :initform
                         common-lisp:nil)
                        (gop-size :initarg :gop-size :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %h264settings-gop-size :initform
                         common-lisp:nil)
                        (gop-closed-cadence :initarg :gop-closed-cadence :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %h264settings-gop-closed-cadence :initform
                         common-lisp:nil)
                        (gop-breference :initarg :gop-breference :type
                         (common-lisp:or h264gop-breference common-lisp:null)
                         :accessor %h264settings-gop-breference :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %h264settings-framerate-numerator :initform
                         common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %h264settings-framerate-denominator
                         :initform common-lisp:nil)
                        (framerate-conversion-algorithm :initarg
                         :framerate-conversion-algorithm :type
                         (common-lisp:or h264framerate-conversion-algorithm
                                         common-lisp:null)
                         :accessor %h264settings-framerate-conversion-algorithm
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or h264framerate-control
                                         common-lisp:null)
                         :accessor %h264settings-framerate-control :initform
                         common-lisp:nil)
                        (flicker-adaptive-quantization :initarg
                         :flicker-adaptive-quantization :type
                         (common-lisp:or h264flicker-adaptive-quantization
                                         common-lisp:null)
                         :accessor %h264settings-flicker-adaptive-quantization
                         :initform common-lisp:nil)
                        (field-encoding :initarg :field-encoding :type
                         (common-lisp:or h264field-encoding common-lisp:null)
                         :accessor %h264settings-field-encoding :initform
                         common-lisp:nil)
                        (entropy-encoding :initarg :entropy-encoding :type
                         (common-lisp:or h264entropy-encoding common-lisp:null)
                         :accessor %h264settings-entropy-encoding :initform
                         common-lisp:nil)
                        (dynamic-sub-gop :initarg :dynamic-sub-gop :type
                         (common-lisp:or h264dynamic-sub-gop common-lisp:null)
                         :accessor %h264settings-dynamic-sub-gop :initform
                         common-lisp:nil)
                        (codec-profile :initarg :codec-profile :type
                         (common-lisp:or h264codec-profile common-lisp:null)
                         :accessor %h264settings-codec-profile :initform
                         common-lisp:nil)
                        (codec-level :initarg :codec-level :type
                         (common-lisp:or h264codec-level common-lisp:null)
                         :accessor %h264settings-codec-level :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin1000Max1152000000|
                                         common-lisp:null)
                         :accessor %h264settings-bitrate :initform
                         common-lisp:nil)
                        (bandwidth-reduction-filter :initarg
                         :bandwidth-reduction-filter :type
                         (common-lisp:or bandwidth-reduction-filter
                                         common-lisp:null)
                         :accessor %h264settings-bandwidth-reduction-filter
                         :initform common-lisp:nil)
                        (adaptive-quantization :initarg :adaptive-quantization
                         :type
                         (common-lisp:or h264adaptive-quantization
                                         common-lisp:null)
                         :accessor %h264settings-adaptive-quantization
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'h264settings 'make-h264settings))
 (common-lisp:defun make-h264settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unregistered-sei-timecode
                     temporal-adaptive-quantization telecine syntax
                     spatial-adaptive-quantization softness slow-pal slices
                     scene-change-detect scan-type-conversion-mode repeat-pps
                     rate-control-mode qvbr-settings quality-tuning-level
                     par-numerator par-denominator par-control
                     number-reference-frames
                     number-bframes-between-reference-frames min-iinterval
                     max-bitrate interlace-mode hrd-buffer-size
                     hrd-buffer-initial-fill-percentage
                     hrd-buffer-final-fill-percentage gop-size-units gop-size
                     gop-closed-cadence gop-breference framerate-numerator
                     framerate-denominator framerate-conversion-algorithm
                     framerate-control flicker-adaptive-quantization
                     field-encoding entropy-encoding dynamic-sub-gop
                     codec-profile codec-level bitrate
                     bandwidth-reduction-filter adaptive-quantization)
   (common-lisp:apply #'common-lisp:make-instance 'h264settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h264settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h264settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bandwidth-reduction-filter))
      (common-lisp:list
       (common-lisp:cons "BandwidthReductionFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-level))
      (common-lisp:list
       (common-lisp:cons "CodecLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-profile))
      (common-lisp:list
       (common-lisp:cons "CodecProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-sub-gop))
      (common-lisp:list
       (common-lisp:cons "DynamicSubGop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entropy-encoding))
      (common-lisp:list
       (common-lisp:cons "EntropyEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-encoding))
      (common-lisp:list
       (common-lisp:cons "FieldEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flicker-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "FlickerAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-conversion-algorithm))
      (common-lisp:list
       (common-lisp:cons "FramerateConversionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-breference))
      (common-lisp:list
       (common-lisp:cons "GopBReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hrd-buffer-final-fill-percentage))
      (common-lisp:list
       (common-lisp:cons "HrdBufferFinalFillPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hrd-buffer-initial-fill-percentage))
      (common-lisp:list
       (common-lisp:cons "HrdBufferInitialFillPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hrd-buffer-size))
      (common-lisp:list
       (common-lisp:cons "HrdBufferSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interlace-mode))
      (common-lisp:list
       (common-lisp:cons "InterlaceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iinterval))
      (common-lisp:list
       (common-lisp:cons "MinIInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-bframes-between-reference-frames))
      (common-lisp:list
       (common-lisp:cons "NumberBFramesBetweenReferenceFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-reference-frames))
      (common-lisp:list
       (common-lisp:cons "NumberReferenceFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-control))
      (common-lisp:list
       (common-lisp:cons "ParControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quality-tuning-level))
      (common-lisp:list
       (common-lisp:cons "QualityTuningLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-settings))
      (common-lisp:list
       (common-lisp:cons "QvbrSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repeat-pps))
      (common-lisp:list
       (common-lisp:cons "RepeatPps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-type-conversion-mode))
      (common-lisp:list
       (common-lisp:cons "ScanTypeConversionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-change-detect))
      (common-lisp:list
       (common-lisp:cons "SceneChangeDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slow-pal))
      (common-lisp:list
       (common-lisp:cons "SlowPal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'softness))
      (common-lisp:list
       (common-lisp:cons "Softness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spatial-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "SpatialAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'syntax))
      (common-lisp:list
       (common-lisp:cons "Syntax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telecine))
      (common-lisp:list
       (common-lisp:cons "Telecine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "TemporalAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unregistered-sei-timecode))
      (common-lisp:list
       (common-lisp:cons "UnregisteredSeiTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h264settings))
   common-lisp:nil))
(common-lisp:deftype h264slow-pal () 'common-lisp:string)
(common-lisp:deftype h264spatial-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h264syntax () 'common-lisp:string)
(common-lisp:deftype h264telecine () 'common-lisp:string)
(common-lisp:deftype h264temporal-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h264unregistered-sei-timecode () 'common-lisp:string)
(common-lisp:deftype h265adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h265alternate-transfer-function-sei () 'common-lisp:string)
(common-lisp:deftype h265codec-level () 'common-lisp:string)
(common-lisp:deftype h265codec-profile () 'common-lisp:string)
(common-lisp:deftype h265dynamic-sub-gop () 'common-lisp:string)
(common-lisp:deftype h265flicker-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h265framerate-control () 'common-lisp:string)
(common-lisp:deftype h265framerate-conversion-algorithm () 'common-lisp:string)
(common-lisp:deftype h265gop-breference () 'common-lisp:string)
(common-lisp:deftype h265gop-size-units () 'common-lisp:string)
(common-lisp:deftype h265interlace-mode () 'common-lisp:string)
(common-lisp:deftype h265par-control () 'common-lisp:string)
(common-lisp:deftype h265quality-tuning-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h265qvbr-settings common-lisp:nil
                       ((qvbr-quality-level-fine-tune :initarg
                         :qvbr-quality-level-fine-tune :type
                         (common-lisp:or |__doubleMin0Max1| common-lisp:null)
                         :accessor
                         %h265qvbr-settings-qvbr-quality-level-fine-tune
                         :initform common-lisp:nil)
                        (qvbr-quality-level :initarg :qvbr-quality-level :type
                         (common-lisp:or |__integerMin1Max10| common-lisp:null)
                         :accessor %h265qvbr-settings-qvbr-quality-level
                         :initform common-lisp:nil)
                        (max-average-bitrate :initarg :max-average-bitrate
                         :type
                         (common-lisp:or |__integerMin1000Max1466400000|
                                         common-lisp:null)
                         :accessor %h265qvbr-settings-max-average-bitrate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'h265qvbr-settings 'make-h265qvbr-settings))
 (common-lisp:defun make-h265qvbr-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key qvbr-quality-level-fine-tune
                     qvbr-quality-level max-average-bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'h265qvbr-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h265qvbr-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h265qvbr-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-average-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxAverageBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-quality-level))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qvbr-quality-level-fine-tune))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevelFineTune"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h265qvbr-settings))
   common-lisp:nil))
(common-lisp:deftype h265rate-control-mode () 'common-lisp:string)
(common-lisp:deftype h265sample-adaptive-offset-filter-mode ()
  'common-lisp:string)
(common-lisp:deftype h265scan-type-conversion-mode () 'common-lisp:string)
(common-lisp:deftype h265scene-change-detect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h265settings common-lisp:nil
                       ((write-mp4packaging-type :initarg
                         :write-mp4packaging-type :type
                         (common-lisp:or h265write-mp4packaging-type
                                         common-lisp:null)
                         :accessor %h265settings-write-mp4packaging-type
                         :initform common-lisp:nil)
                        (unregistered-sei-timecode :initarg
                         :unregistered-sei-timecode :type
                         (common-lisp:or h265unregistered-sei-timecode
                                         common-lisp:null)
                         :accessor %h265settings-unregistered-sei-timecode
                         :initform common-lisp:nil)
                        (tiles :initarg :tiles :type
                         (common-lisp:or h265tiles common-lisp:null) :accessor
                         %h265settings-tiles :initform common-lisp:nil)
                        (temporal-ids :initarg :temporal-ids :type
                         (common-lisp:or h265temporal-ids common-lisp:null)
                         :accessor %h265settings-temporal-ids :initform
                         common-lisp:nil)
                        (temporal-adaptive-quantization :initarg
                         :temporal-adaptive-quantization :type
                         (common-lisp:or h265temporal-adaptive-quantization
                                         common-lisp:null)
                         :accessor %h265settings-temporal-adaptive-quantization
                         :initform common-lisp:nil)
                        (telecine :initarg :telecine :type
                         (common-lisp:or h265telecine common-lisp:null)
                         :accessor %h265settings-telecine :initform
                         common-lisp:nil)
                        (spatial-adaptive-quantization :initarg
                         :spatial-adaptive-quantization :type
                         (common-lisp:or h265spatial-adaptive-quantization
                                         common-lisp:null)
                         :accessor %h265settings-spatial-adaptive-quantization
                         :initform common-lisp:nil)
                        (slow-pal :initarg :slow-pal :type
                         (common-lisp:or h265slow-pal common-lisp:null)
                         :accessor %h265settings-slow-pal :initform
                         common-lisp:nil)
                        (slices :initarg :slices :type
                         (common-lisp:or |__integerMin1Max32| common-lisp:null)
                         :accessor %h265settings-slices :initform
                         common-lisp:nil)
                        (scene-change-detect :initarg :scene-change-detect
                         :type
                         (common-lisp:or h265scene-change-detect
                                         common-lisp:null)
                         :accessor %h265settings-scene-change-detect :initform
                         common-lisp:nil)
                        (scan-type-conversion-mode :initarg
                         :scan-type-conversion-mode :type
                         (common-lisp:or h265scan-type-conversion-mode
                                         common-lisp:null)
                         :accessor %h265settings-scan-type-conversion-mode
                         :initform common-lisp:nil)
                        (sample-adaptive-offset-filter-mode :initarg
                         :sample-adaptive-offset-filter-mode :type
                         (common-lisp:or h265sample-adaptive-offset-filter-mode
                                         common-lisp:null)
                         :accessor
                         %h265settings-sample-adaptive-offset-filter-mode
                         :initform common-lisp:nil)
                        (rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or h265rate-control-mode
                                         common-lisp:null)
                         :accessor %h265settings-rate-control-mode :initform
                         common-lisp:nil)
                        (qvbr-settings :initarg :qvbr-settings :type
                         (common-lisp:or h265qvbr-settings common-lisp:null)
                         :accessor %h265settings-qvbr-settings :initform
                         common-lisp:nil)
                        (quality-tuning-level :initarg :quality-tuning-level
                         :type
                         (common-lisp:or h265quality-tuning-level
                                         common-lisp:null)
                         :accessor %h265settings-quality-tuning-level :initform
                         common-lisp:nil)
                        (par-numerator :initarg :par-numerator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %h265settings-par-numerator :initform
                         common-lisp:nil)
                        (par-denominator :initarg :par-denominator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %h265settings-par-denominator :initform
                         common-lisp:nil)
                        (par-control :initarg :par-control :type
                         (common-lisp:or h265par-control common-lisp:null)
                         :accessor %h265settings-par-control :initform
                         common-lisp:nil)
                        (number-reference-frames :initarg
                         :number-reference-frames :type
                         (common-lisp:or |__integerMin1Max6| common-lisp:null)
                         :accessor %h265settings-number-reference-frames
                         :initform common-lisp:nil)
                        (number-bframes-between-reference-frames :initarg
                         :number-bframes-between-reference-frames :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor
                         %h265settings-number-bframes-between-reference-frames
                         :initform common-lisp:nil)
                        (min-iinterval :initarg :min-iinterval :type
                         (common-lisp:or |__integerMin0Max30| common-lisp:null)
                         :accessor %h265settings-min-iinterval :initform
                         common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integerMin1000Max1466400000|
                                         common-lisp:null)
                         :accessor %h265settings-max-bitrate :initform
                         common-lisp:nil)
                        (interlace-mode :initarg :interlace-mode :type
                         (common-lisp:or h265interlace-mode common-lisp:null)
                         :accessor %h265settings-interlace-mode :initform
                         common-lisp:nil)
                        (hrd-buffer-size :initarg :hrd-buffer-size :type
                         (common-lisp:or |__integerMin0Max1466400000|
                                         common-lisp:null)
                         :accessor %h265settings-hrd-buffer-size :initform
                         common-lisp:nil)
                        (hrd-buffer-initial-fill-percentage :initarg
                         :hrd-buffer-initial-fill-percentage :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor
                         %h265settings-hrd-buffer-initial-fill-percentage
                         :initform common-lisp:nil)
                        (hrd-buffer-final-fill-percentage :initarg
                         :hrd-buffer-final-fill-percentage :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor
                         %h265settings-hrd-buffer-final-fill-percentage
                         :initform common-lisp:nil)
                        (gop-size-units :initarg :gop-size-units :type
                         (common-lisp:or h265gop-size-units common-lisp:null)
                         :accessor %h265settings-gop-size-units :initform
                         common-lisp:nil)
                        (gop-size :initarg :gop-size :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %h265settings-gop-size :initform
                         common-lisp:nil)
                        (gop-closed-cadence :initarg :gop-closed-cadence :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %h265settings-gop-closed-cadence :initform
                         common-lisp:nil)
                        (gop-breference :initarg :gop-breference :type
                         (common-lisp:or h265gop-breference common-lisp:null)
                         :accessor %h265settings-gop-breference :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %h265settings-framerate-numerator :initform
                         common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %h265settings-framerate-denominator
                         :initform common-lisp:nil)
                        (framerate-conversion-algorithm :initarg
                         :framerate-conversion-algorithm :type
                         (common-lisp:or h265framerate-conversion-algorithm
                                         common-lisp:null)
                         :accessor %h265settings-framerate-conversion-algorithm
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or h265framerate-control
                                         common-lisp:null)
                         :accessor %h265settings-framerate-control :initform
                         common-lisp:nil)
                        (flicker-adaptive-quantization :initarg
                         :flicker-adaptive-quantization :type
                         (common-lisp:or h265flicker-adaptive-quantization
                                         common-lisp:null)
                         :accessor %h265settings-flicker-adaptive-quantization
                         :initform common-lisp:nil)
                        (dynamic-sub-gop :initarg :dynamic-sub-gop :type
                         (common-lisp:or h265dynamic-sub-gop common-lisp:null)
                         :accessor %h265settings-dynamic-sub-gop :initform
                         common-lisp:nil)
                        (codec-profile :initarg :codec-profile :type
                         (common-lisp:or h265codec-profile common-lisp:null)
                         :accessor %h265settings-codec-profile :initform
                         common-lisp:nil)
                        (codec-level :initarg :codec-level :type
                         (common-lisp:or h265codec-level common-lisp:null)
                         :accessor %h265settings-codec-level :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin1000Max1466400000|
                                         common-lisp:null)
                         :accessor %h265settings-bitrate :initform
                         common-lisp:nil)
                        (alternate-transfer-function-sei :initarg
                         :alternate-transfer-function-sei :type
                         (common-lisp:or h265alternate-transfer-function-sei
                                         common-lisp:null)
                         :accessor
                         %h265settings-alternate-transfer-function-sei
                         :initform common-lisp:nil)
                        (adaptive-quantization :initarg :adaptive-quantization
                         :type
                         (common-lisp:or h265adaptive-quantization
                                         common-lisp:null)
                         :accessor %h265settings-adaptive-quantization
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'h265settings 'make-h265settings))
 (common-lisp:defun make-h265settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key write-mp4packaging-type
                     unregistered-sei-timecode tiles temporal-ids
                     temporal-adaptive-quantization telecine
                     spatial-adaptive-quantization slow-pal slices
                     scene-change-detect scan-type-conversion-mode
                     sample-adaptive-offset-filter-mode rate-control-mode
                     qvbr-settings quality-tuning-level par-numerator
                     par-denominator par-control number-reference-frames
                     number-bframes-between-reference-frames min-iinterval
                     max-bitrate interlace-mode hrd-buffer-size
                     hrd-buffer-initial-fill-percentage
                     hrd-buffer-final-fill-percentage gop-size-units gop-size
                     gop-closed-cadence gop-breference framerate-numerator
                     framerate-denominator framerate-conversion-algorithm
                     framerate-control flicker-adaptive-quantization
                     dynamic-sub-gop codec-profile codec-level bitrate
                     alternate-transfer-function-sei adaptive-quantization)
   (common-lisp:apply #'common-lisp:make-instance 'h265settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h265settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h265settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternate-transfer-function-sei))
      (common-lisp:list
       (common-lisp:cons "AlternateTransferFunctionSei"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-level))
      (common-lisp:list
       (common-lisp:cons "CodecLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-profile))
      (common-lisp:list
       (common-lisp:cons "CodecProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-sub-gop))
      (common-lisp:list
       (common-lisp:cons "DynamicSubGop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flicker-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "FlickerAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-conversion-algorithm))
      (common-lisp:list
       (common-lisp:cons "FramerateConversionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-breference))
      (common-lisp:list
       (common-lisp:cons "GopBReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hrd-buffer-final-fill-percentage))
      (common-lisp:list
       (common-lisp:cons "HrdBufferFinalFillPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hrd-buffer-initial-fill-percentage))
      (common-lisp:list
       (common-lisp:cons "HrdBufferInitialFillPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hrd-buffer-size))
      (common-lisp:list
       (common-lisp:cons "HrdBufferSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interlace-mode))
      (common-lisp:list
       (common-lisp:cons "InterlaceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iinterval))
      (common-lisp:list
       (common-lisp:cons "MinIInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-bframes-between-reference-frames))
      (common-lisp:list
       (common-lisp:cons "NumberBFramesBetweenReferenceFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-reference-frames))
      (common-lisp:list
       (common-lisp:cons "NumberReferenceFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-control))
      (common-lisp:list
       (common-lisp:cons "ParControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quality-tuning-level))
      (common-lisp:list
       (common-lisp:cons "QualityTuningLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-settings))
      (common-lisp:list
       (common-lisp:cons "QvbrSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sample-adaptive-offset-filter-mode))
      (common-lisp:list
       (common-lisp:cons "SampleAdaptiveOffsetFilterMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-type-conversion-mode))
      (common-lisp:list
       (common-lisp:cons "ScanTypeConversionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-change-detect))
      (common-lisp:list
       (common-lisp:cons "SceneChangeDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slow-pal))
      (common-lisp:list
       (common-lisp:cons "SlowPal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spatial-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "SpatialAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telecine))
      (common-lisp:list
       (common-lisp:cons "Telecine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "TemporalAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temporal-ids))
      (common-lisp:list
       (common-lisp:cons "TemporalIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tiles))
      (common-lisp:list
       (common-lisp:cons "Tiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unregistered-sei-timecode))
      (common-lisp:list
       (common-lisp:cons "UnregisteredSeiTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'write-mp4packaging-type))
      (common-lisp:list
       (common-lisp:cons "WriteMp4PackagingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h265settings))
   common-lisp:nil))
(common-lisp:deftype h265slow-pal () 'common-lisp:string)
(common-lisp:deftype h265spatial-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h265telecine () 'common-lisp:string)
(common-lisp:deftype h265temporal-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h265temporal-ids () 'common-lisp:string)
(common-lisp:deftype h265tiles () 'common-lisp:string)
(common-lisp:deftype h265unregistered-sei-timecode () 'common-lisp:string)
(common-lisp:deftype h265write-mp4packaging-type () 'common-lisp:string)
(common-lisp:deftype hdrto-sdrtone-mapper () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hdr10metadata common-lisp:nil
                       ((white-point-y :initarg :white-point-y :type
                         (common-lisp:or |__integerMin0Max50000|
                                         common-lisp:null)
                         :accessor %hdr10metadata-white-point-y :initform
                         common-lisp:nil)
                        (white-point-x :initarg :white-point-x :type
                         (common-lisp:or |__integerMin0Max50000|
                                         common-lisp:null)
                         :accessor %hdr10metadata-white-point-x :initform
                         common-lisp:nil)
                        (red-primary-y :initarg :red-primary-y :type
                         (common-lisp:or |__integerMin0Max50000|
                                         common-lisp:null)
                         :accessor %hdr10metadata-red-primary-y :initform
                         common-lisp:nil)
                        (red-primary-x :initarg :red-primary-x :type
                         (common-lisp:or |__integerMin0Max50000|
                                         common-lisp:null)
                         :accessor %hdr10metadata-red-primary-x :initform
                         common-lisp:nil)
                        (min-luminance :initarg :min-luminance :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %hdr10metadata-min-luminance :initform
                         common-lisp:nil)
                        (max-luminance :initarg :max-luminance :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %hdr10metadata-max-luminance :initform
                         common-lisp:nil)
                        (max-frame-average-light-level :initarg
                         :max-frame-average-light-level :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %hdr10metadata-max-frame-average-light-level
                         :initform common-lisp:nil)
                        (max-content-light-level :initarg
                         :max-content-light-level :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %hdr10metadata-max-content-light-level
                         :initform common-lisp:nil)
                        (green-primary-y :initarg :green-primary-y :type
                         (common-lisp:or |__integerMin0Max50000|
                                         common-lisp:null)
                         :accessor %hdr10metadata-green-primary-y :initform
                         common-lisp:nil)
                        (green-primary-x :initarg :green-primary-x :type
                         (common-lisp:or |__integerMin0Max50000|
                                         common-lisp:null)
                         :accessor %hdr10metadata-green-primary-x :initform
                         common-lisp:nil)
                        (blue-primary-y :initarg :blue-primary-y :type
                         (common-lisp:or |__integerMin0Max50000|
                                         common-lisp:null)
                         :accessor %hdr10metadata-blue-primary-y :initform
                         common-lisp:nil)
                        (blue-primary-x :initarg :blue-primary-x :type
                         (common-lisp:or |__integerMin0Max50000|
                                         common-lisp:null)
                         :accessor %hdr10metadata-blue-primary-x :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'hdr10metadata 'make-hdr10metadata))
 (common-lisp:defun make-hdr10metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key white-point-y white-point-x red-primary-y
                     red-primary-x min-luminance max-luminance
                     max-frame-average-light-level max-content-light-level
                     green-primary-y green-primary-x blue-primary-y
                     blue-primary-x)
   (common-lisp:apply #'common-lisp:make-instance 'hdr10metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hdr10metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hdr10metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blue-primary-x))
      (common-lisp:list
       (common-lisp:cons "BluePrimaryX"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blue-primary-y))
      (common-lisp:list
       (common-lisp:cons "BluePrimaryY"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'green-primary-x))
      (common-lisp:list
       (common-lisp:cons "GreenPrimaryX"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'green-primary-y))
      (common-lisp:list
       (common-lisp:cons "GreenPrimaryY"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-content-light-level))
      (common-lisp:list
       (common-lisp:cons "MaxContentLightLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-frame-average-light-level))
      (common-lisp:list
       (common-lisp:cons "MaxFrameAverageLightLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-luminance))
      (common-lisp:list
       (common-lisp:cons "MaxLuminance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-luminance))
      (common-lisp:list
       (common-lisp:cons "MinLuminance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'red-primary-x))
      (common-lisp:list
       (common-lisp:cons "RedPrimaryX"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'red-primary-y))
      (common-lisp:list
       (common-lisp:cons "RedPrimaryY"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'white-point-x))
      (common-lisp:list
       (common-lisp:cons "WhitePointX"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'white-point-y))
      (common-lisp:list
       (common-lisp:cons "WhitePointY"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hdr10metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass hdr10plus common-lisp:nil
                       ((target-monitor-nits :initarg :target-monitor-nits
                         :type
                         (common-lisp:or |__integerMin0Max4000|
                                         common-lisp:null)
                         :accessor %hdr10plus-target-monitor-nits :initform
                         common-lisp:nil)
                        (mastering-monitor-nits :initarg
                         :mastering-monitor-nits :type
                         (common-lisp:or |__integerMin0Max4000|
                                         common-lisp:null)
                         :accessor %hdr10plus-mastering-monitor-nits :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'hdr10plus 'make-hdr10plus))
 (common-lisp:defun make-hdr10plus
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-monitor-nits
                     mastering-monitor-nits)
   (common-lisp:apply #'common-lisp:make-instance 'hdr10plus
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hdr10plus))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hdr10plus))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mastering-monitor-nits))
      (common-lisp:list
       (common-lisp:cons "MasteringMonitorNits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-monitor-nits))
      (common-lisp:list
       (common-lisp:cons "TargetMonitorNits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hdr10plus))
   common-lisp:nil))
(common-lisp:deftype hls-ad-markers () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-additional-manifest common-lisp:nil
                       ((selected-outputs :initarg :selected-outputs :type
                         (common-lisp:or |__listOf__stringMin1|
                                         common-lisp:null)
                         :accessor %hls-additional-manifest-selected-outputs
                         :initform common-lisp:nil)
                        (manifest-name-modifier :initarg
                         :manifest-name-modifier :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         %hls-additional-manifest-manifest-name-modifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-additional-manifest 'make-hls-additional-manifest))
 (common-lisp:defun make-hls-additional-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selected-outputs manifest-name-modifier)
   (common-lisp:apply #'common-lisp:make-instance 'hls-additional-manifest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-additional-manifest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-additional-manifest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-name-modifier))
      (common-lisp:list
       (common-lisp:cons "ManifestNameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-outputs))
      (common-lisp:list
       (common-lisp:cons "SelectedOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-additional-manifest))
   common-lisp:nil))
(common-lisp:deftype hls-audio-only-container () 'common-lisp:string)
(common-lisp:deftype hls-audio-only-header () 'common-lisp:string)
(common-lisp:deftype hls-audio-track-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-caption-language-mapping common-lisp:nil
                       ((language-description :initarg :language-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %hls-caption-language-mapping-language-description
                         :initform common-lisp:nil)
                        (language-code :initarg :language-code :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor %hls-caption-language-mapping-language-code
                         :initform common-lisp:nil)
                        (custom-language-code :initarg :custom-language-code
                         :type
                         (common-lisp:or |__stringMin3Max3PatternAZaZ3|
                                         common-lisp:null)
                         :accessor
                         %hls-caption-language-mapping-custom-language-code
                         :initform common-lisp:nil)
                        (caption-channel :initarg :caption-channel :type
                         (common-lisp:or
                          |__integerMinNegative2147483648Max2147483647|
                          common-lisp:null)
                         :accessor
                         %hls-caption-language-mapping-caption-channel
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-caption-language-mapping
                    'make-hls-caption-language-mapping))
 (common-lisp:defun make-hls-caption-language-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language-description language-code
                     custom-language-code caption-channel)
   (common-lisp:apply #'common-lisp:make-instance 'hls-caption-language-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-caption-language-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-caption-language-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-channel))
      (common-lisp:list
       (common-lisp:cons "CaptionChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-language-code))
      (common-lisp:list
       (common-lisp:cons "CustomLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-description))
      (common-lisp:list
       (common-lisp:cons "LanguageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-caption-language-mapping))
   common-lisp:nil))
(common-lisp:deftype hls-caption-language-setting () 'common-lisp:string)
(common-lisp:deftype hls-caption-segment-length-control () 'common-lisp:string)
(common-lisp:deftype hls-client-cache () 'common-lisp:string)
(common-lisp:deftype hls-codec-specification () 'common-lisp:string)
(common-lisp:deftype hls-descriptive-video-service-flag () 'common-lisp:string)
(common-lisp:deftype hls-directory-structure () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-encryption-settings common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or hls-key-provider-type
                                         common-lisp:null)
                         :accessor %hls-encryption-settings-type :initform
                         common-lisp:nil)
                        (static-key-provider :initarg :static-key-provider
                         :type
                         (common-lisp:or static-key-provider common-lisp:null)
                         :accessor %hls-encryption-settings-static-key-provider
                         :initform common-lisp:nil)
                        (speke-key-provider :initarg :speke-key-provider :type
                         (common-lisp:or speke-key-provider common-lisp:null)
                         :accessor %hls-encryption-settings-speke-key-provider
                         :initform common-lisp:nil)
                        (offline-encrypted :initarg :offline-encrypted :type
                         (common-lisp:or hls-offline-encrypted
                                         common-lisp:null)
                         :accessor %hls-encryption-settings-offline-encrypted
                         :initform common-lisp:nil)
                        (initialization-vector-in-manifest :initarg
                         :initialization-vector-in-manifest :type
                         (common-lisp:or hls-initialization-vector-in-manifest
                                         common-lisp:null)
                         :accessor
                         %hls-encryption-settings-initialization-vector-in-manifest
                         :initform common-lisp:nil)
                        (encryption-method :initarg :encryption-method :type
                         (common-lisp:or hls-encryption-type common-lisp:null)
                         :accessor %hls-encryption-settings-encryption-method
                         :initform common-lisp:nil)
                        (constant-initialization-vector :initarg
                         :constant-initialization-vector :type
                         (common-lisp:or |__stringMin32Max32Pattern09aFAF32|
                                         common-lisp:null)
                         :accessor
                         %hls-encryption-settings-constant-initialization-vector
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-encryption-settings 'make-hls-encryption-settings))
 (common-lisp:defun make-hls-encryption-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type static-key-provider
                     speke-key-provider offline-encrypted
                     initialization-vector-in-manifest encryption-method
                     constant-initialization-vector)
   (common-lisp:apply #'common-lisp:make-instance 'hls-encryption-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-encryption-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-encryption-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constant-initialization-vector))
      (common-lisp:list
       (common-lisp:cons "ConstantInitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-method))
      (common-lisp:list
       (common-lisp:cons "EncryptionMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-vector-in-manifest))
      (common-lisp:list
       (common-lisp:cons "InitializationVectorInManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offline-encrypted))
      (common-lisp:list
       (common-lisp:cons "OfflineEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speke-key-provider))
      (common-lisp:list
       (common-lisp:cons "SpekeKeyProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-key-provider))
      (common-lisp:list
       (common-lisp:cons "StaticKeyProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-encryption-settings))
   common-lisp:nil))
(common-lisp:deftype hls-encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-group-settings common-lisp:nil
                       ((timestamp-delta-milliseconds :initarg
                         :timestamp-delta-milliseconds :type
                         (common-lisp:or
                          |__integerMinNegative2147483648Max2147483647|
                          common-lisp:null)
                         :accessor
                         %hls-group-settings-timestamp-delta-milliseconds
                         :initform common-lisp:nil)
                        (timed-metadata-id3period :initarg
                         :timed-metadata-id3period :type
                         (common-lisp:or
                          |__integerMinNegative2147483648Max2147483647|
                          common-lisp:null)
                         :accessor %hls-group-settings-timed-metadata-id3period
                         :initform common-lisp:nil)
                        (timed-metadata-id3frame :initarg
                         :timed-metadata-id3frame :type
                         (common-lisp:or hls-timed-metadata-id3frame
                                         common-lisp:null)
                         :accessor %hls-group-settings-timed-metadata-id3frame
                         :initform common-lisp:nil)
                        (target-duration-compatibility-mode :initarg
                         :target-duration-compatibility-mode :type
                         (common-lisp:or hls-target-duration-compatibility-mode
                                         common-lisp:null)
                         :accessor
                         %hls-group-settings-target-duration-compatibility-mode
                         :initform common-lisp:nil)
                        (stream-inf-resolution :initarg :stream-inf-resolution
                         :type
                         (common-lisp:or hls-stream-inf-resolution
                                         common-lisp:null)
                         :accessor %hls-group-settings-stream-inf-resolution
                         :initform common-lisp:nil)
                        (segments-per-subdirectory :initarg
                         :segments-per-subdirectory :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor
                         %hls-group-settings-segments-per-subdirectory
                         :initform common-lisp:nil)
                        (segment-length-control :initarg
                         :segment-length-control :type
                         (common-lisp:or hls-segment-length-control
                                         common-lisp:null)
                         :accessor %hls-group-settings-segment-length-control
                         :initform common-lisp:nil)
                        (segment-length :initarg :segment-length :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %hls-group-settings-segment-length :initform
                         common-lisp:nil)
                        (segment-control :initarg :segment-control :type
                         (common-lisp:or hls-segment-control common-lisp:null)
                         :accessor %hls-group-settings-segment-control
                         :initform common-lisp:nil)
                        (program-date-time-period :initarg
                         :program-date-time-period :type
                         (common-lisp:or |__integerMin0Max3600|
                                         common-lisp:null)
                         :accessor %hls-group-settings-program-date-time-period
                         :initform common-lisp:nil)
                        (program-date-time :initarg :program-date-time :type
                         (common-lisp:or hls-program-date-time
                                         common-lisp:null)
                         :accessor %hls-group-settings-program-date-time
                         :initform common-lisp:nil)
                        (output-selection :initarg :output-selection :type
                         (common-lisp:or hls-output-selection common-lisp:null)
                         :accessor %hls-group-settings-output-selection
                         :initform common-lisp:nil)
                        (min-segment-length :initarg :min-segment-length :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %hls-group-settings-min-segment-length
                         :initform common-lisp:nil)
                        (min-final-segment-length :initarg
                         :min-final-segment-length :type
                         (common-lisp:or |__doubleMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %hls-group-settings-min-final-segment-length
                         :initform common-lisp:nil)
                        (manifest-duration-format :initarg
                         :manifest-duration-format :type
                         (common-lisp:or hls-manifest-duration-format
                                         common-lisp:null)
                         :accessor %hls-group-settings-manifest-duration-format
                         :initform common-lisp:nil)
                        (manifest-compression :initarg :manifest-compression
                         :type
                         (common-lisp:or hls-manifest-compression
                                         common-lisp:null)
                         :accessor %hls-group-settings-manifest-compression
                         :initform common-lisp:nil)
                        (image-based-trick-play-settings :initarg
                         :image-based-trick-play-settings :type
                         (common-lisp:or hls-image-based-trick-play-settings
                                         common-lisp:null)
                         :accessor
                         %hls-group-settings-image-based-trick-play-settings
                         :initform common-lisp:nil)
                        (image-based-trick-play :initarg
                         :image-based-trick-play :type
                         (common-lisp:or hls-image-based-trick-play
                                         common-lisp:null)
                         :accessor %hls-group-settings-image-based-trick-play
                         :initform common-lisp:nil)
                        (encryption :initarg :encryption :type
                         (common-lisp:or hls-encryption-settings
                                         common-lisp:null)
                         :accessor %hls-group-settings-encryption :initform
                         common-lisp:nil)
                        (directory-structure :initarg :directory-structure
                         :type
                         (common-lisp:or hls-directory-structure
                                         common-lisp:null)
                         :accessor %hls-group-settings-directory-structure
                         :initform common-lisp:nil)
                        (destination-settings :initarg :destination-settings
                         :type
                         (common-lisp:or destination-settings common-lisp:null)
                         :accessor %hls-group-settings-destination-settings
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or |__stringPatternS3| common-lisp:null)
                         :accessor %hls-group-settings-destination :initform
                         common-lisp:nil)
                        (codec-specification :initarg :codec-specification
                         :type
                         (common-lisp:or hls-codec-specification
                                         common-lisp:null)
                         :accessor %hls-group-settings-codec-specification
                         :initform common-lisp:nil)
                        (client-cache :initarg :client-cache :type
                         (common-lisp:or hls-client-cache common-lisp:null)
                         :accessor %hls-group-settings-client-cache :initform
                         common-lisp:nil)
                        (caption-segment-length-control :initarg
                         :caption-segment-length-control :type
                         (common-lisp:or hls-caption-segment-length-control
                                         common-lisp:null)
                         :accessor
                         %hls-group-settings-caption-segment-length-control
                         :initform common-lisp:nil)
                        (caption-language-setting :initarg
                         :caption-language-setting :type
                         (common-lisp:or hls-caption-language-setting
                                         common-lisp:null)
                         :accessor %hls-group-settings-caption-language-setting
                         :initform common-lisp:nil)
                        (caption-language-mappings :initarg
                         :caption-language-mappings :type
                         (common-lisp:or |__listOfHlsCaptionLanguageMapping|
                                         common-lisp:null)
                         :accessor
                         %hls-group-settings-caption-language-mappings
                         :initform common-lisp:nil)
                        (base-url :initarg :base-url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-group-settings-base-url :initform
                         common-lisp:nil)
                        (audio-only-header :initarg :audio-only-header :type
                         (common-lisp:or hls-audio-only-header
                                         common-lisp:null)
                         :accessor %hls-group-settings-audio-only-header
                         :initform common-lisp:nil)
                        (additional-manifests :initarg :additional-manifests
                         :type
                         (common-lisp:or |__listOfHlsAdditionalManifest|
                                         common-lisp:null)
                         :accessor %hls-group-settings-additional-manifests
                         :initform common-lisp:nil)
                        (ad-markers :initarg :ad-markers :type
                         (common-lisp:or |__listOfHlsAdMarkers|
                                         common-lisp:null)
                         :accessor %hls-group-settings-ad-markers :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-group-settings 'make-hls-group-settings))
 (common-lisp:defun make-hls-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp-delta-milliseconds
                     timed-metadata-id3period timed-metadata-id3frame
                     target-duration-compatibility-mode stream-inf-resolution
                     segments-per-subdirectory segment-length-control
                     segment-length segment-control program-date-time-period
                     program-date-time output-selection min-segment-length
                     min-final-segment-length manifest-duration-format
                     manifest-compression image-based-trick-play-settings
                     image-based-trick-play encryption directory-structure
                     destination-settings destination codec-specification
                     client-cache caption-segment-length-control
                     caption-language-setting caption-language-mappings
                     base-url audio-only-header additional-manifests
                     ad-markers)
   (common-lisp:apply #'common-lisp:make-instance 'hls-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-markers))
      (common-lisp:list
       (common-lisp:cons "AdMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-manifests))
      (common-lisp:list
       (common-lisp:cons "AdditionalManifests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-only-header))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url))
      (common-lisp:list
       (common-lisp:cons "BaseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-language-mappings))
      (common-lisp:list
       (common-lisp:cons "CaptionLanguageMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-language-setting))
      (common-lisp:list
       (common-lisp:cons "CaptionLanguageSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-segment-length-control))
      (common-lisp:list
       (common-lisp:cons "CaptionSegmentLengthControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-cache))
      (common-lisp:list
       (common-lisp:cons "ClientCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-specification))
      (common-lisp:list
       (common-lisp:cons "CodecSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-settings))
      (common-lisp:list
       (common-lisp:cons "DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-structure))
      (common-lisp:list
       (common-lisp:cons "DirectoryStructure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-based-trick-play))
      (common-lisp:list
       (common-lisp:cons "ImageBasedTrickPlay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-based-trick-play-settings))
      (common-lisp:list
       (common-lisp:cons "ImageBasedTrickPlaySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-compression))
      (common-lisp:list
       (common-lisp:cons "ManifestCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-duration-format))
      (common-lisp:list
       (common-lisp:cons "ManifestDurationFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'min-final-segment-length))
      (common-lisp:list
       (common-lisp:cons "MinFinalSegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-segment-length))
      (common-lisp:list
       (common-lisp:cons "MinSegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-selection))
      (common-lisp:list
       (common-lisp:cons "OutputSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-date-time))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'program-date-time-period))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-control))
      (common-lisp:list
       (common-lisp:cons "SegmentControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-length))
      (common-lisp:list
       (common-lisp:cons "SegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segment-length-control))
      (common-lisp:list
       (common-lisp:cons "SegmentLengthControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segments-per-subdirectory))
      (common-lisp:list
       (common-lisp:cons "SegmentsPerSubdirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-inf-resolution))
      (common-lisp:list
       (common-lisp:cons "StreamInfResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-duration-compatibility-mode))
      (common-lisp:list
       (common-lisp:cons "TargetDurationCompatibilityMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3frame))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Frame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3period))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-delta-milliseconds))
      (common-lisp:list
       (common-lisp:cons "TimestampDeltaMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-group-settings))
   common-lisp:nil))
(common-lisp:deftype hls-iframe-only-manifest () 'common-lisp:string)
(common-lisp:deftype hls-image-based-trick-play () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-image-based-trick-play-settings common-lisp:nil
                       ((tile-width :initarg :tile-width :type
                         (common-lisp:or |__integerMin1Max512|
                                         common-lisp:null)
                         :accessor
                         %hls-image-based-trick-play-settings-tile-width
                         :initform common-lisp:nil)
                        (tile-height :initarg :tile-height :type
                         (common-lisp:or |__integerMin1Max2048|
                                         common-lisp:null)
                         :accessor
                         %hls-image-based-trick-play-settings-tile-height
                         :initform common-lisp:nil)
                        (thumbnail-width :initarg :thumbnail-width :type
                         (common-lisp:or |__integerMin8Max4096|
                                         common-lisp:null)
                         :accessor
                         %hls-image-based-trick-play-settings-thumbnail-width
                         :initform common-lisp:nil)
                        (thumbnail-interval :initarg :thumbnail-interval :type
                         (common-lisp:or |__doubleMin0Max2147483647|
                                         common-lisp:null)
                         :accessor
                         %hls-image-based-trick-play-settings-thumbnail-interval
                         :initform common-lisp:nil)
                        (thumbnail-height :initarg :thumbnail-height :type
                         (common-lisp:or |__integerMin2Max4096|
                                         common-lisp:null)
                         :accessor
                         %hls-image-based-trick-play-settings-thumbnail-height
                         :initform common-lisp:nil)
                        (interval-cadence :initarg :interval-cadence :type
                         (common-lisp:or hls-interval-cadence common-lisp:null)
                         :accessor
                         %hls-image-based-trick-play-settings-interval-cadence
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-image-based-trick-play-settings
                    'make-hls-image-based-trick-play-settings))
 (common-lisp:defun make-hls-image-based-trick-play-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tile-width tile-height thumbnail-width
                     thumbnail-interval thumbnail-height interval-cadence)
   (common-lisp:apply #'common-lisp:make-instance
                      'hls-image-based-trick-play-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-image-based-trick-play-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-image-based-trick-play-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-cadence))
      (common-lisp:list
       (common-lisp:cons "IntervalCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-height))
      (common-lisp:list
       (common-lisp:cons "ThumbnailHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-interval))
      (common-lisp:list
       (common-lisp:cons "ThumbnailInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbnail-width))
      (common-lisp:list
       (common-lisp:cons "ThumbnailWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-height))
      (common-lisp:list
       (common-lisp:cons "TileHeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tile-width))
      (common-lisp:list
       (common-lisp:cons "TileWidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-image-based-trick-play-settings))
   common-lisp:nil))
(common-lisp:deftype hls-initialization-vector-in-manifest ()
  'common-lisp:string)
(common-lisp:deftype hls-interval-cadence () 'common-lisp:string)
(common-lisp:deftype hls-key-provider-type () 'common-lisp:string)
(common-lisp:deftype hls-manifest-compression () 'common-lisp:string)
(common-lisp:deftype hls-manifest-duration-format () 'common-lisp:string)
(common-lisp:deftype hls-offline-encrypted () 'common-lisp:string)
(common-lisp:deftype hls-output-selection () 'common-lisp:string)
(common-lisp:deftype hls-program-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-rendition-group-settings common-lisp:nil
                       ((rendition-name :initarg :rendition-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-rendition-group-settings-rendition-name :initform
                         common-lisp:nil)
                        (rendition-language-code :initarg
                         :rendition-language-code :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         %hls-rendition-group-settings-rendition-language-code
                         :initform common-lisp:nil)
                        (rendition-group-id :initarg :rendition-group-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-rendition-group-settings-rendition-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-rendition-group-settings
                    'make-hls-rendition-group-settings))
 (common-lisp:defun make-hls-rendition-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rendition-name rendition-language-code
                     rendition-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'hls-rendition-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-rendition-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-rendition-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendition-group-id))
      (common-lisp:list
       (common-lisp:cons "RenditionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rendition-language-code))
      (common-lisp:list
       (common-lisp:cons "RenditionLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendition-name))
      (common-lisp:list
       (common-lisp:cons "RenditionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-rendition-group-settings))
   common-lisp:nil))
(common-lisp:deftype hls-segment-control () 'common-lisp:string)
(common-lisp:deftype hls-segment-length-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-settings common-lisp:nil
                       ((segment-modifier :initarg :segment-modifier :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-settings-segment-modifier :initform
                         common-lisp:nil)
                        (iframe-only-manifest :initarg :iframe-only-manifest
                         :type
                         (common-lisp:or hls-iframe-only-manifest
                                         common-lisp:null)
                         :accessor %hls-settings-iframe-only-manifest :initform
                         common-lisp:nil)
                        (descriptive-video-service-flag :initarg
                         :descriptive-video-service-flag :type
                         (common-lisp:or hls-descriptive-video-service-flag
                                         common-lisp:null)
                         :accessor %hls-settings-descriptive-video-service-flag
                         :initform common-lisp:nil)
                        (audio-track-type :initarg :audio-track-type :type
                         (common-lisp:or hls-audio-track-type common-lisp:null)
                         :accessor %hls-settings-audio-track-type :initform
                         common-lisp:nil)
                        (audio-rendition-sets :initarg :audio-rendition-sets
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %hls-settings-audio-rendition-sets :initform
                         common-lisp:nil)
                        (audio-only-container :initarg :audio-only-container
                         :type
                         (common-lisp:or hls-audio-only-container
                                         common-lisp:null)
                         :accessor %hls-settings-audio-only-container :initform
                         common-lisp:nil)
                        (audio-group-id :initarg :audio-group-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-settings-audio-group-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'hls-settings 'make-hls-settings))
 (common-lisp:defun make-hls-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key segment-modifier iframe-only-manifest
                     descriptive-video-service-flag audio-track-type
                     audio-rendition-sets audio-only-container audio-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-group-id))
      (common-lisp:list
       (common-lisp:cons "AudioGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-only-container))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-rendition-sets))
      (common-lisp:list
       (common-lisp:cons "AudioRenditionSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-track-type))
      (common-lisp:list
       (common-lisp:cons "AudioTrackType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'descriptive-video-service-flag))
      (common-lisp:list
       (common-lisp:cons "DescriptiveVideoServiceFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iframe-only-manifest))
      (common-lisp:list
       (common-lisp:cons "IFrameOnlyManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-modifier))
      (common-lisp:list
       (common-lisp:cons "SegmentModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-settings))
   common-lisp:nil))
(common-lisp:deftype hls-stream-inf-resolution () 'common-lisp:string)
(common-lisp:deftype hls-target-duration-compatibility-mode ()
  'common-lisp:string)
(common-lisp:deftype hls-timed-metadata-id3frame () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hop-destination common-lisp:nil
                       ((wait-minutes :initarg :wait-minutes :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %hop-destination-wait-minutes :initform
                         common-lisp:nil)
                        (queue :initarg :queue :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hop-destination-queue :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or |__integerMinNegative50Max50|
                                         common-lisp:null)
                         :accessor %hop-destination-priority :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'hop-destination 'make-hop-destination))
 (common-lisp:defun make-hop-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wait-minutes queue priority)
   (common-lisp:apply #'common-lisp:make-instance 'hop-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hop-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hop-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wait-minutes))
      (common-lisp:list
       (common-lisp:cons "WaitMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hop-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass id3insertion common-lisp:nil
                       ((timecode :initarg :timecode :type
                         (common-lisp:or |__stringPattern010920405090509092|
                                         common-lisp:null)
                         :accessor %id3insertion-timecode :initform
                         common-lisp:nil)
                        (id3 :initarg :id3 :type
                         (common-lisp:or |__stringPatternAZaZ0902|
                                         common-lisp:null)
                         :accessor %id3insertion-id3 :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'id3insertion 'make-id3insertion))
 (common-lisp:defun make-id3insertion
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timecode id3)
   (common-lisp:apply #'common-lisp:make-instance 'id3insertion
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input id3insertion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input id3insertion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id3))
      (common-lisp:list
       (common-lisp:cons "Id3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode))
      (common-lisp:list
       (common-lisp:cons "Timecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input id3insertion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass image-inserter common-lisp:nil
                       ((sdr-reference-white-level :initarg
                         :sdr-reference-white-level :type
                         (common-lisp:or |__integerMin100Max1000|
                                         common-lisp:null)
                         :accessor %image-inserter-sdr-reference-white-level
                         :initform common-lisp:nil)
                        (insertable-images :initarg :insertable-images :type
                         (common-lisp:or |__listOfInsertableImage|
                                         common-lisp:null)
                         :accessor %image-inserter-insertable-images :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'image-inserter 'make-image-inserter))
 (common-lisp:defun make-image-inserter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sdr-reference-white-level
                     insertable-images)
   (common-lisp:apply #'common-lisp:make-instance 'image-inserter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-inserter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-inserter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insertable-images))
      (common-lisp:list
       (common-lisp:cons "InsertableImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sdr-reference-white-level))
      (common-lisp:list
       (common-lisp:cons "SdrReferenceWhiteLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-inserter))
   common-lisp:nil))
(common-lisp:deftype imsc-accessibility-subs () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass imsc-destination-settings common-lisp:nil
                       ((style-passthrough :initarg :style-passthrough :type
                         (common-lisp:or imsc-style-passthrough
                                         common-lisp:null)
                         :accessor %imsc-destination-settings-style-passthrough
                         :initform common-lisp:nil)
                        (accessibility :initarg :accessibility :type
                         (common-lisp:or imsc-accessibility-subs
                                         common-lisp:null)
                         :accessor %imsc-destination-settings-accessibility
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'imsc-destination-settings
                    'make-imsc-destination-settings))
 (common-lisp:defun make-imsc-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key style-passthrough accessibility)
   (common-lisp:apply #'common-lisp:make-instance 'imsc-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          imsc-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          imsc-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessibility))
      (common-lisp:list
       (common-lisp:cons "Accessibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-passthrough))
      (common-lisp:list
       (common-lisp:cons "StylePassthrough"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          imsc-destination-settings))
   common-lisp:nil))
(common-lisp:deftype imsc-style-passthrough () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input common-lisp:nil
                       ((video-selector :initarg :video-selector :type
                         (common-lisp:or video-selector common-lisp:null)
                         :accessor %input-video-selector :initform
                         common-lisp:nil)
                        (video-generator :initarg :video-generator :type
                         (common-lisp:or input-video-generator
                                         common-lisp:null)
                         :accessor %input-video-generator :initform
                         common-lisp:nil)
                        (timecode-start :initarg :timecode-start :type
                         (common-lisp:or
                          |__stringMin11Max11Pattern01D20305D205D|
                          common-lisp:null)
                         :accessor %input-timecode-start :initform
                         common-lisp:nil)
                        (timecode-source :initarg :timecode-source :type
                         (common-lisp:or input-timecode-source
                                         common-lisp:null)
                         :accessor %input-timecode-source :initform
                         common-lisp:nil)
                        (supplemental-imps :initarg :supplemental-imps :type
                         (common-lisp:or |__listOf__stringPatternS3ASSETMAPXml|
                                         common-lisp:null)
                         :accessor %input-supplemental-imps :initform
                         common-lisp:nil)
                        (psi-control :initarg :psi-control :type
                         (common-lisp:or input-psi-control common-lisp:null)
                         :accessor %input-psi-control :initform
                         common-lisp:nil)
                        (program-number :initarg :program-number :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %input-program-number :initform
                         common-lisp:nil)
                        (position :initarg :position :type
                         (common-lisp:or rectangle common-lisp:null) :accessor
                         %input-position :initform common-lisp:nil)
                        (input-scan-type :initarg :input-scan-type :type
                         (common-lisp:or input-scan-type common-lisp:null)
                         :accessor %input-input-scan-type :initform
                         common-lisp:nil)
                        (input-clippings :initarg :input-clippings :type
                         (common-lisp:or |__listOfInputClipping|
                                         common-lisp:null)
                         :accessor %input-input-clippings :initform
                         common-lisp:nil)
                        (image-inserter :initarg :image-inserter :type
                         (common-lisp:or image-inserter common-lisp:null)
                         :accessor %input-image-inserter :initform
                         common-lisp:nil)
                        (filter-strength :initarg :filter-strength :type
                         (common-lisp:or |__integerMin0Max5| common-lisp:null)
                         :accessor %input-filter-strength :initform
                         common-lisp:nil)
                        (filter-enable :initarg :filter-enable :type
                         (common-lisp:or input-filter-enable common-lisp:null)
                         :accessor %input-filter-enable :initform
                         common-lisp:nil)
                        (file-input :initarg :file-input :type
                         (common-lisp:or |__stringPatternS3Https|
                                         common-lisp:null)
                         :accessor %input-file-input :initform common-lisp:nil)
                        (dolby-vision-metadata-xml :initarg
                         :dolby-vision-metadata-xml :type
                         (common-lisp:or
                          |__stringMin14PatternS3XmlXMLHttpsXmlXML|
                          common-lisp:null)
                         :accessor %input-dolby-vision-metadata-xml :initform
                         common-lisp:nil)
                        (denoise-filter :initarg :denoise-filter :type
                         (common-lisp:or input-denoise-filter common-lisp:null)
                         :accessor %input-denoise-filter :initform
                         common-lisp:nil)
                        (decryption-settings :initarg :decryption-settings
                         :type
                         (common-lisp:or input-decryption-settings
                                         common-lisp:null)
                         :accessor %input-decryption-settings :initform
                         common-lisp:nil)
                        (deblock-filter :initarg :deblock-filter :type
                         (common-lisp:or input-deblock-filter common-lisp:null)
                         :accessor %input-deblock-filter :initform
                         common-lisp:nil)
                        (crop :initarg :crop :type
                         (common-lisp:or rectangle common-lisp:null) :accessor
                         %input-crop :initform common-lisp:nil)
                        (caption-selectors :initarg :caption-selectors :type
                         (common-lisp:or |__mapOfCaptionSelector|
                                         common-lisp:null)
                         :accessor %input-caption-selectors :initform
                         common-lisp:nil)
                        (audio-selectors :initarg :audio-selectors :type
                         (common-lisp:or |__mapOfAudioSelector|
                                         common-lisp:null)
                         :accessor %input-audio-selectors :initform
                         common-lisp:nil)
                        (audio-selector-groups :initarg :audio-selector-groups
                         :type
                         (common-lisp:or |__mapOfAudioSelectorGroup|
                                         common-lisp:null)
                         :accessor %input-audio-selector-groups :initform
                         common-lisp:nil)
                        (advanced-input-filter-settings :initarg
                         :advanced-input-filter-settings :type
                         (common-lisp:or advanced-input-filter-settings
                                         common-lisp:null)
                         :accessor %input-advanced-input-filter-settings
                         :initform common-lisp:nil)
                        (advanced-input-filter :initarg :advanced-input-filter
                         :type
                         (common-lisp:or advanced-input-filter
                                         common-lisp:null)
                         :accessor %input-advanced-input-filter :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'input 'make-input))
 (common-lisp:defun make-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-selector video-generator
                     timecode-start timecode-source supplemental-imps
                     psi-control program-number position input-scan-type
                     input-clippings image-inserter filter-strength
                     filter-enable file-input dolby-vision-metadata-xml
                     denoise-filter decryption-settings deblock-filter crop
                     caption-selectors audio-selectors audio-selector-groups
                     advanced-input-filter-settings advanced-input-filter)
   (common-lisp:apply #'common-lisp:make-instance 'input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-input-filter))
      (common-lisp:list
       (common-lisp:cons "AdvancedInputFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-input-filter-settings))
      (common-lisp:list
       (common-lisp:cons "AdvancedInputFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-selector-groups))
      (common-lisp:list
       (common-lisp:cons "AudioSelectorGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selectors))
      (common-lisp:list
       (common-lisp:cons "AudioSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-selectors))
      (common-lisp:list
       (common-lisp:cons "CaptionSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crop))
      (common-lisp:list
       (common-lisp:cons "Crop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deblock-filter))
      (common-lisp:list
       (common-lisp:cons "DeblockFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decryption-settings))
      (common-lisp:list
       (common-lisp:cons "DecryptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'denoise-filter))
      (common-lisp:list
       (common-lisp:cons "DenoiseFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dolby-vision-metadata-xml))
      (common-lisp:list
       (common-lisp:cons "DolbyVisionMetadataXml"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-input))
      (common-lisp:list
       (common-lisp:cons "FileInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-enable))
      (common-lisp:list
       (common-lisp:cons "FilterEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-strength))
      (common-lisp:list
       (common-lisp:cons "FilterStrength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-inserter))
      (common-lisp:list
       (common-lisp:cons "ImageInserter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-clippings))
      (common-lisp:list
       (common-lisp:cons "InputClippings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-scan-type))
      (common-lisp:list
       (common-lisp:cons "InputScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-number))
      (common-lisp:list
       (common-lisp:cons "ProgramNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'psi-control))
      (common-lisp:list
       (common-lisp:cons "PsiControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supplemental-imps))
      (common-lisp:list
       (common-lisp:cons "SupplementalImps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-source))
      (common-lisp:list
       (common-lisp:cons "TimecodeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-start))
      (common-lisp:list
       (common-lisp:cons "TimecodeStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-generator))
      (common-lisp:list
       (common-lisp:cons "VideoGenerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-selector))
      (common-lisp:list
       (common-lisp:cons "VideoSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-clipping common-lisp:nil
                       ((start-timecode :initarg :start-timecode :type
                         (common-lisp:or |__stringPattern010920405090509092|
                                         common-lisp:null)
                         :accessor %input-clipping-start-timecode :initform
                         common-lisp:nil)
                        (end-timecode :initarg :end-timecode :type
                         (common-lisp:or |__stringPattern010920405090509092|
                                         common-lisp:null)
                         :accessor %input-clipping-end-timecode :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'input-clipping 'make-input-clipping))
 (common-lisp:defun make-input-clipping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-timecode end-timecode)
   (common-lisp:apply #'common-lisp:make-instance 'input-clipping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-clipping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-clipping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timecode))
      (common-lisp:list
       (common-lisp:cons "EndTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timecode))
      (common-lisp:list
       (common-lisp:cons "StartTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-clipping))
   common-lisp:nil))
(common-lisp:deftype input-deblock-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-decryption-settings common-lisp:nil
                       ((kms-key-region :initarg :kms-key-region :type
                         (common-lisp:or
                          |__stringMin9Max19PatternAZ26EastWestCentralNorthSouthEastWest1912|
                          common-lisp:null)
                         :accessor %input-decryption-settings-kms-key-region
                         :initform common-lisp:nil)
                        (initialization-vector :initarg :initialization-vector
                         :type
                         (common-lisp:or
                          |__stringMin16Max24PatternAZaZ0922AZaZ0916|
                          common-lisp:null)
                         :accessor
                         %input-decryption-settings-initialization-vector
                         :initform common-lisp:nil)
                        (encrypted-decryption-key :initarg
                         :encrypted-decryption-key :type
                         (common-lisp:or |__stringMin24Max512PatternAZaZ0902|
                                         common-lisp:null)
                         :accessor
                         %input-decryption-settings-encrypted-decryption-key
                         :initform common-lisp:nil)
                        (decryption-mode :initarg :decryption-mode :type
                         (common-lisp:or decryption-mode common-lisp:null)
                         :accessor %input-decryption-settings-decryption-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-decryption-settings
                    'make-input-decryption-settings))
 (common-lisp:defun make-input-decryption-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-region initialization-vector
                     encrypted-decryption-key decryption-mode)
   (common-lisp:apply #'common-lisp:make-instance 'input-decryption-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-decryption-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-decryption-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decryption-mode))
      (common-lisp:list
       (common-lisp:cons "DecryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encrypted-decryption-key))
      (common-lisp:list
       (common-lisp:cons "EncryptedDecryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-vector))
      (common-lisp:list
       (common-lisp:cons "InitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-region))
      (common-lisp:list
       (common-lisp:cons "KmsKeyRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-decryption-settings))
   common-lisp:nil))
(common-lisp:deftype input-denoise-filter () 'common-lisp:string)
(common-lisp:deftype input-filter-enable () 'common-lisp:string)
(common-lisp:deftype input-policy () 'common-lisp:string)
(common-lisp:deftype input-psi-control () 'common-lisp:string)
(common-lisp:deftype input-rotate () 'common-lisp:string)
(common-lisp:deftype input-sample-range () 'common-lisp:string)
(common-lisp:deftype input-scan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-template common-lisp:nil
                       ((video-selector :initarg :video-selector :type
                         (common-lisp:or video-selector common-lisp:null)
                         :accessor %input-template-video-selector :initform
                         common-lisp:nil)
                        (timecode-start :initarg :timecode-start :type
                         (common-lisp:or
                          |__stringMin11Max11Pattern01D20305D205D|
                          common-lisp:null)
                         :accessor %input-template-timecode-start :initform
                         common-lisp:nil)
                        (timecode-source :initarg :timecode-source :type
                         (common-lisp:or input-timecode-source
                                         common-lisp:null)
                         :accessor %input-template-timecode-source :initform
                         common-lisp:nil)
                        (psi-control :initarg :psi-control :type
                         (common-lisp:or input-psi-control common-lisp:null)
                         :accessor %input-template-psi-control :initform
                         common-lisp:nil)
                        (program-number :initarg :program-number :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %input-template-program-number :initform
                         common-lisp:nil)
                        (position :initarg :position :type
                         (common-lisp:or rectangle common-lisp:null) :accessor
                         %input-template-position :initform common-lisp:nil)
                        (input-scan-type :initarg :input-scan-type :type
                         (common-lisp:or input-scan-type common-lisp:null)
                         :accessor %input-template-input-scan-type :initform
                         common-lisp:nil)
                        (input-clippings :initarg :input-clippings :type
                         (common-lisp:or |__listOfInputClipping|
                                         common-lisp:null)
                         :accessor %input-template-input-clippings :initform
                         common-lisp:nil)
                        (image-inserter :initarg :image-inserter :type
                         (common-lisp:or image-inserter common-lisp:null)
                         :accessor %input-template-image-inserter :initform
                         common-lisp:nil)
                        (filter-strength :initarg :filter-strength :type
                         (common-lisp:or |__integerMin0Max5| common-lisp:null)
                         :accessor %input-template-filter-strength :initform
                         common-lisp:nil)
                        (filter-enable :initarg :filter-enable :type
                         (common-lisp:or input-filter-enable common-lisp:null)
                         :accessor %input-template-filter-enable :initform
                         common-lisp:nil)
                        (dolby-vision-metadata-xml :initarg
                         :dolby-vision-metadata-xml :type
                         (common-lisp:or
                          |__stringMin14PatternS3XmlXMLHttpsXmlXML|
                          common-lisp:null)
                         :accessor %input-template-dolby-vision-metadata-xml
                         :initform common-lisp:nil)
                        (denoise-filter :initarg :denoise-filter :type
                         (common-lisp:or input-denoise-filter common-lisp:null)
                         :accessor %input-template-denoise-filter :initform
                         common-lisp:nil)
                        (deblock-filter :initarg :deblock-filter :type
                         (common-lisp:or input-deblock-filter common-lisp:null)
                         :accessor %input-template-deblock-filter :initform
                         common-lisp:nil)
                        (crop :initarg :crop :type
                         (common-lisp:or rectangle common-lisp:null) :accessor
                         %input-template-crop :initform common-lisp:nil)
                        (caption-selectors :initarg :caption-selectors :type
                         (common-lisp:or |__mapOfCaptionSelector|
                                         common-lisp:null)
                         :accessor %input-template-caption-selectors :initform
                         common-lisp:nil)
                        (audio-selectors :initarg :audio-selectors :type
                         (common-lisp:or |__mapOfAudioSelector|
                                         common-lisp:null)
                         :accessor %input-template-audio-selectors :initform
                         common-lisp:nil)
                        (audio-selector-groups :initarg :audio-selector-groups
                         :type
                         (common-lisp:or |__mapOfAudioSelectorGroup|
                                         common-lisp:null)
                         :accessor %input-template-audio-selector-groups
                         :initform common-lisp:nil)
                        (advanced-input-filter-settings :initarg
                         :advanced-input-filter-settings :type
                         (common-lisp:or advanced-input-filter-settings
                                         common-lisp:null)
                         :accessor
                         %input-template-advanced-input-filter-settings
                         :initform common-lisp:nil)
                        (advanced-input-filter :initarg :advanced-input-filter
                         :type
                         (common-lisp:or advanced-input-filter
                                         common-lisp:null)
                         :accessor %input-template-advanced-input-filter
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'input-template 'make-input-template))
 (common-lisp:defun make-input-template
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-selector timecode-start
                     timecode-source psi-control program-number position
                     input-scan-type input-clippings image-inserter
                     filter-strength filter-enable dolby-vision-metadata-xml
                     denoise-filter deblock-filter crop caption-selectors
                     audio-selectors audio-selector-groups
                     advanced-input-filter-settings advanced-input-filter)
   (common-lisp:apply #'common-lisp:make-instance 'input-template
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-input-filter))
      (common-lisp:list
       (common-lisp:cons "AdvancedInputFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-input-filter-settings))
      (common-lisp:list
       (common-lisp:cons "AdvancedInputFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-selector-groups))
      (common-lisp:list
       (common-lisp:cons "AudioSelectorGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selectors))
      (common-lisp:list
       (common-lisp:cons "AudioSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-selectors))
      (common-lisp:list
       (common-lisp:cons "CaptionSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crop))
      (common-lisp:list
       (common-lisp:cons "Crop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deblock-filter))
      (common-lisp:list
       (common-lisp:cons "DeblockFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'denoise-filter))
      (common-lisp:list
       (common-lisp:cons "DenoiseFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dolby-vision-metadata-xml))
      (common-lisp:list
       (common-lisp:cons "DolbyVisionMetadataXml"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-enable))
      (common-lisp:list
       (common-lisp:cons "FilterEnable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-strength))
      (common-lisp:list
       (common-lisp:cons "FilterStrength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-inserter))
      (common-lisp:list
       (common-lisp:cons "ImageInserter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-clippings))
      (common-lisp:list
       (common-lisp:cons "InputClippings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-scan-type))
      (common-lisp:list
       (common-lisp:cons "InputScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-number))
      (common-lisp:list
       (common-lisp:cons "ProgramNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'psi-control))
      (common-lisp:list
       (common-lisp:cons "PsiControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-source))
      (common-lisp:list
       (common-lisp:cons "TimecodeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-start))
      (common-lisp:list
       (common-lisp:cons "TimecodeStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-selector))
      (common-lisp:list
       (common-lisp:cons "VideoSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-template))
   common-lisp:nil))
(common-lisp:deftype input-timecode-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-video-generator common-lisp:nil
                       ((duration :initarg :duration :type
                         (common-lisp:or |__integerMin50Max86400000|
                                         common-lisp:null)
                         :accessor %input-video-generator-duration :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-video-generator 'make-input-video-generator))
 (common-lisp:defun make-input-video-generator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key duration)
   (common-lisp:apply #'common-lisp:make-instance 'input-video-generator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-video-generator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-video-generator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-video-generator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass insertable-image common-lisp:nil
                       ((width :initarg :width :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %insertable-image-width :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or |__stringPattern01D20305D205D|
                                         common-lisp:null)
                         :accessor %insertable-image-start-time :initform
                         common-lisp:nil)
                        (opacity :initarg :opacity :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor %insertable-image-opacity :initform
                         common-lisp:nil)
                        (layer :initarg :layer :type
                         (common-lisp:or |__integerMin0Max99| common-lisp:null)
                         :accessor %insertable-image-layer :initform
                         common-lisp:nil)
                        (image-y :initarg :image-y :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %insertable-image-image-y :initform
                         common-lisp:nil)
                        (image-x :initarg :image-x :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %insertable-image-image-x :initform
                         common-lisp:nil)
                        (image-inserter-input :initarg :image-inserter-input
                         :type
                         (common-lisp:or
                          |__stringMin14PatternS3BmpBMPPngPNGTgaTGAHttpsBmpBMPPngPNGTgaTGA|
                          common-lisp:null)
                         :accessor %insertable-image-image-inserter-input
                         :initform common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %insertable-image-height :initform
                         common-lisp:nil)
                        (fade-out :initarg :fade-out :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %insertable-image-fade-out :initform
                         common-lisp:nil)
                        (fade-in :initarg :fade-in :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %insertable-image-fade-in :initform
                         common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %insertable-image-duration :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'insertable-image 'make-insertable-image))
 (common-lisp:defun make-insertable-image
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width start-time opacity layer image-y
                     image-x image-inserter-input height fade-out fade-in
                     duration)
   (common-lisp:apply #'common-lisp:make-instance 'insertable-image
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insertable-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insertable-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-in))
      (common-lisp:list
       (common-lisp:cons "FadeIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-out))
      (common-lisp:list
       (common-lisp:cons "FadeOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-inserter-input))
      (common-lisp:list
       (common-lisp:cons "ImageInserterInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-x))
      (common-lisp:list
       (common-lisp:cons "ImageX"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-y))
      (common-lisp:list
       (common-lisp:cons "ImageY"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer))
      (common-lisp:list
       (common-lisp:cons "Layer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opacity))
      (common-lisp:list
       (common-lisp:cons "Opacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insertable-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (mediaconvert-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass job common-lisp:nil
                       ((warnings :initarg :warnings :type
                         (common-lisp:or |__listOfWarningGroup|
                                         common-lisp:null)
                         :accessor %job-warnings :initform common-lisp:nil)
                        (user-metadata :initarg :user-metadata :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %job-user-metadata :initform
                         common-lisp:nil)
                        (timing :initarg :timing :type
                         (common-lisp:or timing common-lisp:null) :accessor
                         %job-timing :initform common-lisp:nil)
                        (status-update-interval :initarg
                         :status-update-interval :type
                         (common-lisp:or status-update-interval
                                         common-lisp:null)
                         :accessor %job-status-update-interval :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %job-status :initform common-lisp:nil)
                        (simulate-reserved-queue :initarg
                         :simulate-reserved-queue :type
                         (common-lisp:or simulate-reserved-queue
                                         common-lisp:null)
                         :accessor %job-simulate-reserved-queue :initform
                         common-lisp:nil)
                        (settings :initarg :settings :type
                         (common-lisp:or job-settings common-lisp:null)
                         :accessor %job-settings :initform
                         (common-lisp:error ":settings is required"))
                        (role :initarg :role :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-role :initform
                         (common-lisp:error ":role is required"))
                        (retry-count :initarg :retry-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %job-retry-count :initform common-lisp:nil)
                        (queue-transitions :initarg :queue-transitions :type
                         (common-lisp:or |__listOfQueueTransition|
                                         common-lisp:null)
                         :accessor %job-queue-transitions :initform
                         common-lisp:nil)
                        (queue :initarg :queue :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-queue :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or |__integerMinNegative50Max50|
                                         common-lisp:null)
                         :accessor %job-priority :initform common-lisp:nil)
                        (output-group-details :initarg :output-group-details
                         :type
                         (common-lisp:or |__listOfOutputGroupDetail|
                                         common-lisp:null)
                         :accessor %job-output-group-details :initform
                         common-lisp:nil)
                        (messages :initarg :messages :type
                         (common-lisp:or job-messages common-lisp:null)
                         :accessor %job-messages :initform common-lisp:nil)
                        (job-template :initarg :job-template :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-job-template :initform common-lisp:nil)
                        (job-percent-complete :initarg :job-percent-complete
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor %job-job-percent-complete :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-id :initform common-lisp:nil)
                        (hop-destinations :initarg :hop-destinations :type
                         (common-lisp:or |__listOfHopDestination|
                                         common-lisp:null)
                         :accessor %job-hop-destinations :initform
                         common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-error-message :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %job-error-code :initform common-lisp:nil)
                        (current-phase :initarg :current-phase :type
                         (common-lisp:or job-phase common-lisp:null) :accessor
                         %job-current-phase :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %job-created-at :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %job-client-request-token :initform
                         common-lisp:nil)
                        (billing-tags-source :initarg :billing-tags-source
                         :type
                         (common-lisp:or billing-tags-source common-lisp:null)
                         :accessor %job-billing-tags-source :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-arn :initform common-lisp:nil)
                        (acceleration-status :initarg :acceleration-status
                         :type
                         (common-lisp:or acceleration-status common-lisp:null)
                         :accessor %job-acceleration-status :initform
                         common-lisp:nil)
                        (acceleration-settings :initarg :acceleration-settings
                         :type
                         (common-lisp:or acceleration-settings
                                         common-lisp:null)
                         :accessor %job-acceleration-settings :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defun make-job
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key warnings user-metadata timing
                     status-update-interval status simulate-reserved-queue
                     settings role retry-count queue-transitions queue priority
                     output-group-details messages job-template
                     job-percent-complete id hop-destinations error-message
                     error-code current-phase created-at client-request-token
                     billing-tags-source arn acceleration-status
                     acceleration-settings)
   (common-lisp:apply #'common-lisp:make-instance 'job
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acceleration-settings))
      (common-lisp:list
       (common-lisp:cons "AccelerationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'acceleration-status))
      (common-lisp:list
       (common-lisp:cons "AccelerationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billing-tags-source))
      (common-lisp:list
       (common-lisp:cons "BillingTagsSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-phase))
      (common-lisp:list
       (common-lisp:cons "CurrentPhase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hop-destinations))
      (common-lisp:list
       (common-lisp:cons "HopDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-percent-complete))
      (common-lisp:list
       (common-lisp:cons "JobPercentComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template))
      (common-lisp:list
       (common-lisp:cons "JobTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "Messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-group-details))
      (common-lisp:list
       (common-lisp:cons "OutputGroupDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-transitions))
      (common-lisp:list
       (common-lisp:cons "QueueTransitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-count))
      (common-lisp:list
       (common-lisp:cons "RetryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'simulate-reserved-queue))
      (common-lisp:list
       (common-lisp:cons "SimulateReservedQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-update-interval))
      (common-lisp:list
       (common-lisp:cons "StatusUpdateInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timing))
      (common-lisp:list
       (common-lisp:cons "Timing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-metadata))
      (common-lisp:list
       (common-lisp:cons "UserMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warnings))
      (common-lisp:list
       (common-lisp:cons "Warnings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-messages common-lisp:nil
                       ((warning :initarg :warning :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %job-messages-warning :initform
                         common-lisp:nil)
                        (info :initarg :info :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %job-messages-info :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-messages 'make-job-messages))
 (common-lisp:defun make-job-messages
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key warning info)
   (common-lisp:apply #'common-lisp:make-instance 'job-messages
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-messages))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-messages))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'info))
      (common-lisp:list
       (common-lisp:cons "Info"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warning))
      (common-lisp:list
       (common-lisp:cons "Warning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-messages))
   common-lisp:nil))
(common-lisp:deftype job-phase () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-settings common-lisp:nil
                       ((timed-metadata-insertion :initarg
                         :timed-metadata-insertion :type
                         (common-lisp:or timed-metadata-insertion
                                         common-lisp:null)
                         :accessor %job-settings-timed-metadata-insertion
                         :initform common-lisp:nil)
                        (timecode-config :initarg :timecode-config :type
                         (common-lisp:or timecode-config common-lisp:null)
                         :accessor %job-settings-timecode-config :initform
                         common-lisp:nil)
                        (output-groups :initarg :output-groups :type
                         (common-lisp:or |__listOfOutputGroup|
                                         common-lisp:null)
                         :accessor %job-settings-output-groups :initform
                         common-lisp:nil)
                        (nielsen-non-linear-watermark :initarg
                         :nielsen-non-linear-watermark :type
                         (common-lisp:or nielsen-non-linear-watermark-settings
                                         common-lisp:null)
                         :accessor %job-settings-nielsen-non-linear-watermark
                         :initform common-lisp:nil)
                        (nielsen-configuration :initarg :nielsen-configuration
                         :type
                         (common-lisp:or nielsen-configuration
                                         common-lisp:null)
                         :accessor %job-settings-nielsen-configuration
                         :initform common-lisp:nil)
                        (motion-image-inserter :initarg :motion-image-inserter
                         :type
                         (common-lisp:or motion-image-inserter
                                         common-lisp:null)
                         :accessor %job-settings-motion-image-inserter
                         :initform common-lisp:nil)
                        (kantar-watermark :initarg :kantar-watermark :type
                         (common-lisp:or kantar-watermark-settings
                                         common-lisp:null)
                         :accessor %job-settings-kantar-watermark :initform
                         common-lisp:nil)
                        (inputs :initarg :inputs :type
                         (common-lisp:or |__listOfInput| common-lisp:null)
                         :accessor %job-settings-inputs :initform
                         common-lisp:nil)
                        (extended-data-services :initarg
                         :extended-data-services :type
                         (common-lisp:or extended-data-services
                                         common-lisp:null)
                         :accessor %job-settings-extended-data-services
                         :initform common-lisp:nil)
                        (esam :initarg :esam :type
                         (common-lisp:or esam-settings common-lisp:null)
                         :accessor %job-settings-esam :initform
                         common-lisp:nil)
                        (avail-blanking :initarg :avail-blanking :type
                         (common-lisp:or avail-blanking common-lisp:null)
                         :accessor %job-settings-avail-blanking :initform
                         common-lisp:nil)
                        (ad-avail-offset :initarg :ad-avail-offset :type
                         (common-lisp:or |__integerMinNegative1000Max1000|
                                         common-lisp:null)
                         :accessor %job-settings-ad-avail-offset :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-settings 'make-job-settings))
 (common-lisp:defun make-job-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timed-metadata-insertion timecode-config
                     output-groups nielsen-non-linear-watermark
                     nielsen-configuration motion-image-inserter
                     kantar-watermark inputs extended-data-services esam
                     avail-blanking ad-avail-offset)
   (common-lisp:apply #'common-lisp:make-instance 'job-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-blanking))
      (common-lisp:list
       (common-lisp:cons "AvailBlanking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'esam))
      (common-lisp:list
       (common-lisp:cons "Esam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extended-data-services))
      (common-lisp:list
       (common-lisp:cons "ExtendedDataServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kantar-watermark))
      (common-lisp:list
       (common-lisp:cons "KantarWatermark"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-image-inserter))
      (common-lisp:list
       (common-lisp:cons "MotionImageInserter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-configuration))
      (common-lisp:list
       (common-lisp:cons "NielsenConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-non-linear-watermark))
      (common-lisp:list
       (common-lisp:cons "NielsenNonLinearWatermark"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-groups))
      (common-lisp:list
       (common-lisp:cons "OutputGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-config))
      (common-lisp:list
       (common-lisp:cons "TimecodeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-insertion))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-settings))
   common-lisp:nil))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-template common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %job-template-type :initform common-lisp:nil)
                        (status-update-interval :initarg
                         :status-update-interval :type
                         (common-lisp:or status-update-interval
                                         common-lisp:null)
                         :accessor %job-template-status-update-interval
                         :initform common-lisp:nil)
                        (settings :initarg :settings :type
                         (common-lisp:or job-template-settings
                                         common-lisp:null)
                         :accessor %job-template-settings :initform
                         (common-lisp:error ":settings is required"))
                        (queue :initarg :queue :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-template-queue :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or |__integerMinNegative50Max50|
                                         common-lisp:null)
                         :accessor %job-template-priority :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-template-name :initform
                         (common-lisp:error ":name is required"))
                        (last-updated :initarg :last-updated :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %job-template-last-updated :initform
                         common-lisp:nil)
                        (hop-destinations :initarg :hop-destinations :type
                         (common-lisp:or |__listOfHopDestination|
                                         common-lisp:null)
                         :accessor %job-template-hop-destinations :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-template-description :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %job-template-created-at :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-template-category :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %job-template-arn :initform common-lisp:nil)
                        (acceleration-settings :initarg :acceleration-settings
                         :type
                         (common-lisp:or acceleration-settings
                                         common-lisp:null)
                         :accessor %job-template-acceleration-settings
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'job-template 'make-job-template))
 (common-lisp:defun make-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type status-update-interval settings
                     queue priority name last-updated hop-destinations
                     description created-at category arn acceleration-settings)
   (common-lisp:apply #'common-lisp:make-instance 'job-template
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acceleration-settings))
      (common-lisp:list
       (common-lisp:cons "AccelerationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hop-destinations))
      (common-lisp:list
       (common-lisp:cons "HopDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-update-interval))
      (common-lisp:list
       (common-lisp:cons "StatusUpdateInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-template))
   common-lisp:nil))
(common-lisp:deftype job-template-list-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-template-settings common-lisp:nil
                       ((timed-metadata-insertion :initarg
                         :timed-metadata-insertion :type
                         (common-lisp:or timed-metadata-insertion
                                         common-lisp:null)
                         :accessor
                         %job-template-settings-timed-metadata-insertion
                         :initform common-lisp:nil)
                        (timecode-config :initarg :timecode-config :type
                         (common-lisp:or timecode-config common-lisp:null)
                         :accessor %job-template-settings-timecode-config
                         :initform common-lisp:nil)
                        (output-groups :initarg :output-groups :type
                         (common-lisp:or |__listOfOutputGroup|
                                         common-lisp:null)
                         :accessor %job-template-settings-output-groups
                         :initform common-lisp:nil)
                        (nielsen-non-linear-watermark :initarg
                         :nielsen-non-linear-watermark :type
                         (common-lisp:or nielsen-non-linear-watermark-settings
                                         common-lisp:null)
                         :accessor
                         %job-template-settings-nielsen-non-linear-watermark
                         :initform common-lisp:nil)
                        (nielsen-configuration :initarg :nielsen-configuration
                         :type
                         (common-lisp:or nielsen-configuration
                                         common-lisp:null)
                         :accessor %job-template-settings-nielsen-configuration
                         :initform common-lisp:nil)
                        (motion-image-inserter :initarg :motion-image-inserter
                         :type
                         (common-lisp:or motion-image-inserter
                                         common-lisp:null)
                         :accessor %job-template-settings-motion-image-inserter
                         :initform common-lisp:nil)
                        (kantar-watermark :initarg :kantar-watermark :type
                         (common-lisp:or kantar-watermark-settings
                                         common-lisp:null)
                         :accessor %job-template-settings-kantar-watermark
                         :initform common-lisp:nil)
                        (inputs :initarg :inputs :type
                         (common-lisp:or |__listOfInputTemplate|
                                         common-lisp:null)
                         :accessor %job-template-settings-inputs :initform
                         common-lisp:nil)
                        (extended-data-services :initarg
                         :extended-data-services :type
                         (common-lisp:or extended-data-services
                                         common-lisp:null)
                         :accessor
                         %job-template-settings-extended-data-services
                         :initform common-lisp:nil)
                        (esam :initarg :esam :type
                         (common-lisp:or esam-settings common-lisp:null)
                         :accessor %job-template-settings-esam :initform
                         common-lisp:nil)
                        (avail-blanking :initarg :avail-blanking :type
                         (common-lisp:or avail-blanking common-lisp:null)
                         :accessor %job-template-settings-avail-blanking
                         :initform common-lisp:nil)
                        (ad-avail-offset :initarg :ad-avail-offset :type
                         (common-lisp:or |__integerMinNegative1000Max1000|
                                         common-lisp:null)
                         :accessor %job-template-settings-ad-avail-offset
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-template-settings 'make-job-template-settings))
 (common-lisp:defun make-job-template-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timed-metadata-insertion timecode-config
                     output-groups nielsen-non-linear-watermark
                     nielsen-configuration motion-image-inserter
                     kantar-watermark inputs extended-data-services esam
                     avail-blanking ad-avail-offset)
   (common-lisp:apply #'common-lisp:make-instance 'job-template-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-template-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-template-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-blanking))
      (common-lisp:list
       (common-lisp:cons "AvailBlanking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'esam))
      (common-lisp:list
       (common-lisp:cons "Esam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extended-data-services))
      (common-lisp:list
       (common-lisp:cons "ExtendedDataServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kantar-watermark))
      (common-lisp:list
       (common-lisp:cons "KantarWatermark"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-image-inserter))
      (common-lisp:list
       (common-lisp:cons "MotionImageInserter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-configuration))
      (common-lisp:list
       (common-lisp:cons "NielsenConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-non-linear-watermark))
      (common-lisp:list
       (common-lisp:cons "NielsenNonLinearWatermark"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-groups))
      (common-lisp:list
       (common-lisp:cons "OutputGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-config))
      (common-lisp:list
       (common-lisp:cons "TimecodeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-insertion))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-template-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass kantar-watermark-settings common-lisp:nil
                       ((metadata8 :initarg :metadata8 :type
                         (common-lisp:or |__stringMin1Max50| common-lisp:null)
                         :accessor %kantar-watermark-settings-metadata8
                         :initform common-lisp:nil)
                        (metadata7 :initarg :metadata7 :type
                         (common-lisp:or |__stringMin1Max50| common-lisp:null)
                         :accessor %kantar-watermark-settings-metadata7
                         :initform common-lisp:nil)
                        (metadata6 :initarg :metadata6 :type
                         (common-lisp:or |__stringMin1Max50| common-lisp:null)
                         :accessor %kantar-watermark-settings-metadata6
                         :initform common-lisp:nil)
                        (metadata5 :initarg :metadata5 :type
                         (common-lisp:or |__stringMin1Max50| common-lisp:null)
                         :accessor %kantar-watermark-settings-metadata5
                         :initform common-lisp:nil)
                        (metadata4 :initarg :metadata4 :type
                         (common-lisp:or |__stringMin1Max50| common-lisp:null)
                         :accessor %kantar-watermark-settings-metadata4
                         :initform common-lisp:nil)
                        (metadata3 :initarg :metadata3 :type
                         (common-lisp:or |__stringMin1Max50| common-lisp:null)
                         :accessor %kantar-watermark-settings-metadata3
                         :initform common-lisp:nil)
                        (log-destination :initarg :log-destination :type
                         (common-lisp:or |__stringPatternS3| common-lisp:null)
                         :accessor %kantar-watermark-settings-log-destination
                         :initform common-lisp:nil)
                        (kantar-server-url :initarg :kantar-server-url :type
                         (common-lisp:or |__stringPatternHttpsKantarmediaComFr|
                                         common-lisp:null)
                         :accessor %kantar-watermark-settings-kantar-server-url
                         :initform common-lisp:nil)
                        (kantar-license-id :initarg :kantar-license-id :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %kantar-watermark-settings-kantar-license-id
                         :initform common-lisp:nil)
                        (file-offset :initarg :file-offset :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %kantar-watermark-settings-file-offset
                         :initform common-lisp:nil)
                        (credentials-secret-name :initarg
                         :credentials-secret-name :type
                         (common-lisp:or |__stringMin1Max512PatternAZAZ09|
                                         common-lisp:null)
                         :accessor
                         %kantar-watermark-settings-credentials-secret-name
                         :initform common-lisp:nil)
                        (content-reference :initarg :content-reference :type
                         (common-lisp:or |__stringMin1Max50PatternAZAZ09|
                                         common-lisp:null)
                         :accessor %kantar-watermark-settings-content-reference
                         :initform common-lisp:nil)
                        (channel-name :initarg :channel-name :type
                         (common-lisp:or |__stringMin1Max20| common-lisp:null)
                         :accessor %kantar-watermark-settings-channel-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'kantar-watermark-settings
                    'make-kantar-watermark-settings))
 (common-lisp:defun make-kantar-watermark-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata8 metadata7 metadata6 metadata5
                     metadata4 metadata3 log-destination kantar-server-url
                     kantar-license-id file-offset credentials-secret-name
                     content-reference channel-name)
   (common-lisp:apply #'common-lisp:make-instance 'kantar-watermark-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kantar-watermark-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kantar-watermark-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "ChannelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-reference))
      (common-lisp:list
       (common-lisp:cons "ContentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'credentials-secret-name))
      (common-lisp:list
       (common-lisp:cons "CredentialsSecretName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-offset))
      (common-lisp:list
       (common-lisp:cons "FileOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kantar-license-id))
      (common-lisp:list
       (common-lisp:cons "KantarLicenseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kantar-server-url))
      (common-lisp:list
       (common-lisp:cons "KantarServerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-destination))
      (common-lisp:list
       (common-lisp:cons "LogDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata3))
      (common-lisp:list
       (common-lisp:cons "Metadata3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata4))
      (common-lisp:list
       (common-lisp:cons "Metadata4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata5))
      (common-lisp:list
       (common-lisp:cons "Metadata5"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata6))
      (common-lisp:list
       (common-lisp:cons "Metadata6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata7))
      (common-lisp:list
       (common-lisp:cons "Metadata7"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata8))
      (common-lisp:list
       (common-lisp:cons "Metadata8"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kantar-watermark-settings))
   common-lisp:nil))
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-job-templates-request common-lisp:nil
                       ((order :initarg :order :type
                         (common-lisp:or order common-lisp:null) :accessor
                         %list-job-templates-request-order :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-job-templates-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or |__integerMin1Max20| common-lisp:null)
                         :accessor %list-job-templates-request-max-results
                         :initform common-lisp:nil)
                        (list-by :initarg :list-by :type
                         (common-lisp:or job-template-list-by common-lisp:null)
                         :accessor %list-job-templates-request-list-by
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-job-templates-request-category :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-job-templates-request
                    'make-list-job-templates-request))
 (common-lisp:defun make-list-job-templates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order next-token max-results list-by
                     category)
   (common-lisp:apply #'common-lisp:make-instance 'list-job-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-job-templates-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-job-templates-response-next-token :initform
                         common-lisp:nil)
                        (job-templates :initarg :job-templates :type
                         (common-lisp:or |__listOfJobTemplate|
                                         common-lisp:null)
                         :accessor %list-job-templates-response-job-templates
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-job-templates-response
                    'make-list-job-templates-response))
 (common-lisp:defun make-list-job-templates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token job-templates)
   (common-lisp:apply #'common-lisp:make-instance 'list-job-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-templates))
      (common-lisp:list
       (common-lisp:cons "JobTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-job-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-request common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         %list-jobs-request-status :initform common-lisp:nil)
                        (queue :initarg :queue :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-jobs-request-queue :initform common-lisp:nil)
                        (order :initarg :order :type
                         (common-lisp:or order common-lisp:null) :accessor
                         %list-jobs-request-order :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-jobs-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or |__integerMin1Max20| common-lisp:null)
                         :accessor %list-jobs-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defun make-list-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status queue order next-token
                     max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-jobs-response-next-token :initform
                         common-lisp:nil)
                        (jobs :initarg :jobs :type
                         (common-lisp:or |__listOfJob| common-lisp:null)
                         :accessor %list-jobs-response-jobs :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-jobs-response 'make-list-jobs-response))
 (common-lisp:defun make-list-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token jobs)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-presets-request common-lisp:nil
                       ((order :initarg :order :type
                         (common-lisp:or order common-lisp:null) :accessor
                         %list-presets-request-order :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-presets-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or |__integerMin1Max20| common-lisp:null)
                         :accessor %list-presets-request-max-results :initform
                         common-lisp:nil)
                        (list-by :initarg :list-by :type
                         (common-lisp:or preset-list-by common-lisp:null)
                         :accessor %list-presets-request-list-by :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-presets-request-category :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-presets-request 'make-list-presets-request))
 (common-lisp:defun make-list-presets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order next-token max-results list-by
                     category)
   (common-lisp:apply #'common-lisp:make-instance 'list-presets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-presets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-presets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-presets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-presets-response common-lisp:nil
                       ((presets :initarg :presets :type
                         (common-lisp:or |__listOfPreset| common-lisp:null)
                         :accessor %list-presets-response-presets :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-presets-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-presets-response 'make-list-presets-response))
 (common-lisp:defun make-list-presets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key presets next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-presets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-presets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-presets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'presets))
      (common-lisp:list
       (common-lisp:cons "Presets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-presets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-queues-request common-lisp:nil
                       ((order :initarg :order :type
                         (common-lisp:or order common-lisp:null) :accessor
                         %list-queues-request-order :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-queues-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or |__integerMin1Max20| common-lisp:null)
                         :accessor %list-queues-request-max-results :initform
                         common-lisp:nil)
                        (list-by :initarg :list-by :type
                         (common-lisp:or queue-list-by common-lisp:null)
                         :accessor %list-queues-request-list-by :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-queues-request 'make-list-queues-request))
 (common-lisp:defun make-list-queues-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key order next-token max-results list-by)
   (common-lisp:apply #'common-lisp:make-instance 'list-queues-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-queues-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-queues-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-queues-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-queues-response common-lisp:nil
                       ((queues :initarg :queues :type
                         (common-lisp:or |__listOfQueue| common-lisp:null)
                         :accessor %list-queues-response-queues :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-queues-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-queues-response 'make-list-queues-response))
 (common-lisp:defun make-list-queues-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queues next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-queues-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-queues-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-queues-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queues))
      (common-lisp:list
       (common-lisp:cons "Queues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-queues-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-tags-for-resource-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((resource-tags :initarg :resource-tags :type
                         (common-lisp:or resource-tags common-lisp:null)
                         :accessor
                         %list-tags-for-resource-response-resource-tags
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tags))
      (common-lisp:list
       (common-lisp:cons "ResourceTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype m2ts-audio-buffer-model () 'common-lisp:string)
(common-lisp:deftype m2ts-audio-duration () 'common-lisp:string)
(common-lisp:deftype m2ts-buffer-model () 'common-lisp:string)
(common-lisp:deftype m2ts-data-pts-control () 'common-lisp:string)
(common-lisp:deftype m2ts-ebp-audio-interval () 'common-lisp:string)
(common-lisp:deftype m2ts-ebp-placement () 'common-lisp:string)
(common-lisp:deftype m2ts-es-rate-in-pes () 'common-lisp:string)
(common-lisp:deftype m2ts-force-ts-video-ebp-order () 'common-lisp:string)
(common-lisp:deftype m2ts-klv-metadata () 'common-lisp:string)
(common-lisp:deftype m2ts-nielsen-id3 () 'common-lisp:string)
(common-lisp:deftype m2ts-pcr-control () 'common-lisp:string)
(common-lisp:deftype m2ts-rate-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass m2ts-scte35esam common-lisp:nil
                       ((scte35esam-pid :initarg :scte35esam-pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m2ts-scte35esam-scte35esam-pid :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'm2ts-scte35esam 'make-m2ts-scte35esam))
 (common-lisp:defun make-m2ts-scte35esam
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scte35esam-pid)
   (common-lisp:apply #'common-lisp:make-instance 'm2ts-scte35esam
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input m2ts-scte35esam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input m2ts-scte35esam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35esam-pid))
      (common-lisp:list
       (common-lisp:cons "Scte35EsamPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input m2ts-scte35esam))
   common-lisp:nil))
(common-lisp:deftype m2ts-scte35source () 'common-lisp:string)
(common-lisp:deftype m2ts-segmentation-markers () 'common-lisp:string)
(common-lisp:deftype m2ts-segmentation-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass m2ts-settings common-lisp:nil
                       ((video-pid :initarg :video-pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m2ts-settings-video-pid :initform
                         common-lisp:nil)
                        (transport-stream-id :initarg :transport-stream-id
                         :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %m2ts-settings-transport-stream-id :initform
                         common-lisp:nil)
                        (timed-metadata-pid :initarg :timed-metadata-pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m2ts-settings-timed-metadata-pid :initform
                         common-lisp:nil)
                        (segmentation-time :initarg :segmentation-time :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %m2ts-settings-segmentation-time :initform
                         common-lisp:nil)
                        (segmentation-style :initarg :segmentation-style :type
                         (common-lisp:or m2ts-segmentation-style
                                         common-lisp:null)
                         :accessor %m2ts-settings-segmentation-style :initform
                         common-lisp:nil)
                        (segmentation-markers :initarg :segmentation-markers
                         :type
                         (common-lisp:or m2ts-segmentation-markers
                                         common-lisp:null)
                         :accessor %m2ts-settings-segmentation-markers
                         :initform common-lisp:nil)
                        (scte35source :initarg :scte35source :type
                         (common-lisp:or m2ts-scte35source common-lisp:null)
                         :accessor %m2ts-settings-scte35source :initform
                         common-lisp:nil)
                        (scte35pid :initarg :scte35pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m2ts-settings-scte35pid :initform
                         common-lisp:nil)
                        (scte35esam :initarg :scte35esam :type
                         (common-lisp:or m2ts-scte35esam common-lisp:null)
                         :accessor %m2ts-settings-scte35esam :initform
                         common-lisp:nil)
                        (rate-mode :initarg :rate-mode :type
                         (common-lisp:or m2ts-rate-mode common-lisp:null)
                         :accessor %m2ts-settings-rate-mode :initform
                         common-lisp:nil)
                        (program-number :initarg :program-number :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %m2ts-settings-program-number :initform
                         common-lisp:nil)
                        (private-metadata-pid :initarg :private-metadata-pid
                         :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m2ts-settings-private-metadata-pid
                         :initform common-lisp:nil)
                        (pmt-pid :initarg :pmt-pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m2ts-settings-pmt-pid :initform
                         common-lisp:nil)
                        (pmt-interval :initarg :pmt-interval :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor %m2ts-settings-pmt-interval :initform
                         common-lisp:nil)
                        (pcr-pid :initarg :pcr-pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m2ts-settings-pcr-pid :initform
                         common-lisp:nil)
                        (pcr-control :initarg :pcr-control :type
                         (common-lisp:or m2ts-pcr-control common-lisp:null)
                         :accessor %m2ts-settings-pcr-control :initform
                         common-lisp:nil)
                        (pat-interval :initarg :pat-interval :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor %m2ts-settings-pat-interval :initform
                         common-lisp:nil)
                        (null-packet-bitrate :initarg :null-packet-bitrate
                         :type (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %m2ts-settings-null-packet-bitrate :initform
                         common-lisp:nil)
                        (nielsen-id3 :initarg :nielsen-id3 :type
                         (common-lisp:or m2ts-nielsen-id3 common-lisp:null)
                         :accessor %m2ts-settings-nielsen-id3 :initform
                         common-lisp:nil)
                        (min-ebp-interval :initarg :min-ebp-interval :type
                         (common-lisp:or |__integerMin0Max10000|
                                         common-lisp:null)
                         :accessor %m2ts-settings-min-ebp-interval :initform
                         common-lisp:nil)
                        (max-pcr-interval :initarg :max-pcr-interval :type
                         (common-lisp:or |__integerMin0Max500|
                                         common-lisp:null)
                         :accessor %m2ts-settings-max-pcr-interval :initform
                         common-lisp:nil)
                        (klv-metadata :initarg :klv-metadata :type
                         (common-lisp:or m2ts-klv-metadata common-lisp:null)
                         :accessor %m2ts-settings-klv-metadata :initform
                         common-lisp:nil)
                        (fragment-time :initarg :fragment-time :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %m2ts-settings-fragment-time :initform
                         common-lisp:nil)
                        (force-ts-video-ebp-order :initarg
                         :force-ts-video-ebp-order :type
                         (common-lisp:or m2ts-force-ts-video-ebp-order
                                         common-lisp:null)
                         :accessor %m2ts-settings-force-ts-video-ebp-order
                         :initform common-lisp:nil)
                        (es-rate-in-pes :initarg :es-rate-in-pes :type
                         (common-lisp:or m2ts-es-rate-in-pes common-lisp:null)
                         :accessor %m2ts-settings-es-rate-in-pes :initform
                         common-lisp:nil)
                        (ebp-placement :initarg :ebp-placement :type
                         (common-lisp:or m2ts-ebp-placement common-lisp:null)
                         :accessor %m2ts-settings-ebp-placement :initform
                         common-lisp:nil)
                        (ebp-audio-interval :initarg :ebp-audio-interval :type
                         (common-lisp:or m2ts-ebp-audio-interval
                                         common-lisp:null)
                         :accessor %m2ts-settings-ebp-audio-interval :initform
                         common-lisp:nil)
                        (dvb-teletext-pid :initarg :dvb-teletext-pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m2ts-settings-dvb-teletext-pid :initform
                         common-lisp:nil)
                        (dvb-tdt-settings :initarg :dvb-tdt-settings :type
                         (common-lisp:or dvb-tdt-settings common-lisp:null)
                         :accessor %m2ts-settings-dvb-tdt-settings :initform
                         common-lisp:nil)
                        (dvb-sub-pids :initarg :dvb-sub-pids :type
                         (common-lisp:or |__listOf__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m2ts-settings-dvb-sub-pids :initform
                         common-lisp:nil)
                        (dvb-sdt-settings :initarg :dvb-sdt-settings :type
                         (common-lisp:or dvb-sdt-settings common-lisp:null)
                         :accessor %m2ts-settings-dvb-sdt-settings :initform
                         common-lisp:nil)
                        (dvb-nit-settings :initarg :dvb-nit-settings :type
                         (common-lisp:or dvb-nit-settings common-lisp:null)
                         :accessor %m2ts-settings-dvb-nit-settings :initform
                         common-lisp:nil)
                        (data-ptscontrol :initarg :data-ptscontrol :type
                         (common-lisp:or m2ts-data-pts-control
                                         common-lisp:null)
                         :accessor %m2ts-settings-data-ptscontrol :initform
                         common-lisp:nil)
                        (buffer-model :initarg :buffer-model :type
                         (common-lisp:or m2ts-buffer-model common-lisp:null)
                         :accessor %m2ts-settings-buffer-model :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %m2ts-settings-bitrate :initform
                         common-lisp:nil)
                        (audio-pids :initarg :audio-pids :type
                         (common-lisp:or |__listOf__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m2ts-settings-audio-pids :initform
                         common-lisp:nil)
                        (audio-frames-per-pes :initarg :audio-frames-per-pes
                         :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %m2ts-settings-audio-frames-per-pes
                         :initform common-lisp:nil)
                        (audio-duration :initarg :audio-duration :type
                         (common-lisp:or m2ts-audio-duration common-lisp:null)
                         :accessor %m2ts-settings-audio-duration :initform
                         common-lisp:nil)
                        (audio-buffer-model :initarg :audio-buffer-model :type
                         (common-lisp:or m2ts-audio-buffer-model
                                         common-lisp:null)
                         :accessor %m2ts-settings-audio-buffer-model :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'm2ts-settings 'make-m2ts-settings))
 (common-lisp:defun make-m2ts-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-pid transport-stream-id
                     timed-metadata-pid segmentation-time segmentation-style
                     segmentation-markers scte35source scte35pid scte35esam
                     rate-mode program-number private-metadata-pid pmt-pid
                     pmt-interval pcr-pid pcr-control pat-interval
                     null-packet-bitrate nielsen-id3 min-ebp-interval
                     max-pcr-interval klv-metadata fragment-time
                     force-ts-video-ebp-order es-rate-in-pes ebp-placement
                     ebp-audio-interval dvb-teletext-pid dvb-tdt-settings
                     dvb-sub-pids dvb-sdt-settings dvb-nit-settings
                     data-ptscontrol buffer-model bitrate audio-pids
                     audio-frames-per-pes audio-duration audio-buffer-model)
   (common-lisp:apply #'common-lisp:make-instance 'm2ts-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input m2ts-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input m2ts-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-buffer-model))
      (common-lisp:list
       (common-lisp:cons "AudioBufferModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-duration))
      (common-lisp:list
       (common-lisp:cons "AudioDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-frames-per-pes))
      (common-lisp:list
       (common-lisp:cons "AudioFramesPerPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-model))
      (common-lisp:list
       (common-lisp:cons "BufferModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-ptscontrol))
      (common-lisp:list
       (common-lisp:cons "DataPTSControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-nit-settings))
      (common-lisp:list
       (common-lisp:cons "DvbNitSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sdt-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSdtSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sub-pids))
      (common-lisp:list
       (common-lisp:cons "DvbSubPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-tdt-settings))
      (common-lisp:list
       (common-lisp:cons "DvbTdtSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-teletext-pid))
      (common-lisp:list
       (common-lisp:cons "DvbTeletextPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-audio-interval))
      (common-lisp:list
       (common-lisp:cons "EbpAudioInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-placement))
      (common-lisp:list
       (common-lisp:cons "EbpPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'es-rate-in-pes))
      (common-lisp:list
       (common-lisp:cons "EsRateInPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-ts-video-ebp-order))
      (common-lisp:list
       (common-lisp:cons "ForceTsVideoEbpOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-time))
      (common-lisp:list
       (common-lisp:cons "FragmentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-metadata))
      (common-lisp:list
       (common-lisp:cons "KlvMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-pcr-interval))
      (common-lisp:list
       (common-lisp:cons "MaxPcrInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-ebp-interval))
      (common-lisp:list
       (common-lisp:cons "MinEbpInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3))
      (common-lisp:list
       (common-lisp:cons "NielsenId3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-packet-bitrate))
      (common-lisp:list
       (common-lisp:cons "NullPacketBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pat-interval))
      (common-lisp:list
       (common-lisp:cons "PatInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-control))
      (common-lisp:list
       (common-lisp:cons "PcrControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-interval))
      (common-lisp:list
       (common-lisp:cons "PmtInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "PrivateMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-number))
      (common-lisp:list
       (common-lisp:cons "ProgramNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-mode))
      (common-lisp:list
       (common-lisp:cons "RateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35esam))
      (common-lisp:list
       (common-lisp:cons "Scte35Esam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35source))
      (common-lisp:list
       (common-lisp:cons "Scte35Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-markers))
      (common-lisp:list
       (common-lisp:cons "SegmentationMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-style))
      (common-lisp:list
       (common-lisp:cons "SegmentationStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-time))
      (common-lisp:list
       (common-lisp:cons "SegmentationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input m2ts-settings))
   common-lisp:nil))
(common-lisp:deftype m3u8audio-duration () 'common-lisp:string)
(common-lisp:deftype m3u8data-pts-control () 'common-lisp:string)
(common-lisp:deftype m3u8nielsen-id3 () 'common-lisp:string)
(common-lisp:deftype m3u8pcr-control () 'common-lisp:string)
(common-lisp:deftype m3u8scte35source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass m3u8settings common-lisp:nil
                       ((video-pid :initarg :video-pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m3u8settings-video-pid :initform
                         common-lisp:nil)
                        (transport-stream-id :initarg :transport-stream-id
                         :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %m3u8settings-transport-stream-id :initform
                         common-lisp:nil)
                        (timed-metadata-pid :initarg :timed-metadata-pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m3u8settings-timed-metadata-pid :initform
                         common-lisp:nil)
                        (timed-metadata :initarg :timed-metadata :type
                         (common-lisp:or timed-metadata common-lisp:null)
                         :accessor %m3u8settings-timed-metadata :initform
                         common-lisp:nil)
                        (scte35source :initarg :scte35source :type
                         (common-lisp:or m3u8scte35source common-lisp:null)
                         :accessor %m3u8settings-scte35source :initform
                         common-lisp:nil)
                        (scte35pid :initarg :scte35pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m3u8settings-scte35pid :initform
                         common-lisp:nil)
                        (program-number :initarg :program-number :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %m3u8settings-program-number :initform
                         common-lisp:nil)
                        (private-metadata-pid :initarg :private-metadata-pid
                         :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m3u8settings-private-metadata-pid :initform
                         common-lisp:nil)
                        (pmt-pid :initarg :pmt-pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m3u8settings-pmt-pid :initform
                         common-lisp:nil)
                        (pmt-interval :initarg :pmt-interval :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor %m3u8settings-pmt-interval :initform
                         common-lisp:nil)
                        (pcr-pid :initarg :pcr-pid :type
                         (common-lisp:or |__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m3u8settings-pcr-pid :initform
                         common-lisp:nil)
                        (pcr-control :initarg :pcr-control :type
                         (common-lisp:or m3u8pcr-control common-lisp:null)
                         :accessor %m3u8settings-pcr-control :initform
                         common-lisp:nil)
                        (pat-interval :initarg :pat-interval :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor %m3u8settings-pat-interval :initform
                         common-lisp:nil)
                        (nielsen-id3 :initarg :nielsen-id3 :type
                         (common-lisp:or m3u8nielsen-id3 common-lisp:null)
                         :accessor %m3u8settings-nielsen-id3 :initform
                         common-lisp:nil)
                        (max-pcr-interval :initarg :max-pcr-interval :type
                         (common-lisp:or |__integerMin0Max500|
                                         common-lisp:null)
                         :accessor %m3u8settings-max-pcr-interval :initform
                         common-lisp:nil)
                        (data-ptscontrol :initarg :data-ptscontrol :type
                         (common-lisp:or m3u8data-pts-control common-lisp:null)
                         :accessor %m3u8settings-data-ptscontrol :initform
                         common-lisp:nil)
                        (audio-pids :initarg :audio-pids :type
                         (common-lisp:or |__listOf__integerMin32Max8182|
                                         common-lisp:null)
                         :accessor %m3u8settings-audio-pids :initform
                         common-lisp:nil)
                        (audio-frames-per-pes :initarg :audio-frames-per-pes
                         :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %m3u8settings-audio-frames-per-pes :initform
                         common-lisp:nil)
                        (audio-duration :initarg :audio-duration :type
                         (common-lisp:or m3u8audio-duration common-lisp:null)
                         :accessor %m3u8settings-audio-duration :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'm3u8settings 'make-m3u8settings))
 (common-lisp:defun make-m3u8settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-pid transport-stream-id
                     timed-metadata-pid timed-metadata scte35source scte35pid
                     program-number private-metadata-pid pmt-pid pmt-interval
                     pcr-pid pcr-control pat-interval nielsen-id3
                     max-pcr-interval data-ptscontrol audio-pids
                     audio-frames-per-pes audio-duration)
   (common-lisp:apply #'common-lisp:make-instance 'm3u8settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input m3u8settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input m3u8settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-duration))
      (common-lisp:list
       (common-lisp:cons "AudioDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-frames-per-pes))
      (common-lisp:list
       (common-lisp:cons "AudioFramesPerPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-ptscontrol))
      (common-lisp:list
       (common-lisp:cons "DataPTSControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-pcr-interval))
      (common-lisp:list
       (common-lisp:cons "MaxPcrInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3))
      (common-lisp:list
       (common-lisp:cons "NielsenId3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pat-interval))
      (common-lisp:list
       (common-lisp:cons "PatInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-control))
      (common-lisp:list
       (common-lisp:cons "PcrControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-interval))
      (common-lisp:list
       (common-lisp:cons "PmtInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "PrivateMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-number))
      (common-lisp:list
       (common-lisp:cons "ProgramNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35source))
      (common-lisp:list
       (common-lisp:cons "Scte35Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata))
      (common-lisp:list
       (common-lisp:cons "TimedMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input m3u8settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass min-bottom-rendition-size common-lisp:nil
                       ((width :initarg :width :type
                         (common-lisp:or |__integerMin32Max8192|
                                         common-lisp:null)
                         :accessor %min-bottom-rendition-size-width :initform
                         common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or |__integerMin32Max8192|
                                         common-lisp:null)
                         :accessor %min-bottom-rendition-size-height :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'min-bottom-rendition-size
                    'make-min-bottom-rendition-size))
 (common-lisp:defun make-min-bottom-rendition-size
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width height)
   (common-lisp:apply #'common-lisp:make-instance 'min-bottom-rendition-size
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          min-bottom-rendition-size))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          min-bottom-rendition-size))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          min-bottom-rendition-size))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass min-top-rendition-size common-lisp:nil
                       ((width :initarg :width :type
                         (common-lisp:or |__integerMin32Max8192|
                                         common-lisp:null)
                         :accessor %min-top-rendition-size-width :initform
                         common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or |__integerMin32Max8192|
                                         common-lisp:null)
                         :accessor %min-top-rendition-size-height :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'min-top-rendition-size 'make-min-top-rendition-size))
 (common-lisp:defun make-min-top-rendition-size
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width height)
   (common-lisp:apply #'common-lisp:make-instance 'min-top-rendition-size
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          min-top-rendition-size))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          min-top-rendition-size))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          min-top-rendition-size))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass motion-image-inserter common-lisp:nil
                       ((start-time :initarg :start-time :type
                         (common-lisp:or
                          |__stringMin11Max11Pattern01D20305D205D|
                          common-lisp:null)
                         :accessor %motion-image-inserter-start-time :initform
                         common-lisp:nil)
                        (playback :initarg :playback :type
                         (common-lisp:or motion-image-playback
                                         common-lisp:null)
                         :accessor %motion-image-inserter-playback :initform
                         common-lisp:nil)
                        (offset :initarg :offset :type
                         (common-lisp:or motion-image-insertion-offset
                                         common-lisp:null)
                         :accessor %motion-image-inserter-offset :initform
                         common-lisp:nil)
                        (insertion-mode :initarg :insertion-mode :type
                         (common-lisp:or motion-image-insertion-mode
                                         common-lisp:null)
                         :accessor %motion-image-inserter-insertion-mode
                         :initform common-lisp:nil)
                        (input :initarg :input :type
                         (common-lisp:or
                          |__stringMin14PatternS3Mov09PngHttpsMov09Png|
                          common-lisp:null)
                         :accessor %motion-image-inserter-input :initform
                         common-lisp:nil)
                        (framerate :initarg :framerate :type
                         (common-lisp:or motion-image-insertion-framerate
                                         common-lisp:null)
                         :accessor %motion-image-inserter-framerate :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'motion-image-inserter 'make-motion-image-inserter))
 (common-lisp:defun make-motion-image-inserter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-time playback offset insertion-mode
                     input framerate)
   (common-lisp:apply #'common-lisp:make-instance 'motion-image-inserter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-image-inserter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-image-inserter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate))
      (common-lisp:list
       (common-lisp:cons "Framerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insertion-mode))
      (common-lisp:list
       (common-lisp:cons "InsertionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "Offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'playback))
      (common-lisp:list
       (common-lisp:cons "Playback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-image-inserter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass motion-image-insertion-framerate common-lisp:nil
                       ((framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1Max2147483640|
                                         common-lisp:null)
                         :accessor
                         %motion-image-insertion-framerate-framerate-numerator
                         :initform common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max17895697|
                                         common-lisp:null)
                         :accessor
                         %motion-image-insertion-framerate-framerate-denominator
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'motion-image-insertion-framerate
                    'make-motion-image-insertion-framerate))
 (common-lisp:defun make-motion-image-insertion-framerate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key framerate-numerator
                     framerate-denominator)
   (common-lisp:apply #'common-lisp:make-instance
                      'motion-image-insertion-framerate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-image-insertion-framerate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-image-insertion-framerate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-image-insertion-framerate))
   common-lisp:nil))
(common-lisp:deftype motion-image-insertion-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass motion-image-insertion-offset common-lisp:nil
                       ((image-y :initarg :image-y :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %motion-image-insertion-offset-image-y
                         :initform common-lisp:nil)
                        (image-x :initarg :image-x :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %motion-image-insertion-offset-image-x
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'motion-image-insertion-offset
                    'make-motion-image-insertion-offset))
 (common-lisp:defun make-motion-image-insertion-offset
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-y image-x)
   (common-lisp:apply #'common-lisp:make-instance
                      'motion-image-insertion-offset
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-image-insertion-offset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-image-insertion-offset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-x))
      (common-lisp:list
       (common-lisp:cons "ImageX"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-y))
      (common-lisp:list
       (common-lisp:cons "ImageY"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-image-insertion-offset))
   common-lisp:nil))
(common-lisp:deftype motion-image-playback () 'common-lisp:string)
(common-lisp:deftype mov-clap-atom () 'common-lisp:string)
(common-lisp:deftype mov-cslg-atom () 'common-lisp:string)
(common-lisp:deftype mov-mpeg2four-cccontrol () 'common-lisp:string)
(common-lisp:deftype mov-padding-control () 'common-lisp:string)
(common-lisp:deftype mov-reference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mov-settings common-lisp:nil
                       ((reference :initarg :reference :type
                         (common-lisp:or mov-reference common-lisp:null)
                         :accessor %mov-settings-reference :initform
                         common-lisp:nil)
                        (padding-control :initarg :padding-control :type
                         (common-lisp:or mov-padding-control common-lisp:null)
                         :accessor %mov-settings-padding-control :initform
                         common-lisp:nil)
                        (mpeg2four-cccontrol :initarg :mpeg2four-cccontrol
                         :type
                         (common-lisp:or mov-mpeg2four-cccontrol
                                         common-lisp:null)
                         :accessor %mov-settings-mpeg2four-cccontrol :initform
                         common-lisp:nil)
                        (cslg-atom :initarg :cslg-atom :type
                         (common-lisp:or mov-cslg-atom common-lisp:null)
                         :accessor %mov-settings-cslg-atom :initform
                         common-lisp:nil)
                        (clap-atom :initarg :clap-atom :type
                         (common-lisp:or mov-clap-atom common-lisp:null)
                         :accessor %mov-settings-clap-atom :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mov-settings 'make-mov-settings))
 (common-lisp:defun make-mov-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference padding-control
                     mpeg2four-cccontrol cslg-atom clap-atom)
   (common-lisp:apply #'common-lisp:make-instance 'mov-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mov-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mov-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clap-atom))
      (common-lisp:list
       (common-lisp:cons "ClapAtom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cslg-atom))
      (common-lisp:list
       (common-lisp:cons "CslgAtom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mpeg2four-cccontrol))
      (common-lisp:list
       (common-lisp:cons "Mpeg2FourCCControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'padding-control))
      (common-lisp:list
       (common-lisp:cons "PaddingControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference))
      (common-lisp:list
       (common-lisp:cons "Reference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mov-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mp2settings common-lisp:nil
                       ((sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__integerMin32000Max48000|
                                         common-lisp:null)
                         :accessor %mp2settings-sample-rate :initform
                         common-lisp:nil)
                        (channels :initarg :channels :type
                         (common-lisp:or |__integerMin1Max2| common-lisp:null)
                         :accessor %mp2settings-channels :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin32000Max384000|
                                         common-lisp:null)
                         :accessor %mp2settings-bitrate :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mp2settings 'make-mp2settings))
 (common-lisp:defun make-mp2settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-rate channels bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'mp2settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mp2settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mp2settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mp2settings))
   common-lisp:nil))
(common-lisp:deftype mp3rate-control-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mp3settings common-lisp:nil
                       ((vbr-quality :initarg :vbr-quality :type
                         (common-lisp:or |__integerMin0Max9| common-lisp:null)
                         :accessor %mp3settings-vbr-quality :initform
                         common-lisp:nil)
                        (sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__integerMin22050Max48000|
                                         common-lisp:null)
                         :accessor %mp3settings-sample-rate :initform
                         common-lisp:nil)
                        (rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or mp3rate-control-mode common-lisp:null)
                         :accessor %mp3settings-rate-control-mode :initform
                         common-lisp:nil)
                        (channels :initarg :channels :type
                         (common-lisp:or |__integerMin1Max2| common-lisp:null)
                         :accessor %mp3settings-channels :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin16000Max320000|
                                         common-lisp:null)
                         :accessor %mp3settings-bitrate :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mp3settings 'make-mp3settings))
 (common-lisp:defun make-mp3settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vbr-quality sample-rate rate-control-mode
                     channels bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'mp3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mp3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mp3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vbr-quality))
      (common-lisp:list
       (common-lisp:cons "VbrQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mp3settings))
   common-lisp:nil))
(common-lisp:deftype mp4cslg-atom () 'common-lisp:string)
(common-lisp:deftype mp4free-space-box () 'common-lisp:string)
(common-lisp:deftype mp4moov-placement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mp4settings common-lisp:nil
                       ((mp4major-brand :initarg :mp4major-brand :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %mp4settings-mp4major-brand :initform common-lisp:nil)
                        (moov-placement :initarg :moov-placement :type
                         (common-lisp:or mp4moov-placement common-lisp:null)
                         :accessor %mp4settings-moov-placement :initform
                         common-lisp:nil)
                        (free-space-box :initarg :free-space-box :type
                         (common-lisp:or mp4free-space-box common-lisp:null)
                         :accessor %mp4settings-free-space-box :initform
                         common-lisp:nil)
                        (ctts-version :initarg :ctts-version :type
                         (common-lisp:or |__integerMin0Max1| common-lisp:null)
                         :accessor %mp4settings-ctts-version :initform
                         common-lisp:nil)
                        (cslg-atom :initarg :cslg-atom :type
                         (common-lisp:or mp4cslg-atom common-lisp:null)
                         :accessor %mp4settings-cslg-atom :initform
                         common-lisp:nil)
                        (audio-duration :initarg :audio-duration :type
                         (common-lisp:or cmfc-audio-duration common-lisp:null)
                         :accessor %mp4settings-audio-duration :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mp4settings 'make-mp4settings))
 (common-lisp:defun make-mp4settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mp4major-brand moov-placement
                     free-space-box ctts-version cslg-atom audio-duration)
   (common-lisp:apply #'common-lisp:make-instance 'mp4settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mp4settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mp4settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-duration))
      (common-lisp:list
       (common-lisp:cons "AudioDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cslg-atom))
      (common-lisp:list
       (common-lisp:cons "CslgAtom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ctts-version))
      (common-lisp:list
       (common-lisp:cons "CttsVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'free-space-box))
      (common-lisp:list
       (common-lisp:cons "FreeSpaceBox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'moov-placement))
      (common-lisp:list
       (common-lisp:cons "MoovPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mp4major-brand))
      (common-lisp:list
       (common-lisp:cons "Mp4MajorBrand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mp4settings))
   common-lisp:nil))
(common-lisp:deftype mpd-accessibility-caption-hints () 'common-lisp:string)
(common-lisp:deftype mpd-audio-duration () 'common-lisp:string)
(common-lisp:deftype mpd-caption-container-type () 'common-lisp:string)
(common-lisp:deftype mpd-klv-metadata () 'common-lisp:string)
(common-lisp:deftype mpd-manifest-metadata-signaling () 'common-lisp:string)
(common-lisp:deftype mpd-scte35esam () 'common-lisp:string)
(common-lisp:deftype mpd-scte35source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mpd-settings common-lisp:nil
                       ((timed-metadata-value :initarg :timed-metadata-value
                         :type
                         (common-lisp:or |__stringMax1000| common-lisp:null)
                         :accessor %mpd-settings-timed-metadata-value :initform
                         common-lisp:nil)
                        (timed-metadata-scheme-id-uri :initarg
                         :timed-metadata-scheme-id-uri :type
                         (common-lisp:or |__stringMax1000| common-lisp:null)
                         :accessor %mpd-settings-timed-metadata-scheme-id-uri
                         :initform common-lisp:nil)
                        (timed-metadata-box-version :initarg
                         :timed-metadata-box-version :type
                         (common-lisp:or mpd-timed-metadata-box-version
                                         common-lisp:null)
                         :accessor %mpd-settings-timed-metadata-box-version
                         :initform common-lisp:nil)
                        (timed-metadata :initarg :timed-metadata :type
                         (common-lisp:or mpd-timed-metadata common-lisp:null)
                         :accessor %mpd-settings-timed-metadata :initform
                         common-lisp:nil)
                        (scte35source :initarg :scte35source :type
                         (common-lisp:or mpd-scte35source common-lisp:null)
                         :accessor %mpd-settings-scte35source :initform
                         common-lisp:nil)
                        (scte35esam :initarg :scte35esam :type
                         (common-lisp:or mpd-scte35esam common-lisp:null)
                         :accessor %mpd-settings-scte35esam :initform
                         common-lisp:nil)
                        (manifest-metadata-signaling :initarg
                         :manifest-metadata-signaling :type
                         (common-lisp:or mpd-manifest-metadata-signaling
                                         common-lisp:null)
                         :accessor %mpd-settings-manifest-metadata-signaling
                         :initform common-lisp:nil)
                        (klv-metadata :initarg :klv-metadata :type
                         (common-lisp:or mpd-klv-metadata common-lisp:null)
                         :accessor %mpd-settings-klv-metadata :initform
                         common-lisp:nil)
                        (caption-container-type :initarg
                         :caption-container-type :type
                         (common-lisp:or mpd-caption-container-type
                                         common-lisp:null)
                         :accessor %mpd-settings-caption-container-type
                         :initform common-lisp:nil)
                        (audio-duration :initarg :audio-duration :type
                         (common-lisp:or mpd-audio-duration common-lisp:null)
                         :accessor %mpd-settings-audio-duration :initform
                         common-lisp:nil)
                        (accessibility-caption-hints :initarg
                         :accessibility-caption-hints :type
                         (common-lisp:or mpd-accessibility-caption-hints
                                         common-lisp:null)
                         :accessor %mpd-settings-accessibility-caption-hints
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mpd-settings 'make-mpd-settings))
 (common-lisp:defun make-mpd-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timed-metadata-value
                     timed-metadata-scheme-id-uri timed-metadata-box-version
                     timed-metadata scte35source scte35esam
                     manifest-metadata-signaling klv-metadata
                     caption-container-type audio-duration
                     accessibility-caption-hints)
   (common-lisp:apply #'common-lisp:make-instance 'mpd-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mpd-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mpd-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accessibility-caption-hints))
      (common-lisp:list
       (common-lisp:cons "AccessibilityCaptionHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-duration))
      (common-lisp:list
       (common-lisp:cons "AudioDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-container-type))
      (common-lisp:list
       (common-lisp:cons "CaptionContainerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-metadata))
      (common-lisp:list
       (common-lisp:cons "KlvMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-metadata-signaling))
      (common-lisp:list
       (common-lisp:cons "ManifestMetadataSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35esam))
      (common-lisp:list
       (common-lisp:cons "Scte35Esam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35source))
      (common-lisp:list
       (common-lisp:cons "Scte35Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata))
      (common-lisp:list
       (common-lisp:cons "TimedMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-box-version))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBoxVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-scheme-id-uri))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataSchemeIdUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-value))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mpd-settings))
   common-lisp:nil))
(common-lisp:deftype mpd-timed-metadata () 'common-lisp:string)
(common-lisp:deftype mpd-timed-metadata-box-version () 'common-lisp:string)
(common-lisp:deftype mpeg2adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype mpeg2codec-level () 'common-lisp:string)
(common-lisp:deftype mpeg2codec-profile () 'common-lisp:string)
(common-lisp:deftype mpeg2dynamic-sub-gop () 'common-lisp:string)
(common-lisp:deftype mpeg2framerate-control () 'common-lisp:string)
(common-lisp:deftype mpeg2framerate-conversion-algorithm () 'common-lisp:string)
(common-lisp:deftype mpeg2gop-size-units () 'common-lisp:string)
(common-lisp:deftype mpeg2interlace-mode () 'common-lisp:string)
(common-lisp:deftype mpeg2intra-dc-precision () 'common-lisp:string)
(common-lisp:deftype mpeg2par-control () 'common-lisp:string)
(common-lisp:deftype mpeg2quality-tuning-level () 'common-lisp:string)
(common-lisp:deftype mpeg2rate-control-mode () 'common-lisp:string)
(common-lisp:deftype mpeg2scan-type-conversion-mode () 'common-lisp:string)
(common-lisp:deftype mpeg2scene-change-detect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mpeg2settings common-lisp:nil
                       ((temporal-adaptive-quantization :initarg
                         :temporal-adaptive-quantization :type
                         (common-lisp:or mpeg2temporal-adaptive-quantization
                                         common-lisp:null)
                         :accessor
                         %mpeg2settings-temporal-adaptive-quantization
                         :initform common-lisp:nil)
                        (telecine :initarg :telecine :type
                         (common-lisp:or mpeg2telecine common-lisp:null)
                         :accessor %mpeg2settings-telecine :initform
                         common-lisp:nil)
                        (syntax :initarg :syntax :type
                         (common-lisp:or mpeg2syntax common-lisp:null)
                         :accessor %mpeg2settings-syntax :initform
                         common-lisp:nil)
                        (spatial-adaptive-quantization :initarg
                         :spatial-adaptive-quantization :type
                         (common-lisp:or mpeg2spatial-adaptive-quantization
                                         common-lisp:null)
                         :accessor %mpeg2settings-spatial-adaptive-quantization
                         :initform common-lisp:nil)
                        (softness :initarg :softness :type
                         (common-lisp:or |__integerMin0Max128|
                                         common-lisp:null)
                         :accessor %mpeg2settings-softness :initform
                         common-lisp:nil)
                        (slow-pal :initarg :slow-pal :type
                         (common-lisp:or mpeg2slow-pal common-lisp:null)
                         :accessor %mpeg2settings-slow-pal :initform
                         common-lisp:nil)
                        (scene-change-detect :initarg :scene-change-detect
                         :type
                         (common-lisp:or mpeg2scene-change-detect
                                         common-lisp:null)
                         :accessor %mpeg2settings-scene-change-detect :initform
                         common-lisp:nil)
                        (scan-type-conversion-mode :initarg
                         :scan-type-conversion-mode :type
                         (common-lisp:or mpeg2scan-type-conversion-mode
                                         common-lisp:null)
                         :accessor %mpeg2settings-scan-type-conversion-mode
                         :initform common-lisp:nil)
                        (rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or mpeg2rate-control-mode
                                         common-lisp:null)
                         :accessor %mpeg2settings-rate-control-mode :initform
                         common-lisp:nil)
                        (quality-tuning-level :initarg :quality-tuning-level
                         :type
                         (common-lisp:or mpeg2quality-tuning-level
                                         common-lisp:null)
                         :accessor %mpeg2settings-quality-tuning-level
                         :initform common-lisp:nil)
                        (par-numerator :initarg :par-numerator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %mpeg2settings-par-numerator :initform
                         common-lisp:nil)
                        (par-denominator :initarg :par-denominator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %mpeg2settings-par-denominator :initform
                         common-lisp:nil)
                        (par-control :initarg :par-control :type
                         (common-lisp:or mpeg2par-control common-lisp:null)
                         :accessor %mpeg2settings-par-control :initform
                         common-lisp:nil)
                        (number-bframes-between-reference-frames :initarg
                         :number-bframes-between-reference-frames :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor
                         %mpeg2settings-number-bframes-between-reference-frames
                         :initform common-lisp:nil)
                        (min-iinterval :initarg :min-iinterval :type
                         (common-lisp:or |__integerMin0Max30| common-lisp:null)
                         :accessor %mpeg2settings-min-iinterval :initform
                         common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integerMin1000Max300000000|
                                         common-lisp:null)
                         :accessor %mpeg2settings-max-bitrate :initform
                         common-lisp:nil)
                        (intra-dc-precision :initarg :intra-dc-precision :type
                         (common-lisp:or mpeg2intra-dc-precision
                                         common-lisp:null)
                         :accessor %mpeg2settings-intra-dc-precision :initform
                         common-lisp:nil)
                        (interlace-mode :initarg :interlace-mode :type
                         (common-lisp:or mpeg2interlace-mode common-lisp:null)
                         :accessor %mpeg2settings-interlace-mode :initform
                         common-lisp:nil)
                        (hrd-buffer-size :initarg :hrd-buffer-size :type
                         (common-lisp:or |__integerMin0Max47185920|
                                         common-lisp:null)
                         :accessor %mpeg2settings-hrd-buffer-size :initform
                         common-lisp:nil)
                        (hrd-buffer-initial-fill-percentage :initarg
                         :hrd-buffer-initial-fill-percentage :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor
                         %mpeg2settings-hrd-buffer-initial-fill-percentage
                         :initform common-lisp:nil)
                        (hrd-buffer-final-fill-percentage :initarg
                         :hrd-buffer-final-fill-percentage :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor
                         %mpeg2settings-hrd-buffer-final-fill-percentage
                         :initform common-lisp:nil)
                        (gop-size-units :initarg :gop-size-units :type
                         (common-lisp:or mpeg2gop-size-units common-lisp:null)
                         :accessor %mpeg2settings-gop-size-units :initform
                         common-lisp:nil)
                        (gop-size :initarg :gop-size :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %mpeg2settings-gop-size :initform
                         common-lisp:nil)
                        (gop-closed-cadence :initarg :gop-closed-cadence :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %mpeg2settings-gop-closed-cadence :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin24Max60000|
                                         common-lisp:null)
                         :accessor %mpeg2settings-framerate-numerator :initform
                         common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max1001|
                                         common-lisp:null)
                         :accessor %mpeg2settings-framerate-denominator
                         :initform common-lisp:nil)
                        (framerate-conversion-algorithm :initarg
                         :framerate-conversion-algorithm :type
                         (common-lisp:or mpeg2framerate-conversion-algorithm
                                         common-lisp:null)
                         :accessor
                         %mpeg2settings-framerate-conversion-algorithm
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or mpeg2framerate-control
                                         common-lisp:null)
                         :accessor %mpeg2settings-framerate-control :initform
                         common-lisp:nil)
                        (dynamic-sub-gop :initarg :dynamic-sub-gop :type
                         (common-lisp:or mpeg2dynamic-sub-gop common-lisp:null)
                         :accessor %mpeg2settings-dynamic-sub-gop :initform
                         common-lisp:nil)
                        (codec-profile :initarg :codec-profile :type
                         (common-lisp:or mpeg2codec-profile common-lisp:null)
                         :accessor %mpeg2settings-codec-profile :initform
                         common-lisp:nil)
                        (codec-level :initarg :codec-level :type
                         (common-lisp:or mpeg2codec-level common-lisp:null)
                         :accessor %mpeg2settings-codec-level :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin1000Max288000000|
                                         common-lisp:null)
                         :accessor %mpeg2settings-bitrate :initform
                         common-lisp:nil)
                        (adaptive-quantization :initarg :adaptive-quantization
                         :type
                         (common-lisp:or mpeg2adaptive-quantization
                                         common-lisp:null)
                         :accessor %mpeg2settings-adaptive-quantization
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mpeg2settings 'make-mpeg2settings))
 (common-lisp:defun make-mpeg2settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key temporal-adaptive-quantization telecine
                     syntax spatial-adaptive-quantization softness slow-pal
                     scene-change-detect scan-type-conversion-mode
                     rate-control-mode quality-tuning-level par-numerator
                     par-denominator par-control
                     number-bframes-between-reference-frames min-iinterval
                     max-bitrate intra-dc-precision interlace-mode
                     hrd-buffer-size hrd-buffer-initial-fill-percentage
                     hrd-buffer-final-fill-percentage gop-size-units gop-size
                     gop-closed-cadence framerate-numerator
                     framerate-denominator framerate-conversion-algorithm
                     framerate-control dynamic-sub-gop codec-profile
                     codec-level bitrate adaptive-quantization)
   (common-lisp:apply #'common-lisp:make-instance 'mpeg2settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mpeg2settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mpeg2settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-level))
      (common-lisp:list
       (common-lisp:cons "CodecLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-profile))
      (common-lisp:list
       (common-lisp:cons "CodecProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-sub-gop))
      (common-lisp:list
       (common-lisp:cons "DynamicSubGop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-conversion-algorithm))
      (common-lisp:list
       (common-lisp:cons "FramerateConversionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hrd-buffer-final-fill-percentage))
      (common-lisp:list
       (common-lisp:cons "HrdBufferFinalFillPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hrd-buffer-initial-fill-percentage))
      (common-lisp:list
       (common-lisp:cons "HrdBufferInitialFillPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hrd-buffer-size))
      (common-lisp:list
       (common-lisp:cons "HrdBufferSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interlace-mode))
      (common-lisp:list
       (common-lisp:cons "InterlaceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intra-dc-precision))
      (common-lisp:list
       (common-lisp:cons "IntraDcPrecision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iinterval))
      (common-lisp:list
       (common-lisp:cons "MinIInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-bframes-between-reference-frames))
      (common-lisp:list
       (common-lisp:cons "NumberBFramesBetweenReferenceFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-control))
      (common-lisp:list
       (common-lisp:cons "ParControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quality-tuning-level))
      (common-lisp:list
       (common-lisp:cons "QualityTuningLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-type-conversion-mode))
      (common-lisp:list
       (common-lisp:cons "ScanTypeConversionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-change-detect))
      (common-lisp:list
       (common-lisp:cons "SceneChangeDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slow-pal))
      (common-lisp:list
       (common-lisp:cons "SlowPal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'softness))
      (common-lisp:list
       (common-lisp:cons "Softness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spatial-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "SpatialAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'syntax))
      (common-lisp:list
       (common-lisp:cons "Syntax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telecine))
      (common-lisp:list
       (common-lisp:cons "Telecine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "TemporalAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mpeg2settings))
   common-lisp:nil))
(common-lisp:deftype mpeg2slow-pal () 'common-lisp:string)
(common-lisp:deftype mpeg2spatial-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype mpeg2syntax () 'common-lisp:string)
(common-lisp:deftype mpeg2telecine () 'common-lisp:string)
(common-lisp:deftype mpeg2temporal-adaptive-quantization () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ms-smooth-additional-manifest common-lisp:nil
                       ((selected-outputs :initarg :selected-outputs :type
                         (common-lisp:or |__listOf__stringMin1|
                                         common-lisp:null)
                         :accessor
                         %ms-smooth-additional-manifest-selected-outputs
                         :initform common-lisp:nil)
                        (manifest-name-modifier :initarg
                         :manifest-name-modifier :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         %ms-smooth-additional-manifest-manifest-name-modifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ms-smooth-additional-manifest
                    'make-ms-smooth-additional-manifest))
 (common-lisp:defun make-ms-smooth-additional-manifest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selected-outputs manifest-name-modifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'ms-smooth-additional-manifest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-additional-manifest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-additional-manifest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-name-modifier))
      (common-lisp:list
       (common-lisp:cons "ManifestNameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-outputs))
      (common-lisp:list
       (common-lisp:cons "SelectedOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-additional-manifest))
   common-lisp:nil))
(common-lisp:deftype ms-smooth-audio-deduplication () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ms-smooth-encryption-settings common-lisp:nil
                       ((speke-key-provider :initarg :speke-key-provider :type
                         (common-lisp:or speke-key-provider common-lisp:null)
                         :accessor
                         %ms-smooth-encryption-settings-speke-key-provider
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ms-smooth-encryption-settings
                    'make-ms-smooth-encryption-settings))
 (common-lisp:defun make-ms-smooth-encryption-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key speke-key-provider)
   (common-lisp:apply #'common-lisp:make-instance
                      'ms-smooth-encryption-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-encryption-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-encryption-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speke-key-provider))
      (common-lisp:list
       (common-lisp:cons "SpekeKeyProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-encryption-settings))
   common-lisp:nil))
(common-lisp:deftype ms-smooth-fragment-length-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ms-smooth-group-settings common-lisp:nil
                       ((manifest-encoding :initarg :manifest-encoding :type
                         (common-lisp:or ms-smooth-manifest-encoding
                                         common-lisp:null)
                         :accessor %ms-smooth-group-settings-manifest-encoding
                         :initform common-lisp:nil)
                        (fragment-length-control :initarg
                         :fragment-length-control :type
                         (common-lisp:or ms-smooth-fragment-length-control
                                         common-lisp:null)
                         :accessor
                         %ms-smooth-group-settings-fragment-length-control
                         :initform common-lisp:nil)
                        (fragment-length :initarg :fragment-length :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %ms-smooth-group-settings-fragment-length
                         :initform common-lisp:nil)
                        (encryption :initarg :encryption :type
                         (common-lisp:or ms-smooth-encryption-settings
                                         common-lisp:null)
                         :accessor %ms-smooth-group-settings-encryption
                         :initform common-lisp:nil)
                        (destination-settings :initarg :destination-settings
                         :type
                         (common-lisp:or destination-settings common-lisp:null)
                         :accessor
                         %ms-smooth-group-settings-destination-settings
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or |__stringPatternS3| common-lisp:null)
                         :accessor %ms-smooth-group-settings-destination
                         :initform common-lisp:nil)
                        (audio-deduplication :initarg :audio-deduplication
                         :type
                         (common-lisp:or ms-smooth-audio-deduplication
                                         common-lisp:null)
                         :accessor
                         %ms-smooth-group-settings-audio-deduplication
                         :initform common-lisp:nil)
                        (additional-manifests :initarg :additional-manifests
                         :type
                         (common-lisp:or |__listOfMsSmoothAdditionalManifest|
                                         common-lisp:null)
                         :accessor
                         %ms-smooth-group-settings-additional-manifests
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ms-smooth-group-settings 'make-ms-smooth-group-settings))
 (common-lisp:defun make-ms-smooth-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key manifest-encoding fragment-length-control
                     fragment-length encryption destination-settings
                     destination audio-deduplication additional-manifests)
   (common-lisp:apply #'common-lisp:make-instance 'ms-smooth-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-manifests))
      (common-lisp:list
       (common-lisp:cons "AdditionalManifests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-deduplication))
      (common-lisp:list
       (common-lisp:cons "AudioDeduplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-settings))
      (common-lisp:list
       (common-lisp:cons "DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-length))
      (common-lisp:list
       (common-lisp:cons "FragmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-length-control))
      (common-lisp:list
       (common-lisp:cons "FragmentLengthControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-encoding))
      (common-lisp:list
       (common-lisp:cons "ManifestEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   common-lisp:nil))
(common-lisp:deftype ms-smooth-manifest-encoding () 'common-lisp:string)
(common-lisp:deftype mxf-afd-signaling () 'common-lisp:string)
(common-lisp:deftype mxf-profile () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mxf-settings common-lisp:nil
                       ((xavc-profile-settings :initarg :xavc-profile-settings
                         :type
                         (common-lisp:or mxf-xavc-profile-settings
                                         common-lisp:null)
                         :accessor %mxf-settings-xavc-profile-settings
                         :initform common-lisp:nil)
                        (profile :initarg :profile :type
                         (common-lisp:or mxf-profile common-lisp:null)
                         :accessor %mxf-settings-profile :initform
                         common-lisp:nil)
                        (afd-signaling :initarg :afd-signaling :type
                         (common-lisp:or mxf-afd-signaling common-lisp:null)
                         :accessor %mxf-settings-afd-signaling :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mxf-settings 'make-mxf-settings))
 (common-lisp:defun make-mxf-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key xavc-profile-settings profile
                     afd-signaling)
   (common-lisp:apply #'common-lisp:make-instance 'mxf-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mxf-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mxf-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xavc-profile-settings))
      (common-lisp:list
       (common-lisp:cons "XavcProfileSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mxf-settings))
   common-lisp:nil))
(common-lisp:deftype mxf-xavc-duration-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mxf-xavc-profile-settings common-lisp:nil
                       ((max-anc-data-size :initarg :max-anc-data-size :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %mxf-xavc-profile-settings-max-anc-data-size
                         :initform common-lisp:nil)
                        (duration-mode :initarg :duration-mode :type
                         (common-lisp:or mxf-xavc-duration-mode
                                         common-lisp:null)
                         :accessor %mxf-xavc-profile-settings-duration-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mxf-xavc-profile-settings
                    'make-mxf-xavc-profile-settings))
 (common-lisp:defun make-mxf-xavc-profile-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-anc-data-size duration-mode)
   (common-lisp:apply #'common-lisp:make-instance 'mxf-xavc-profile-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mxf-xavc-profile-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mxf-xavc-profile-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-mode))
      (common-lisp:list
       (common-lisp:cons "DurationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-anc-data-size))
      (common-lisp:list
       (common-lisp:cons "MaxAncDataSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mxf-xavc-profile-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nex-guard-file-marker-settings common-lisp:nil
                       ((strength :initarg :strength :type
                         (common-lisp:or watermarking-strength
                                         common-lisp:null)
                         :accessor %nex-guard-file-marker-settings-strength
                         :initform common-lisp:nil)
                        (preset :initarg :preset :type
                         (common-lisp:or |__stringMin1Max256| common-lisp:null)
                         :accessor %nex-guard-file-marker-settings-preset
                         :initform common-lisp:nil)
                        (payload :initarg :payload :type
                         (common-lisp:or |__integerMin0Max4194303|
                                         common-lisp:null)
                         :accessor %nex-guard-file-marker-settings-payload
                         :initform common-lisp:nil)
                        (license :initarg :license :type
                         (common-lisp:or |__stringMin1Max100000|
                                         common-lisp:null)
                         :accessor %nex-guard-file-marker-settings-license
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'nex-guard-file-marker-settings
                    'make-nex-guard-file-marker-settings))
 (common-lisp:defun make-nex-guard-file-marker-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key strength preset payload license)
   (common-lisp:apply #'common-lisp:make-instance
                      'nex-guard-file-marker-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nex-guard-file-marker-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nex-guard-file-marker-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license))
      (common-lisp:list
       (common-lisp:cons "License"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preset))
      (common-lisp:list
       (common-lisp:cons "Preset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strength))
      (common-lisp:list
       (common-lisp:cons "Strength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nex-guard-file-marker-settings))
   common-lisp:nil))
(common-lisp:deftype nielsen-active-watermark-process-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass nielsen-configuration common-lisp:nil
                       ((distributor-id :initarg :distributor-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %nielsen-configuration-distributor-id :initform
                         common-lisp:nil)
                        (breakout-code :initarg :breakout-code :type
                         (common-lisp:or |__integerMin0Max0| common-lisp:null)
                         :accessor %nielsen-configuration-breakout-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'nielsen-configuration 'make-nielsen-configuration))
 (common-lisp:defun make-nielsen-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key distributor-id breakout-code)
   (common-lisp:apply #'common-lisp:make-instance 'nielsen-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breakout-code))
      (common-lisp:list
       (common-lisp:cons "BreakoutCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributor-id))
      (common-lisp:list
       (common-lisp:cons "DistributorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nielsen-non-linear-watermark-settings common-lisp:nil
                       ((unique-tic-per-audio-track :initarg
                         :unique-tic-per-audio-track :type
                         (common-lisp:or
                          nielsen-unique-tic-per-audio-track-type
                          common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-unique-tic-per-audio-track
                         :initform common-lisp:nil)
                        (tic-server-url :initarg :tic-server-url :type
                         (common-lisp:or |__stringPatternHttps|
                                         common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-tic-server-url
                         :initform common-lisp:nil)
                        (source-watermark-status :initarg
                         :source-watermark-status :type
                         (common-lisp:or nielsen-source-watermark-status-type
                                         common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-source-watermark-status
                         :initform common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or |__integerMin0Max65534|
                                         common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-source-id
                         :initform common-lisp:nil)
                        (metadata-destination :initarg :metadata-destination
                         :type
                         (common-lisp:or |__stringPatternS3| common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-metadata-destination
                         :initform common-lisp:nil)
                        (episode-id :initarg :episode-id :type
                         (common-lisp:or |__stringMin1Max20| common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-episode-id
                         :initform common-lisp:nil)
                        (cbet-source-id :initarg :cbet-source-id :type
                         (common-lisp:or |__stringPattern0xAFaF0908190908|
                                         common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-cbet-source-id
                         :initform common-lisp:nil)
                        (asset-name :initarg :asset-name :type
                         (common-lisp:or |__stringMin1Max50| common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-asset-name
                         :initform common-lisp:nil)
                        (asset-id :initarg :asset-id :type
                         (common-lisp:or |__stringMin1Max20| common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-asset-id
                         :initform common-lisp:nil)
                        (adi-filename :initarg :adi-filename :type
                         (common-lisp:or |__stringPatternS3| common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-adi-filename
                         :initform common-lisp:nil)
                        (active-watermark-process :initarg
                         :active-watermark-process :type
                         (common-lisp:or nielsen-active-watermark-process-type
                                         common-lisp:null)
                         :accessor
                         %nielsen-non-linear-watermark-settings-active-watermark-process
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'nielsen-non-linear-watermark-settings
                    'make-nielsen-non-linear-watermark-settings))
 (common-lisp:defun make-nielsen-non-linear-watermark-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unique-tic-per-audio-track tic-server-url
                     source-watermark-status source-id metadata-destination
                     episode-id cbet-source-id asset-name asset-id adi-filename
                     active-watermark-process)
   (common-lisp:apply #'common-lisp:make-instance
                      'nielsen-non-linear-watermark-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-non-linear-watermark-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-non-linear-watermark-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-watermark-process))
      (common-lisp:list
       (common-lisp:cons "ActiveWatermarkProcess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'adi-filename))
      (common-lisp:list
       (common-lisp:cons "AdiFilename"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "AssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "AssetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cbet-source-id))
      (common-lisp:list
       (common-lisp:cons "CbetSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'episode-id))
      (common-lisp:list
       (common-lisp:cons "EpisodeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metadata-destination))
      (common-lisp:list
       (common-lisp:cons "MetadataDestination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-watermark-status))
      (common-lisp:list
       (common-lisp:cons "SourceWatermarkStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tic-server-url))
      (common-lisp:list
       (common-lisp:cons "TicServerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unique-tic-per-audio-track))
      (common-lisp:list
       (common-lisp:cons "UniqueTicPerAudioTrack"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-non-linear-watermark-settings))
   common-lisp:nil))
(common-lisp:deftype nielsen-source-watermark-status-type ()
  'common-lisp:string)
(common-lisp:deftype nielsen-unique-tic-per-audio-track-type ()
  'common-lisp:string)
(common-lisp:deftype noise-filter-post-temporal-sharpening ()
  'common-lisp:string)
(common-lisp:deftype noise-filter-post-temporal-sharpening-strength ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass noise-reducer common-lisp:nil
                       ((temporal-filter-settings :initarg
                         :temporal-filter-settings :type
                         (common-lisp:or noise-reducer-temporal-filter-settings
                                         common-lisp:null)
                         :accessor %noise-reducer-temporal-filter-settings
                         :initform common-lisp:nil)
                        (spatial-filter-settings :initarg
                         :spatial-filter-settings :type
                         (common-lisp:or noise-reducer-spatial-filter-settings
                                         common-lisp:null)
                         :accessor %noise-reducer-spatial-filter-settings
                         :initform common-lisp:nil)
                        (filter-settings :initarg :filter-settings :type
                         (common-lisp:or noise-reducer-filter-settings
                                         common-lisp:null)
                         :accessor %noise-reducer-filter-settings :initform
                         common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or noise-reducer-filter common-lisp:null)
                         :accessor %noise-reducer-filter :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'noise-reducer 'make-noise-reducer))
 (common-lisp:defun make-noise-reducer
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key temporal-filter-settings
                     spatial-filter-settings filter-settings filter)
   (common-lisp:apply #'common-lisp:make-instance 'noise-reducer
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input noise-reducer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input noise-reducer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-settings))
      (common-lisp:list
       (common-lisp:cons "FilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spatial-filter-settings))
      (common-lisp:list
       (common-lisp:cons "SpatialFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-filter-settings))
      (common-lisp:list
       (common-lisp:cons "TemporalFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input noise-reducer))
   common-lisp:nil))
(common-lisp:deftype noise-reducer-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass noise-reducer-filter-settings common-lisp:nil
                       ((strength :initarg :strength :type
                         (common-lisp:or |__integerMin0Max3| common-lisp:null)
                         :accessor %noise-reducer-filter-settings-strength
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'noise-reducer-filter-settings
                    'make-noise-reducer-filter-settings))
 (common-lisp:defun make-noise-reducer-filter-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key strength)
   (common-lisp:apply #'common-lisp:make-instance
                      'noise-reducer-filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noise-reducer-filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noise-reducer-filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strength))
      (common-lisp:list
       (common-lisp:cons "Strength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noise-reducer-filter-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass noise-reducer-spatial-filter-settings common-lisp:nil
                       ((strength :initarg :strength :type
                         (common-lisp:or |__integerMin0Max16| common-lisp:null)
                         :accessor
                         %noise-reducer-spatial-filter-settings-strength
                         :initform common-lisp:nil)
                        (speed :initarg :speed :type
                         (common-lisp:or |__integerMinNegative2Max3|
                                         common-lisp:null)
                         :accessor %noise-reducer-spatial-filter-settings-speed
                         :initform common-lisp:nil)
                        (post-filter-sharpen-strength :initarg
                         :post-filter-sharpen-strength :type
                         (common-lisp:or |__integerMin0Max3| common-lisp:null)
                         :accessor
                         %noise-reducer-spatial-filter-settings-post-filter-sharpen-strength
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'noise-reducer-spatial-filter-settings
                    'make-noise-reducer-spatial-filter-settings))
 (common-lisp:defun make-noise-reducer-spatial-filter-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key strength speed
                     post-filter-sharpen-strength)
   (common-lisp:apply #'common-lisp:make-instance
                      'noise-reducer-spatial-filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noise-reducer-spatial-filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noise-reducer-spatial-filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-filter-sharpen-strength))
      (common-lisp:list
       (common-lisp:cons "PostFilterSharpenStrength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speed))
      (common-lisp:list
       (common-lisp:cons "Speed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strength))
      (common-lisp:list
       (common-lisp:cons "Strength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noise-reducer-spatial-filter-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass noise-reducer-temporal-filter-settings common-lisp:nil
                       ((strength :initarg :strength :type
                         (common-lisp:or |__integerMin0Max16| common-lisp:null)
                         :accessor
                         %noise-reducer-temporal-filter-settings-strength
                         :initform common-lisp:nil)
                        (speed :initarg :speed :type
                         (common-lisp:or |__integerMinNegative1Max3|
                                         common-lisp:null)
                         :accessor
                         %noise-reducer-temporal-filter-settings-speed
                         :initform common-lisp:nil)
                        (post-temporal-sharpening-strength :initarg
                         :post-temporal-sharpening-strength :type
                         (common-lisp:or
                          noise-filter-post-temporal-sharpening-strength
                          common-lisp:null)
                         :accessor
                         %noise-reducer-temporal-filter-settings-post-temporal-sharpening-strength
                         :initform common-lisp:nil)
                        (post-temporal-sharpening :initarg
                         :post-temporal-sharpening :type
                         (common-lisp:or noise-filter-post-temporal-sharpening
                                         common-lisp:null)
                         :accessor
                         %noise-reducer-temporal-filter-settings-post-temporal-sharpening
                         :initform common-lisp:nil)
                        (aggressive-mode :initarg :aggressive-mode :type
                         (common-lisp:or |__integerMin0Max4| common-lisp:null)
                         :accessor
                         %noise-reducer-temporal-filter-settings-aggressive-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'noise-reducer-temporal-filter-settings
                    'make-noise-reducer-temporal-filter-settings))
 (common-lisp:defun make-noise-reducer-temporal-filter-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key strength speed
                     post-temporal-sharpening-strength post-temporal-sharpening
                     aggressive-mode)
   (common-lisp:apply #'common-lisp:make-instance
                      'noise-reducer-temporal-filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          noise-reducer-temporal-filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          noise-reducer-temporal-filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggressive-mode))
      (common-lisp:list
       (common-lisp:cons "AggressiveMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-temporal-sharpening))
      (common-lisp:list
       (common-lisp:cons "PostTemporalSharpening"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-temporal-sharpening-strength))
      (common-lisp:list
       (common-lisp:cons "PostTemporalSharpeningStrength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'speed))
      (common-lisp:list
       (common-lisp:cons "Speed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strength))
      (common-lisp:list
       (common-lisp:cons "Strength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          noise-reducer-temporal-filter-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (mediaconvert-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass opus-settings common-lisp:nil
                       ((sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__integerMin16000Max48000|
                                         common-lisp:null)
                         :accessor %opus-settings-sample-rate :initform
                         common-lisp:nil)
                        (channels :initarg :channels :type
                         (common-lisp:or |__integerMin1Max2| common-lisp:null)
                         :accessor %opus-settings-channels :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin32000Max192000|
                                         common-lisp:null)
                         :accessor %opus-settings-bitrate :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'opus-settings 'make-opus-settings))
 (common-lisp:defun make-opus-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-rate channels bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'opus-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input opus-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input opus-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input opus-settings))
   common-lisp:nil))
(common-lisp:deftype order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output common-lisp:nil
                       ((video-description :initarg :video-description :type
                         (common-lisp:or video-description common-lisp:null)
                         :accessor %output-video-description :initform
                         common-lisp:nil)
                        (preset :initarg :preset :type
                         (common-lisp:or |__stringMin0| common-lisp:null)
                         :accessor %output-preset :initform common-lisp:nil)
                        (output-settings :initarg :output-settings :type
                         (common-lisp:or output-settings common-lisp:null)
                         :accessor %output-output-settings :initform
                         common-lisp:nil)
                        (name-modifier :initarg :name-modifier :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor %output-name-modifier :initform
                         common-lisp:nil)
                        (extension :initarg :extension :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-extension :initform common-lisp:nil)
                        (container-settings :initarg :container-settings :type
                         (common-lisp:or container-settings common-lisp:null)
                         :accessor %output-container-settings :initform
                         common-lisp:nil)
                        (caption-descriptions :initarg :caption-descriptions
                         :type
                         (common-lisp:or |__listOfCaptionDescription|
                                         common-lisp:null)
                         :accessor %output-caption-descriptions :initform
                         common-lisp:nil)
                        (audio-descriptions :initarg :audio-descriptions :type
                         (common-lisp:or |__listOfAudioDescription|
                                         common-lisp:null)
                         :accessor %output-audio-descriptions :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defun make-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-description preset output-settings
                     name-modifier extension container-settings
                     caption-descriptions audio-descriptions)
   (common-lisp:apply #'common-lisp:make-instance 'output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-descriptions))
      (common-lisp:list
       (common-lisp:cons "AudioDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-descriptions))
      (common-lisp:list
       (common-lisp:cons "CaptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-settings))
      (common-lisp:list
       (common-lisp:cons "ContainerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension))
      (common-lisp:list
       (common-lisp:cons "Extension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-settings))
      (common-lisp:list
       (common-lisp:cons "OutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preset))
      (common-lisp:list
       (common-lisp:cons "Preset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-description))
      (common-lisp:list
       (common-lisp:cons "VideoDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-channel-mapping common-lisp:nil
                       ((input-channels-fine-tune :initarg
                         :input-channels-fine-tune :type
                         (common-lisp:or |__listOf__doubleMinNegative60Max6|
                                         common-lisp:null)
                         :accessor
                         %output-channel-mapping-input-channels-fine-tune
                         :initform common-lisp:nil)
                        (input-channels :initarg :input-channels :type
                         (common-lisp:or |__listOf__integerMinNegative60Max6|
                                         common-lisp:null)
                         :accessor %output-channel-mapping-input-channels
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-channel-mapping 'make-output-channel-mapping))
 (common-lisp:defun make-output-channel-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-channels-fine-tune input-channels)
   (common-lisp:apply #'common-lisp:make-instance 'output-channel-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-channel-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-channel-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-channels))
      (common-lisp:list
       (common-lisp:cons "InputChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-channels-fine-tune))
      (common-lisp:list
       (common-lisp:cons "InputChannelsFineTune"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-channel-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-detail common-lisp:nil
                       ((video-details :initarg :video-details :type
                         (common-lisp:or video-detail common-lisp:null)
                         :accessor %output-detail-video-details :initform
                         common-lisp:nil)
                        (duration-in-ms :initarg :duration-in-ms :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %output-detail-duration-in-ms :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output-detail 'make-output-detail))
 (common-lisp:defun make-output-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-details duration-in-ms)
   (common-lisp:apply #'common-lisp:make-instance 'output-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-ms))
      (common-lisp:list
       (common-lisp:cons "DurationInMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-details))
      (common-lisp:list
       (common-lisp:cons "VideoDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-group common-lisp:nil
                       ((outputs :initarg :outputs :type
                         (common-lisp:or |__listOfOutput| common-lisp:null)
                         :accessor %output-group-outputs :initform
                         common-lisp:nil)
                        (output-group-settings :initarg :output-group-settings
                         :type
                         (common-lisp:or output-group-settings
                                         common-lisp:null)
                         :accessor %output-group-output-group-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-group-name :initform common-lisp:nil)
                        (custom-name :initarg :custom-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-group-custom-name :initform common-lisp:nil)
                        (automated-encoding-settings :initarg
                         :automated-encoding-settings :type
                         (common-lisp:or automated-encoding-settings
                                         common-lisp:null)
                         :accessor %output-group-automated-encoding-settings
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output-group 'make-output-group))
 (common-lisp:defun make-output-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outputs output-group-settings name
                     custom-name automated-encoding-settings)
   (common-lisp:apply #'common-lisp:make-instance 'output-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-encoding-settings))
      (common-lisp:list
       (common-lisp:cons "AutomatedEncodingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-name))
      (common-lisp:list
       (common-lisp:cons "CustomName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-group-settings))
      (common-lisp:list
       (common-lisp:cons "OutputGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-group-detail common-lisp:nil
                       ((output-details :initarg :output-details :type
                         (common-lisp:or |__listOfOutputDetail|
                                         common-lisp:null)
                         :accessor %output-group-detail-output-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-group-detail 'make-output-group-detail))
 (common-lisp:defun make-output-group-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-details)
   (common-lisp:apply #'common-lisp:make-instance 'output-group-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-group-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-group-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-details))
      (common-lisp:list
       (common-lisp:cons "OutputDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-group-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-group-settings common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or output-group-type common-lisp:null)
                         :accessor %output-group-settings-type :initform
                         common-lisp:nil)
                        (ms-smooth-group-settings :initarg
                         :ms-smooth-group-settings :type
                         (common-lisp:or ms-smooth-group-settings
                                         common-lisp:null)
                         :accessor
                         %output-group-settings-ms-smooth-group-settings
                         :initform common-lisp:nil)
                        (hls-group-settings :initarg :hls-group-settings :type
                         (common-lisp:or hls-group-settings common-lisp:null)
                         :accessor %output-group-settings-hls-group-settings
                         :initform common-lisp:nil)
                        (file-group-settings :initarg :file-group-settings
                         :type
                         (common-lisp:or file-group-settings common-lisp:null)
                         :accessor %output-group-settings-file-group-settings
                         :initform common-lisp:nil)
                        (dash-iso-group-settings :initarg
                         :dash-iso-group-settings :type
                         (common-lisp:or dash-iso-group-settings
                                         common-lisp:null)
                         :accessor
                         %output-group-settings-dash-iso-group-settings
                         :initform common-lisp:nil)
                        (cmaf-group-settings :initarg :cmaf-group-settings
                         :type
                         (common-lisp:or cmaf-group-settings common-lisp:null)
                         :accessor %output-group-settings-cmaf-group-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-group-settings 'make-output-group-settings))
 (common-lisp:defun make-output-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type ms-smooth-group-settings
                     hls-group-settings file-group-settings
                     dash-iso-group-settings cmaf-group-settings)
   (common-lisp:apply #'common-lisp:make-instance 'output-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cmaf-group-settings))
      (common-lisp:list
       (common-lisp:cons "CmafGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dash-iso-group-settings))
      (common-lisp:list
       (common-lisp:cons "DashIsoGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-group-settings))
      (common-lisp:list
       (common-lisp:cons "FileGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-group-settings))
      (common-lisp:list
       (common-lisp:cons "HlsGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ms-smooth-group-settings))
      (common-lisp:list
       (common-lisp:cons "MsSmoothGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   common-lisp:nil))
(common-lisp:deftype output-group-type () 'common-lisp:string)
(common-lisp:deftype output-sdt () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-settings common-lisp:nil
                       ((hls-settings :initarg :hls-settings :type
                         (common-lisp:or hls-settings common-lisp:null)
                         :accessor %output-settings-hls-settings :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output-settings 'make-output-settings))
 (common-lisp:defun make-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hls-settings)
   (common-lisp:apply #'common-lisp:make-instance 'output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-settings))
      (common-lisp:list
       (common-lisp:cons "HlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-settings))
   common-lisp:nil))
(common-lisp:deftype pad-video () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass partner-watermarking common-lisp:nil
                       ((nexguard-file-marker-settings :initarg
                         :nexguard-file-marker-settings :type
                         (common-lisp:or nex-guard-file-marker-settings
                                         common-lisp:null)
                         :accessor
                         %partner-watermarking-nexguard-file-marker-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'partner-watermarking 'make-partner-watermarking))
 (common-lisp:defun make-partner-watermarking
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nexguard-file-marker-settings)
   (common-lisp:apply #'common-lisp:make-instance 'partner-watermarking
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partner-watermarking))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partner-watermarking))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nexguard-file-marker-settings))
      (common-lisp:list
       (common-lisp:cons "NexguardFileMarkerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partner-watermarking))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy common-lisp:nil
                       ((s3inputs :initarg :s3inputs :type
                         (common-lisp:or input-policy common-lisp:null)
                         :accessor %policy-s3inputs :initform common-lisp:nil)
                        (https-inputs :initarg :https-inputs :type
                         (common-lisp:or input-policy common-lisp:null)
                         :accessor %policy-https-inputs :initform
                         common-lisp:nil)
                        (http-inputs :initarg :http-inputs :type
                         (common-lisp:or input-policy common-lisp:null)
                         :accessor %policy-http-inputs :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defun make-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3inputs https-inputs http-inputs)
   (common-lisp:apply #'common-lisp:make-instance 'policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-inputs))
      (common-lisp:list
       (common-lisp:cons "HttpInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'https-inputs))
      (common-lisp:list
       (common-lisp:cons "HttpsInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3inputs))
      (common-lisp:list
       (common-lisp:cons "S3Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass preset common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %preset-type :initform common-lisp:nil)
                        (settings :initarg :settings :type
                         (common-lisp:or preset-settings common-lisp:null)
                         :accessor %preset-settings :initform
                         (common-lisp:error ":settings is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %preset-name :initform
                         (common-lisp:error ":name is required"))
                        (last-updated :initarg :last-updated :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %preset-last-updated :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %preset-description :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %preset-created-at :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %preset-category :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %preset-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'preset 'make-preset))
 (common-lisp:defun make-preset
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type settings name last-updated
                     description created-at category arn)
   (common-lisp:apply #'common-lisp:make-instance 'preset
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input preset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input preset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input preset))
   common-lisp:nil))
(common-lisp:deftype preset-list-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass preset-settings common-lisp:nil
                       ((video-description :initarg :video-description :type
                         (common-lisp:or video-description common-lisp:null)
                         :accessor %preset-settings-video-description :initform
                         common-lisp:nil)
                        (container-settings :initarg :container-settings :type
                         (common-lisp:or container-settings common-lisp:null)
                         :accessor %preset-settings-container-settings
                         :initform common-lisp:nil)
                        (caption-descriptions :initarg :caption-descriptions
                         :type
                         (common-lisp:or |__listOfCaptionDescriptionPreset|
                                         common-lisp:null)
                         :accessor %preset-settings-caption-descriptions
                         :initform common-lisp:nil)
                        (audio-descriptions :initarg :audio-descriptions :type
                         (common-lisp:or |__listOfAudioDescription|
                                         common-lisp:null)
                         :accessor %preset-settings-audio-descriptions
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'preset-settings 'make-preset-settings))
 (common-lisp:defun make-preset-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-description container-settings
                     caption-descriptions audio-descriptions)
   (common-lisp:apply #'common-lisp:make-instance 'preset-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input preset-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input preset-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-descriptions))
      (common-lisp:list
       (common-lisp:cons "AudioDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-descriptions))
      (common-lisp:list
       (common-lisp:cons "CaptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-settings))
      (common-lisp:list
       (common-lisp:cons "ContainerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-description))
      (common-lisp:list
       (common-lisp:cons "VideoDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input preset-settings))
   common-lisp:nil))
(common-lisp:deftype pricing-plan () 'common-lisp:string)
(common-lisp:deftype prores-chroma-sampling () 'common-lisp:string)
(common-lisp:deftype prores-codec-profile () 'common-lisp:string)
(common-lisp:deftype prores-framerate-control () 'common-lisp:string)
(common-lisp:deftype prores-framerate-conversion-algorithm ()
  'common-lisp:string)
(common-lisp:deftype prores-interlace-mode () 'common-lisp:string)
(common-lisp:deftype prores-par-control () 'common-lisp:string)
(common-lisp:deftype prores-scan-type-conversion-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass prores-settings common-lisp:nil
                       ((telecine :initarg :telecine :type
                         (common-lisp:or prores-telecine common-lisp:null)
                         :accessor %prores-settings-telecine :initform
                         common-lisp:nil)
                        (slow-pal :initarg :slow-pal :type
                         (common-lisp:or prores-slow-pal common-lisp:null)
                         :accessor %prores-settings-slow-pal :initform
                         common-lisp:nil)
                        (scan-type-conversion-mode :initarg
                         :scan-type-conversion-mode :type
                         (common-lisp:or prores-scan-type-conversion-mode
                                         common-lisp:null)
                         :accessor %prores-settings-scan-type-conversion-mode
                         :initform common-lisp:nil)
                        (par-numerator :initarg :par-numerator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %prores-settings-par-numerator :initform
                         common-lisp:nil)
                        (par-denominator :initarg :par-denominator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %prores-settings-par-denominator :initform
                         common-lisp:nil)
                        (par-control :initarg :par-control :type
                         (common-lisp:or prores-par-control common-lisp:null)
                         :accessor %prores-settings-par-control :initform
                         common-lisp:nil)
                        (interlace-mode :initarg :interlace-mode :type
                         (common-lisp:or prores-interlace-mode
                                         common-lisp:null)
                         :accessor %prores-settings-interlace-mode :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %prores-settings-framerate-numerator
                         :initform common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %prores-settings-framerate-denominator
                         :initform common-lisp:nil)
                        (framerate-conversion-algorithm :initarg
                         :framerate-conversion-algorithm :type
                         (common-lisp:or prores-framerate-conversion-algorithm
                                         common-lisp:null)
                         :accessor
                         %prores-settings-framerate-conversion-algorithm
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or prores-framerate-control
                                         common-lisp:null)
                         :accessor %prores-settings-framerate-control :initform
                         common-lisp:nil)
                        (codec-profile :initarg :codec-profile :type
                         (common-lisp:or prores-codec-profile common-lisp:null)
                         :accessor %prores-settings-codec-profile :initform
                         common-lisp:nil)
                        (chroma-sampling :initarg :chroma-sampling :type
                         (common-lisp:or prores-chroma-sampling
                                         common-lisp:null)
                         :accessor %prores-settings-chroma-sampling :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'prores-settings 'make-prores-settings))
 (common-lisp:defun make-prores-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key telecine slow-pal
                     scan-type-conversion-mode par-numerator par-denominator
                     par-control interlace-mode framerate-numerator
                     framerate-denominator framerate-conversion-algorithm
                     framerate-control codec-profile chroma-sampling)
   (common-lisp:apply #'common-lisp:make-instance 'prores-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input prores-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input prores-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chroma-sampling))
      (common-lisp:list
       (common-lisp:cons "ChromaSampling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-profile))
      (common-lisp:list
       (common-lisp:cons "CodecProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-conversion-algorithm))
      (common-lisp:list
       (common-lisp:cons "FramerateConversionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interlace-mode))
      (common-lisp:list
       (common-lisp:cons "InterlaceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-control))
      (common-lisp:list
       (common-lisp:cons "ParControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-type-conversion-mode))
      (common-lisp:list
       (common-lisp:cons "ScanTypeConversionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slow-pal))
      (common-lisp:list
       (common-lisp:cons "SlowPal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telecine))
      (common-lisp:list
       (common-lisp:cons "Telecine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input prores-settings))
   common-lisp:nil))
(common-lisp:deftype prores-slow-pal () 'common-lisp:string)
(common-lisp:deftype prores-telecine () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-policy-request common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))))
 (common-lisp:export
  (common-lisp:list 'put-policy-request 'make-put-policy-request))
 (common-lisp:defun make-put-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance 'put-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-policy-response common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-policy-response-policy :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-policy-response 'make-put-policy-response))
 (common-lisp:defun make-put-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance 'put-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass queue common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %queue-type :initform common-lisp:nil)
                        (submitted-jobs-count :initarg :submitted-jobs-count
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor %queue-submitted-jobs-count :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or queue-status common-lisp:null)
                         :accessor %queue-status :initform common-lisp:nil)
                        (reservation-plan :initarg :reservation-plan :type
                         (common-lisp:or reservation-plan common-lisp:null)
                         :accessor %queue-reservation-plan :initform
                         common-lisp:nil)
                        (progressing-jobs-count :initarg
                         :progressing-jobs-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %queue-progressing-jobs-count :initform
                         common-lisp:nil)
                        (pricing-plan :initarg :pricing-plan :type
                         (common-lisp:or pricing-plan common-lisp:null)
                         :accessor %queue-pricing-plan :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %queue-name :initform
                         (common-lisp:error ":name is required"))
                        (last-updated :initarg :last-updated :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %queue-last-updated :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %queue-description :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %queue-created-at :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %queue-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'queue 'make-queue))
 (common-lisp:defun make-queue
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type submitted-jobs-count status
                     reservation-plan progressing-jobs-count pricing-plan name
                     last-updated description created-at arn)
   (common-lisp:apply #'common-lisp:make-instance 'queue
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-plan))
      (common-lisp:list
       (common-lisp:cons "PricingPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progressing-jobs-count))
      (common-lisp:list
       (common-lisp:cons "ProgressingJobsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-plan))
      (common-lisp:list
       (common-lisp:cons "ReservationPlan"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'submitted-jobs-count))
      (common-lisp:list
       (common-lisp:cons "SubmittedJobsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue))
   common-lisp:nil))
(common-lisp:deftype queue-list-by () 'common-lisp:string)
(common-lisp:deftype queue-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass queue-transition common-lisp:nil
                       ((timestamp :initarg :timestamp :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %queue-transition-timestamp :initform
                         common-lisp:nil)
                        (source-queue :initarg :source-queue :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %queue-transition-source-queue :initform
                         common-lisp:nil)
                        (destination-queue :initarg :destination-queue :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %queue-transition-destination-queue :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'queue-transition 'make-queue-transition))
 (common-lisp:defun make-queue-transition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp source-queue destination-queue)
   (common-lisp:apply #'common-lisp:make-instance 'queue-transition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input queue-transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input queue-transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-queue))
      (common-lisp:list
       (common-lisp:cons "DestinationQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-queue))
      (common-lisp:list
       (common-lisp:cons "SourceQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input queue-transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rectangle common-lisp:nil
                       ((y :initarg :y :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %rectangle-y :initform common-lisp:nil)
                        (x :initarg :x :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %rectangle-x :initform common-lisp:nil)
                        (width :initarg :width :type
                         (common-lisp:or |__integerMin2Max2147483647|
                                         common-lisp:null)
                         :accessor %rectangle-width :initform common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or |__integerMin2Max2147483647|
                                         common-lisp:null)
                         :accessor %rectangle-height :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'rectangle 'make-rectangle))
 (common-lisp:defun make-rectangle
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key y x width height)
   (common-lisp:apply #'common-lisp:make-instance 'rectangle
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rectangle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rectangle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'x))
      (common-lisp:list
       (common-lisp:cons "X"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'y))
      (common-lisp:list
       (common-lisp:cons "Y"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rectangle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remix-settings common-lisp:nil
                       ((channels-out :initarg :channels-out :type
                         (common-lisp:or |__integerMin1Max64| common-lisp:null)
                         :accessor %remix-settings-channels-out :initform
                         common-lisp:nil)
                        (channels-in :initarg :channels-in :type
                         (common-lisp:or |__integerMin1Max64| common-lisp:null)
                         :accessor %remix-settings-channels-in :initform
                         common-lisp:nil)
                        (channel-mapping :initarg :channel-mapping :type
                         (common-lisp:or channel-mapping common-lisp:null)
                         :accessor %remix-settings-channel-mapping :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'remix-settings 'make-remix-settings))
 (common-lisp:defun make-remix-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channels-out channels-in channel-mapping)
   (common-lisp:apply #'common-lisp:make-instance 'remix-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remix-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remix-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-mapping))
      (common-lisp:list
       (common-lisp:cons "ChannelMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels-in))
      (common-lisp:list
       (common-lisp:cons "ChannelsIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels-out))
      (common-lisp:list
       (common-lisp:cons "ChannelsOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remix-settings))
   common-lisp:nil))
(common-lisp:deftype renewal-type () 'common-lisp:string)
(common-lisp:deftype required-flag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reservation-plan common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or reservation-plan-status
                                         common-lisp:null)
                         :accessor %reservation-plan-status :initform
                         common-lisp:nil)
                        (reserved-slots :initarg :reserved-slots :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %reservation-plan-reserved-slots :initform
                         common-lisp:nil)
                        (renewal-type :initarg :renewal-type :type
                         (common-lisp:or renewal-type common-lisp:null)
                         :accessor %reservation-plan-renewal-type :initform
                         common-lisp:nil)
                        (purchased-at :initarg :purchased-at :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %reservation-plan-purchased-at :initform
                         common-lisp:nil)
                        (expires-at :initarg :expires-at :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %reservation-plan-expires-at :initform
                         common-lisp:nil)
                        (commitment :initarg :commitment :type
                         (common-lisp:or commitment common-lisp:null) :accessor
                         %reservation-plan-commitment :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reservation-plan 'make-reservation-plan))
 (common-lisp:defun make-reservation-plan
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status reserved-slots renewal-type
                     purchased-at expires-at commitment)
   (common-lisp:apply #'common-lisp:make-instance 'reservation-plan
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reservation-plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reservation-plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commitment))
      (common-lisp:list
       (common-lisp:cons "Commitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "ExpiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'purchased-at))
      (common-lisp:list
       (common-lisp:cons "PurchasedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-type))
      (common-lisp:list
       (common-lisp:cons "RenewalType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-slots))
      (common-lisp:list
       (common-lisp:cons "ReservedSlots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reservation-plan))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reservation-plan-settings common-lisp:nil
                       ((reserved-slots :initarg :reserved-slots :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %reservation-plan-settings-reserved-slots
                         :initform
                         (common-lisp:error ":reserved-slots is required"))
                        (renewal-type :initarg :renewal-type :type
                         (common-lisp:or renewal-type common-lisp:null)
                         :accessor %reservation-plan-settings-renewal-type
                         :initform
                         (common-lisp:error ":renewal-type is required"))
                        (commitment :initarg :commitment :type
                         (common-lisp:or commitment common-lisp:null) :accessor
                         %reservation-plan-settings-commitment :initform
                         (common-lisp:error ":commitment is required"))))
 (common-lisp:export
  (common-lisp:list 'reservation-plan-settings
                    'make-reservation-plan-settings))
 (common-lisp:defun make-reservation-plan-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reserved-slots renewal-type commitment)
   (common-lisp:apply #'common-lisp:make-instance 'reservation-plan-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-plan-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-plan-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commitment))
      (common-lisp:list
       (common-lisp:cons "Commitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-type))
      (common-lisp:list
       (common-lisp:cons "RenewalType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-slots))
      (common-lisp:list
       (common-lisp:cons "ReservedSlots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-plan-settings))
   common-lisp:nil))
(common-lisp:deftype reservation-plan-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-tags common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %resource-tags-tags :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %resource-tags-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-tags 'make-resource-tags))
 (common-lisp:defun make-resource-tags
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags arn)
   (common-lisp:apply #'common-lisp:make-instance 'resource-tags
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tags))
   common-lisp:nil))
(common-lisp:deftype respond-to-afd () 'common-lisp:string)
(common-lisp:deftype rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3destination-access-control common-lisp:nil
                       ((canned-acl :initarg :canned-acl :type
                         (common-lisp:or s3object-canned-acl common-lisp:null)
                         :accessor %s3destination-access-control-canned-acl
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3destination-access-control
                    'make-s3destination-access-control))
 (common-lisp:defun make-s3destination-access-control
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canned-acl)
   (common-lisp:apply #'common-lisp:make-instance 's3destination-access-control
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-access-control))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-access-control))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-access-control))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3destination-settings common-lisp:nil
                       ((encryption :initarg :encryption :type
                         (common-lisp:or s3encryption-settings
                                         common-lisp:null)
                         :accessor %s3destination-settings-encryption :initform
                         common-lisp:nil)
                        (access-control :initarg :access-control :type
                         (common-lisp:or s3destination-access-control
                                         common-lisp:null)
                         :accessor %s3destination-settings-access-control
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3destination-settings 'make-s3destination-settings))
 (common-lisp:defun make-s3destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption access-control)
   (common-lisp:apply #'common-lisp:make-instance 's3destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-control))
      (common-lisp:list
       (common-lisp:cons "AccessControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption))
      (common-lisp:list
       (common-lisp:cons "Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3encryption-settings common-lisp:nil
                       ((kms-key-arn :initarg :kms-key-arn :type
                         (common-lisp:or
                          |__stringPatternArnAwsUsGovCnKmsAZ26EastWestCentralNorthSouthEastWest1912D12KeyAFAF098AFAF094AFAF094AFAF094AFAF0912MrkAFAF0932|
                          common-lisp:null)
                         :accessor %s3encryption-settings-kms-key-arn :initform
                         common-lisp:nil)
                        (kms-encryption-context :initarg
                         :kms-encryption-context :type
                         (common-lisp:or |__stringPatternAZaZ0902|
                                         common-lisp:null)
                         :accessor
                         %s3encryption-settings-kms-encryption-context
                         :initform common-lisp:nil)
                        (encryption-type :initarg :encryption-type :type
                         (common-lisp:or s3server-side-encryption-type
                                         common-lisp:null)
                         :accessor %s3encryption-settings-encryption-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3encryption-settings 'make-s3encryption-settings))
 (common-lisp:defun make-s3encryption-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-arn kms-encryption-context
                     encryption-type)
   (common-lisp:apply #'common-lisp:make-instance 's3encryption-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3encryption-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3encryption-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kms-encryption-context))
      (common-lisp:list
       (common-lisp:cons "KmsEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3encryption-settings))
   common-lisp:nil))
(common-lisp:deftype s3object-canned-acl () 'common-lisp:string)
(common-lisp:deftype s3server-side-encryption-type () 'common-lisp:string)
(common-lisp:deftype sample-range-conversion () 'common-lisp:string)
(common-lisp:deftype scaling-behavior () 'common-lisp:string)
(common-lisp:deftype scc-destination-framerate () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scc-destination-settings common-lisp:nil
                       ((framerate :initarg :framerate :type
                         (common-lisp:or scc-destination-framerate
                                         common-lisp:null)
                         :accessor %scc-destination-settings-framerate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scc-destination-settings 'make-scc-destination-settings))
 (common-lisp:defun make-scc-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key framerate)
   (common-lisp:apply #'common-lisp:make-instance 'scc-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scc-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scc-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate))
      (common-lisp:list
       (common-lisp:cons "Framerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scc-destination-settings))
   common-lisp:nil))
(common-lisp:deftype simulate-reserved-queue () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass speke-key-provider common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or |__stringPatternHttps|
                                         common-lisp:null)
                         :accessor %speke-key-provider-url :initform
                         common-lisp:nil)
                        (system-ids :initarg :system-ids :type
                         (common-lisp:or
                          |__listOf__stringPattern09aFAF809aFAF409aFAF409aFAF409aFAF12|
                          common-lisp:null)
                         :accessor %speke-key-provider-system-ids :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %speke-key-provider-resource-id :initform
                         common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :type
                         (common-lisp:or |__stringPatternArnAwsUsGovAcm|
                                         common-lisp:null)
                         :accessor %speke-key-provider-certificate-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'speke-key-provider 'make-speke-key-provider))
 (common-lisp:defun make-speke-key-provider
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url system-ids resource-id
                     certificate-arn)
   (common-lisp:apply #'common-lisp:make-instance 'speke-key-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input speke-key-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input speke-key-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-ids))
      (common-lisp:list
       (common-lisp:cons "SystemIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input speke-key-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass speke-key-provider-cmaf common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or |__stringPatternHttps|
                                         common-lisp:null)
                         :accessor %speke-key-provider-cmaf-url :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or |__stringPatternW| common-lisp:null)
                         :accessor %speke-key-provider-cmaf-resource-id
                         :initform common-lisp:nil)
                        (hls-signaled-system-ids :initarg
                         :hls-signaled-system-ids :type
                         (common-lisp:or
                          |__listOf__stringMin36Max36Pattern09aFAF809aFAF409aFAF409aFAF409aFAF12|
                          common-lisp:null)
                         :accessor
                         %speke-key-provider-cmaf-hls-signaled-system-ids
                         :initform common-lisp:nil)
                        (dash-signaled-system-ids :initarg
                         :dash-signaled-system-ids :type
                         (common-lisp:or
                          |__listOf__stringMin36Max36Pattern09aFAF809aFAF409aFAF409aFAF409aFAF12|
                          common-lisp:null)
                         :accessor
                         %speke-key-provider-cmaf-dash-signaled-system-ids
                         :initform common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :type
                         (common-lisp:or |__stringPatternArnAwsUsGovAcm|
                                         common-lisp:null)
                         :accessor %speke-key-provider-cmaf-certificate-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'speke-key-provider-cmaf 'make-speke-key-provider-cmaf))
 (common-lisp:defun make-speke-key-provider-cmaf
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url resource-id hls-signaled-system-ids
                     dash-signaled-system-ids certificate-arn)
   (common-lisp:apply #'common-lisp:make-instance 'speke-key-provider-cmaf
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          speke-key-provider-cmaf))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          speke-key-provider-cmaf))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dash-signaled-system-ids))
      (common-lisp:list
       (common-lisp:cons "DashSignaledSystemIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-signaled-system-ids))
      (common-lisp:list
       (common-lisp:cons "HlsSignaledSystemIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          speke-key-provider-cmaf))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass srt-destination-settings common-lisp:nil
                       ((style-passthrough :initarg :style-passthrough :type
                         (common-lisp:or srt-style-passthrough
                                         common-lisp:null)
                         :accessor %srt-destination-settings-style-passthrough
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'srt-destination-settings 'make-srt-destination-settings))
 (common-lisp:defun make-srt-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key style-passthrough)
   (common-lisp:apply #'common-lisp:make-instance 'srt-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          srt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          srt-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-passthrough))
      (common-lisp:list
       (common-lisp:cons "StylePassthrough"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          srt-destination-settings))
   common-lisp:nil))
(common-lisp:deftype srt-style-passthrough () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass static-key-provider common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %static-key-provider-url :initform common-lisp:nil)
                        (static-key-value :initarg :static-key-value :type
                         (common-lisp:or |__stringPatternAZaZ0932|
                                         common-lisp:null)
                         :accessor %static-key-provider-static-key-value
                         :initform common-lisp:nil)
                        (key-format-versions :initarg :key-format-versions
                         :type
                         (common-lisp:or |__stringPatternDD| common-lisp:null)
                         :accessor %static-key-provider-key-format-versions
                         :initform common-lisp:nil)
                        (key-format :initarg :key-format :type
                         (common-lisp:or
                          |__stringPatternIdentityAZaZ26AZaZ09163|
                          common-lisp:null)
                         :accessor %static-key-provider-key-format :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'static-key-provider 'make-static-key-provider))
 (common-lisp:defun make-static-key-provider
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url static-key-value key-format-versions
                     key-format)
   (common-lisp:apply #'common-lisp:make-instance 'static-key-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input static-key-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input static-key-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-format))
      (common-lisp:list
       (common-lisp:cons "KeyFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-format-versions))
      (common-lisp:list
       (common-lisp:cons "KeyFormatVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-key-value))
      (common-lisp:list
       (common-lisp:cons "StaticKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input static-key-provider))
   common-lisp:nil))
(common-lisp:deftype status-update-interval () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or |__mapOf__string| common-lisp:null)
                         :accessor %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %tag-resource-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass teletext-destination-settings common-lisp:nil
                       ((page-types :initarg :page-types :type
                         (common-lisp:or |__listOfTeletextPageType|
                                         common-lisp:null)
                         :accessor %teletext-destination-settings-page-types
                         :initform common-lisp:nil)
                        (page-number :initarg :page-number :type
                         (common-lisp:or
                          |__stringMin3Max3Pattern1809aFAF09aEAE|
                          common-lisp:null)
                         :accessor %teletext-destination-settings-page-number
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'teletext-destination-settings
                    'make-teletext-destination-settings))
 (common-lisp:defun make-teletext-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-types page-number)
   (common-lisp:apply #'common-lisp:make-instance
                      'teletext-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-types))
      (common-lisp:list
       (common-lisp:cons "PageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   common-lisp:nil))
(common-lisp:deftype teletext-page-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass teletext-source-settings common-lisp:nil
                       ((page-number :initarg :page-number :type
                         (common-lisp:or
                          |__stringMin3Max3Pattern1809aFAF09aEAE|
                          common-lisp:null)
                         :accessor %teletext-source-settings-page-number
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'teletext-source-settings 'make-teletext-source-settings))
 (common-lisp:defun make-teletext-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-number)
   (common-lisp:apply #'common-lisp:make-instance 'teletext-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timecode-burnin common-lisp:nil
                       ((prefix :initarg :prefix :type
                         (common-lisp:or |__stringPattern| common-lisp:null)
                         :accessor %timecode-burnin-prefix :initform
                         common-lisp:nil)
                        (position :initarg :position :type
                         (common-lisp:or timecode-burnin-position
                                         common-lisp:null)
                         :accessor %timecode-burnin-position :initform
                         common-lisp:nil)
                        (font-size :initarg :font-size :type
                         (common-lisp:or |__integerMin10Max48|
                                         common-lisp:null)
                         :accessor %timecode-burnin-font-size :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'timecode-burnin 'make-timecode-burnin))
 (common-lisp:defun make-timecode-burnin
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix position font-size)
   (common-lisp:apply #'common-lisp:make-instance 'timecode-burnin
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timecode-burnin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timecode-burnin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timecode-burnin))
   common-lisp:nil))
(common-lisp:deftype timecode-burnin-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timecode-config common-lisp:nil
                       ((timestamp-offset :initarg :timestamp-offset :type
                         (common-lisp:or |__stringPattern0940191020191209301|
                                         common-lisp:null)
                         :accessor %timecode-config-timestamp-offset :initform
                         common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or |__stringPattern010920405090509092|
                                         common-lisp:null)
                         :accessor %timecode-config-start :initform
                         common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or timecode-source common-lisp:null)
                         :accessor %timecode-config-source :initform
                         common-lisp:nil)
                        (anchor :initarg :anchor :type
                         (common-lisp:or |__stringPattern010920405090509092|
                                         common-lisp:null)
                         :accessor %timecode-config-anchor :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'timecode-config 'make-timecode-config))
 (common-lisp:defun make-timecode-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp-offset start source anchor)
   (common-lisp:apply #'common-lisp:make-instance 'timecode-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timecode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timecode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anchor))
      (common-lisp:list
       (common-lisp:cons "Anchor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-offset))
      (common-lisp:list
       (common-lisp:cons "TimestampOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timecode-config))
   common-lisp:nil))
(common-lisp:deftype timecode-source () 'common-lisp:string)
(common-lisp:deftype timed-metadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timed-metadata-insertion common-lisp:nil
                       ((id3insertions :initarg :id3insertions :type
                         (common-lisp:or |__listOfId3Insertion|
                                         common-lisp:null)
                         :accessor %timed-metadata-insertion-id3insertions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'timed-metadata-insertion 'make-timed-metadata-insertion))
 (common-lisp:defun make-timed-metadata-insertion
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id3insertions)
   (common-lisp:apply #'common-lisp:make-instance 'timed-metadata-insertion
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timed-metadata-insertion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timed-metadata-insertion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id3insertions))
      (common-lisp:list
       (common-lisp:cons "Id3Insertions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timed-metadata-insertion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timing common-lisp:nil
                       ((submit-time :initarg :submit-time :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %timing-submit-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %timing-start-time :initform
                         common-lisp:nil)
                        (finish-time :initarg :finish-time :type
                         (common-lisp:or |__timestampUnix| common-lisp:null)
                         :accessor %timing-finish-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'timing 'make-timing))
 (common-lisp:defun make-timing
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key submit-time start-time finish-time)
   (common-lisp:apply #'common-lisp:make-instance 'timing
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finish-time))
      (common-lisp:list
       (common-lisp:cons "FinishTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit-time))
      (common-lisp:list
       (common-lisp:cons "SubmitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (mediaconvert-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass track-source-settings common-lisp:nil
                       ((track-number :initarg :track-number :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %track-source-settings-track-number
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'track-source-settings 'make-track-source-settings))
 (common-lisp:defun make-track-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key track-number)
   (common-lisp:apply #'common-lisp:make-instance 'track-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          track-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          track-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'track-number))
      (common-lisp:list
       (common-lisp:cons "TrackNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          track-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ttml-destination-settings common-lisp:nil
                       ((style-passthrough :initarg :style-passthrough :type
                         (common-lisp:or ttml-style-passthrough
                                         common-lisp:null)
                         :accessor %ttml-destination-settings-style-passthrough
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ttml-destination-settings
                    'make-ttml-destination-settings))
 (common-lisp:defun make-ttml-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key style-passthrough)
   (common-lisp:apply #'common-lisp:make-instance 'ttml-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-passthrough))
      (common-lisp:list
       (common-lisp:cons "StylePassthrough"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   common-lisp:nil))
(common-lisp:deftype ttml-style-passthrough () 'common-lisp:string)
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %untag-resource-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-template-request common-lisp:nil
                       ((status-update-interval :initarg
                         :status-update-interval :type
                         (common-lisp:or status-update-interval
                                         common-lisp:null)
                         :accessor
                         %update-job-template-request-status-update-interval
                         :initform common-lisp:nil)
                        (settings :initarg :settings :type
                         (common-lisp:or job-template-settings
                                         common-lisp:null)
                         :accessor %update-job-template-request-settings
                         :initform common-lisp:nil)
                        (queue :initarg :queue :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-job-template-request-queue :initform
                         common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or |__integerMinNegative50Max50|
                                         common-lisp:null)
                         :accessor %update-job-template-request-priority
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-job-template-request-name :initform
                         (common-lisp:error ":name is required"))
                        (hop-destinations :initarg :hop-destinations :type
                         (common-lisp:or |__listOfHopDestination|
                                         common-lisp:null)
                         :accessor
                         %update-job-template-request-hop-destinations
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-job-template-request-description :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-job-template-request-category :initform
                         common-lisp:nil)
                        (acceleration-settings :initarg :acceleration-settings
                         :type
                         (common-lisp:or acceleration-settings
                                         common-lisp:null)
                         :accessor
                         %update-job-template-request-acceleration-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-job-template-request
                    'make-update-job-template-request))
 (common-lisp:defun make-update-job-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-update-interval settings queue
                     priority name hop-destinations description category
                     acceleration-settings)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acceleration-settings))
      (common-lisp:list
       (common-lisp:cons "AccelerationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hop-destinations))
      (common-lisp:list
       (common-lisp:cons "HopDestinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-update-interval))
      (common-lisp:list
       (common-lisp:cons "StatusUpdateInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-template-response common-lisp:nil
                       ((job-template :initarg :job-template :type
                         (common-lisp:or job-template common-lisp:null)
                         :accessor %update-job-template-response-job-template
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-job-template-response
                    'make-update-job-template-response))
 (common-lisp:defun make-update-job-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-template)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-template))
      (common-lisp:list
       (common-lisp:cons "JobTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-preset-request common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or preset-settings common-lisp:null)
                         :accessor %update-preset-request-settings :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-preset-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-preset-request-description :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-preset-request-category :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-preset-request 'make-update-preset-request))
 (common-lisp:defun make-update-preset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings name description category)
   (common-lisp:apply #'common-lisp:make-instance 'update-preset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-preset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-preset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-preset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-preset-response common-lisp:nil
                       ((preset :initarg :preset :type
                         (common-lisp:or preset common-lisp:null) :accessor
                         %update-preset-response-preset :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-preset-response 'make-update-preset-response))
 (common-lisp:defun make-update-preset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preset)
   (common-lisp:apply #'common-lisp:make-instance 'update-preset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-preset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-preset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preset))
      (common-lisp:list
       (common-lisp:cons "Preset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-preset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-queue-request common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or queue-status common-lisp:null)
                         :accessor %update-queue-request-status :initform
                         common-lisp:nil)
                        (reservation-plan-settings :initarg
                         :reservation-plan-settings :type
                         (common-lisp:or reservation-plan-settings
                                         common-lisp:null)
                         :accessor
                         %update-queue-request-reservation-plan-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-queue-request-name :initform
                         (common-lisp:error ":name is required"))
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-queue-request-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-queue-request 'make-update-queue-request))
 (common-lisp:defun make-update-queue-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status reservation-plan-settings name
                     description)
   (common-lisp:apply #'common-lisp:make-instance 'update-queue-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-queue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-queue-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reservation-plan-settings))
      (common-lisp:list
       (common-lisp:cons "ReservationPlanSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-queue-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-queue-response common-lisp:nil
                       ((queue :initarg :queue :type
                         (common-lisp:or queue common-lisp:null) :accessor
                         %update-queue-response-queue :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-queue-response 'make-update-queue-response))
 (common-lisp:defun make-update-queue-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key queue)
   (common-lisp:apply #'common-lisp:make-instance 'update-queue-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue))
      (common-lisp:list
       (common-lisp:cons "Queue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-queue-response))
   common-lisp:nil))
(common-lisp:deftype vc3class () 'common-lisp:string)
(common-lisp:deftype vc3framerate-control () 'common-lisp:string)
(common-lisp:deftype vc3framerate-conversion-algorithm () 'common-lisp:string)
(common-lisp:deftype vc3interlace-mode () 'common-lisp:string)
(common-lisp:deftype vc3scan-type-conversion-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vc3settings common-lisp:nil
                       ((vc3class :initarg :vc3class :type
                         (common-lisp:or vc3class common-lisp:null) :accessor
                         %vc3settings-vc3class :initform common-lisp:nil)
                        (telecine :initarg :telecine :type
                         (common-lisp:or vc3telecine common-lisp:null)
                         :accessor %vc3settings-telecine :initform
                         common-lisp:nil)
                        (slow-pal :initarg :slow-pal :type
                         (common-lisp:or vc3slow-pal common-lisp:null)
                         :accessor %vc3settings-slow-pal :initform
                         common-lisp:nil)
                        (scan-type-conversion-mode :initarg
                         :scan-type-conversion-mode :type
                         (common-lisp:or vc3scan-type-conversion-mode
                                         common-lisp:null)
                         :accessor %vc3settings-scan-type-conversion-mode
                         :initform common-lisp:nil)
                        (interlace-mode :initarg :interlace-mode :type
                         (common-lisp:or vc3interlace-mode common-lisp:null)
                         :accessor %vc3settings-interlace-mode :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin24Max60000|
                                         common-lisp:null)
                         :accessor %vc3settings-framerate-numerator :initform
                         common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max1001|
                                         common-lisp:null)
                         :accessor %vc3settings-framerate-denominator :initform
                         common-lisp:nil)
                        (framerate-conversion-algorithm :initarg
                         :framerate-conversion-algorithm :type
                         (common-lisp:or vc3framerate-conversion-algorithm
                                         common-lisp:null)
                         :accessor %vc3settings-framerate-conversion-algorithm
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or vc3framerate-control common-lisp:null)
                         :accessor %vc3settings-framerate-control :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vc3settings 'make-vc3settings))
 (common-lisp:defun make-vc3settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vc3class telecine slow-pal
                     scan-type-conversion-mode interlace-mode
                     framerate-numerator framerate-denominator
                     framerate-conversion-algorithm framerate-control)
   (common-lisp:apply #'common-lisp:make-instance 'vc3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vc3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vc3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-conversion-algorithm))
      (common-lisp:list
       (common-lisp:cons "FramerateConversionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interlace-mode))
      (common-lisp:list
       (common-lisp:cons "InterlaceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scan-type-conversion-mode))
      (common-lisp:list
       (common-lisp:cons "ScanTypeConversionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slow-pal))
      (common-lisp:list
       (common-lisp:cons "SlowPal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telecine))
      (common-lisp:list
       (common-lisp:cons "Telecine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vc3class))
      (common-lisp:list
       (common-lisp:cons "Vc3Class"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vc3settings))
   common-lisp:nil))
(common-lisp:deftype vc3slow-pal () 'common-lisp:string)
(common-lisp:deftype vc3telecine () 'common-lisp:string)
(common-lisp:deftype vchip-action () 'common-lisp:string)
(common-lisp:deftype video-codec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass video-codec-settings common-lisp:nil
                       ((xavc-settings :initarg :xavc-settings :type
                         (common-lisp:or xavc-settings common-lisp:null)
                         :accessor %video-codec-settings-xavc-settings
                         :initform common-lisp:nil)
                        (vp9settings :initarg :vp9settings :type
                         (common-lisp:or vp9settings common-lisp:null)
                         :accessor %video-codec-settings-vp9settings :initform
                         common-lisp:nil)
                        (vp8settings :initarg :vp8settings :type
                         (common-lisp:or vp8settings common-lisp:null)
                         :accessor %video-codec-settings-vp8settings :initform
                         common-lisp:nil)
                        (vc3settings :initarg :vc3settings :type
                         (common-lisp:or vc3settings common-lisp:null)
                         :accessor %video-codec-settings-vc3settings :initform
                         common-lisp:nil)
                        (prores-settings :initarg :prores-settings :type
                         (common-lisp:or prores-settings common-lisp:null)
                         :accessor %video-codec-settings-prores-settings
                         :initform common-lisp:nil)
                        (mpeg2settings :initarg :mpeg2settings :type
                         (common-lisp:or mpeg2settings common-lisp:null)
                         :accessor %video-codec-settings-mpeg2settings
                         :initform common-lisp:nil)
                        (h265settings :initarg :h265settings :type
                         (common-lisp:or h265settings common-lisp:null)
                         :accessor %video-codec-settings-h265settings :initform
                         common-lisp:nil)
                        (h264settings :initarg :h264settings :type
                         (common-lisp:or h264settings common-lisp:null)
                         :accessor %video-codec-settings-h264settings :initform
                         common-lisp:nil)
                        (frame-capture-settings :initarg
                         :frame-capture-settings :type
                         (common-lisp:or frame-capture-settings
                                         common-lisp:null)
                         :accessor %video-codec-settings-frame-capture-settings
                         :initform common-lisp:nil)
                        (codec :initarg :codec :type
                         (common-lisp:or video-codec common-lisp:null)
                         :accessor %video-codec-settings-codec :initform
                         common-lisp:nil)
                        (avc-intra-settings :initarg :avc-intra-settings :type
                         (common-lisp:or avc-intra-settings common-lisp:null)
                         :accessor %video-codec-settings-avc-intra-settings
                         :initform common-lisp:nil)
                        (av1settings :initarg :av1settings :type
                         (common-lisp:or av1settings common-lisp:null)
                         :accessor %video-codec-settings-av1settings :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-codec-settings 'make-video-codec-settings))
 (common-lisp:defun make-video-codec-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key xavc-settings vp9settings vp8settings
                     vc3settings prores-settings mpeg2settings h265settings
                     h264settings frame-capture-settings codec
                     avc-intra-settings av1settings)
   (common-lisp:apply #'common-lisp:make-instance 'video-codec-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-codec-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-codec-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'av1settings))
      (common-lisp:list
       (common-lisp:cons "Av1Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avc-intra-settings))
      (common-lisp:list
       (common-lisp:cons "AvcIntraSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h264settings))
      (common-lisp:list
       (common-lisp:cons "H264Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h265settings))
      (common-lisp:list
       (common-lisp:cons "H265Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mpeg2settings))
      (common-lisp:list
       (common-lisp:cons "Mpeg2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prores-settings))
      (common-lisp:list
       (common-lisp:cons "ProresSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vc3settings))
      (common-lisp:list
       (common-lisp:cons "Vc3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vp8settings))
      (common-lisp:list
       (common-lisp:cons "Vp8Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vp9settings))
      (common-lisp:list
       (common-lisp:cons "Vp9Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xavc-settings))
      (common-lisp:list
       (common-lisp:cons "XavcSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-codec-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-description common-lisp:nil
                       ((width :initarg :width :type
                         (common-lisp:or |__integerMin32Max8192|
                                         common-lisp:null)
                         :accessor %video-description-width :initform
                         common-lisp:nil)
                        (video-preprocessors :initarg :video-preprocessors
                         :type
                         (common-lisp:or video-preprocessor common-lisp:null)
                         :accessor %video-description-video-preprocessors
                         :initform common-lisp:nil)
                        (timecode-insertion :initarg :timecode-insertion :type
                         (common-lisp:or video-timecode-insertion
                                         common-lisp:null)
                         :accessor %video-description-timecode-insertion
                         :initform common-lisp:nil)
                        (sharpness :initarg :sharpness :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor %video-description-sharpness :initform
                         common-lisp:nil)
                        (scaling-behavior :initarg :scaling-behavior :type
                         (common-lisp:or scaling-behavior common-lisp:null)
                         :accessor %video-description-scaling-behavior
                         :initform common-lisp:nil)
                        (respond-to-afd :initarg :respond-to-afd :type
                         (common-lisp:or respond-to-afd common-lisp:null)
                         :accessor %video-description-respond-to-afd :initform
                         common-lisp:nil)
                        (position :initarg :position :type
                         (common-lisp:or rectangle common-lisp:null) :accessor
                         %video-description-position :initform common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or |__integerMin32Max8192|
                                         common-lisp:null)
                         :accessor %video-description-height :initform
                         common-lisp:nil)
                        (fixed-afd :initarg :fixed-afd :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor %video-description-fixed-afd :initform
                         common-lisp:nil)
                        (drop-frame-timecode :initarg :drop-frame-timecode
                         :type
                         (common-lisp:or drop-frame-timecode common-lisp:null)
                         :accessor %video-description-drop-frame-timecode
                         :initform common-lisp:nil)
                        (crop :initarg :crop :type
                         (common-lisp:or rectangle common-lisp:null) :accessor
                         %video-description-crop :initform common-lisp:nil)
                        (color-metadata :initarg :color-metadata :type
                         (common-lisp:or color-metadata common-lisp:null)
                         :accessor %video-description-color-metadata :initform
                         common-lisp:nil)
                        (codec-settings :initarg :codec-settings :type
                         (common-lisp:or video-codec-settings common-lisp:null)
                         :accessor %video-description-codec-settings :initform
                         common-lisp:nil)
                        (anti-alias :initarg :anti-alias :type
                         (common-lisp:or anti-alias common-lisp:null) :accessor
                         %video-description-anti-alias :initform
                         common-lisp:nil)
                        (afd-signaling :initarg :afd-signaling :type
                         (common-lisp:or afd-signaling common-lisp:null)
                         :accessor %video-description-afd-signaling :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-description 'make-video-description))
 (common-lisp:defun make-video-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width video-preprocessors
                     timecode-insertion sharpness scaling-behavior
                     respond-to-afd position height fixed-afd
                     drop-frame-timecode crop color-metadata codec-settings
                     anti-alias afd-signaling)
   (common-lisp:apply #'common-lisp:make-instance 'video-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anti-alias))
      (common-lisp:list
       (common-lisp:cons "AntiAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-settings))
      (common-lisp:list
       (common-lisp:cons "CodecSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-metadata))
      (common-lisp:list
       (common-lisp:cons "ColorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crop))
      (common-lisp:list
       (common-lisp:cons "Crop"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop-frame-timecode))
      (common-lisp:list
       (common-lisp:cons "DropFrameTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-afd))
      (common-lisp:list
       (common-lisp:cons "FixedAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'respond-to-afd))
      (common-lisp:list
       (common-lisp:cons "RespondToAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-behavior))
      (common-lisp:list
       (common-lisp:cons "ScalingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sharpness))
      (common-lisp:list
       (common-lisp:cons "Sharpness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-insertion))
      (common-lisp:list
       (common-lisp:cons "TimecodeInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-preprocessors))
      (common-lisp:list
       (common-lisp:cons "VideoPreprocessors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-detail common-lisp:nil
                       ((width-in-px :initarg :width-in-px :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %video-detail-width-in-px :initform
                         common-lisp:nil)
                        (height-in-px :initarg :height-in-px :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %video-detail-height-in-px :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'video-detail 'make-video-detail))
 (common-lisp:defun make-video-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width-in-px height-in-px)
   (common-lisp:apply #'common-lisp:make-instance 'video-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height-in-px))
      (common-lisp:list
       (common-lisp:cons "HeightInPx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width-in-px))
      (common-lisp:list
       (common-lisp:cons "WidthInPx"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-preprocessor common-lisp:nil
                       ((timecode-burnin :initarg :timecode-burnin :type
                         (common-lisp:or timecode-burnin common-lisp:null)
                         :accessor %video-preprocessor-timecode-burnin
                         :initform common-lisp:nil)
                        (partner-watermarking :initarg :partner-watermarking
                         :type
                         (common-lisp:or partner-watermarking common-lisp:null)
                         :accessor %video-preprocessor-partner-watermarking
                         :initform common-lisp:nil)
                        (noise-reducer :initarg :noise-reducer :type
                         (common-lisp:or noise-reducer common-lisp:null)
                         :accessor %video-preprocessor-noise-reducer :initform
                         common-lisp:nil)
                        (image-inserter :initarg :image-inserter :type
                         (common-lisp:or image-inserter common-lisp:null)
                         :accessor %video-preprocessor-image-inserter :initform
                         common-lisp:nil)
                        (hdr10plus :initarg :hdr10plus :type
                         (common-lisp:or hdr10plus common-lisp:null) :accessor
                         %video-preprocessor-hdr10plus :initform
                         common-lisp:nil)
                        (dolby-vision :initarg :dolby-vision :type
                         (common-lisp:or dolby-vision common-lisp:null)
                         :accessor %video-preprocessor-dolby-vision :initform
                         common-lisp:nil)
                        (deinterlacer :initarg :deinterlacer :type
                         (common-lisp:or deinterlacer common-lisp:null)
                         :accessor %video-preprocessor-deinterlacer :initform
                         common-lisp:nil)
                        (color-corrector :initarg :color-corrector :type
                         (common-lisp:or color-corrector common-lisp:null)
                         :accessor %video-preprocessor-color-corrector
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-preprocessor 'make-video-preprocessor))
 (common-lisp:defun make-video-preprocessor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timecode-burnin partner-watermarking
                     noise-reducer image-inserter hdr10plus dolby-vision
                     deinterlacer color-corrector)
   (common-lisp:apply #'common-lisp:make-instance 'video-preprocessor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-preprocessor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-preprocessor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-corrector))
      (common-lisp:list
       (common-lisp:cons "ColorCorrector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deinterlacer))
      (common-lisp:list
       (common-lisp:cons "Deinterlacer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dolby-vision))
      (common-lisp:list
       (common-lisp:cons "DolbyVision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hdr10plus))
      (common-lisp:list
       (common-lisp:cons "Hdr10Plus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-inserter))
      (common-lisp:list
       (common-lisp:cons "ImageInserter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'noise-reducer))
      (common-lisp:list
       (common-lisp:cons "NoiseReducer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partner-watermarking))
      (common-lisp:list
       (common-lisp:cons "PartnerWatermarking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-burnin))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurnin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-preprocessor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-selector common-lisp:nil
                       ((sample-range :initarg :sample-range :type
                         (common-lisp:or input-sample-range common-lisp:null)
                         :accessor %video-selector-sample-range :initform
                         common-lisp:nil)
                        (rotate :initarg :rotate :type
                         (common-lisp:or input-rotate common-lisp:null)
                         :accessor %video-selector-rotate :initform
                         common-lisp:nil)
                        (program-number :initarg :program-number :type
                         (common-lisp:or
                          |__integerMinNegative2147483648Max2147483647|
                          common-lisp:null)
                         :accessor %video-selector-program-number :initform
                         common-lisp:nil)
                        (pid :initarg :pid :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %video-selector-pid :initform
                         common-lisp:nil)
                        (pad-video :initarg :pad-video :type
                         (common-lisp:or pad-video common-lisp:null) :accessor
                         %video-selector-pad-video :initform common-lisp:nil)
                        (hdr10metadata :initarg :hdr10metadata :type
                         (common-lisp:or hdr10metadata common-lisp:null)
                         :accessor %video-selector-hdr10metadata :initform
                         common-lisp:nil)
                        (embedded-timecode-override :initarg
                         :embedded-timecode-override :type
                         (common-lisp:or embedded-timecode-override
                                         common-lisp:null)
                         :accessor %video-selector-embedded-timecode-override
                         :initform common-lisp:nil)
                        (color-space-usage :initarg :color-space-usage :type
                         (common-lisp:or color-space-usage common-lisp:null)
                         :accessor %video-selector-color-space-usage :initform
                         common-lisp:nil)
                        (color-space :initarg :color-space :type
                         (common-lisp:or color-space common-lisp:null)
                         :accessor %video-selector-color-space :initform
                         common-lisp:nil)
                        (alpha-behavior :initarg :alpha-behavior :type
                         (common-lisp:or alpha-behavior common-lisp:null)
                         :accessor %video-selector-alpha-behavior :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'video-selector 'make-video-selector))
 (common-lisp:defun make-video-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-range rotate program-number pid
                     pad-video hdr10metadata embedded-timecode-override
                     color-space-usage color-space alpha-behavior)
   (common-lisp:apply #'common-lisp:make-instance 'video-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alpha-behavior))
      (common-lisp:list
       (common-lisp:cons "AlphaBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space))
      (common-lisp:list
       (common-lisp:cons "ColorSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space-usage))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-timecode-override))
      (common-lisp:list
       (common-lisp:cons "EmbeddedTimecodeOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hdr10metadata))
      (common-lisp:list
       (common-lisp:cons "Hdr10Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pad-video))
      (common-lisp:list
       (common-lisp:cons "PadVideo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-number))
      (common-lisp:list
       (common-lisp:cons "ProgramNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rotate))
      (common-lisp:list
       (common-lisp:cons "Rotate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-range))
      (common-lisp:list
       (common-lisp:cons "SampleRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-selector))
   common-lisp:nil))
(common-lisp:deftype video-timecode-insertion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vorbis-settings common-lisp:nil
                       ((vbr-quality :initarg :vbr-quality :type
                         (common-lisp:or |__integerMinNegative1Max10|
                                         common-lisp:null)
                         :accessor %vorbis-settings-vbr-quality :initform
                         common-lisp:nil)
                        (sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__integerMin22050Max48000|
                                         common-lisp:null)
                         :accessor %vorbis-settings-sample-rate :initform
                         common-lisp:nil)
                        (channels :initarg :channels :type
                         (common-lisp:or |__integerMin1Max2| common-lisp:null)
                         :accessor %vorbis-settings-channels :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vorbis-settings 'make-vorbis-settings))
 (common-lisp:defun make-vorbis-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vbr-quality sample-rate channels)
   (common-lisp:apply #'common-lisp:make-instance 'vorbis-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vorbis-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vorbis-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vbr-quality))
      (common-lisp:list
       (common-lisp:cons "VbrQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vorbis-settings))
   common-lisp:nil))
(common-lisp:deftype vp8framerate-control () 'common-lisp:string)
(common-lisp:deftype vp8framerate-conversion-algorithm () 'common-lisp:string)
(common-lisp:deftype vp8par-control () 'common-lisp:string)
(common-lisp:deftype vp8quality-tuning-level () 'common-lisp:string)
(common-lisp:deftype vp8rate-control-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vp8settings common-lisp:nil
                       ((rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or vp8rate-control-mode common-lisp:null)
                         :accessor %vp8settings-rate-control-mode :initform
                         common-lisp:nil)
                        (quality-tuning-level :initarg :quality-tuning-level
                         :type
                         (common-lisp:or vp8quality-tuning-level
                                         common-lisp:null)
                         :accessor %vp8settings-quality-tuning-level :initform
                         common-lisp:nil)
                        (par-numerator :initarg :par-numerator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %vp8settings-par-numerator :initform
                         common-lisp:nil)
                        (par-denominator :initarg :par-denominator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %vp8settings-par-denominator :initform
                         common-lisp:nil)
                        (par-control :initarg :par-control :type
                         (common-lisp:or vp8par-control common-lisp:null)
                         :accessor %vp8settings-par-control :initform
                         common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integerMin1000Max1152000000|
                                         common-lisp:null)
                         :accessor %vp8settings-max-bitrate :initform
                         common-lisp:nil)
                        (hrd-buffer-size :initarg :hrd-buffer-size :type
                         (common-lisp:or |__integerMin0Max47185920|
                                         common-lisp:null)
                         :accessor %vp8settings-hrd-buffer-size :initform
                         common-lisp:nil)
                        (gop-size :initarg :gop-size :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %vp8settings-gop-size :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %vp8settings-framerate-numerator :initform
                         common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %vp8settings-framerate-denominator :initform
                         common-lisp:nil)
                        (framerate-conversion-algorithm :initarg
                         :framerate-conversion-algorithm :type
                         (common-lisp:or vp8framerate-conversion-algorithm
                                         common-lisp:null)
                         :accessor %vp8settings-framerate-conversion-algorithm
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or vp8framerate-control common-lisp:null)
                         :accessor %vp8settings-framerate-control :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin1000Max1152000000|
                                         common-lisp:null)
                         :accessor %vp8settings-bitrate :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vp8settings 'make-vp8settings))
 (common-lisp:defun make-vp8settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rate-control-mode quality-tuning-level
                     par-numerator par-denominator par-control max-bitrate
                     hrd-buffer-size gop-size framerate-numerator
                     framerate-denominator framerate-conversion-algorithm
                     framerate-control bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'vp8settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vp8settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vp8settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-conversion-algorithm))
      (common-lisp:list
       (common-lisp:cons "FramerateConversionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hrd-buffer-size))
      (common-lisp:list
       (common-lisp:cons "HrdBufferSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-control))
      (common-lisp:list
       (common-lisp:cons "ParControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quality-tuning-level))
      (common-lisp:list
       (common-lisp:cons "QualityTuningLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vp8settings))
   common-lisp:nil))
(common-lisp:deftype vp9framerate-control () 'common-lisp:string)
(common-lisp:deftype vp9framerate-conversion-algorithm () 'common-lisp:string)
(common-lisp:deftype vp9par-control () 'common-lisp:string)
(common-lisp:deftype vp9quality-tuning-level () 'common-lisp:string)
(common-lisp:deftype vp9rate-control-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vp9settings common-lisp:nil
                       ((rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or vp9rate-control-mode common-lisp:null)
                         :accessor %vp9settings-rate-control-mode :initform
                         common-lisp:nil)
                        (quality-tuning-level :initarg :quality-tuning-level
                         :type
                         (common-lisp:or vp9quality-tuning-level
                                         common-lisp:null)
                         :accessor %vp9settings-quality-tuning-level :initform
                         common-lisp:nil)
                        (par-numerator :initarg :par-numerator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %vp9settings-par-numerator :initform
                         common-lisp:nil)
                        (par-denominator :initarg :par-denominator :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %vp9settings-par-denominator :initform
                         common-lisp:nil)
                        (par-control :initarg :par-control :type
                         (common-lisp:or vp9par-control common-lisp:null)
                         :accessor %vp9settings-par-control :initform
                         common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integerMin1000Max480000000|
                                         common-lisp:null)
                         :accessor %vp9settings-max-bitrate :initform
                         common-lisp:nil)
                        (hrd-buffer-size :initarg :hrd-buffer-size :type
                         (common-lisp:or |__integerMin0Max47185920|
                                         common-lisp:null)
                         :accessor %vp9settings-hrd-buffer-size :initform
                         common-lisp:nil)
                        (gop-size :initarg :gop-size :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %vp9settings-gop-size :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %vp9settings-framerate-numerator :initform
                         common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max2147483647|
                                         common-lisp:null)
                         :accessor %vp9settings-framerate-denominator :initform
                         common-lisp:nil)
                        (framerate-conversion-algorithm :initarg
                         :framerate-conversion-algorithm :type
                         (common-lisp:or vp9framerate-conversion-algorithm
                                         common-lisp:null)
                         :accessor %vp9settings-framerate-conversion-algorithm
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or vp9framerate-control common-lisp:null)
                         :accessor %vp9settings-framerate-control :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin1000Max480000000|
                                         common-lisp:null)
                         :accessor %vp9settings-bitrate :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vp9settings 'make-vp9settings))
 (common-lisp:defun make-vp9settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rate-control-mode quality-tuning-level
                     par-numerator par-denominator par-control max-bitrate
                     hrd-buffer-size gop-size framerate-numerator
                     framerate-denominator framerate-conversion-algorithm
                     framerate-control bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'vp9settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vp9settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vp9settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-conversion-algorithm))
      (common-lisp:list
       (common-lisp:cons "FramerateConversionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hrd-buffer-size))
      (common-lisp:list
       (common-lisp:cons "HrdBufferSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-control))
      (common-lisp:list
       (common-lisp:cons "ParControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quality-tuning-level))
      (common-lisp:list
       (common-lisp:cons "QualityTuningLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vp9settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass warning-group common-lisp:nil
                       ((count :initarg :count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %warning-group-count :initform
                         (common-lisp:error ":count is required"))
                        (code :initarg :code :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %warning-group-code :initform
                         (common-lisp:error ":code is required"))))
 (common-lisp:export (common-lisp:list 'warning-group 'make-warning-group))
 (common-lisp:defun make-warning-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key count code)
   (common-lisp:apply #'common-lisp:make-instance 'warning-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input warning-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input warning-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input warning-group))
   common-lisp:nil))
(common-lisp:deftype watermarking-strength () 'common-lisp:string)
(common-lisp:deftype wav-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass wav-settings common-lisp:nil
                       ((sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__integerMin8000Max192000|
                                         common-lisp:null)
                         :accessor %wav-settings-sample-rate :initform
                         common-lisp:nil)
                        (format :initarg :format :type
                         (common-lisp:or wav-format common-lisp:null) :accessor
                         %wav-settings-format :initform common-lisp:nil)
                        (channels :initarg :channels :type
                         (common-lisp:or |__integerMin1Max64| common-lisp:null)
                         :accessor %wav-settings-channels :initform
                         common-lisp:nil)
                        (bit-depth :initarg :bit-depth :type
                         (common-lisp:or |__integerMin16Max24|
                                         common-lisp:null)
                         :accessor %wav-settings-bit-depth :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'wav-settings 'make-wav-settings))
 (common-lisp:defun make-wav-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-rate format channels bit-depth)
   (common-lisp:apply #'common-lisp:make-instance 'wav-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wav-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wav-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-depth))
      (common-lisp:list
       (common-lisp:cons "BitDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wav-settings))
   common-lisp:nil))
(common-lisp:deftype webvtt-accessibility-subs () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass webvtt-destination-settings common-lisp:nil
                       ((style-passthrough :initarg :style-passthrough :type
                         (common-lisp:or webvtt-style-passthrough
                                         common-lisp:null)
                         :accessor
                         %webvtt-destination-settings-style-passthrough
                         :initform common-lisp:nil)
                        (accessibility :initarg :accessibility :type
                         (common-lisp:or webvtt-accessibility-subs
                                         common-lisp:null)
                         :accessor %webvtt-destination-settings-accessibility
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'webvtt-destination-settings
                    'make-webvtt-destination-settings))
 (common-lisp:defun make-webvtt-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key style-passthrough accessibility)
   (common-lisp:apply #'common-lisp:make-instance 'webvtt-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessibility))
      (common-lisp:list
       (common-lisp:cons "Accessibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-passthrough))
      (common-lisp:list
       (common-lisp:cons "StylePassthrough"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass webvtt-hls-source-settings common-lisp:nil
                       ((rendition-name :initarg :rendition-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %webvtt-hls-source-settings-rendition-name :initform
                         common-lisp:nil)
                        (rendition-language-code :initarg
                         :rendition-language-code :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         %webvtt-hls-source-settings-rendition-language-code
                         :initform common-lisp:nil)
                        (rendition-group-id :initarg :rendition-group-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %webvtt-hls-source-settings-rendition-group-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'webvtt-hls-source-settings
                    'make-webvtt-hls-source-settings))
 (common-lisp:defun make-webvtt-hls-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rendition-name rendition-language-code
                     rendition-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'webvtt-hls-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-hls-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-hls-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendition-group-id))
      (common-lisp:list
       (common-lisp:cons "RenditionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rendition-language-code))
      (common-lisp:list
       (common-lisp:cons "RenditionLanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendition-name))
      (common-lisp:list
       (common-lisp:cons "RenditionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-hls-source-settings))
   common-lisp:nil))
(common-lisp:deftype webvtt-style-passthrough () 'common-lisp:string)
(common-lisp:deftype xavc4k-intra-cbg-profile-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass xavc4k-intra-cbg-profile-settings common-lisp:nil
                       ((xavc-class :initarg :xavc-class :type
                         (common-lisp:or xavc4k-intra-cbg-profile-class
                                         common-lisp:null)
                         :accessor
                         %xavc4k-intra-cbg-profile-settings-xavc-class
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'xavc4k-intra-cbg-profile-settings
                    'make-xavc4k-intra-cbg-profile-settings))
 (common-lisp:defun make-xavc4k-intra-cbg-profile-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key xavc-class)
   (common-lisp:apply #'common-lisp:make-instance
                      'xavc4k-intra-cbg-profile-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          xavc4k-intra-cbg-profile-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          xavc4k-intra-cbg-profile-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xavc-class))
      (common-lisp:list
       (common-lisp:cons "XavcClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          xavc4k-intra-cbg-profile-settings))
   common-lisp:nil))
(common-lisp:deftype xavc4k-intra-vbr-profile-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass xavc4k-intra-vbr-profile-settings common-lisp:nil
                       ((xavc-class :initarg :xavc-class :type
                         (common-lisp:or xavc4k-intra-vbr-profile-class
                                         common-lisp:null)
                         :accessor
                         %xavc4k-intra-vbr-profile-settings-xavc-class
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'xavc4k-intra-vbr-profile-settings
                    'make-xavc4k-intra-vbr-profile-settings))
 (common-lisp:defun make-xavc4k-intra-vbr-profile-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key xavc-class)
   (common-lisp:apply #'common-lisp:make-instance
                      'xavc4k-intra-vbr-profile-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          xavc4k-intra-vbr-profile-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          xavc4k-intra-vbr-profile-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xavc-class))
      (common-lisp:list
       (common-lisp:cons "XavcClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          xavc4k-intra-vbr-profile-settings))
   common-lisp:nil))
(common-lisp:deftype xavc4k-profile-bitrate-class () 'common-lisp:string)
(common-lisp:deftype xavc4k-profile-codec-profile () 'common-lisp:string)
(common-lisp:deftype xavc4k-profile-quality-tuning-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass xavc4k-profile-settings common-lisp:nil
                       ((slices :initarg :slices :type
                         (common-lisp:or |__integerMin8Max12| common-lisp:null)
                         :accessor %xavc4k-profile-settings-slices :initform
                         common-lisp:nil)
                        (quality-tuning-level :initarg :quality-tuning-level
                         :type
                         (common-lisp:or xavc4k-profile-quality-tuning-level
                                         common-lisp:null)
                         :accessor
                         %xavc4k-profile-settings-quality-tuning-level
                         :initform common-lisp:nil)
                        (hrd-buffer-size :initarg :hrd-buffer-size :type
                         (common-lisp:or |__integerMin0Max1152000000|
                                         common-lisp:null)
                         :accessor %xavc4k-profile-settings-hrd-buffer-size
                         :initform common-lisp:nil)
                        (gop-closed-cadence :initarg :gop-closed-cadence :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %xavc4k-profile-settings-gop-closed-cadence
                         :initform common-lisp:nil)
                        (gop-breference :initarg :gop-breference :type
                         (common-lisp:or xavc-gop-breference common-lisp:null)
                         :accessor %xavc4k-profile-settings-gop-breference
                         :initform common-lisp:nil)
                        (flicker-adaptive-quantization :initarg
                         :flicker-adaptive-quantization :type
                         (common-lisp:or xavc-flicker-adaptive-quantization
                                         common-lisp:null)
                         :accessor
                         %xavc4k-profile-settings-flicker-adaptive-quantization
                         :initform common-lisp:nil)
                        (codec-profile :initarg :codec-profile :type
                         (common-lisp:or xavc4k-profile-codec-profile
                                         common-lisp:null)
                         :accessor %xavc4k-profile-settings-codec-profile
                         :initform common-lisp:nil)
                        (bitrate-class :initarg :bitrate-class :type
                         (common-lisp:or xavc4k-profile-bitrate-class
                                         common-lisp:null)
                         :accessor %xavc4k-profile-settings-bitrate-class
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'xavc4k-profile-settings 'make-xavc4k-profile-settings))
 (common-lisp:defun make-xavc4k-profile-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key slices quality-tuning-level
                     hrd-buffer-size gop-closed-cadence gop-breference
                     flicker-adaptive-quantization codec-profile bitrate-class)
   (common-lisp:apply #'common-lisp:make-instance 'xavc4k-profile-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          xavc4k-profile-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          xavc4k-profile-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate-class))
      (common-lisp:list
       (common-lisp:cons "BitrateClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-profile))
      (common-lisp:list
       (common-lisp:cons "CodecProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flicker-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "FlickerAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-breference))
      (common-lisp:list
       (common-lisp:cons "GopBReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hrd-buffer-size))
      (common-lisp:list
       (common-lisp:cons "HrdBufferSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quality-tuning-level))
      (common-lisp:list
       (common-lisp:cons "QualityTuningLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          xavc4k-profile-settings))
   common-lisp:nil))
(common-lisp:deftype xavc-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype xavc-entropy-encoding () 'common-lisp:string)
(common-lisp:deftype xavc-flicker-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype xavc-framerate-control () 'common-lisp:string)
(common-lisp:deftype xavc-framerate-conversion-algorithm () 'common-lisp:string)
(common-lisp:deftype xavc-gop-breference () 'common-lisp:string)
(common-lisp:deftype xavc-hd-intra-cbg-profile-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass xavc-hd-intra-cbg-profile-settings common-lisp:nil
                       ((xavc-class :initarg :xavc-class :type
                         (common-lisp:or xavc-hd-intra-cbg-profile-class
                                         common-lisp:null)
                         :accessor
                         %xavc-hd-intra-cbg-profile-settings-xavc-class
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'xavc-hd-intra-cbg-profile-settings
                    'make-xavc-hd-intra-cbg-profile-settings))
 (common-lisp:defun make-xavc-hd-intra-cbg-profile-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key xavc-class)
   (common-lisp:apply #'common-lisp:make-instance
                      'xavc-hd-intra-cbg-profile-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          xavc-hd-intra-cbg-profile-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          xavc-hd-intra-cbg-profile-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xavc-class))
      (common-lisp:list
       (common-lisp:cons "XavcClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          xavc-hd-intra-cbg-profile-settings))
   common-lisp:nil))
(common-lisp:deftype xavc-hd-profile-bitrate-class () 'common-lisp:string)
(common-lisp:deftype xavc-hd-profile-quality-tuning-level ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass xavc-hd-profile-settings common-lisp:nil
                       ((telecine :initarg :telecine :type
                         (common-lisp:or xavc-hd-profile-telecine
                                         common-lisp:null)
                         :accessor %xavc-hd-profile-settings-telecine :initform
                         common-lisp:nil)
                        (slices :initarg :slices :type
                         (common-lisp:or |__integerMin4Max12| common-lisp:null)
                         :accessor %xavc-hd-profile-settings-slices :initform
                         common-lisp:nil)
                        (quality-tuning-level :initarg :quality-tuning-level
                         :type
                         (common-lisp:or xavc-hd-profile-quality-tuning-level
                                         common-lisp:null)
                         :accessor
                         %xavc-hd-profile-settings-quality-tuning-level
                         :initform common-lisp:nil)
                        (interlace-mode :initarg :interlace-mode :type
                         (common-lisp:or xavc-interlace-mode common-lisp:null)
                         :accessor %xavc-hd-profile-settings-interlace-mode
                         :initform common-lisp:nil)
                        (hrd-buffer-size :initarg :hrd-buffer-size :type
                         (common-lisp:or |__integerMin0Max1152000000|
                                         common-lisp:null)
                         :accessor %xavc-hd-profile-settings-hrd-buffer-size
                         :initform common-lisp:nil)
                        (gop-closed-cadence :initarg :gop-closed-cadence :type
                         (common-lisp:or |__integerMin0Max2147483647|
                                         common-lisp:null)
                         :accessor %xavc-hd-profile-settings-gop-closed-cadence
                         :initform common-lisp:nil)
                        (gop-breference :initarg :gop-breference :type
                         (common-lisp:or xavc-gop-breference common-lisp:null)
                         :accessor %xavc-hd-profile-settings-gop-breference
                         :initform common-lisp:nil)
                        (flicker-adaptive-quantization :initarg
                         :flicker-adaptive-quantization :type
                         (common-lisp:or xavc-flicker-adaptive-quantization
                                         common-lisp:null)
                         :accessor
                         %xavc-hd-profile-settings-flicker-adaptive-quantization
                         :initform common-lisp:nil)
                        (bitrate-class :initarg :bitrate-class :type
                         (common-lisp:or xavc-hd-profile-bitrate-class
                                         common-lisp:null)
                         :accessor %xavc-hd-profile-settings-bitrate-class
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'xavc-hd-profile-settings 'make-xavc-hd-profile-settings))
 (common-lisp:defun make-xavc-hd-profile-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key telecine slices quality-tuning-level
                     interlace-mode hrd-buffer-size gop-closed-cadence
                     gop-breference flicker-adaptive-quantization
                     bitrate-class)
   (common-lisp:apply #'common-lisp:make-instance 'xavc-hd-profile-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          xavc-hd-profile-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          xavc-hd-profile-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate-class))
      (common-lisp:list
       (common-lisp:cons "BitrateClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flicker-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "FlickerAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-breference))
      (common-lisp:list
       (common-lisp:cons "GopBReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hrd-buffer-size))
      (common-lisp:list
       (common-lisp:cons "HrdBufferSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interlace-mode))
      (common-lisp:list
       (common-lisp:cons "InterlaceMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'quality-tuning-level))
      (common-lisp:list
       (common-lisp:cons "QualityTuningLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telecine))
      (common-lisp:list
       (common-lisp:cons "Telecine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          xavc-hd-profile-settings))
   common-lisp:nil))
(common-lisp:deftype xavc-hd-profile-telecine () 'common-lisp:string)
(common-lisp:deftype xavc-interlace-mode () 'common-lisp:string)
(common-lisp:deftype xavc-profile () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass xavc-settings common-lisp:nil
                       ((xavc-hd-profile-settings :initarg
                         :xavc-hd-profile-settings :type
                         (common-lisp:or xavc-hd-profile-settings
                                         common-lisp:null)
                         :accessor %xavc-settings-xavc-hd-profile-settings
                         :initform common-lisp:nil)
                        (xavc-hd-intra-cbg-profile-settings :initarg
                         :xavc-hd-intra-cbg-profile-settings :type
                         (common-lisp:or xavc-hd-intra-cbg-profile-settings
                                         common-lisp:null)
                         :accessor
                         %xavc-settings-xavc-hd-intra-cbg-profile-settings
                         :initform common-lisp:nil)
                        (xavc4k-profile-settings :initarg
                         :xavc4k-profile-settings :type
                         (common-lisp:or xavc4k-profile-settings
                                         common-lisp:null)
                         :accessor %xavc-settings-xavc4k-profile-settings
                         :initform common-lisp:nil)
                        (xavc4k-intra-vbr-profile-settings :initarg
                         :xavc4k-intra-vbr-profile-settings :type
                         (common-lisp:or xavc4k-intra-vbr-profile-settings
                                         common-lisp:null)
                         :accessor
                         %xavc-settings-xavc4k-intra-vbr-profile-settings
                         :initform common-lisp:nil)
                        (xavc4k-intra-cbg-profile-settings :initarg
                         :xavc4k-intra-cbg-profile-settings :type
                         (common-lisp:or xavc4k-intra-cbg-profile-settings
                                         common-lisp:null)
                         :accessor
                         %xavc-settings-xavc4k-intra-cbg-profile-settings
                         :initform common-lisp:nil)
                        (temporal-adaptive-quantization :initarg
                         :temporal-adaptive-quantization :type
                         (common-lisp:or xavc-temporal-adaptive-quantization
                                         common-lisp:null)
                         :accessor
                         %xavc-settings-temporal-adaptive-quantization
                         :initform common-lisp:nil)
                        (spatial-adaptive-quantization :initarg
                         :spatial-adaptive-quantization :type
                         (common-lisp:or xavc-spatial-adaptive-quantization
                                         common-lisp:null)
                         :accessor %xavc-settings-spatial-adaptive-quantization
                         :initform common-lisp:nil)
                        (softness :initarg :softness :type
                         (common-lisp:or |__integerMin0Max128|
                                         common-lisp:null)
                         :accessor %xavc-settings-softness :initform
                         common-lisp:nil)
                        (slow-pal :initarg :slow-pal :type
                         (common-lisp:or xavc-slow-pal common-lisp:null)
                         :accessor %xavc-settings-slow-pal :initform
                         common-lisp:nil)
                        (profile :initarg :profile :type
                         (common-lisp:or xavc-profile common-lisp:null)
                         :accessor %xavc-settings-profile :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin24Max60000|
                                         common-lisp:null)
                         :accessor %xavc-settings-framerate-numerator :initform
                         common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max1001|
                                         common-lisp:null)
                         :accessor %xavc-settings-framerate-denominator
                         :initform common-lisp:nil)
                        (framerate-conversion-algorithm :initarg
                         :framerate-conversion-algorithm :type
                         (common-lisp:or xavc-framerate-conversion-algorithm
                                         common-lisp:null)
                         :accessor
                         %xavc-settings-framerate-conversion-algorithm
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or xavc-framerate-control
                                         common-lisp:null)
                         :accessor %xavc-settings-framerate-control :initform
                         common-lisp:nil)
                        (entropy-encoding :initarg :entropy-encoding :type
                         (common-lisp:or xavc-entropy-encoding
                                         common-lisp:null)
                         :accessor %xavc-settings-entropy-encoding :initform
                         common-lisp:nil)
                        (adaptive-quantization :initarg :adaptive-quantization
                         :type
                         (common-lisp:or xavc-adaptive-quantization
                                         common-lisp:null)
                         :accessor %xavc-settings-adaptive-quantization
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'xavc-settings 'make-xavc-settings))
 (common-lisp:defun make-xavc-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key xavc-hd-profile-settings
                     xavc-hd-intra-cbg-profile-settings xavc4k-profile-settings
                     xavc4k-intra-vbr-profile-settings
                     xavc4k-intra-cbg-profile-settings
                     temporal-adaptive-quantization
                     spatial-adaptive-quantization softness slow-pal profile
                     framerate-numerator framerate-denominator
                     framerate-conversion-algorithm framerate-control
                     entropy-encoding adaptive-quantization)
   (common-lisp:apply #'common-lisp:make-instance 'xavc-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input xavc-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input xavc-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entropy-encoding))
      (common-lisp:list
       (common-lisp:cons "EntropyEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-conversion-algorithm))
      (common-lisp:list
       (common-lisp:cons "FramerateConversionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slow-pal))
      (common-lisp:list
       (common-lisp:cons "SlowPal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'softness))
      (common-lisp:list
       (common-lisp:cons "Softness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spatial-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "SpatialAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "TemporalAdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xavc4k-intra-cbg-profile-settings))
      (common-lisp:list
       (common-lisp:cons "Xavc4kIntraCbgProfileSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xavc4k-intra-vbr-profile-settings))
      (common-lisp:list
       (common-lisp:cons "Xavc4kIntraVbrProfileSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xavc4k-profile-settings))
      (common-lisp:list
       (common-lisp:cons "Xavc4kProfileSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xavc-hd-intra-cbg-profile-settings))
      (common-lisp:list
       (common-lisp:cons "XavcHdIntraCbgProfileSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xavc-hd-profile-settings))
      (common-lisp:list
       (common-lisp:cons "XavcHdProfileSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input xavc-settings))
   common-lisp:nil))
(common-lisp:deftype xavc-slow-pal () 'common-lisp:string)
(common-lisp:deftype xavc-spatial-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype xavc-temporal-adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max1| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max2147483647| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMinNegative59Max0| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMinNegative60Max3| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMinNegative60Max6| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMinNegative60MaxNegative1| ()
  'common-lisp:double-float)
(common-lisp:deftype |__doubleMinNegative6Max3| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMinNegative8Max0| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max0| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max1| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max100| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max10000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max1152000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max128| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max1466400000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max15| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max16| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max2147483647| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max255| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max3| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max30| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max30000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max3600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max4| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max4000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max4194303| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max47185920| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max5| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max500| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max50000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max65534| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max65535| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max7| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max8| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max9| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max96| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max99| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100000Max100000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000Max1152000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000Max1466400000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000Max288000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000Max30000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000Max300000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000Max480000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100Max1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin10Max48| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin16000Max320000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin16000Max48000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin16Max24| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max1| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max100| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max10000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max1001| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max17895697| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max2| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max20| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max2048| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max2147483640| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max2147483647| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max31| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max32| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max4| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max4096| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max512| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max6| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max60000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max64| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin22050Max48000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin24Max60000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin25Max10000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin25Max2000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin2Max2147483647| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin2Max4096| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin32000Max192000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin32000Max3024000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin32000Max384000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin32000Max48000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin32Max8182| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin32Max8192| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin384000Max1024000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin3Max15| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin48000Max48000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin4Max12| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin50Max86400000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin6000Max1024000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin64000Max640000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin8000Max192000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin8000Max96000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin8Max12| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin8Max4096| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin90Max105| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin920Max1023| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin96Max600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative1000Max1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative180Max180| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative1Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative1Max3| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative2147483648Max2147483647| ()
  'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative2Max3| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative50Max50| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative5Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative60Max6| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative70Max0| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfAllowedRenditionSize| ()
   '(trivial-types:proper-list allowed-rendition-size))
 (common-lisp:defun |make-__listofallowedrenditionsize|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-rendition-size))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioDescription| ()
   '(trivial-types:proper-list audio-description))
 (common-lisp:defun |make-__listofaudiodescription|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAutomatedAbrRule| ()
   '(trivial-types:proper-list automated-abr-rule))
 (common-lisp:defun |make-__listofautomatedabrrule|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list automated-abr-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionDescription| ()
   '(trivial-types:proper-list caption-description))
 (common-lisp:defun |make-__listofcaptiondescription|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list caption-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionDescriptionPreset| ()
   '(trivial-types:proper-list caption-description-preset))
 (common-lisp:defun |make-__listofcaptiondescriptionpreset|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            caption-description-preset))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCmafAdditionalManifest| ()
   '(trivial-types:proper-list cmaf-additional-manifest))
 (common-lisp:defun |make-__listofcmafadditionalmanifest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cmaf-additional-manifest))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfDashAdditionalManifest| ()
   '(trivial-types:proper-list dash-additional-manifest))
 (common-lisp:defun |make-__listofdashadditionalmanifest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dash-additional-manifest))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfEndpoint| ()
   '(trivial-types:proper-list endpoint))
 (common-lisp:defun |make-__listofendpoint|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfForceIncludeRenditionSize| ()
   '(trivial-types:proper-list force-include-rendition-size))
 (common-lisp:defun |make-__listofforceincluderenditionsize|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            force-include-rendition-size))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfHlsAdMarkers| ()
   '(trivial-types:proper-list hls-ad-markers))
 (common-lisp:defun |make-__listofhlsadmarkers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hls-ad-markers))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfHlsAdditionalManifest| ()
   '(trivial-types:proper-list hls-additional-manifest))
 (common-lisp:defun |make-__listofhlsadditionalmanifest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hls-additional-manifest))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfHlsCaptionLanguageMapping| ()
   '(trivial-types:proper-list hls-caption-language-mapping))
 (common-lisp:defun |make-__listofhlscaptionlanguagemapping|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hls-caption-language-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfHopDestination| ()
   '(trivial-types:proper-list hop-destination))
 (common-lisp:defun |make-__listofhopdestination|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hop-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfId3Insertion| ()
   '(trivial-types:proper-list id3insertion))
 (common-lisp:defun |make-__listofid3insertion|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id3insertion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInput| () '(trivial-types:proper-list input))
 (common-lisp:defun |make-__listofinput|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputClipping| ()
   '(trivial-types:proper-list input-clipping))
 (common-lisp:defun |make-__listofinputclipping|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-clipping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputTemplate| ()
   '(trivial-types:proper-list input-template))
 (common-lisp:defun |make-__listofinputtemplate|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-template))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInsertableImage| ()
   '(trivial-types:proper-list insertable-image))
 (common-lisp:defun |make-__listofinsertableimage|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insertable-image))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfJob| () '(trivial-types:proper-list job))
 (common-lisp:defun |make-__listofjob|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfJobTemplate| ()
   '(trivial-types:proper-list job-template))
 (common-lisp:defun |make-__listofjobtemplate|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-template))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMsSmoothAdditionalManifest| ()
   '(trivial-types:proper-list ms-smooth-additional-manifest))
 (common-lisp:defun |make-__listofmssmoothadditionalmanifest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ms-smooth-additional-manifest))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutput| () '(trivial-types:proper-list output))
 (common-lisp:defun |make-__listofoutput|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputChannelMapping| ()
   '(trivial-types:proper-list output-channel-mapping))
 (common-lisp:defun |make-__listofoutputchannelmapping|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-channel-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputDetail| ()
   '(trivial-types:proper-list output-detail))
 (common-lisp:defun |make-__listofoutputdetail|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputGroup| ()
   '(trivial-types:proper-list output-group))
 (common-lisp:defun |make-__listofoutputgroup|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputGroupDetail| ()
   '(trivial-types:proper-list output-group-detail))
 (common-lisp:defun |make-__listofoutputgroupdetail|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-group-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfPreset| () '(trivial-types:proper-list preset))
 (common-lisp:defun |make-__listofpreset|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list preset))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfQueue| () '(trivial-types:proper-list queue))
 (common-lisp:defun |make-__listofqueue|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfQueueTransition| ()
   '(trivial-types:proper-list queue-transition))
 (common-lisp:defun |make-__listofqueuetransition|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list queue-transition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTeletextPageType| ()
   '(trivial-types:proper-list teletext-page-type))
 (common-lisp:defun |make-__listofteletextpagetype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list teletext-page-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfWarningGroup| ()
   '(trivial-types:proper-list warning-group))
 (common-lisp:defun |make-__listofwarninggroup|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list warning-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__doubleMinNegative60Max6| ()
   '(trivial-types:proper-list |__doubleMinNegative60Max6|))
 (common-lisp:defun |make-__listof__doubleminnegative60max6|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            |__doubleMinNegative60Max6|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__integerMin1Max2147483647| ()
   '(trivial-types:proper-list |__integerMin1Max2147483647|))
 (common-lisp:defun |make-__listof__integermin1max2147483647|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            |__integerMin1Max2147483647|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__integerMin32Max8182| ()
   '(trivial-types:proper-list |__integerMin32Max8182|))
 (common-lisp:defun |make-__listof__integermin32max8182|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__integerMin32Max8182|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__integerMinNegative60Max6| ()
   '(trivial-types:proper-list |__integerMinNegative60Max6|))
 (common-lisp:defun |make-__listof__integerminnegative60max6|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            |__integerMinNegative60Max6|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun |make-__listof__string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__stringMin1| ()
   '(trivial-types:proper-list |__stringMin1|))
 (common-lisp:defun |make-__listof__stringmin1|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__stringMin1|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__stringMin36Max36Pattern09aFAF809aFAF409aFAF409aFAF409aFAF12|
                      ()
   '(trivial-types:proper-list
     |__stringMin36Max36Pattern09aFAF809aFAF409aFAF409aFAF409aFAF12|))
 (common-lisp:defun |make-__listof__stringmin36max36pattern09afaf809afaf409afaf409afaf409afaf12|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            |__stringMin36Max36Pattern09aFAF809aFAF409aFAF409aFAF409aFAF12|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__stringPattern09aFAF809aFAF409aFAF409aFAF409aFAF12|
                      ()
   '(trivial-types:proper-list
     |__stringPattern09aFAF809aFAF409aFAF409aFAF409aFAF12|))
 (common-lisp:defun |make-__listof__stringpattern09afaf809afaf409afaf409afaf409afaf12|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            |__stringPattern09aFAF809aFAF409aFAF409aFAF409aFAF12|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__stringPatternS3ASSETMAPXml| ()
   '(trivial-types:proper-list |__stringPatternS3ASSETMAPXml|))
 (common-lisp:defun |make-__listof__stringpatterns3assetmapxml|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            |__stringPatternS3ASSETMAPXml|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__mapOfAudioSelector| () 'common-lisp:hash-table)
 (common-lisp:defun |make-__mapofaudioselector|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype |__mapOfAudioSelectorGroup| () 'common-lisp:hash-table)
 (common-lisp:defun |make-__mapofaudioselectorgroup|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype |__mapOfCaptionSelector| () 'common-lisp:hash-table)
 (common-lisp:defun |make-__mapofcaptionselector|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype |__mapOf__string| () 'common-lisp:hash-table)
 (common-lisp:defun |make-__mapof__string|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__stringMax1000| () 'common-lisp:string)
(common-lisp:deftype |__stringMin0| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1| () 'common-lisp:string)
(common-lisp:deftype |__stringMin11Max11Pattern01D20305D205D| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin14PatternS3BmpBMPPngPNGHttpsBmpBMPPngPNG| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin14PatternS3BmpBMPPngPNGTgaTGAHttpsBmpBMPPngPNGTgaTGA|
                     ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin14PatternS3Mov09PngHttpsMov09Png| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin14PatternS3SccSCCTtmlTTMLDfxpDFXPStlSTLSrtSRTXmlXMLSmiSMIVttVTTWebvttWEBVTTHttpsSccSCCTtmlTTMLDfxpDFXPStlSTLSrtSRTXmlXMLSmiSMIVttVTTWebvttWEBVTT|
                     ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin14PatternS3XmlXMLHttpsXmlXML| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin16Max24PatternAZaZ0922AZaZ0916| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin1Max100000| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max20| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max256| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max50| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max50PatternAZAZ09| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max512PatternAZAZ09| () 'common-lisp:string)
(common-lisp:deftype |__stringMin24Max512PatternAZaZ0902| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin32Max32Pattern09aFAF32| () 'common-lisp:string)
(common-lisp:deftype |__stringMin36Max36Pattern09aFAF809aFAF409aFAF409aFAF409aFAF12|
                     ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin3Max3Pattern1809aFAF09aEAE| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin3Max3PatternAZaZ3| () 'common-lisp:string)
(common-lisp:deftype |__stringMin6Max8Pattern09aFAF609aFAF2| ()
  'common-lisp:string)
(common-lisp:deftype |__stringMin9Max19PatternAZ26EastWestCentralNorthSouthEastWest1912|
                     ()
  'common-lisp:string)
(common-lisp:deftype |__stringPattern| () 'common-lisp:string)
(common-lisp:deftype |__stringPattern010920405090509092| () 'common-lisp:string)
(common-lisp:deftype |__stringPattern01D20305D205D| () 'common-lisp:string)
(common-lisp:deftype |__stringPattern0940191020191209301| ()
  'common-lisp:string)
(common-lisp:deftype |__stringPattern09aFAF809aFAF409aFAF409aFAF409aFAF12| ()
  'common-lisp:string)
(common-lisp:deftype |__stringPattern0xAFaF0908190908| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternAZaZ0902| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternAZaZ0932| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternAZaZ23AZaZ| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternArnAwsUsGovAcm| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternArnAwsUsGovCnKmsAZ26EastWestCentralNorthSouthEastWest1912D12KeyAFAF098AFAF094AFAF094AFAF094AFAF0912MrkAFAF0932|
                     ()
  'common-lisp:string)
(common-lisp:deftype |__stringPatternDD| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternHttps| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternHttpsKantarmediaComFr| ()
  'common-lisp:string)
(common-lisp:deftype |__stringPatternIdentityAZaZ26AZaZ09163| ()
  'common-lisp:string)
(common-lisp:deftype |__stringPatternS3| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternS3ASSETMAPXml| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternS3Https| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternSNManifestConfirmConditionNotificationNS|
                     ()
  'common-lisp:string)
(common-lisp:deftype |__stringPatternSNSignalProcessingNotificationNS| ()
  'common-lisp:string)
(common-lisp:deftype |__stringPatternW| () 'common-lisp:string)
(common-lisp:deftype |__stringPatternWS| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2017-08-29/certificates"
                                                        "AssociateCertificate"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-certificate))
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "CancelJob"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acceleration-settings billing-tags-source
                     client-request-token hop-destinations job-template
                     priority queue role settings simulate-reserved-queue
                     status-update-interval tags user-metadata)
   (common-lisp:declare
    (common-lisp:ignorable acceleration-settings billing-tags-source
     client-request-token hop-destinations job-template priority queue role
     settings simulate-reserved-queue status-update-interval tags
     user-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2017-08-29/jobs"
                                                        "CreateJob"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acceleration-settings category
                     description hop-destinations name priority queue settings
                     status-update-interval tags)
   (common-lisp:declare
    (common-lisp:ignorable acceleration-settings category description
     hop-destinations name priority queue settings status-update-interval
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2017-08-29/jobTemplates"
                                                        "CreateJobTemplate"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job-template))
(common-lisp:progn
 (common-lisp:defun create-preset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category description name settings tags)
   (common-lisp:declare
    (common-lisp:ignorable category description name settings tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-preset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2017-08-29/presets"
                                                        "CreatePreset"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-preset))
(common-lisp:progn
 (common-lisp:defun create-queue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name pricing-plan
                     reservation-plan-settings status tags)
   (common-lisp:declare
    (common-lisp:ignorable description name pricing-plan
     reservation-plan-settings status tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-queue-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2017-08-29/queues"
                                                        "CreateQueue"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-queue))
(common-lisp:progn
 (common-lisp:defun delete-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/jobTemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteJobTemplate"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-job-template))
(common-lisp:progn
 (common-lisp:defun delete-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'mediaconvert-request :method "DELETE" :path
                                "/2017-08-29/policy" :protocol :rest-json
                                :operation "DeletePolicy" :params
                                `(("Action" ,@"DeletePolicy")
                                  ("Version" ,@"2017-08-29"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-preset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-preset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/presets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeletePreset"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-preset))
(common-lisp:progn
 (common-lisp:defun delete-queue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-queue-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/queues/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteQueue"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-queue))
(common-lisp:progn
 (common-lisp:defun describe-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results mode next-token)
   (common-lisp:declare (common-lisp:ignorable max-results mode next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2017-08-29/endpoints"
                                                        "DescribeEndpoints"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-endpoints))
(common-lisp:progn
 (common-lisp:defun disassociate-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/certificates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "DisassociateCertificate"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-certificate))
(common-lisp:progn
 (common-lisp:defun get-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetJob" "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job))
(common-lisp:progn
 (common-lisp:defun get-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/jobTemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetJobTemplate"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job-template))
(common-lisp:progn
 (common-lisp:defun get-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'mediaconvert-request :method "GET" :path
                                "/2017-08-29/policy" :protocol :rest-json
                                :operation "GetPolicy" :params
                                `(("Action" ,@"GetPolicy")
                                  ("Version" ,@"2017-08-29"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-preset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-preset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/presets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetPreset"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-preset))
(common-lisp:progn
 (common-lisp:defun get-queue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-queue-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/queues/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetQueue"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-queue))
(common-lisp:progn
 (common-lisp:defun list-job-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category list-by max-results next-token
                     order)
   (common-lisp:declare
    (common-lisp:ignorable category list-by max-results next-token order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-job-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2017-08-29/jobTemplates"
                                                        "ListJobTemplates"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-job-templates))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token order queue
                     status)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token order queue status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2017-08-29/jobs"
                                                        "ListJobs"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-presets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category list-by max-results next-token
                     order)
   (common-lisp:declare
    (common-lisp:ignorable category list-by max-results next-token order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-presets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2017-08-29/presets"
                                                        "ListPresets"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-presets))
(common-lisp:progn
 (common-lisp:defun list-queues
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key list-by max-results next-token order)
   (common-lisp:declare
    (common-lisp:ignorable list-by max-results next-token order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-queues-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2017-08-29/queues"
                                                        "ListQueues"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-queues))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "ListTagsForResource"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy)
   (common-lisp:declare (common-lisp:ignorable policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/2017-08-29/policy"
                                                        "PutPolicy"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-policy))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tags)
   (common-lisp:declare (common-lisp:ignorable arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2017-08-29/tags"
                                                        "TagResource"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'arn))))
                                                        "UntagResource"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-job-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key acceleration-settings category
                     description hop-destinations name priority queue settings
                     status-update-interval)
   (common-lisp:declare
    (common-lisp:ignorable acceleration-settings category description
     hop-destinations name priority queue settings status-update-interval))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/jobTemplates/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateJobTemplate"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-job-template))
(common-lisp:progn
 (common-lisp:defun update-preset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category description name settings)
   (common-lisp:declare
    (common-lisp:ignorable category description name settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-preset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/presets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdatePreset"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-preset))
(common-lisp:progn
 (common-lisp:defun update-queue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description name
                     reservation-plan-settings status)
   (common-lisp:declare
    (common-lisp:ignorable description name reservation-plan-settings status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-queue-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mediaconvert-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2017-08-29/queues/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateQueue"
                                                        "2017-08-29"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-queue))
