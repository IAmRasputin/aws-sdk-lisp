;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/braket/api
  (:use)
  (:nicknames #:aws/braket)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/braket/api)
(common-lisp:progn
 (common-lisp:defclass braket-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "braket" :protocol
                        :rest-json))
 (common-lisp:export 'braket-request))
(common-lisp:progn
 (common-lisp:define-condition braket-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'braket-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("DeviceOfflineException" . device-offline-exception)
    ("DeviceRetiredException" . device-retired-exception)
    ("InternalServiceException" . internal-service-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (algorithm-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-algorithm-specification-"))
   (container-image common-lisp:nil :type
    (common-lisp:or container-image common-lisp:null))
   (script-mode-config common-lisp:nil :type
    (common-lisp:or script-mode-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'algorithm-specification 'make-algorithm-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-image))
      (common-lisp:list
       (common-lisp:cons "containerImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-mode-config))
      (common-lisp:list
       (common-lisp:cons "scriptModeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-request-"))
   (job-arn (common-lisp:error ":jobarn is required") :type
    (common-lisp:or job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-job-response-"))
   (cancellation-status (common-lisp:error ":cancellationstatus is required")
    :type (common-lisp:or cancellation-status common-lisp:null))
   (job-arn (common-lisp:error ":jobarn is required") :type
    (common-lisp:or job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-job-response 'make-cancel-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellation-status))
      (common-lisp:list
       (common-lisp:cons "cancellationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-quantum-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-quantum-task-request-"))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or string64 common-lisp:null))
   (quantum-task-arn (common-lisp:error ":quantumtaskarn is required") :type
    (common-lisp:or quantum-task-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-quantum-task-request
                    'make-cancel-quantum-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-quantum-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-quantum-task-response-"))
   (cancellation-status (common-lisp:error ":cancellationstatus is required")
    :type (common-lisp:or cancellation-status common-lisp:null))
   (quantum-task-arn (common-lisp:error ":quantumtaskarn is required") :type
    (common-lisp:or quantum-task-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-quantum-task-response
                    'make-cancel-quantum-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellation-status))
      (common-lisp:list
       (common-lisp:cons "cancellationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-response))
   common-lisp:nil))
(common-lisp:deftype cancellation-status () 'common-lisp:string)
(common-lisp:deftype compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (container-image (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-image-"))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 'container-image 'make-container-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-request-"))
   (algorithm-specification
    (common-lisp:error ":algorithmspecification is required") :type
    (common-lisp:or algorithm-specification common-lisp:null))
   (checkpoint-config common-lisp:nil :type
    (common-lisp:or job-checkpoint-config common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or string64 common-lisp:null))
   (device-config (common-lisp:error ":deviceconfig is required") :type
    (common-lisp:or device-config common-lisp:null))
   (hyper-parameters common-lisp:nil :type
    (common-lisp:or hyper-parameters common-lisp:null))
   (input-data-config common-lisp:nil :type
    (common-lisp:or create-job-request-input-data-config-list
                    common-lisp:null))
   (instance-config (common-lisp:error ":instanceconfig is required") :type
    (common-lisp:or instance-config common-lisp:null))
   (job-name (common-lisp:error ":jobname is required") :type
    (common-lisp:or create-job-request-job-name-string common-lisp:null))
   (output-data-config (common-lisp:error ":outputdataconfig is required")
    :type (common-lisp:or job-output-data-config common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or job-stopping-condition common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "algorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-config))
      (common-lisp:list
       (common-lisp:cons "checkpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-config))
      (common-lisp:list
       (common-lisp:cons "deviceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "hyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "inputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-config))
      (common-lisp:list
       (common-lisp:cons "instanceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "outputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "stoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-job-request-input-data-config-list ()
   '(trivial-types:proper-list input-file-config))
 (common-lisp:defun |make-create-job-request-input-data-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-file-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype create-job-request-job-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-job-response-"))
   (job-arn (common-lisp:error ":jobarn is required") :type
    (common-lisp:or job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-quantum-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-quantum-task-request-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or json-value common-lisp:null))
   (client-token (common-lisp:error ":clienttoken is required") :type
    (common-lisp:or string64 common-lisp:null))
   (device-arn (common-lisp:error ":devicearn is required") :type
    (common-lisp:or device-arn common-lisp:null))
   (device-parameters common-lisp:nil :type
    (common-lisp:or create-quantum-task-request-device-parameters-string
                    common-lisp:null))
   (job-token common-lisp:nil :type
    (common-lisp:or job-token common-lisp:null))
   (output-s3bucket (common-lisp:error ":outputs3bucket is required") :type
    (common-lisp:or create-quantum-task-request-output-s3bucket-string
                    common-lisp:null))
   (output-s3key-prefix (common-lisp:error ":outputs3keyprefix is required")
    :type
    (common-lisp:or create-quantum-task-request-output-s3key-prefix-string
                    common-lisp:null))
   (shots (common-lisp:error ":shots is required") :type
    (common-lisp:or create-quantum-task-request-shots-long common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-quantum-task-request
                    'make-create-quantum-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-parameters))
      (common-lisp:list
       (common-lisp:cons "deviceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-token))
      (common-lisp:list
       (common-lisp:cons "jobToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3bucket))
      (common-lisp:list
       (common-lisp:cons "outputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "outputS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shots))
      (common-lisp:list
       (common-lisp:cons "shots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-request))
   common-lisp:nil))
(common-lisp:deftype create-quantum-task-request-device-parameters-string ()
  'common-lisp:string)
(common-lisp:deftype create-quantum-task-request-output-s3bucket-string ()
  'common-lisp:string)
(common-lisp:deftype create-quantum-task-request-output-s3key-prefix-string ()
  'common-lisp:string)
(common-lisp:deftype create-quantum-task-request-shots-long ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (create-quantum-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-quantum-task-response-"))
   (quantum-task-arn (common-lisp:error ":quantumtaskarn is required") :type
    (common-lisp:or quantum-task-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-quantum-task-response
                    'make-create-quantum-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-"))
   (s3data-source (common-lisp:error ":s3datasource is required") :type
    (common-lisp:or s3data-source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-source))
      (common-lisp:list
       (common-lisp:cons "s3DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:deftype device-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (device-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-config-"))
   (device (common-lisp:error ":device is required") :type
    (common-lisp:or string256 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'device-config 'make-device-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition device-offline-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       device-offline-exception-message)))
 (common-lisp:export
  (common-lisp:list 'device-offline-exception
                    'device-offline-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition device-retired-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       device-retired-exception-message)))
 (common-lisp:export
  (common-lisp:list 'device-retired-exception
                    'device-retired-exception-message)))
(common-lisp:deftype device-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (device-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-summary-"))
   (device-arn (common-lisp:error ":devicearn is required") :type
    (common-lisp:or device-arn common-lisp:null))
   (device-name (common-lisp:error ":devicename is required") :type
    (common-lisp:or string common-lisp:null))
   (device-status (common-lisp:error ":devicestatus is required") :type
    (common-lisp:or device-status common-lisp:null))
   (device-type (common-lisp:error ":devicetype is required") :type
    (common-lisp:or device-type common-lisp:null))
   (provider-name (common-lisp:error ":providername is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'device-summary 'make-device-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-status))
      (common-lisp:list
       (common-lisp:cons "deviceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-summary-list ()
   '(trivial-types:proper-list device-summary))
 (common-lisp:defun |make-device-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-device-request-"))
   (device-arn (common-lisp:error ":devicearn is required") :type
    (common-lisp:or device-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-device-request 'make-get-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-device-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-device-response-"))
   (device-arn (common-lisp:error ":devicearn is required") :type
    (common-lisp:or device-arn common-lisp:null))
   (device-capabilities (common-lisp:error ":devicecapabilities is required")
    :type (common-lisp:or json-value common-lisp:null))
   (device-name (common-lisp:error ":devicename is required") :type
    (common-lisp:or string common-lisp:null))
   (device-status (common-lisp:error ":devicestatus is required") :type
    (common-lisp:or device-status common-lisp:null))
   (device-type (common-lisp:error ":devicetype is required") :type
    (common-lisp:or device-type common-lisp:null))
   (provider-name (common-lisp:error ":providername is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-device-response 'make-get-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-capabilities))
      (common-lisp:list
       (common-lisp:cons "deviceCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-status))
      (common-lisp:list
       (common-lisp:cons "deviceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-request-"))
   (job-arn (common-lisp:error ":jobarn is required") :type
    (common-lisp:or job-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-job-request 'make-get-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-job-response-"))
   (algorithm-specification
    (common-lisp:error ":algorithmspecification is required") :type
    (common-lisp:or algorithm-specification common-lisp:null))
   (billable-duration common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (checkpoint-config common-lisp:nil :type
    (common-lisp:or job-checkpoint-config common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (device-config common-lisp:nil :type
    (common-lisp:or device-config common-lisp:null))
   (ended-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (events common-lisp:nil :type (common-lisp:or job-events common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or string1024 common-lisp:null))
   (hyper-parameters common-lisp:nil :type
    (common-lisp:or hyper-parameters common-lisp:null))
   (input-data-config common-lisp:nil :type
    (common-lisp:or input-config-list common-lisp:null))
   (instance-config (common-lisp:error ":instanceconfig is required") :type
    (common-lisp:or instance-config common-lisp:null))
   (job-arn (common-lisp:error ":jobarn is required") :type
    (common-lisp:or job-arn common-lisp:null))
   (job-name (common-lisp:error ":jobname is required") :type
    (common-lisp:or get-job-response-job-name-string common-lisp:null))
   (output-data-config (common-lisp:error ":outputdataconfig is required")
    :type (common-lisp:or job-output-data-config common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or job-primary-status common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or job-stopping-condition common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-response 'make-get-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "algorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billable-duration))
      (common-lisp:list
       (common-lisp:cons "billableDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-config))
      (common-lisp:list
       (common-lisp:cons "checkpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-config))
      (common-lisp:list
       (common-lisp:cons "deviceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "hyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "inputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-config))
      (common-lisp:list
       (common-lisp:cons "instanceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "outputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "stoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-response))
   common-lisp:nil))
(common-lisp:deftype get-job-response-job-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-quantum-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-quantum-task-request-"))
   (quantum-task-arn (common-lisp:error ":quantumtaskarn is required") :type
    (common-lisp:or quantum-task-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-quantum-task-request 'make-get-quantum-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-quantum-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-quantum-task-response-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (device-arn (common-lisp:error ":devicearn is required") :type
    (common-lisp:or device-arn common-lisp:null))
   (device-parameters (common-lisp:error ":deviceparameters is required") :type
    (common-lisp:or json-value common-lisp:null))
   (ended-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (job-arn common-lisp:nil :type (common-lisp:or job-arn common-lisp:null))
   (output-s3bucket (common-lisp:error ":outputs3bucket is required") :type
    (common-lisp:or string common-lisp:null))
   (output-s3directory (common-lisp:error ":outputs3directory is required")
    :type (common-lisp:or string common-lisp:null))
   (quantum-task-arn (common-lisp:error ":quantumtaskarn is required") :type
    (common-lisp:or quantum-task-arn common-lisp:null))
   (shots (common-lisp:error ":shots is required") :type
    (common-lisp:or long common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or quantum-task-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-quantum-task-response
                    'make-get-quantum-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-parameters))
      (common-lisp:list
       (common-lisp:cons "deviceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3bucket))
      (common-lisp:list
       (common-lisp:cons "outputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3directory))
      (common-lisp:list
       (common-lisp:cons "outputS3Directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shots))
      (common-lisp:list
       (common-lisp:cons "shots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hyper-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-hyper-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype hyper-parameters-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype input-config-list ()
   '(trivial-types:proper-list input-file-config))
 (common-lisp:defun |make-input-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-file-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (input-file-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-file-config-"))
   (channel-name (common-lisp:error ":channelname is required") :type
    (common-lisp:or input-file-config-channel-name-string common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (data-source (common-lisp:error ":datasource is required") :type
    (common-lisp:or data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-file-config 'make-input-file-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-file-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-file-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-file-config))
   common-lisp:nil))
(common-lisp:deftype input-file-config-channel-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-config-"))
   (instance-count common-lisp:nil :type
    (common-lisp:or instance-config-instance-count-integer common-lisp:null))
   (instance-type (common-lisp:error ":instancetype is required") :type
    (common-lisp:or instance-type common-lisp:null))
   (volume-size-in-gb (common-lisp:error ":volumesizeingb is required") :type
    (common-lisp:or instance-config-volume-size-in-gb-integer
                    common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-config 'make-instance-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "instanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "volumeSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-config))
   common-lisp:nil))
(common-lisp:deftype instance-config-instance-count-integer ()
  'common-lisp:integer)
(common-lisp:deftype instance-config-volume-size-in-gb-integer ()
  'common-lisp:integer)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:deftype job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-checkpoint-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-checkpoint-config-"))
   (local-path common-lisp:nil :type
    (common-lisp:or string4096 common-lisp:null))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-checkpoint-config 'make-job-checkpoint-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-checkpoint-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-checkpoint-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "localPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-checkpoint-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-event-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-event-details-"))
   (event-type common-lisp:nil :type
    (common-lisp:or job-event-type common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or job-event-details-message-string common-lisp:null))
   (time-of-event common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-event-details 'make-job-event-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-of-event))
      (common-lisp:list
       (common-lisp:cons "timeOfEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-event-details))
   common-lisp:nil))
(common-lisp:deftype job-event-details-message-string () 'common-lisp:string)
(common-lisp:deftype job-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-events ()
   '(trivial-types:proper-list job-event-details))
 (common-lisp:defun |make-job-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-event-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-output-data-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-output-data-config-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or string2048 common-lisp:null))
   (s3path (common-lisp:error ":s3path is required") :type
    (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-output-data-config 'make-job-output-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-output-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-output-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "s3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-output-data-config))
   common-lisp:nil))
(common-lisp:deftype job-primary-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-stopping-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-stopping-condition-"))
   (max-runtime-in-seconds common-lisp:nil :type
    (common-lisp:or job-stopping-condition-max-runtime-in-seconds-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-stopping-condition 'make-job-stopping-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-stopping-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-stopping-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-runtime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "maxRuntimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-stopping-condition))
   common-lisp:nil))
(common-lisp:deftype job-stopping-condition-max-runtime-in-seconds-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-summary-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (device (common-lisp:error ":device is required") :type
    (common-lisp:or string256 common-lisp:null))
   (ended-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (job-arn (common-lisp:error ":jobarn is required") :type
    (common-lisp:or job-arn common-lisp:null))
   (job-name (common-lisp:error ":jobname is required") :type
    (common-lisp:or string common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or job-primary-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-summary-list ()
   '(trivial-types:proper-list job-summary))
 (common-lisp:defun |make-job-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-token () 'common-lisp:string)
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype quantum-task-arn () 'common-lisp:string)
(common-lisp:deftype quantum-task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (quantum-task-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-quantum-task-summary-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (device-arn (common-lisp:error ":devicearn is required") :type
    (common-lisp:or device-arn common-lisp:null))
   (ended-at common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (output-s3bucket (common-lisp:error ":outputs3bucket is required") :type
    (common-lisp:or string common-lisp:null))
   (output-s3directory (common-lisp:error ":outputs3directory is required")
    :type (common-lisp:or string common-lisp:null))
   (quantum-task-arn (common-lisp:error ":quantumtaskarn is required") :type
    (common-lisp:or quantum-task-arn common-lisp:null))
   (shots (common-lisp:error ":shots is required") :type
    (common-lisp:or long common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or quantum-task-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quantum-task-summary 'make-quantum-task-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input quantum-task-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input quantum-task-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3bucket))
      (common-lisp:list
       (common-lisp:cons "outputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3directory))
      (common-lisp:list
       (common-lisp:cons "outputS3Directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shots))
      (common-lisp:list
       (common-lisp:cons "shots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input quantum-task-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quantum-task-summary-list ()
   '(trivial-types:proper-list quantum-task-summary))
 (common-lisp:defun |make-quantum-task-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list quantum-task-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3data-source-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3data-source 'make-s3data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3data-source))
   common-lisp:nil))
(common-lisp:deftype s3path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (script-mode-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-script-mode-config-"))
   (compression-type common-lisp:nil :type
    (common-lisp:or compression-type common-lisp:null))
   (entry-point (common-lisp:error ":entrypoint is required") :type
    (common-lisp:or string common-lisp:null))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'script-mode-config 'make-script-mode-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input script-mode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input script-mode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "compressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "entryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input script-mode-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-devices-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-devices-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or search-devices-filter-name-string common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or search-devices-filter-values-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-devices-filter 'make-search-devices-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-filter))
   common-lisp:nil))
(common-lisp:deftype search-devices-filter-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-devices-filter-values-list ()
   '(trivial-types:proper-list string256))
 (common-lisp:defun |make-search-devices-filter-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-devices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-devices-request-"))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or search-devices-request-filters-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or search-devices-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-devices-request 'make-search-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-devices-request-filters-list ()
   '(trivial-types:proper-list search-devices-filter))
 (common-lisp:defun |make-search-devices-request-filters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-devices-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-devices-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (search-devices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-devices-response-"))
   (devices (common-lisp:error ":devices is required") :type
    (common-lisp:or device-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-devices-response 'make-search-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-jobs-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-jobs-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string64 common-lisp:null))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or search-jobs-filter-operator common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or search-jobs-filter-values-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-jobs-filter 'make-search-jobs-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-jobs-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-jobs-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-jobs-filter))
   common-lisp:nil))
(common-lisp:deftype search-jobs-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-jobs-filter-values-list ()
   '(trivial-types:proper-list string256))
 (common-lisp:defun |make-search-jobs-filter-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-jobs-request-"))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or search-jobs-request-filters-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or search-jobs-request-max-results-integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-jobs-request 'make-search-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-jobs-request-filters-list ()
   '(trivial-types:proper-list search-jobs-filter))
 (common-lisp:defun |make-search-jobs-request-filters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-jobs-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-jobs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (search-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-jobs-response-"))
   (jobs (common-lisp:error ":jobs is required") :type
    (common-lisp:or job-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-jobs-response 'make-search-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-quantum-tasks-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-quantum-tasks-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string64 common-lisp:null))
   (operator (common-lisp:error ":operator is required") :type
    (common-lisp:or search-quantum-tasks-filter-operator common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or search-quantum-tasks-filter-values-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-quantum-tasks-filter
                    'make-search-quantum-tasks-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-filter))
   common-lisp:nil))
(common-lisp:deftype search-quantum-tasks-filter-operator ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-quantum-tasks-filter-values-list ()
   '(trivial-types:proper-list string256))
 (common-lisp:defun |make-search-quantum-tasks-filter-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-quantum-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-quantum-tasks-request-"))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or search-quantum-tasks-request-filters-list
                    common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or search-quantum-tasks-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-quantum-tasks-request
                    'make-search-quantum-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-quantum-tasks-request-filters-list ()
   '(trivial-types:proper-list search-quantum-tasks-filter))
 (common-lisp:defun |make-search-quantum-tasks-request-filters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-quantum-tasks-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-quantum-tasks-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (search-quantum-tasks-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-quantum-tasks-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (quantum-tasks (common-lisp:error ":quantumtasks is required") :type
    (common-lisp:or quantum-task-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-quantum-tasks-response
                    'make-search-quantum-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-tasks))
      (common-lisp:list
       (common-lisp:cons "quantumTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string1024 () 'common-lisp:string)
(common-lisp:deftype string2048 () 'common-lisp:string)
(common-lisp:deftype string256 () 'common-lisp:string)
(common-lisp:deftype string4096 () 'common-lisp:string)
(common-lisp:deftype string64 () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (braket-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-arn)
   (common-lisp:declare (common-lisp:ignorable job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-arn))))
                                                        "CancelJob"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun cancel-quantum-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token quantum-task-arn)
   (common-lisp:declare (common-lisp:ignorable client-token quantum-task-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-quantum-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quantum-task/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quantum-task-arn))))
                                                        "CancelQuantumTask"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-quantum-task))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key algorithm-specification checkpoint-config
                     client-token device-config hyper-parameters
                     input-data-config instance-config job-name
                     output-data-config role-arn stopping-condition tags)
   (common-lisp:declare
    (common-lisp:ignorable algorithm-specification checkpoint-config
     client-token device-config hyper-parameters input-data-config
     instance-config job-name output-data-config role-arn stopping-condition
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/job" "CreateJob"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-quantum-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action client-token device-arn
                     device-parameters job-token output-s3bucket
                     output-s3key-prefix shots tags)
   (common-lisp:declare
    (common-lisp:ignorable action client-token device-arn device-parameters
     job-token output-s3bucket output-s3key-prefix shots tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-quantum-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/quantum-task"
                                                        "CreateQuantumTask"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-quantum-task))
(common-lisp:progn
 (common-lisp:defun get-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn)
   (common-lisp:declare (common-lisp:ignorable device-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/device/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-arn))))
                                                        "GetDevice"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-device))
(common-lisp:progn
 (common-lisp:defun get-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-arn)
   (common-lisp:declare (common-lisp:ignorable job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-arn))))
                                                        "GetJob" "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job))
(common-lisp:progn
 (common-lisp:defun get-quantum-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key quantum-task-arn)
   (common-lisp:declare (common-lisp:ignorable quantum-task-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-quantum-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quantum-task/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quantum-task-arn))))
                                                        "GetQuantumTask"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-quantum-task))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun search-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/devices"
                                                        "SearchDevices"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-devices))
(common-lisp:progn
 (common-lisp:defun search-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/jobs" "SearchJobs"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-jobs))
(common-lisp:progn
 (common-lisp:defun search-quantum-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-quantum-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/quantum-tasks"
                                                        "SearchQuantumTasks"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-quantum-tasks))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
