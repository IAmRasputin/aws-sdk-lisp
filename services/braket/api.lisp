;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/braket/api
  (:use)
  (:nicknames #:aws/braket)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/braket/api)
(common-lisp:progn
 (common-lisp:defclass braket-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "braket" :protocol
                        :rest-json))
 (common-lisp:export 'braket-request))
(common-lisp:progn
 (common-lisp:define-condition braket-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'braket-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("DeviceOfflineException" . device-offline-exception)
    ("DeviceRetiredException" . device-retired-exception)
    ("InternalServiceException" . internal-service-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (braket-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass algorithm-specification common-lisp:nil
                       ((script-mode-config :initarg :|scriptModeConfig| :type
                         (common-lisp:or script-mode-config common-lisp:null)
                         :accessor %algorithm-specification-script-mode-config
                         :initform common-lisp:nil)
                        (container-image :initarg :|containerImage| :type
                         (common-lisp:or container-image common-lisp:null)
                         :accessor %algorithm-specification-container-image
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'algorithm-specification 'make-algorithm-specification))
 (common-lisp:defun make-algorithm-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key script-mode-config container-image)
   (common-lisp:apply #'common-lisp:make-instance 'algorithm-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-image))
      (common-lisp:list
       (common-lisp:cons "containerImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-mode-config))
      (common-lisp:list
       (common-lisp:cons "scriptModeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-request common-lisp:nil
                       ((job-arn :initarg :|jobArn| :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %cancel-job-request-job-arn :initform
                         (common-lisp:error ":jobarn is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-job-request 'make-cancel-job-request))
 (common-lisp:defun make-cancel-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-job-response common-lisp:nil
                       ((job-arn :initarg :|jobArn| :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %cancel-job-response-job-arn :initform
                         (common-lisp:error ":jobarn is required"))
                        (cancellation-status :initarg :|cancellationStatus|
                         :type
                         (common-lisp:or cancellation-status common-lisp:null)
                         :accessor %cancel-job-response-cancellation-status
                         :initform
                         (common-lisp:error
                          ":cancellationstatus is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-job-response 'make-cancel-job-response))
 (common-lisp:defun make-cancel-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-arn cancellation-status)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellation-status))
      (common-lisp:list
       (common-lisp:cons "cancellationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-quantum-task-request common-lisp:nil
                       ((quantum-task-arn :initarg :|quantumTaskArn| :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor
                         %cancel-quantum-task-request-quantum-task-arn
                         :initform
                         (common-lisp:error ":quantumtaskarn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         %cancel-quantum-task-request-client-token :initform
                         (common-lisp:error ":clienttoken is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-quantum-task-request
                    'make-cancel-quantum-task-request))
 (common-lisp:defun make-cancel-quantum-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quantum-task-arn client-token)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-quantum-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-quantum-task-response common-lisp:nil
                       ((quantum-task-arn :initarg :|quantumTaskArn| :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor
                         %cancel-quantum-task-response-quantum-task-arn
                         :initform
                         (common-lisp:error ":quantumtaskarn is required"))
                        (cancellation-status :initarg :|cancellationStatus|
                         :type
                         (common-lisp:or cancellation-status common-lisp:null)
                         :accessor
                         %cancel-quantum-task-response-cancellation-status
                         :initform
                         (common-lisp:error
                          ":cancellationstatus is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-quantum-task-response
                    'make-cancel-quantum-task-response))
 (common-lisp:defun make-cancel-quantum-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quantum-task-arn cancellation-status)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-quantum-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellation-status))
      (common-lisp:list
       (common-lisp:cons "cancellationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-quantum-task-response))
   common-lisp:nil))
(common-lisp:deftype cancellation-status () 'common-lisp:string)
(common-lisp:deftype compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (braket-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass container-image common-lisp:nil
                       ((uri :initarg :|uri| :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         %container-image-uri :initform
                         (common-lisp:error ":uri is required"))))
 (common-lisp:export (common-lisp:list 'container-image 'make-container-image))
 (common-lisp:defun make-container-image
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uri)
   (common-lisp:apply #'common-lisp:make-instance 'container-image
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %create-job-request-tags :initform common-lisp:nil)
                        (stopping-condition :initarg :|stoppingCondition| :type
                         (common-lisp:or job-stopping-condition
                                         common-lisp:null)
                         :accessor %create-job-request-stopping-condition
                         :initform common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-job-request-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (output-data-config :initarg :|outputDataConfig| :type
                         (common-lisp:or job-output-data-config
                                         common-lisp:null)
                         :accessor %create-job-request-output-data-config
                         :initform
                         (common-lisp:error ":outputdataconfig is required"))
                        (job-name :initarg :|jobName| :type
                         (common-lisp:or create-job-request-job-name-string
                                         common-lisp:null)
                         :accessor %create-job-request-job-name :initform
                         (common-lisp:error ":jobname is required"))
                        (instance-config :initarg :|instanceConfig| :type
                         (common-lisp:or instance-config common-lisp:null)
                         :accessor %create-job-request-instance-config
                         :initform
                         (common-lisp:error ":instanceconfig is required"))
                        (input-data-config :initarg :|inputDataConfig| :type
                         (common-lisp:or
                          create-job-request-input-data-config-list
                          common-lisp:null)
                         :accessor %create-job-request-input-data-config
                         :initform common-lisp:nil)
                        (hyper-parameters :initarg :|hyperParameters| :type
                         (common-lisp:or hyper-parameters common-lisp:null)
                         :accessor %create-job-request-hyper-parameters
                         :initform common-lisp:nil)
                        (device-config :initarg :|deviceConfig| :type
                         (common-lisp:or device-config common-lisp:null)
                         :accessor %create-job-request-device-config :initform
                         (common-lisp:error ":deviceconfig is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         %create-job-request-client-token :initform
                         (common-lisp:error ":clienttoken is required"))
                        (checkpoint-config :initarg :|checkpointConfig| :type
                         (common-lisp:or job-checkpoint-config
                                         common-lisp:null)
                         :accessor %create-job-request-checkpoint-config
                         :initform common-lisp:nil)
                        (algorithm-specification :initarg
                         :|algorithmSpecification| :type
                         (common-lisp:or algorithm-specification
                                         common-lisp:null)
                         :accessor %create-job-request-algorithm-specification
                         :initform
                         (common-lisp:error
                          ":algorithmspecification is required"))))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defun make-create-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags stopping-condition role-arn
                     output-data-config job-name instance-config
                     input-data-config hyper-parameters device-config
                     client-token checkpoint-config algorithm-specification)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "algorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-config))
      (common-lisp:list
       (common-lisp:cons "checkpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-config))
      (common-lisp:list
       (common-lisp:cons "deviceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "hyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "inputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-config))
      (common-lisp:list
       (common-lisp:cons "instanceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "outputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "stoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-job-request-input-data-config-list ()
   '(trivial-types:proper-list input-file-config))
 (common-lisp:defun |make-create-job-request-input-data-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-file-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype create-job-request-job-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-job-response common-lisp:nil
                       ((job-arn :initarg :|jobArn| :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %create-job-response-job-arn :initform
                         (common-lisp:error ":jobarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defun make-create-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-quantum-task-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %create-quantum-task-request-tags :initform
                         common-lisp:nil)
                        (shots :initarg :|shots| :type
                         (common-lisp:or create-quantum-task-request-shots-long
                                         common-lisp:null)
                         :accessor %create-quantum-task-request-shots :initform
                         (common-lisp:error ":shots is required"))
                        (output-s3key-prefix :initarg :|outputS3KeyPrefix|
                         :type
                         (common-lisp:or
                          create-quantum-task-request-output-s3key-prefix-string
                          common-lisp:null)
                         :accessor
                         %create-quantum-task-request-output-s3key-prefix
                         :initform
                         (common-lisp:error ":outputs3keyprefix is required"))
                        (output-s3bucket :initarg :|outputS3Bucket| :type
                         (common-lisp:or
                          create-quantum-task-request-output-s3bucket-string
                          common-lisp:null)
                         :accessor %create-quantum-task-request-output-s3bucket
                         :initform
                         (common-lisp:error ":outputs3bucket is required"))
                        (job-token :initarg :|jobToken| :type
                         (common-lisp:or job-token common-lisp:null) :accessor
                         %create-quantum-task-request-job-token :initform
                         common-lisp:nil)
                        (device-parameters :initarg :|deviceParameters| :type
                         (common-lisp:or
                          create-quantum-task-request-device-parameters-string
                          common-lisp:null)
                         :accessor
                         %create-quantum-task-request-device-parameters
                         :initform common-lisp:nil)
                        (device-arn :initarg :|deviceArn| :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         %create-quantum-task-request-device-arn :initform
                         (common-lisp:error ":devicearn is required"))
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         %create-quantum-task-request-client-token :initform
                         (common-lisp:error ":clienttoken is required"))
                        (action :initarg :|action| :type
                         (common-lisp:or json-value common-lisp:null) :accessor
                         %create-quantum-task-request-action :initform
                         (common-lisp:error ":action is required"))))
 (common-lisp:export
  (common-lisp:list 'create-quantum-task-request
                    'make-create-quantum-task-request))
 (common-lisp:defun make-create-quantum-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags shots output-s3key-prefix
                     output-s3bucket job-token device-parameters device-arn
                     client-token action)
   (common-lisp:apply #'common-lisp:make-instance 'create-quantum-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-parameters))
      (common-lisp:list
       (common-lisp:cons "deviceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-token))
      (common-lisp:list
       (common-lisp:cons "jobToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3bucket))
      (common-lisp:list
       (common-lisp:cons "outputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "outputS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shots))
      (common-lisp:list
       (common-lisp:cons "shots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-request))
   common-lisp:nil))
(common-lisp:deftype create-quantum-task-request-device-parameters-string ()
  'common-lisp:string)
(common-lisp:deftype create-quantum-task-request-output-s3bucket-string ()
  'common-lisp:string)
(common-lisp:deftype create-quantum-task-request-output-s3key-prefix-string ()
  'common-lisp:string)
(common-lisp:deftype create-quantum-task-request-shots-long ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-quantum-task-response common-lisp:nil
                       ((quantum-task-arn :initarg :|quantumTaskArn| :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor
                         %create-quantum-task-response-quantum-task-arn
                         :initform
                         (common-lisp:error ":quantumtaskarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-quantum-task-response
                    'make-create-quantum-task-response))
 (common-lisp:defun make-create-quantum-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quantum-task-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-quantum-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-quantum-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((s3data-source :initarg :|s3DataSource| :type
                         (common-lisp:or s3data-source common-lisp:null)
                         :accessor %data-source-s3data-source :initform
                         (common-lisp:error ":s3datasource is required"))))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defun make-data-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3data-source)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-source))
      (common-lisp:list
       (common-lisp:cons "s3DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:deftype device-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-config common-lisp:nil
                       ((device :initarg :|device| :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         %device-config-device :initform
                         (common-lisp:error ":device is required"))))
 (common-lisp:export (common-lisp:list 'device-config 'make-device-config))
 (common-lisp:defun make-device-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device)
   (common-lisp:apply #'common-lisp:make-instance 'device-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition device-offline-exception
     (braket-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       device-offline-exception-message)))
 (common-lisp:export
  (common-lisp:list 'device-offline-exception
                    'device-offline-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition device-retired-exception
     (braket-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       device-retired-exception-message)))
 (common-lisp:export
  (common-lisp:list 'device-retired-exception
                    'device-retired-exception-message)))
(common-lisp:deftype device-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-summary common-lisp:nil
                       ((provider-name :initarg :|providerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %device-summary-provider-name :initform
                         (common-lisp:error ":providername is required"))
                        (device-type :initarg :|deviceType| :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor %device-summary-device-type :initform
                         (common-lisp:error ":devicetype is required"))
                        (device-status :initarg :|deviceStatus| :type
                         (common-lisp:or device-status common-lisp:null)
                         :accessor %device-summary-device-status :initform
                         (common-lisp:error ":devicestatus is required"))
                        (device-name :initarg :|deviceName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %device-summary-device-name :initform
                         (common-lisp:error ":devicename is required"))
                        (device-arn :initarg :|deviceArn| :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         %device-summary-device-arn :initform
                         (common-lisp:error ":devicearn is required"))))
 (common-lisp:export (common-lisp:list 'device-summary 'make-device-summary))
 (common-lisp:defun make-device-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provider-name device-type device-status
                     device-name device-arn)
   (common-lisp:apply #'common-lisp:make-instance 'device-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-status))
      (common-lisp:list
       (common-lisp:cons "deviceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype device-summary-list ()
   '(trivial-types:proper-list device-summary))
 (common-lisp:defun |make-device-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-device-request common-lisp:nil
                       ((device-arn :initarg :|deviceArn| :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         %get-device-request-device-arn :initform
                         (common-lisp:error ":devicearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-device-request 'make-get-device-request))
 (common-lisp:defun make-get-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-response common-lisp:nil
                       ((provider-name :initarg :|providerName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-device-response-provider-name :initform
                         (common-lisp:error ":providername is required"))
                        (device-type :initarg :|deviceType| :type
                         (common-lisp:or device-type common-lisp:null)
                         :accessor %get-device-response-device-type :initform
                         (common-lisp:error ":devicetype is required"))
                        (device-status :initarg :|deviceStatus| :type
                         (common-lisp:or device-status common-lisp:null)
                         :accessor %get-device-response-device-status :initform
                         (common-lisp:error ":devicestatus is required"))
                        (device-name :initarg :|deviceName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-device-response-device-name :initform
                         (common-lisp:error ":devicename is required"))
                        (device-capabilities :initarg :|deviceCapabilities|
                         :type (common-lisp:or json-value common-lisp:null)
                         :accessor %get-device-response-device-capabilities
                         :initform
                         (common-lisp:error ":devicecapabilities is required"))
                        (device-arn :initarg :|deviceArn| :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         %get-device-response-device-arn :initform
                         (common-lisp:error ":devicearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-device-response 'make-get-device-response))
 (common-lisp:defun make-get-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key provider-name device-type device-status
                     device-name device-capabilities device-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-capabilities))
      (common-lisp:list
       (common-lisp:cons "deviceCapabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "deviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-status))
      (common-lisp:list
       (common-lisp:cons "deviceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type))
      (common-lisp:list
       (common-lisp:cons "deviceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-request common-lisp:nil
                       ((job-arn :initarg :|jobArn| :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %get-job-request-job-arn :initform
                         (common-lisp:error ":jobarn is required"))))
 (common-lisp:export (common-lisp:list 'get-job-request 'make-get-job-request))
 (common-lisp:defun make-get-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %get-job-response-tags :initform common-lisp:nil)
                        (stopping-condition :initarg :|stoppingCondition| :type
                         (common-lisp:or job-stopping-condition
                                         common-lisp:null)
                         :accessor %get-job-response-stopping-condition
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or job-primary-status common-lisp:null)
                         :accessor %get-job-response-status :initform
                         (common-lisp:error ":status is required"))
                        (started-at :initarg :|startedAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %get-job-response-started-at :initform
                         common-lisp:nil)
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %get-job-response-role-arn :initform
                         (common-lisp:error ":rolearn is required"))
                        (output-data-config :initarg :|outputDataConfig| :type
                         (common-lisp:or job-output-data-config
                                         common-lisp:null)
                         :accessor %get-job-response-output-data-config
                         :initform
                         (common-lisp:error ":outputdataconfig is required"))
                        (job-name :initarg :|jobName| :type
                         (common-lisp:or get-job-response-job-name-string
                                         common-lisp:null)
                         :accessor %get-job-response-job-name :initform
                         (common-lisp:error ":jobname is required"))
                        (job-arn :initarg :|jobArn| :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %get-job-response-job-arn :initform
                         (common-lisp:error ":jobarn is required"))
                        (instance-config :initarg :|instanceConfig| :type
                         (common-lisp:or instance-config common-lisp:null)
                         :accessor %get-job-response-instance-config :initform
                         (common-lisp:error ":instanceconfig is required"))
                        (input-data-config :initarg :|inputDataConfig| :type
                         (common-lisp:or input-config-list common-lisp:null)
                         :accessor %get-job-response-input-data-config
                         :initform common-lisp:nil)
                        (hyper-parameters :initarg :|hyperParameters| :type
                         (common-lisp:or hyper-parameters common-lisp:null)
                         :accessor %get-job-response-hyper-parameters :initform
                         common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or string1024 common-lisp:null) :accessor
                         %get-job-response-failure-reason :initform
                         common-lisp:nil)
                        (events :initarg :|events| :type
                         (common-lisp:or job-events common-lisp:null) :accessor
                         %get-job-response-events :initform common-lisp:nil)
                        (ended-at :initarg :|endedAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %get-job-response-ended-at :initform
                         common-lisp:nil)
                        (device-config :initarg :|deviceConfig| :type
                         (common-lisp:or device-config common-lisp:null)
                         :accessor %get-job-response-device-config :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %get-job-response-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (checkpoint-config :initarg :|checkpointConfig| :type
                         (common-lisp:or job-checkpoint-config
                                         common-lisp:null)
                         :accessor %get-job-response-checkpoint-config
                         :initform common-lisp:nil)
                        (billable-duration :initarg :|billableDuration| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %get-job-response-billable-duration :initform
                         common-lisp:nil)
                        (algorithm-specification :initarg
                         :|algorithmSpecification| :type
                         (common-lisp:or algorithm-specification
                                         common-lisp:null)
                         :accessor %get-job-response-algorithm-specification
                         :initform
                         (common-lisp:error
                          ":algorithmspecification is required"))))
 (common-lisp:export
  (common-lisp:list 'get-job-response 'make-get-job-response))
 (common-lisp:defun make-get-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags stopping-condition status started-at
                     role-arn output-data-config job-name job-arn
                     instance-config input-data-config hyper-parameters
                     failure-reason events ended-at device-config created-at
                     checkpoint-config billable-duration
                     algorithm-specification)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "algorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'billable-duration))
      (common-lisp:list
       (common-lisp:cons "billableDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-config))
      (common-lisp:list
       (common-lisp:cons "checkpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-config))
      (common-lisp:list
       (common-lisp:cons "deviceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "hyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "inputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-config))
      (common-lisp:list
       (common-lisp:cons "instanceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "outputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "stoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-response))
   common-lisp:nil))
(common-lisp:deftype get-job-response-job-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-quantum-task-request common-lisp:nil
                       ((quantum-task-arn :initarg :|quantumTaskArn| :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor %get-quantum-task-request-quantum-task-arn
                         :initform
                         (common-lisp:error ":quantumtaskarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-quantum-task-request 'make-get-quantum-task-request))
 (common-lisp:defun make-get-quantum-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quantum-task-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-quantum-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-quantum-task-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %get-quantum-task-response-tags :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or quantum-task-status common-lisp:null)
                         :accessor %get-quantum-task-response-status :initform
                         (common-lisp:error ":status is required"))
                        (shots :initarg :|shots| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %get-quantum-task-response-shots :initform
                         (common-lisp:error ":shots is required"))
                        (quantum-task-arn :initarg :|quantumTaskArn| :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor %get-quantum-task-response-quantum-task-arn
                         :initform
                         (common-lisp:error ":quantumtaskarn is required"))
                        (output-s3directory :initarg :|outputS3Directory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-quantum-task-response-output-s3directory
                         :initform
                         (common-lisp:error ":outputs3directory is required"))
                        (output-s3bucket :initarg :|outputS3Bucket| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-quantum-task-response-output-s3bucket :initform
                         (common-lisp:error ":outputs3bucket is required"))
                        (job-arn :initarg :|jobArn| :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %get-quantum-task-response-job-arn :initform
                         common-lisp:nil)
                        (failure-reason :initarg :|failureReason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-quantum-task-response-failure-reason :initform
                         common-lisp:nil)
                        (ended-at :initarg :|endedAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %get-quantum-task-response-ended-at
                         :initform common-lisp:nil)
                        (device-parameters :initarg :|deviceParameters| :type
                         (common-lisp:or json-value common-lisp:null) :accessor
                         %get-quantum-task-response-device-parameters :initform
                         (common-lisp:error ":deviceparameters is required"))
                        (device-arn :initarg :|deviceArn| :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         %get-quantum-task-response-device-arn :initform
                         (common-lisp:error ":devicearn is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %get-quantum-task-response-created-at
                         :initform
                         (common-lisp:error ":createdat is required"))))
 (common-lisp:export
  (common-lisp:list 'get-quantum-task-response
                    'make-get-quantum-task-response))
 (common-lisp:defun make-get-quantum-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status shots quantum-task-arn
                     output-s3directory output-s3bucket job-arn failure-reason
                     ended-at device-parameters device-arn created-at)
   (common-lisp:apply #'common-lisp:make-instance 'get-quantum-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-parameters))
      (common-lisp:list
       (common-lisp:cons "deviceParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3bucket))
      (common-lisp:list
       (common-lisp:cons "outputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3directory))
      (common-lisp:list
       (common-lisp:cons "outputS3Directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shots))
      (common-lisp:list
       (common-lisp:cons "shots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-quantum-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hyper-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-hyper-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype hyper-parameters-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype input-config-list ()
   '(trivial-types:proper-list input-file-config))
 (common-lisp:defun |make-input-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-file-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass input-file-config common-lisp:nil
                       ((data-source :initarg :|dataSource| :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor %input-file-config-data-source :initform
                         (common-lisp:error ":datasource is required"))
                        (content-type :initarg :|contentType| :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         %input-file-config-content-type :initform
                         common-lisp:nil)
                        (channel-name :initarg :|channelName| :type
                         (common-lisp:or input-file-config-channel-name-string
                                         common-lisp:null)
                         :accessor %input-file-config-channel-name :initform
                         (common-lisp:error ":channelname is required"))))
 (common-lisp:export
  (common-lisp:list 'input-file-config 'make-input-file-config))
 (common-lisp:defun make-input-file-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-source content-type channel-name)
   (common-lisp:apply #'common-lisp:make-instance 'input-file-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-file-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-file-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "channelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-file-config))
   common-lisp:nil))
(common-lisp:deftype input-file-config-channel-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-config common-lisp:nil
                       ((volume-size-in-gb :initarg :|volumeSizeInGb| :type
                         (common-lisp:or
                          instance-config-volume-size-in-gb-integer
                          common-lisp:null)
                         :accessor %instance-config-volume-size-in-gb :initform
                         (common-lisp:error ":volumesizeingb is required"))
                        (instance-type :initarg :|instanceType| :type
                         (common-lisp:or instance-type common-lisp:null)
                         :accessor %instance-config-instance-type :initform
                         (common-lisp:error ":instancetype is required"))
                        (instance-count :initarg :|instanceCount| :type
                         (common-lisp:or instance-config-instance-count-integer
                                         common-lisp:null)
                         :accessor %instance-config-instance-count :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'instance-config 'make-instance-config))
 (common-lisp:defun make-instance-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key volume-size-in-gb instance-type
                     instance-count)
   (common-lisp:apply #'common-lisp:make-instance 'instance-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "instanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "volumeSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-config))
   common-lisp:nil))
(common-lisp:deftype instance-config-instance-count-integer ()
  'common-lisp:integer)
(common-lisp:deftype instance-config-volume-size-in-gb-integer ()
  'common-lisp:integer)
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (braket-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:deftype job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-checkpoint-config common-lisp:nil
                       ((s3uri :initarg :|s3Uri| :type
                         (common-lisp:or s3path common-lisp:null) :accessor
                         %job-checkpoint-config-s3uri :initform
                         (common-lisp:error ":s3uri is required"))
                        (local-path :initarg :|localPath| :type
                         (common-lisp:or string4096 common-lisp:null) :accessor
                         %job-checkpoint-config-local-path :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-checkpoint-config 'make-job-checkpoint-config))
 (common-lisp:defun make-job-checkpoint-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3uri local-path)
   (common-lisp:apply #'common-lisp:make-instance 'job-checkpoint-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-checkpoint-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-checkpoint-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "localPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-checkpoint-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-event-details common-lisp:nil
                       ((time-of-event :initarg :|timeOfEvent| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %job-event-details-time-of-event :initform
                         common-lisp:nil)
                        (message :initarg :|message| :type
                         (common-lisp:or job-event-details-message-string
                                         common-lisp:null)
                         :accessor %job-event-details-message :initform
                         common-lisp:nil)
                        (event-type :initarg :|eventType| :type
                         (common-lisp:or job-event-type common-lisp:null)
                         :accessor %job-event-details-event-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-event-details 'make-job-event-details))
 (common-lisp:defun make-job-event-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-of-event message event-type)
   (common-lisp:apply #'common-lisp:make-instance 'job-event-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-event-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-event-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-of-event))
      (common-lisp:list
       (common-lisp:cons "timeOfEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-event-details))
   common-lisp:nil))
(common-lisp:deftype job-event-details-message-string () 'common-lisp:string)
(common-lisp:deftype job-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-events ()
   '(trivial-types:proper-list job-event-details))
 (common-lisp:defun |make-job-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-event-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-output-data-config common-lisp:nil
                       ((s3path :initarg :|s3Path| :type
                         (common-lisp:or s3path common-lisp:null) :accessor
                         %job-output-data-config-s3path :initform
                         (common-lisp:error ":s3path is required"))
                        (kms-key-id :initarg :|kmsKeyId| :type
                         (common-lisp:or string2048 common-lisp:null) :accessor
                         %job-output-data-config-kms-key-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-output-data-config 'make-job-output-data-config))
 (common-lisp:defun make-job-output-data-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3path kms-key-id)
   (common-lisp:apply #'common-lisp:make-instance 'job-output-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-output-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-output-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "s3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-output-data-config))
   common-lisp:nil))
(common-lisp:deftype job-primary-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-stopping-condition common-lisp:nil
                       ((max-runtime-in-seconds :initarg :|maxRuntimeInSeconds|
                         :type
                         (common-lisp:or
                          job-stopping-condition-max-runtime-in-seconds-integer
                          common-lisp:null)
                         :accessor
                         %job-stopping-condition-max-runtime-in-seconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-stopping-condition 'make-job-stopping-condition))
 (common-lisp:defun make-job-stopping-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-runtime-in-seconds)
   (common-lisp:apply #'common-lisp:make-instance 'job-stopping-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-stopping-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-stopping-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-runtime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "maxRuntimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-stopping-condition))
   common-lisp:nil))
(common-lisp:deftype job-stopping-condition-max-runtime-in-seconds-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass job-summary common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %job-summary-tags :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or job-primary-status common-lisp:null)
                         :accessor %job-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (started-at :initarg :|startedAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %job-summary-started-at :initform
                         common-lisp:nil)
                        (job-name :initarg :|jobName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %job-summary-job-name :initform
                         (common-lisp:error ":jobname is required"))
                        (job-arn :initarg :|jobArn| :type
                         (common-lisp:or job-arn common-lisp:null) :accessor
                         %job-summary-job-arn :initform
                         (common-lisp:error ":jobarn is required"))
                        (ended-at :initarg :|endedAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %job-summary-ended-at :initform
                         common-lisp:nil)
                        (device :initarg :|device| :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         %job-summary-device :initform
                         (common-lisp:error ":device is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %job-summary-created-at :initform
                         (common-lisp:error ":createdat is required"))))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defun make-job-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status started-at job-name job-arn
                     ended-at device created-at)
   (common-lisp:apply #'common-lisp:make-instance 'job-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "jobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-summary-list ()
   '(trivial-types:proper-list job-summary))
 (common-lisp:defun |make-job-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-token () 'common-lisp:string)
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype quantum-task-arn () 'common-lisp:string)
(common-lisp:deftype quantum-task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass quantum-task-summary common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %quantum-task-summary-tags :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or quantum-task-status common-lisp:null)
                         :accessor %quantum-task-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (shots :initarg :|shots| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %quantum-task-summary-shots :initform
                         (common-lisp:error ":shots is required"))
                        (quantum-task-arn :initarg :|quantumTaskArn| :type
                         (common-lisp:or quantum-task-arn common-lisp:null)
                         :accessor %quantum-task-summary-quantum-task-arn
                         :initform
                         (common-lisp:error ":quantumtaskarn is required"))
                        (output-s3directory :initarg :|outputS3Directory| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %quantum-task-summary-output-s3directory :initform
                         (common-lisp:error ":outputs3directory is required"))
                        (output-s3bucket :initarg :|outputS3Bucket| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %quantum-task-summary-output-s3bucket :initform
                         (common-lisp:error ":outputs3bucket is required"))
                        (ended-at :initarg :|endedAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %quantum-task-summary-ended-at :initform
                         common-lisp:nil)
                        (device-arn :initarg :|deviceArn| :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         %quantum-task-summary-device-arn :initform
                         (common-lisp:error ":devicearn is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor %quantum-task-summary-created-at :initform
                         (common-lisp:error ":createdat is required"))))
 (common-lisp:export
  (common-lisp:list 'quantum-task-summary 'make-quantum-task-summary))
 (common-lisp:defun make-quantum-task-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status shots quantum-task-arn
                     output-s3directory output-s3bucket ended-at device-arn
                     created-at)
   (common-lisp:apply #'common-lisp:make-instance 'quantum-task-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input quantum-task-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input quantum-task-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "deviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "endedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3bucket))
      (common-lisp:list
       (common-lisp:cons "outputS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3directory))
      (common-lisp:list
       (common-lisp:cons "outputS3Directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-task-arn))
      (common-lisp:list
       (common-lisp:cons "quantumTaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shots))
      (common-lisp:list
       (common-lisp:cons "shots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input quantum-task-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype quantum-task-summary-list ()
   '(trivial-types:proper-list quantum-task-summary))
 (common-lisp:defun |make-quantum-task-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list quantum-task-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (braket-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3data-source common-lisp:nil
                       ((s3uri :initarg :|s3Uri| :type
                         (common-lisp:or s3path common-lisp:null) :accessor
                         %s3data-source-s3uri :initform
                         (common-lisp:error ":s3uri is required"))))
 (common-lisp:export (common-lisp:list 's3data-source 'make-s3data-source))
 (common-lisp:defun make-s3data-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3uri)
   (common-lisp:apply #'common-lisp:make-instance 's3data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3data-source))
   common-lisp:nil))
(common-lisp:deftype s3path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass script-mode-config common-lisp:nil
                       ((s3uri :initarg :|s3Uri| :type
                         (common-lisp:or s3path common-lisp:null) :accessor
                         %script-mode-config-s3uri :initform
                         (common-lisp:error ":s3uri is required"))
                        (entry-point :initarg :|entryPoint| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %script-mode-config-entry-point :initform
                         (common-lisp:error ":entrypoint is required"))
                        (compression-type :initarg :|compressionType| :type
                         (common-lisp:or compression-type common-lisp:null)
                         :accessor %script-mode-config-compression-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'script-mode-config 'make-script-mode-config))
 (common-lisp:defun make-script-mode-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3uri entry-point compression-type)
   (common-lisp:apply #'common-lisp:make-instance 'script-mode-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input script-mode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input script-mode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "compressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-point))
      (common-lisp:list
       (common-lisp:cons "entryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input script-mode-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-devices-filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or search-devices-filter-values-list
                                         common-lisp:null)
                         :accessor %search-devices-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or search-devices-filter-name-string
                                         common-lisp:null)
                         :accessor %search-devices-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'search-devices-filter 'make-search-devices-filter))
 (common-lisp:defun make-search-devices-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'search-devices-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-filter))
   common-lisp:nil))
(common-lisp:deftype search-devices-filter-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-devices-filter-values-list ()
   '(trivial-types:proper-list string256))
 (common-lisp:defun |make-search-devices-filter-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-devices-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-devices-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          search-devices-request-max-results-integer
                          common-lisp:null)
                         :accessor %search-devices-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or search-devices-request-filters-list
                                         common-lisp:null)
                         :accessor %search-devices-request-filters :initform
                         (common-lisp:error ":filters is required"))))
 (common-lisp:export
  (common-lisp:list 'search-devices-request 'make-search-devices-request))
 (common-lisp:defun make-search-devices-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance 'search-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-devices-request-filters-list ()
   '(trivial-types:proper-list search-devices-filter))
 (common-lisp:defun |make-search-devices-request-filters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-devices-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-devices-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass search-devices-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-devices-response-next-token :initform
                         common-lisp:nil)
                        (devices :initarg :|devices| :type
                         (common-lisp:or device-summary-list common-lisp:null)
                         :accessor %search-devices-response-devices :initform
                         (common-lisp:error ":devices is required"))))
 (common-lisp:export
  (common-lisp:list 'search-devices-response 'make-search-devices-response))
 (common-lisp:defun make-search-devices-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token devices)
   (common-lisp:apply #'common-lisp:make-instance 'search-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-jobs-filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or search-jobs-filter-values-list
                                         common-lisp:null)
                         :accessor %search-jobs-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (operator :initarg :|operator| :type
                         (common-lisp:or search-jobs-filter-operator
                                         common-lisp:null)
                         :accessor %search-jobs-filter-operator :initform
                         (common-lisp:error ":operator is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         %search-jobs-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'search-jobs-filter 'make-search-jobs-filter))
 (common-lisp:defun make-search-jobs-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values operator name)
   (common-lisp:apply #'common-lisp:make-instance 'search-jobs-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-jobs-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-jobs-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-jobs-filter))
   common-lisp:nil))
(common-lisp:deftype search-jobs-filter-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-jobs-filter-values-list ()
   '(trivial-types:proper-list string256))
 (common-lisp:defun |make-search-jobs-filter-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-jobs-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-jobs-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          search-jobs-request-max-results-integer
                          common-lisp:null)
                         :accessor %search-jobs-request-max-results :initform
                         common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or search-jobs-request-filters-list
                                         common-lisp:null)
                         :accessor %search-jobs-request-filters :initform
                         (common-lisp:error ":filters is required"))))
 (common-lisp:export
  (common-lisp:list 'search-jobs-request 'make-search-jobs-request))
 (common-lisp:defun make-search-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance 'search-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-jobs-request-filters-list ()
   '(trivial-types:proper-list search-jobs-filter))
 (common-lisp:defun |make-search-jobs-request-filters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-jobs-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-jobs-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass search-jobs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-jobs-response-next-token :initform
                         common-lisp:nil)
                        (jobs :initarg :|jobs| :type
                         (common-lisp:or job-summary-list common-lisp:null)
                         :accessor %search-jobs-response-jobs :initform
                         (common-lisp:error ":jobs is required"))))
 (common-lisp:export
  (common-lisp:list 'search-jobs-response 'make-search-jobs-response))
 (common-lisp:defun make-search-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token jobs)
   (common-lisp:apply #'common-lisp:make-instance 'search-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-quantum-tasks-filter common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or
                          search-quantum-tasks-filter-values-list
                          common-lisp:null)
                         :accessor %search-quantum-tasks-filter-values
                         :initform (common-lisp:error ":values is required"))
                        (operator :initarg :|operator| :type
                         (common-lisp:or search-quantum-tasks-filter-operator
                                         common-lisp:null)
                         :accessor %search-quantum-tasks-filter-operator
                         :initform (common-lisp:error ":operator is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         %search-quantum-tasks-filter-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'search-quantum-tasks-filter
                    'make-search-quantum-tasks-filter))
 (common-lisp:defun make-search-quantum-tasks-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values operator name)
   (common-lisp:apply #'common-lisp:make-instance 'search-quantum-tasks-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-filter))
   common-lisp:nil))
(common-lisp:deftype search-quantum-tasks-filter-operator ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-quantum-tasks-filter-values-list ()
   '(trivial-types:proper-list string256))
 (common-lisp:defun |make-search-quantum-tasks-filter-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-quantum-tasks-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-quantum-tasks-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          search-quantum-tasks-request-max-results-integer
                          common-lisp:null)
                         :accessor %search-quantum-tasks-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :|filters| :type
                         (common-lisp:or
                          search-quantum-tasks-request-filters-list
                          common-lisp:null)
                         :accessor %search-quantum-tasks-request-filters
                         :initform
                         (common-lisp:error ":filters is required"))))
 (common-lisp:export
  (common-lisp:list 'search-quantum-tasks-request
                    'make-search-quantum-tasks-request))
 (common-lisp:defun make-search-quantum-tasks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance 'search-quantum-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-quantum-tasks-request-filters-list ()
   '(trivial-types:proper-list search-quantum-tasks-filter))
 (common-lisp:defun |make-search-quantum-tasks-request-filters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            search-quantum-tasks-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-quantum-tasks-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass search-quantum-tasks-response common-lisp:nil
                       ((quantum-tasks :initarg :|quantumTasks| :type
                         (common-lisp:or quantum-task-summary-list
                                         common-lisp:null)
                         :accessor %search-quantum-tasks-response-quantum-tasks
                         :initform
                         (common-lisp:error ":quantumtasks is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %search-quantum-tasks-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'search-quantum-tasks-response
                    'make-search-quantum-tasks-response))
 (common-lisp:defun make-search-quantum-tasks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key quantum-tasks next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'search-quantum-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quantum-tasks))
      (common-lisp:list
       (common-lisp:cons "quantumTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-quantum-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (braket-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string1024 () 'common-lisp:string)
(common-lisp:deftype string2048 () 'common-lisp:string)
(common-lisp:deftype string256 () 'common-lisp:string)
(common-lisp:deftype string4096 () 'common-lisp:string)
(common-lisp:deftype string64 () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (braket-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (braket-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun cancel-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-arn)
   (common-lisp:declare (common-lisp:ignorable job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-arn))))
                                                        "CancelJob"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-job))
(common-lisp:progn
 (common-lisp:defun cancel-quantum-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token quantum-task-arn)
   (common-lisp:declare (common-lisp:ignorable client-token quantum-task-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-quantum-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quantum-task/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quantum-task-arn))))
                                                        "CancelQuantumTask"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-quantum-task))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key algorithm-specification checkpoint-config
                     client-token device-config hyper-parameters
                     input-data-config instance-config job-name
                     output-data-config role-arn stopping-condition tags)
   (common-lisp:declare
    (common-lisp:ignorable algorithm-specification checkpoint-config
     client-token device-config hyper-parameters input-data-config
     instance-config job-name output-data-config role-arn stopping-condition
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/job" "CreateJob"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-quantum-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action client-token device-arn
                     device-parameters job-token output-s3bucket
                     output-s3key-prefix shots tags)
   (common-lisp:declare
    (common-lisp:ignorable action client-token device-arn device-parameters
     job-token output-s3bucket output-s3key-prefix shots tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-quantum-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/quantum-task"
                                                        "CreateQuantumTask"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-quantum-task))
(common-lisp:progn
 (common-lisp:defun get-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-arn)
   (common-lisp:declare (common-lisp:ignorable device-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/device/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-arn))))
                                                        "GetDevice"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-device))
(common-lisp:progn
 (common-lisp:defun get-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-arn)
   (common-lisp:declare (common-lisp:ignorable job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/job/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-arn))))
                                                        "GetJob" "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-job))
(common-lisp:progn
 (common-lisp:defun get-quantum-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key quantum-task-arn)
   (common-lisp:declare (common-lisp:ignorable quantum-task-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-quantum-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/quantum-task/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'quantum-task-arn))))
                                                        "GetQuantumTask"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-quantum-task))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun search-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/devices"
                                                        "SearchDevices"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-devices))
(common-lisp:progn
 (common-lisp:defun search-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/jobs" "SearchJobs"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-jobs))
(common-lisp:progn
 (common-lisp:defun search-quantum-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-quantum-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/quantum-tasks"
                                                        "SearchQuantumTasks"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search-quantum-tasks))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'braket-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-09-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
