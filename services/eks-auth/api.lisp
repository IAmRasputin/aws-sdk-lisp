;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/eks-auth/api
  (:use)
  (:nicknames #:aws/eks-auth)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/eks-auth/api)
(common-lisp:progn
 (common-lisp:define-condition eks-auth-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'eks-auth-error))
(common-lisp:progn
 (common-lisp:defclass eks-auth-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "eks-auth" :api-version
                        "2023-11-26" :host-prefix "eks-auth" :signing-name
                        "eks-auth" :global-host common-lisp:nil))
 (common-lisp:export 'eks-auth-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ExpiredTokenException" . expired-token-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidTokenException" . invalid-token-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottlingException" . throttling-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (eks-auth-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-role-for-pod-identity-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-role-for-pod-identity-request-"))
   (cluster-name (common-lisp:error ":clustername is required") :type
    (common-lisp:or cluster-name common-lisp:null))
   (token (common-lisp:error ":token is required") :type
    (common-lisp:or jwt-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-role-for-pod-identity-request
                    'make-assume-role-for-pod-identity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-for-pod-identity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-for-pod-identity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-for-pod-identity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assume-role-for-pod-identity-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-assume-role-for-pod-identity-response-"))
   (subject (common-lisp:error ":subject is required") :type
    (common-lisp:or subject common-lisp:null))
   (audience (common-lisp:error ":audience is required") :type
    (common-lisp:or string common-lisp:null))
   (pod-identity-association
    (common-lisp:error ":podidentityassociation is required") :type
    (common-lisp:or pod-identity-association common-lisp:null))
   (assumed-role-user (common-lisp:error ":assumedroleuser is required") :type
    (common-lisp:or assumed-role-user common-lisp:null))
   (credentials (common-lisp:error ":credentials is required") :type
    (common-lisp:or credentials common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assume-role-for-pod-identity-response
                    'make-assume-role-for-pod-identity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-for-pod-identity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-for-pod-identity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audience))
      (common-lisp:list
       (common-lisp:cons "audience"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pod-identity-association))
      (common-lisp:list
       (common-lisp:cons "podIdentityAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assumed-role-user))
      (common-lisp:list
       (common-lisp:cons "assumedRoleUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assume-role-for-pod-identity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assumed-role-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-assumed-role-user-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or string common-lisp:null))
   (assume-role-id (common-lisp:error ":assumeroleid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assumed-role-user 'make-assumed-role-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assumed-role-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assumed-role-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assume-role-id))
      (common-lisp:list
       (common-lisp:cons "assumeRoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assumed-role-user))
   common-lisp:nil))
(common-lisp:deftype cluster-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (credentials (:copier common-lisp:nil)
      (:conc-name "struct-shape-credentials-"))
   (session-token (common-lisp:error ":sessiontoken is required") :type
    (common-lisp:or string common-lisp:null))
   (secret-access-key (common-lisp:error ":secretaccesskey is required") :type
    (common-lisp:or string common-lisp:null))
   (access-key-id (common-lisp:error ":accesskeyid is required") :type
    (common-lisp:or string common-lisp:null))
   (expiration (common-lisp:error ":expiration is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'credentials 'make-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "secretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input credentials))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition expired-token-exception
     (eks-auth-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       expired-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'expired-token-exception 'expired-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (eks-auth-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (eks-auth-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (eks-auth-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-token-exception
     (eks-auth-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-token-exception 'invalid-token-exception-message)))
(common-lisp:deftype jwt-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pod-identity-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-pod-identity-association-"))
   (association-arn (common-lisp:error ":associationarn is required") :type
    (common-lisp:or string common-lisp:null))
   (association-id (common-lisp:error ":associationid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pod-identity-association 'make-pod-identity-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-arn))
      (common-lisp:list
       (common-lisp:cons "associationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "associationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pod-identity-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (eks-auth-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (eks-auth-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subject (:copier common-lisp:nil) (:conc-name "struct-shape-subject-"))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or string common-lisp:null))
   (service-account (common-lisp:error ":serviceaccount is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subject 'make-subject))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subject))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subject))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-account))
      (common-lisp:list
       (common-lisp:cons "serviceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subject))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (eks-auth-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun assume-role-for-pod-identity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cluster-name token)
   (common-lisp:declare (common-lisp:ignorable cluster-name token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-assume-role-for-pod-identity-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'eks-auth-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/clusters/~A/assume-role-for-pod-identity"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'cluster-name))))
                                                        "AssumeRoleForPodIdentity"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'assume-role-for-pod-identity))
