;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/redshift-serverless/api
  (:use)
  (:nicknames #:aws/redshift-serverless)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/redshift-serverless/api)
(common-lisp:progn
 (common-lisp:define-condition redshift-serverless-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'redshift-serverless-error))
(common-lisp:progn
 (common-lisp:defclass redshift-serverless-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "redshift-serverless"
                        :api-version "2021-04-21" :host-prefix
                        "redshift-serverless" :signing-name
                        "redshift-serverless" :global-host common-lisp:nil
                        :target-prefix "RedshiftServerless" :json-version
                        "1.1"))
 (common-lisp:export 'redshift-serverless-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InsufficientCapacityException" . insufficient-capacity-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidPaginationException" . invalid-pagination-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (redshift-serverless-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       access-denied-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-code
                    'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:deftype account-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-account-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (association (:copier common-lisp:nil)
      (:conc-name "struct-shape-association-"))
   (custom-domain-certificate-arn common-lisp:nil :type
    (common-lisp:or custom-domain-certificate-arn-string common-lisp:null))
   (custom-domain-certificate-expiry-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (custom-domain-name common-lisp:nil :type
    (common-lisp:or custom-domain-name common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'association 'make-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-expiry-time))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateExpiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype association-list ()
   '(trivial-types:proper-list association))
 (common-lisp:defun make-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (config-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-config-parameter-"))
   (parameter-key common-lisp:nil :type
    (common-lisp:or parameter-key common-lisp:null))
   (parameter-value common-lisp:nil :type
    (common-lisp:or parameter-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'config-parameter 'make-config-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input config-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input config-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "parameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "parameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input config-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype config-parameter-list ()
   '(trivial-types:proper-list config-parameter))
 (common-lisp:defun make-config-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list config-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (redshift-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (convert-recovery-point-to-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-convert-recovery-point-to-snapshot-request-"))
   (recovery-point-id (common-lisp:error ":recoverypointid is required") :type
    (common-lisp:or string common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (snapshot-name (common-lisp:error ":snapshotname is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'convert-recovery-point-to-snapshot-request
                    'make-convert-recovery-point-to-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          convert-recovery-point-to-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          convert-recovery-point-to-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-id))
      (common-lisp:list
       (common-lisp:cons "recoveryPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          convert-recovery-point-to-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (convert-recovery-point-to-snapshot-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-convert-recovery-point-to-snapshot-response-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'convert-recovery-point-to-snapshot-response
                    'make-convert-recovery-point-to-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          convert-recovery-point-to-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          convert-recovery-point-to-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          convert-recovery-point-to-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-domain-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-domain-association-request-"))
   (custom-domain-certificate-arn
    (common-lisp:error ":customdomaincertificatearn is required") :type
    (common-lisp:or custom-domain-certificate-arn-string common-lisp:null))
   (custom-domain-name (common-lisp:error ":customdomainname is required")
    :type (common-lisp:or custom-domain-name common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-domain-association-request
                    'make-create-custom-domain-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-domain-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-custom-domain-association-response-"))
   (custom-domain-certificate-arn common-lisp:nil :type
    (common-lisp:or custom-domain-certificate-arn-string common-lisp:null))
   (custom-domain-certificate-expiry-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (custom-domain-name common-lisp:nil :type
    (common-lisp:or custom-domain-name common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-domain-association-response
                    'make-create-custom-domain-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-expiry-time))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateExpiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-domain-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-endpoint-access-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-endpoint-access-request-"))
   (endpoint-name (common-lisp:error ":endpointname is required") :type
    (common-lisp:or string common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or owner-account common-lisp:null))
   (subnet-ids (common-lisp:error ":subnetids is required") :type
    (common-lisp:or subnet-id-list common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-access-request
                    'make-create-endpoint-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "endpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "vpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-endpoint-access-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-endpoint-access-response-"))
   (endpoint common-lisp:nil :type
    (common-lisp:or endpoint-access common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-access-response
                    'make-create-endpoint-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-namespace-request-"))
   (admin-password-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (admin-user-password common-lisp:nil :type
    (common-lisp:or db-password common-lisp:null))
   (admin-username common-lisp:nil :type
    (common-lisp:or db-user common-lisp:null))
   (db-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (default-iam-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iam-roles common-lisp:nil :type
    (common-lisp:or iam-role-arn-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (log-exports common-lisp:nil :type
    (common-lisp:or log-export-list common-lisp:null))
   (manage-admin-password common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or namespace-name common-lisp:null))
   (redshift-idc-application-arn common-lisp:nil :type
    (common-lisp:or redshift-idc-application-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-namespace-request 'make-create-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'admin-password-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "adminPasswordSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-user-password))
      (common-lisp:list
       (common-lisp:cons "adminUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-username))
      (common-lisp:list
       (common-lisp:cons "adminUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-name))
      (common-lisp:list
       (common-lisp:cons "dbName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "defaultIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "iamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-exports))
      (common-lisp:list
       (common-lisp:cons "logExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-admin-password))
      (common-lisp:list
       (common-lisp:cons "manageAdminPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-idc-application-arn))
      (common-lisp:list
       (common-lisp:cons "redshiftIdcApplicationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-namespace-response-"))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-namespace-response
                    'make-create-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-scheduled-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-scheduled-action-request-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or namespace-name common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (schedule (common-lisp:error ":schedule is required") :type
    (common-lisp:or schedule common-lisp:null))
   (scheduled-action-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (scheduled-action-name
    (common-lisp:error ":scheduledactionname is required") :type
    (common-lisp:or scheduled-action-name common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (target-action (common-lisp:error ":targetaction is required") :type
    (common-lisp:or target-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-scheduled-action-request
                    'make-create-scheduled-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-description))
      (common-lisp:list
       (common-lisp:cons "scheduledActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "scheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-action))
      (common-lisp:list
       (common-lisp:cons "targetAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-scheduled-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-scheduled-action-response-"))
   (scheduled-action common-lisp:nil :type
    (common-lisp:or scheduled-action-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-scheduled-action-response
                    'make-create-scheduled-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-action))
      (common-lisp:list
       (common-lisp:cons "scheduledAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scheduled-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-copy-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-copy-configuration-request-"))
   (destination-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (destination-region (common-lisp:error ":destinationregion is required")
    :type (common-lisp:or string common-lisp:null))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or namespace-name common-lisp:null))
   (snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-copy-configuration-request
                    'make-create-snapshot-copy-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "destinationKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "destinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "snapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-copy-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-copy-configuration-response-"))
   (snapshot-copy-configuration
    (common-lisp:error ":snapshotcopyconfiguration is required") :type
    (common-lisp:or snapshot-copy-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-copy-configuration-response
                    'make-create-snapshot-copy-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-configuration))
      (common-lisp:list
       (common-lisp:cons "snapshotCopyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-copy-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-request-"))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or string common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (snapshot-name (common-lisp:error ":snapshotname is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-request 'make-create-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-response-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-response 'make-create-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-snapshot-schedule-action-parameters (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-snapshot-schedule-action-parameters-"))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or namespace-name common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (snapshot-name-prefix (common-lisp:error ":snapshotnameprefix is required")
    :type (common-lisp:or snapshot-name-prefix common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-snapshot-schedule-action-parameters
                    'make-create-snapshot-schedule-action-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-schedule-action-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-schedule-action-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-name-prefix))
      (common-lisp:list
       (common-lisp:cons "snapshotNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-snapshot-schedule-action-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-usage-limit-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-usage-limit-request-"))
   (amount (common-lisp:error ":amount is required") :type
    (common-lisp:or long common-lisp:null))
   (breach-action common-lisp:nil :type
    (common-lisp:or usage-limit-breach-action common-lisp:null))
   (period common-lisp:nil :type
    (common-lisp:or usage-limit-period common-lisp:null))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null))
   (usage-type (common-lisp:error ":usagetype is required") :type
    (common-lisp:or usage-limit-usage-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-usage-limit-request
                    'make-create-usage-limit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-limit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-limit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breach-action))
      (common-lisp:list
       (common-lisp:cons "breachAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-type))
      (common-lisp:list
       (common-lisp:cons "usageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-limit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-usage-limit-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-usage-limit-response-"))
   (usage-limit common-lisp:nil :type
    (common-lisp:or usage-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-usage-limit-response
                    'make-create-usage-limit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-limit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-limit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit))
      (common-lisp:list
       (common-lisp:cons "usageLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-usage-limit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workgroup-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workgroup-request-"))
   (base-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (config-parameters common-lisp:nil :type
    (common-lisp:or config-parameter-list common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or namespace-name common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-id-list common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-id-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workgroup-request 'make-create-workgroup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workgroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workgroup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-capacity))
      (common-lisp:list
       (common-lisp:cons "baseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-parameters))
      (common-lisp:list
       (common-lisp:cons "configParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "enhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "maxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workgroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workgroup-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workgroup-response-"))
   (workgroup common-lisp:nil :type
    (common-lisp:or workgroup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workgroup-response
                    'make-create-workgroup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workgroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workgroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup))
      (common-lisp:list
       (common-lisp:cons "workgroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workgroup-response))
   common-lisp:nil))
(common-lisp:deftype custom-domain-certificate-arn-string ()
  'common-lisp:string)
(common-lisp:deftype custom-domain-name () 'common-lisp:string)
(common-lisp:deftype db-name () 'common-lisp:string)
(common-lisp:deftype db-password () 'common-lisp:string)
(common-lisp:deftype db-user () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-domain-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-domain-association-request-"))
   (custom-domain-name (common-lisp:error ":customdomainname is required")
    :type (common-lisp:or custom-domain-name common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-domain-association-request
                    'make-delete-custom-domain-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-domain-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-domain-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-domain-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-domain-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-custom-domain-association-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-custom-domain-association-response
                    'make-delete-custom-domain-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-domain-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-domain-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-domain-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-endpoint-access-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-endpoint-access-request-"))
   (endpoint-name (common-lisp:error ":endpointname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-access-request
                    'make-delete-endpoint-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "endpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-endpoint-access-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-endpoint-access-response-"))
   (endpoint common-lisp:nil :type
    (common-lisp:or endpoint-access common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-access-response
                    'make-delete-endpoint-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-namespace-request-"))
   (final-snapshot-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (final-snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or namespace-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-namespace-request 'make-delete-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "finalSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "finalSnapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-namespace-response-"))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-namespace-response
                    'make-delete-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-policy-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-scheduled-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-scheduled-action-request-"))
   (scheduled-action-name
    (common-lisp:error ":scheduledactionname is required") :type
    (common-lisp:or scheduled-action-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-action-request
                    'make-delete-scheduled-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "scheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-scheduled-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-scheduled-action-response-"))
   (scheduled-action common-lisp:nil :type
    (common-lisp:or scheduled-action-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-scheduled-action-response
                    'make-delete-scheduled-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-action))
      (common-lisp:list
       (common-lisp:cons "scheduledAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scheduled-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-snapshot-copy-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-snapshot-copy-configuration-request-"))
   (snapshot-copy-configuration-id
    (common-lisp:error ":snapshotcopyconfigurationid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-copy-configuration-request
                    'make-delete-snapshot-copy-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-configuration-id))
      (common-lisp:list
       (common-lisp:cons "snapshotCopyConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-snapshot-copy-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-snapshot-copy-configuration-response-"))
   (snapshot-copy-configuration
    (common-lisp:error ":snapshotcopyconfiguration is required") :type
    (common-lisp:or snapshot-copy-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-copy-configuration-response
                    'make-delete-snapshot-copy-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-configuration))
      (common-lisp:list
       (common-lisp:cons "snapshotCopyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-copy-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-snapshot-request-"))
   (snapshot-name (common-lisp:error ":snapshotname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-request 'make-delete-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-snapshot-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-snapshot-response-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-snapshot-response 'make-delete-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-usage-limit-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-usage-limit-request-"))
   (usage-limit-id (common-lisp:error ":usagelimitid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-usage-limit-request
                    'make-delete-usage-limit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-limit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-limit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit-id))
      (common-lisp:list
       (common-lisp:cons "usageLimitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-limit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-usage-limit-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-usage-limit-response-"))
   (usage-limit common-lisp:nil :type
    (common-lisp:or usage-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-usage-limit-response
                    'make-delete-usage-limit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-limit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-limit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit))
      (common-lisp:list
       (common-lisp:cons "usageLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-usage-limit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workgroup-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workgroup-request-"))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workgroup-request 'make-delete-workgroup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workgroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workgroup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workgroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workgroup-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workgroup-response-"))
   (workgroup (common-lisp:error ":workgroup is required") :type
    (common-lisp:or workgroup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workgroup-response
                    'make-delete-workgroup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workgroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workgroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup))
      (common-lisp:list
       (common-lisp:cons "workgroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workgroup-response))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint (:copier common-lisp:nil) (:conc-name "struct-shape-endpoint-"))
   (address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (vpc-endpoints common-lisp:nil :type
    (common-lisp:or vpc-endpoint-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoints))
      (common-lisp:list
       (common-lisp:cons "vpcEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-access (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-access-"))
   (address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (endpoint-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (endpoint-create-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (endpoint-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-id-list common-lisp:null))
   (vpc-endpoint common-lisp:nil :type
    (common-lisp:or vpc-endpoint common-lisp:null))
   (vpc-security-groups common-lisp:nil :type
    (common-lisp:or vpc-security-group-membership-list common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint-access 'make-endpoint-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "endpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-create-time))
      (common-lisp:list
       (common-lisp:cons "endpointCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "endpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "endpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint))
      (common-lisp:list
       (common-lisp:cons "vpcEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-security-groups))
      (common-lisp:list
       (common-lisp:cons "vpcSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-access-list ()
   '(trivial-types:proper-list endpoint-access))
 (common-lisp:defun make-endpoint-access-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-access))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-credentials-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-credentials-request-"))
   (custom-domain-name common-lisp:nil :type
    (common-lisp:or custom-domain-name common-lisp:null))
   (db-name common-lisp:nil :type (common-lisp:or db-name common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-credentials-request 'make-get-credentials-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-name))
      (common-lisp:list
       (common-lisp:cons "dbName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-seconds))
      (common-lisp:list
       (common-lisp:cons "durationSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-credentials-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-credentials-response-"))
   (db-password common-lisp:nil :type
    (common-lisp:or db-password common-lisp:null))
   (db-user common-lisp:nil :type (common-lisp:or db-user common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (next-refresh-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-credentials-response 'make-get-credentials-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-password))
      (common-lisp:list
       (common-lisp:cons "dbPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "dbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-refresh-time))
      (common-lisp:list
       (common-lisp:cons "nextRefreshTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-credentials-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-custom-domain-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-custom-domain-association-request-"))
   (custom-domain-name (common-lisp:error ":customdomainname is required")
    :type (common-lisp:or custom-domain-name common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-custom-domain-association-request
                    'make-get-custom-domain-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-domain-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-domain-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-domain-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-custom-domain-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-custom-domain-association-response-"))
   (custom-domain-certificate-arn common-lisp:nil :type
    (common-lisp:or custom-domain-certificate-arn-string common-lisp:null))
   (custom-domain-certificate-expiry-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (custom-domain-name common-lisp:nil :type
    (common-lisp:or custom-domain-name common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-custom-domain-association-response
                    'make-get-custom-domain-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-domain-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-domain-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-expiry-time))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateExpiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-domain-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-endpoint-access-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-endpoint-access-request-"))
   (endpoint-name (common-lisp:error ":endpointname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-endpoint-access-request
                    'make-get-endpoint-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-endpoint-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "endpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-endpoint-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-endpoint-access-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-endpoint-access-response-"))
   (endpoint common-lisp:nil :type
    (common-lisp:or endpoint-access common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-endpoint-access-response
                    'make-get-endpoint-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-endpoint-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-endpoint-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-namespace-request-"))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or namespace-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-namespace-request 'make-get-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-namespace-response-"))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-namespace-response 'make-get-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recovery-point-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recovery-point-request-"))
   (recovery-point-id (common-lisp:error ":recoverypointid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recovery-point-request
                    'make-get-recovery-point-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-id))
      (common-lisp:list
       (common-lisp:cons "recoveryPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-recovery-point-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-recovery-point-response-"))
   (recovery-point common-lisp:nil :type
    (common-lisp:or recovery-point common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-recovery-point-response
                    'make-get-recovery-point-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point))
      (common-lisp:list
       (common-lisp:cons "recoveryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recovery-point-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-policy-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-request
                    'make-get-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-policy-response-"))
   (resource-policy common-lisp:nil :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-response
                    'make-get-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "resourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-scheduled-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-scheduled-action-request-"))
   (scheduled-action-name
    (common-lisp:error ":scheduledactionname is required") :type
    (common-lisp:or scheduled-action-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-scheduled-action-request
                    'make-get-scheduled-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-scheduled-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-scheduled-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "scheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-scheduled-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-scheduled-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-scheduled-action-response-"))
   (scheduled-action common-lisp:nil :type
    (common-lisp:or scheduled-action-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-scheduled-action-response
                    'make-get-scheduled-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-scheduled-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-scheduled-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-action))
      (common-lisp:list
       (common-lisp:cons "scheduledAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-scheduled-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-snapshot-request-"))
   (owner-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-snapshot-request 'make-get-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "snapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-snapshot-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-snapshot-response-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-snapshot-response 'make-get-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-table-restore-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-table-restore-status-request-"))
   (table-restore-request-id
    (common-lisp:error ":tablerestorerequestid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-restore-status-request
                    'make-get-table-restore-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-restore-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-restore-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-request-id))
      (common-lisp:list
       (common-lisp:cons "tableRestoreRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-restore-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-table-restore-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-table-restore-status-response-"))
   (table-restore-status common-lisp:nil :type
    (common-lisp:or table-restore-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-restore-status-response
                    'make-get-table-restore-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-restore-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-restore-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-status))
      (common-lisp:list
       (common-lisp:cons "tableRestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-restore-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-usage-limit-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-usage-limit-request-"))
   (usage-limit-id (common-lisp:error ":usagelimitid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-usage-limit-request 'make-get-usage-limit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-limit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-limit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit-id))
      (common-lisp:list
       (common-lisp:cons "usageLimitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-limit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-usage-limit-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-usage-limit-response-"))
   (usage-limit common-lisp:nil :type
    (common-lisp:or usage-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-usage-limit-response 'make-get-usage-limit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-limit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-limit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit))
      (common-lisp:list
       (common-lisp:cons "usageLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-usage-limit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workgroup-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workgroup-request-"))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workgroup-request 'make-get-workgroup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workgroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workgroup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workgroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-workgroup-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-workgroup-response-"))
   (workgroup (common-lisp:error ":workgroup is required") :type
    (common-lisp:or workgroup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-workgroup-response 'make-get-workgroup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workgroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workgroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup))
      (common-lisp:list
       (common-lisp:cons "workgroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workgroup-response))
   common-lisp:nil))
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype iam-role-arn-list ()
   '(trivial-types:proper-list iam-role-arn))
 (common-lisp:defun make-iam-role-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list iam-role-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition insufficient-capacity-exception
     (redshift-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       insufficient-capacity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'insufficient-capacity-exception
                    'insufficient-capacity-exception-message)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (redshift-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-pagination-exception
     (redshift-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-pagination-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-pagination-exception
                    'invalid-pagination-exception-message)))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-domain-associations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-domain-associations-request-"))
   (custom-domain-certificate-arn common-lisp:nil :type
    (common-lisp:or custom-domain-certificate-arn-string common-lisp:null))
   (custom-domain-name common-lisp:nil :type
    (common-lisp:or custom-domain-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-custom-domain-associations-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-domain-associations-request
                    'make-list-custom-domain-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-domain-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-domain-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-domain-associations-request))
   common-lisp:nil))
(common-lisp:deftype list-custom-domain-associations-request-max-results-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-custom-domain-associations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-custom-domain-associations-response-"))
   (associations common-lisp:nil :type
    (common-lisp:or association-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-custom-domain-associations-response
                    'make-list-custom-domain-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-domain-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-domain-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-domain-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-endpoint-access-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-endpoint-access-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-endpoint-access-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or owner-account common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-endpoint-access-request
                    'make-list-endpoint-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-access-request))
   common-lisp:nil))
(common-lisp:deftype list-endpoint-access-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-endpoint-access-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-endpoint-access-response-"))
   (endpoints (common-lisp:error ":endpoints is required") :type
    (common-lisp:or endpoint-access-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-endpoint-access-response
                    'make-list-endpoint-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-namespaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-namespaces-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-namespaces-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-namespaces-request 'make-list-namespaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-request))
   common-lisp:nil))
(common-lisp:deftype list-namespaces-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-namespaces-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-namespaces-response-"))
   (namespaces (common-lisp:error ":namespaces is required") :type
    (common-lisp:or namespace-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-namespaces-response 'make-list-namespaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespaces))
      (common-lisp:list
       (common-lisp:cons "namespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-namespaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-recovery-points-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recovery-points-request-"))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-recovery-points-request-max-results-integer
                    common-lisp:null))
   (namespace-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or namespace-name common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recovery-points-request
                    'make-list-recovery-points-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-arn))
      (common-lisp:list
       (common-lisp:cons "namespaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-request))
   common-lisp:nil))
(common-lisp:deftype list-recovery-points-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-recovery-points-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-recovery-points-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (recovery-points common-lisp:nil :type
    (common-lisp:or recovery-point-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-recovery-points-response
                    'make-list-recovery-points-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-points))
      (common-lisp:list
       (common-lisp:cons "recoveryPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recovery-points-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-scheduled-actions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-scheduled-actions-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-scheduled-actions-request-max-results-integer
                    common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or namespace-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-scheduled-actions-request
                    'make-list-scheduled-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-request))
   common-lisp:nil))
(common-lisp:deftype list-scheduled-actions-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-scheduled-actions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-scheduled-actions-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (scheduled-actions common-lisp:nil :type
    (common-lisp:or scheduled-actions-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-scheduled-actions-response
                    'make-list-scheduled-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-actions))
      (common-lisp:list
       (common-lisp:cons "scheduledActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-snapshot-copy-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-snapshot-copy-configurations-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or
     list-snapshot-copy-configurations-request-max-results-integer
     common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or namespace-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-snapshot-copy-configurations-request
                    'make-list-snapshot-copy-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-copy-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-copy-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-copy-configurations-request))
   common-lisp:nil))
(common-lisp:deftype list-snapshot-copy-configurations-request-max-results-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-snapshot-copy-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-snapshot-copy-configurations-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (snapshot-copy-configurations
    (common-lisp:error ":snapshotcopyconfigurations is required") :type
    (common-lisp:or snapshot-copy-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-snapshot-copy-configurations-response
                    'make-list-snapshot-copy-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-copy-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-copy-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-configurations))
      (common-lisp:list
       (common-lisp:cons "snapshotCopyConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-copy-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-snapshots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-snapshots-request-"))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-snapshots-request-max-results-integer
                    common-lisp:null))
   (namespace-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-snapshots-request 'make-list-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-arn))
      (common-lisp:list
       (common-lisp:cons "namespaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshots-request))
   common-lisp:nil))
(common-lisp:deftype list-snapshots-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-snapshots-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-snapshots-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (snapshots common-lisp:nil :type
    (common-lisp:or snapshot-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-snapshots-response 'make-list-snapshots-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshots-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshots-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshots))
      (common-lisp:list
       (common-lisp:cons "snapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshots-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-table-restore-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-table-restore-status-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-table-restore-status-request-max-results-integer
                    common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-table-restore-status-request
                    'make-list-table-restore-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-restore-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-restore-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-restore-status-request))
   common-lisp:nil))
(common-lisp:deftype list-table-restore-status-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-table-restore-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-table-restore-status-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (table-restore-statuses common-lisp:nil :type
    (common-lisp:or table-restore-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-table-restore-status-response
                    'make-list-table-restore-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-restore-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-restore-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-statuses))
      (common-lisp:list
       (common-lisp:cons "tableRestoreStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-restore-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-usage-limits-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-usage-limits-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-usage-limits-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (usage-type common-lisp:nil :type
    (common-lisp:or usage-limit-usage-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-usage-limits-request
                    'make-list-usage-limits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-limits-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-type))
      (common-lisp:list
       (common-lisp:cons "usageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-limits-request))
   common-lisp:nil))
(common-lisp:deftype list-usage-limits-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-usage-limits-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-usage-limits-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (usage-limits common-lisp:nil :type
    (common-lisp:or usage-limits common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-usage-limits-response
                    'make-list-usage-limits-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-limits-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-limits-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limits))
      (common-lisp:list
       (common-lisp:cons "usageLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-usage-limits-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workgroups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workgroups-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-workgroups-request-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or owner-account common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workgroups-request 'make-list-workgroups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workgroups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workgroups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workgroups-request))
   common-lisp:nil))
(common-lisp:deftype list-workgroups-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-workgroups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workgroups-response-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (workgroups (common-lisp:error ":workgroups is required") :type
    (common-lisp:or workgroup-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workgroups-response 'make-list-workgroups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workgroups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workgroups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroups))
      (common-lisp:list
       (common-lisp:cons "workgroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workgroups-response))
   common-lisp:nil))
(common-lisp:deftype log-export () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-export-list ()
   '(trivial-types:proper-list log-export))
 (common-lisp:defun make-log-export-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-export))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (namespace (:copier common-lisp:nil)
      (:conc-name "struct-shape-namespace-"))
   (admin-password-secret-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (admin-password-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (admin-username common-lisp:nil :type
    (common-lisp:or db-user common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (db-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (default-iam-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iam-roles common-lisp:nil :type
    (common-lisp:or iam-role-arn-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (log-exports common-lisp:nil :type
    (common-lisp:or log-export-list common-lisp:null))
   (namespace-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (namespace-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or namespace-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or namespace-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'namespace 'make-namespace))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input namespace))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input namespace))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'admin-password-secret-arn))
      (common-lisp:list
       (common-lisp:cons "adminPasswordSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'admin-password-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "adminPasswordSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-username))
      (common-lisp:list
       (common-lisp:cons "adminUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-name))
      (common-lisp:list
       (common-lisp:cons "dbName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "defaultIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "iamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-exports))
      (common-lisp:list
       (common-lisp:cons "logExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-arn))
      (common-lisp:list
       (common-lisp:cons "namespaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-id))
      (common-lisp:list
       (common-lisp:cons "namespaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input namespace))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype namespace-list () '(trivial-types:proper-list namespace))
 (common-lisp:defun make-namespace-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list namespace))
   aws-sdk/generator/shape::members))
(common-lisp:deftype namespace-name () 'common-lisp:string)
(common-lisp:deftype namespace-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "networkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "privateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "subnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interface-list ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun make-network-interface-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype next-invocations-list ()
   '(trivial-types:proper-list timestamp))
 (common-lisp:defun make-next-invocations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestamp))
   aws-sdk/generator/shape::members))
(common-lisp:deftype owner-account () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype parameter-key () 'common-lisp:string)
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resource-policy-request-"))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or string common-lisp:null))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resource-policy-response-"))
   (resource-policy common-lisp:nil :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "resourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recovery-point (:copier common-lisp:nil)
      (:conc-name "struct-shape-recovery-point-"))
   (namespace-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or namespace-name common-lisp:null))
   (recovery-point-create-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (recovery-point-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (total-size-in-mega-bytes common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'recovery-point 'make-recovery-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recovery-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recovery-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-arn))
      (common-lisp:list
       (common-lisp:cons "namespaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recovery-point-create-time))
      (common-lisp:list
       (common-lisp:cons "recoveryPointCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-id))
      (common-lisp:list
       (common-lisp:cons "recoveryPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "totalSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recovery-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recovery-point-list ()
   '(trivial-types:proper-list recovery-point))
 (common-lisp:defun make-recovery-point-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recovery-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype redshift-idc-application-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (redshift-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-policy-"))
   (policy common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-policy 'make-resource-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-from-recovery-point-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-from-recovery-point-request-"))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or namespace-name common-lisp:null))
   (recovery-point-id (common-lisp:error ":recoverypointid is required") :type
    (common-lisp:or string common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-from-recovery-point-request
                    'make-restore-from-recovery-point-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-recovery-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-recovery-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-id))
      (common-lisp:list
       (common-lisp:cons "recoveryPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-recovery-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-from-recovery-point-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-from-recovery-point-response-"))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (recovery-point-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-from-recovery-point-response
                    'make-restore-from-recovery-point-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-recovery-point-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-recovery-point-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-id))
      (common-lisp:list
       (common-lisp:cons "recoveryPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-recovery-point-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-from-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-from-snapshot-request-"))
   (admin-password-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (manage-admin-password common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or namespace-name common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-from-snapshot-request
                    'make-restore-from-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'admin-password-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "adminPasswordSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-admin-password))
      (common-lisp:list
       (common-lisp:cons "manageAdminPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "snapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-from-snapshot-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-from-snapshot-response-"))
   (namespace common-lisp:nil :type
    (common-lisp:or namespace common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-from-snapshot-response
                    'make-restore-from-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-from-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-table-from-recovery-point-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-table-from-recovery-point-request-"))
   (activate-case-sensitive-identifier common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or string common-lisp:null))
   (new-table-name (common-lisp:error ":newtablename is required") :type
    (common-lisp:or string common-lisp:null))
   (recovery-point-id (common-lisp:error ":recoverypointid is required") :type
    (common-lisp:or string common-lisp:null))
   (source-database-name (common-lisp:error ":sourcedatabasename is required")
    :type (common-lisp:or string common-lisp:null))
   (source-schema-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-table-name (common-lisp:error ":sourcetablename is required") :type
    (common-lisp:or string common-lisp:null))
   (target-database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-schema-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-table-from-recovery-point-request
                    'make-restore-table-from-recovery-point-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-recovery-point-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-recovery-point-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activate-case-sensitive-identifier))
      (common-lisp:list
       (common-lisp:cons "activateCaseSensitiveIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-table-name))
      (common-lisp:list
       (common-lisp:cons "newTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-id))
      (common-lisp:list
       (common-lisp:cons "recoveryPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-database-name))
      (common-lisp:list
       (common-lisp:cons "sourceDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-schema-name))
      (common-lisp:list
       (common-lisp:cons "sourceSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table-name))
      (common-lisp:list
       (common-lisp:cons "sourceTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-name))
      (common-lisp:list
       (common-lisp:cons "targetDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-schema-name))
      (common-lisp:list
       (common-lisp:cons "targetSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-recovery-point-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-table-from-recovery-point-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-table-from-recovery-point-response-"))
   (table-restore-status common-lisp:nil :type
    (common-lisp:or table-restore-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-table-from-recovery-point-response
                    'make-restore-table-from-recovery-point-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-recovery-point-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-recovery-point-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-status))
      (common-lisp:list
       (common-lisp:cons "tableRestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-recovery-point-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-table-from-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-table-from-snapshot-request-"))
   (activate-case-sensitive-identifier common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or string common-lisp:null))
   (new-table-name (common-lisp:error ":newtablename is required") :type
    (common-lisp:or string common-lisp:null))
   (snapshot-name (common-lisp:error ":snapshotname is required") :type
    (common-lisp:or string common-lisp:null))
   (source-database-name (common-lisp:error ":sourcedatabasename is required")
    :type (common-lisp:or string common-lisp:null))
   (source-schema-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-table-name (common-lisp:error ":sourcetablename is required") :type
    (common-lisp:or string common-lisp:null))
   (target-database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-schema-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-table-from-snapshot-request
                    'make-restore-table-from-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'activate-case-sensitive-identifier))
      (common-lisp:list
       (common-lisp:cons "activateCaseSensitiveIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-table-name))
      (common-lisp:list
       (common-lisp:cons "newTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-database-name))
      (common-lisp:list
       (common-lisp:cons "sourceDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-schema-name))
      (common-lisp:list
       (common-lisp:cons "sourceSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table-name))
      (common-lisp:list
       (common-lisp:cons "sourceTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-name))
      (common-lisp:list
       (common-lisp:cons "targetDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-schema-name))
      (common-lisp:list
       (common-lisp:cons "targetSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-table-from-snapshot-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-table-from-snapshot-response-"))
   (table-restore-status common-lisp:nil :type
    (common-lisp:or table-restore-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-table-from-snapshot-response
                    'make-restore-table-from-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-status))
      (common-lisp:list
       (common-lisp:cons "tableRestoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-table-from-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule (:copier common-lisp:nil) (:conc-name "struct-shape-schedule-"))
   (at common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (cron common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'at))
      (common-lisp:list
       (common-lisp:cons "at"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cron))
      (common-lisp:list
       (common-lisp:cons "cron"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:deftype scheduled-action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scheduled-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-scheduled-action-response-"))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or namespace-name common-lisp:null))
   (next-invocations common-lisp:nil :type
    (common-lisp:or next-invocations-list common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (scheduled-action-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (scheduled-action-name common-lisp:nil :type
    (common-lisp:or scheduled-action-name common-lisp:null))
   (scheduled-action-uuid common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or state common-lisp:null))
   (target-action common-lisp:nil :type
    (common-lisp:or target-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduled-action-response
                    'make-scheduled-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-invocations))
      (common-lisp:list
       (common-lisp:cons "nextInvocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-description))
      (common-lisp:list
       (common-lisp:cons "scheduledActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "scheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-uuid))
      (common-lisp:list
       (common-lisp:cons "scheduledActionUuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-action))
      (common-lisp:list
       (common-lisp:cons "targetAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-actions-list ()
   '(trivial-types:proper-list scheduled-action-name))
 (common-lisp:defun make-scheduled-actions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-action-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (redshift-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot (:copier common-lisp:nil) (:conc-name "struct-shape-snapshot-"))
   (accounts-with-provisioned-restore-access common-lisp:nil :type
    (common-lisp:or account-id-list common-lisp:null))
   (accounts-with-restore-access common-lisp:nil :type
    (common-lisp:or account-id-list common-lisp:null))
   (actual-incremental-backup-size-in-mega-bytes common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (admin-password-secret-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (admin-password-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (admin-username common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (backup-progress-in-mega-bytes common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (current-backup-rate-in-mega-bytes-per-second common-lisp:nil :type
    (common-lisp:or double common-lisp:null))
   (elapsed-time-in-seconds common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (estimated-seconds-to-completion common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (namespace-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-create-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (snapshot-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-remaining-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (snapshot-retention-start-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or snapshot-status common-lisp:null))
   (total-backup-size-in-mega-bytes common-lisp:nil :type
    (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'snapshot 'make-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accounts-with-provisioned-restore-access))
      (common-lisp:list
       (common-lisp:cons "accountsWithProvisionedRestoreAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accounts-with-restore-access))
      (common-lisp:list
       (common-lisp:cons "accountsWithRestoreAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'actual-incremental-backup-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "actualIncrementalBackupSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'admin-password-secret-arn))
      (common-lisp:list
       (common-lisp:cons "adminPasswordSecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'admin-password-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "adminPasswordSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-username))
      (common-lisp:list
       (common-lisp:cons "adminUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "backupProgressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-backup-rate-in-mega-bytes-per-second))
      (common-lisp:list
       (common-lisp:cons "currentBackupRateInMegaBytesPerSecond"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elapsed-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "elapsedTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-seconds-to-completion))
      (common-lisp:list
       (common-lisp:cons "estimatedSecondsToCompletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-arn))
      (common-lisp:list
       (common-lisp:cons "namespaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "ownerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-arn))
      (common-lisp:list
       (common-lisp:cons "snapshotArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-create-time))
      (common-lisp:list
       (common-lisp:cons "snapshotCreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-remaining-days))
      (common-lisp:list
       (common-lisp:cons "snapshotRemainingDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "snapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-start-time))
      (common-lisp:list
       (common-lisp:cons "snapshotRetentionStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-backup-size-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "totalBackupSizeInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (snapshot-copy-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-snapshot-copy-configuration-"))
   (destination-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (destination-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or namespace-name common-lisp:null))
   (snapshot-copy-configuration-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-copy-configuration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'snapshot-copy-configuration
                    'make-snapshot-copy-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-copy-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-copy-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "destinationKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-region))
      (common-lisp:list
       (common-lisp:cons "destinationRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "snapshotCopyConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-configuration-id))
      (common-lisp:list
       (common-lisp:cons "snapshotCopyConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "snapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-copy-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype snapshot-copy-configurations ()
   '(trivial-types:proper-list snapshot-copy-configuration))
 (common-lisp:defun make-snapshot-copy-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            snapshot-copy-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshot-list () '(trivial-types:proper-list snapshot))
 (common-lisp:defun make-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype snapshot-name-prefix () 'common-lisp:string)
(common-lisp:deftype snapshot-status () 'common-lisp:string)
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-id-list () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun make-subnet-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-restore-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-restore-status-"))
   (message common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (new-table-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (progress-in-mega-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (recovery-point-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (request-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (snapshot-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-schema-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-table-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (table-restore-request-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-database-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (target-schema-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (total-data-in-mega-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-restore-status 'make-table-restore-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-restore-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-restore-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-table-name))
      (common-lisp:list
       (common-lisp:cons "newTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'progress-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "progressInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recovery-point-id))
      (common-lisp:list
       (common-lisp:cons "recoveryPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-time))
      (common-lisp:list
       (common-lisp:cons "requestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-database-name))
      (common-lisp:list
       (common-lisp:cons "sourceDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-schema-name))
      (common-lisp:list
       (common-lisp:cons "sourceSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table-name))
      (common-lisp:list
       (common-lisp:cons "sourceTableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-restore-request-id))
      (common-lisp:list
       (common-lisp:cons "tableRestoreRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-database-name))
      (common-lisp:list
       (common-lisp:cons "targetDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-schema-name))
      (common-lisp:list
       (common-lisp:cons "targetSchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-data-in-mega-bytes))
      (common-lisp:list
       (common-lisp:cons "totalDataInMegaBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-restore-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-restore-status-list ()
   '(trivial-types:proper-list table-restore-status))
 (common-lisp:defun make-table-restore-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-restore-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (target-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-action-"))
   (create-snapshot common-lisp:nil :type
    (common-lisp:or create-snapshot-schedule-action-parameters
                    common-lisp:null)))
 (common-lisp:export (common-lisp:list 'target-action 'make-target-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-snapshot))
      (common-lisp:list
       (common-lisp:cons "createSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (redshift-serverless-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       throttling-exception-code)
      (message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-code
                    'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (redshift-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-custom-domain-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-custom-domain-association-request-"))
   (custom-domain-certificate-arn
    (common-lisp:error ":customdomaincertificatearn is required") :type
    (common-lisp:or custom-domain-certificate-arn-string common-lisp:null))
   (custom-domain-name (common-lisp:error ":customdomainname is required")
    :type (common-lisp:or custom-domain-name common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-custom-domain-association-request
                    'make-update-custom-domain-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-domain-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-domain-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-domain-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-custom-domain-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-custom-domain-association-response-"))
   (custom-domain-certificate-arn common-lisp:nil :type
    (common-lisp:or custom-domain-certificate-arn-string common-lisp:null))
   (custom-domain-certificate-expiry-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (custom-domain-name common-lisp:nil :type
    (common-lisp:or custom-domain-name common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-custom-domain-association-response
                    'make-update-custom-domain-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-domain-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-domain-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-expiry-time))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateExpiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-custom-domain-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoint-access-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-endpoint-access-request-"))
   (endpoint-name (common-lisp:error ":endpointname is required") :type
    (common-lisp:or string common-lisp:null))
   (vpc-security-group-ids common-lisp:nil :type
    (common-lisp:or vpc-security-group-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-access-request
                    'make-update-endpoint-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "endpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "vpcSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoint-access-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-endpoint-access-response-"))
   (endpoint common-lisp:nil :type
    (common-lisp:or endpoint-access common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-access-response
                    'make-update-endpoint-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-namespace-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-namespace-request-"))
   (admin-password-secret-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (admin-user-password common-lisp:nil :type
    (common-lisp:or db-password common-lisp:null))
   (admin-username common-lisp:nil :type
    (common-lisp:or db-user common-lisp:null))
   (default-iam-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (iam-roles common-lisp:nil :type
    (common-lisp:or iam-role-arn-list common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (log-exports common-lisp:nil :type
    (common-lisp:or log-export-list common-lisp:null))
   (manage-admin-password common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (namespace-name (common-lisp:error ":namespacename is required") :type
    (common-lisp:or namespace-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-namespace-request 'make-update-namespace-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-namespace-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-namespace-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'admin-password-secret-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "adminPasswordSecretKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-user-password))
      (common-lisp:list
       (common-lisp:cons "adminUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'admin-username))
      (common-lisp:list
       (common-lisp:cons "adminUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "defaultIamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-roles))
      (common-lisp:list
       (common-lisp:cons "iamRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-exports))
      (common-lisp:list
       (common-lisp:cons "logExports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manage-admin-password))
      (common-lisp:list
       (common-lisp:cons "manageAdminPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-namespace-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-namespace-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-namespace-response-"))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-namespace-response
                    'make-update-namespace-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-namespace-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-namespace-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-namespace-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-scheduled-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-scheduled-action-request-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (scheduled-action-description common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (scheduled-action-name
    (common-lisp:error ":scheduledactionname is required") :type
    (common-lisp:or scheduled-action-name common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (target-action common-lisp:nil :type
    (common-lisp:or target-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-scheduled-action-request
                    'make-update-scheduled-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-description))
      (common-lisp:list
       (common-lisp:cons "scheduledActionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-name))
      (common-lisp:list
       (common-lisp:cons "scheduledActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-action))
      (common-lisp:list
       (common-lisp:cons "targetAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-scheduled-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-scheduled-action-response-"))
   (scheduled-action common-lisp:nil :type
    (common-lisp:or scheduled-action-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-scheduled-action-response
                    'make-update-scheduled-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-action))
      (common-lisp:list
       (common-lisp:cons "scheduledAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-snapshot-copy-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-snapshot-copy-configuration-request-"))
   (snapshot-copy-configuration-id
    (common-lisp:error ":snapshotcopyconfigurationid is required") :type
    (common-lisp:or string common-lisp:null))
   (snapshot-retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-snapshot-copy-configuration-request
                    'make-update-snapshot-copy-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-copy-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-copy-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-configuration-id))
      (common-lisp:list
       (common-lisp:cons "snapshotCopyConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-retention-period))
      (common-lisp:list
       (common-lisp:cons "snapshotRetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-copy-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-snapshot-copy-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-snapshot-copy-configuration-response-"))
   (snapshot-copy-configuration
    (common-lisp:error ":snapshotcopyconfiguration is required") :type
    (common-lisp:or snapshot-copy-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-snapshot-copy-configuration-response
                    'make-update-snapshot-copy-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-copy-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-copy-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-copy-configuration))
      (common-lisp:list
       (common-lisp:cons "snapshotCopyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-copy-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-snapshot-request-"))
   (retention-period common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (snapshot-name (common-lisp:error ":snapshotname is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-snapshot-request 'make-update-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-name))
      (common-lisp:list
       (common-lisp:cons "snapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-snapshot-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-snapshot-response-"))
   (snapshot common-lisp:nil :type (common-lisp:or snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-snapshot-response 'make-update-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot))
      (common-lisp:list
       (common-lisp:cons "snapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-usage-limit-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-usage-limit-request-"))
   (amount common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (breach-action common-lisp:nil :type
    (common-lisp:or usage-limit-breach-action common-lisp:null))
   (usage-limit-id (common-lisp:error ":usagelimitid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-usage-limit-request
                    'make-update-usage-limit-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-usage-limit-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-usage-limit-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breach-action))
      (common-lisp:list
       (common-lisp:cons "breachAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit-id))
      (common-lisp:list
       (common-lisp:cons "usageLimitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-usage-limit-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-usage-limit-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-usage-limit-response-"))
   (usage-limit common-lisp:nil :type
    (common-lisp:or usage-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-usage-limit-response
                    'make-update-usage-limit-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-usage-limit-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-usage-limit-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit))
      (common-lisp:list
       (common-lisp:cons "usageLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-usage-limit-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workgroup-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workgroup-request-"))
   (base-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (config-parameters common-lisp:nil :type
    (common-lisp:or config-parameter-list common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-id-list common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-id-list common-lisp:null))
   (workgroup-name (common-lisp:error ":workgroupname is required") :type
    (common-lisp:or workgroup-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workgroup-request 'make-update-workgroup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workgroup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workgroup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-capacity))
      (common-lisp:list
       (common-lisp:cons "baseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-parameters))
      (common-lisp:list
       (common-lisp:cons "configParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "enhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "maxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workgroup-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workgroup-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workgroup-response-"))
   (workgroup (common-lisp:error ":workgroup is required") :type
    (common-lisp:or workgroup common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workgroup-response
                    'make-update-workgroup-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workgroup-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workgroup-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup))
      (common-lisp:list
       (common-lisp:cons "workgroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workgroup-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (usage-limit (:copier common-lisp:nil)
      (:conc-name "struct-shape-usage-limit-"))
   (amount common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (breach-action common-lisp:nil :type
    (common-lisp:or usage-limit-breach-action common-lisp:null))
   (period common-lisp:nil :type
    (common-lisp:or usage-limit-period common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (usage-limit-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (usage-limit-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (usage-type common-lisp:nil :type
    (common-lisp:or usage-limit-usage-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'usage-limit 'make-usage-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount))
      (common-lisp:list
       (common-lisp:cons "amount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'breach-action))
      (common-lisp:list
       (common-lisp:cons "breachAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit-arn))
      (common-lisp:list
       (common-lisp:cons "usageLimitArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-limit-id))
      (common-lisp:list
       (common-lisp:cons "usageLimitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-type))
      (common-lisp:list
       (common-lisp:cons "usageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage-limit))
   common-lisp:nil))
(common-lisp:deftype usage-limit-breach-action () 'common-lisp:string)
(common-lisp:deftype usage-limit-period () 'common-lisp:string)
(common-lisp:deftype usage-limit-usage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype usage-limits () '(trivial-types:proper-list usage-limit))
 (common-lisp:defun make-usage-limits
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage-limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (redshift-serverless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-endpoint-"))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or network-interface-list common-lisp:null))
   (vpc-endpoint-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc-endpoint 'make-vpc-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "vpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-endpoint-list ()
   '(trivial-types:proper-list vpc-endpoint))
 (common-lisp:defun make-vpc-endpoint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-ids () '(trivial-types:proper-list string))
 (common-lisp:defun make-vpc-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpc-security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-id-list ()
   '(trivial-types:proper-list vpc-security-group-id))
 (common-lisp:defun make-vpc-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-security-group-membership (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-security-group-membership-"))
   (status common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-security-group-id common-lisp:nil :type
    (common-lisp:or vpc-security-group-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-security-group-membership
                    'make-vpc-security-group-membership))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-security-group-id))
      (common-lisp:list
       (common-lisp:cons "vpcSecurityGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-security-group-membership))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-membership-list ()
   '(trivial-types:proper-list vpc-security-group-membership))
 (common-lisp:defun make-vpc-security-group-membership-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-security-group-membership))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workgroup (:copier common-lisp:nil)
      (:conc-name "struct-shape-workgroup-"))
   (base-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (config-parameters common-lisp:nil :type
    (common-lisp:or config-parameter-list common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (cross-account-vpcs common-lisp:nil :type
    (common-lisp:or vpc-ids common-lisp:null))
   (custom-domain-certificate-arn common-lisp:nil :type
    (common-lisp:or custom-domain-certificate-arn-string common-lisp:null))
   (custom-domain-certificate-expiry-time common-lisp:nil :type
    (common-lisp:or synthetic-timestamp-date-time common-lisp:null))
   (custom-domain-name common-lisp:nil :type
    (common-lisp:or custom-domain-name common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or endpoint common-lisp:null))
   (enhanced-vpc-routing common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-capacity common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (namespace-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (patch-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-id-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or workgroup-status common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-id-list common-lisp:null))
   (workgroup-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (workgroup-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (workgroup-name common-lisp:nil :type
    (common-lisp:or workgroup-name common-lisp:null))
   (workgroup-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workgroup 'make-workgroup))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workgroup))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workgroup))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-capacity))
      (common-lisp:list
       (common-lisp:cons "baseCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-parameters))
      (common-lisp:list
       (common-lisp:cons "configParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-account-vpcs))
      (common-lisp:list
       (common-lisp:cons "crossAccountVpcs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-domain-certificate-expiry-time))
      (common-lisp:list
       (common-lisp:cons "customDomainCertificateExpiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain-name))
      (common-lisp:list
       (common-lisp:cons "customDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enhanced-vpc-routing))
      (common-lisp:list
       (common-lisp:cons "enhancedVpcRouting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "maxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace-name))
      (common-lisp:list
       (common-lisp:cons "namespaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-version))
      (common-lisp:list
       (common-lisp:cons "patchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "securityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "subnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-arn))
      (common-lisp:list
       (common-lisp:cons "workgroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-id))
      (common-lisp:list
       (common-lisp:cons "workgroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-name))
      (common-lisp:list
       (common-lisp:cons "workgroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workgroup-version))
      (common-lisp:list
       (common-lisp:cons "workgroupVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workgroup))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workgroup-list () '(trivial-types:proper-list workgroup))
 (common-lisp:defun make-workgroup-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workgroup))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workgroup-name () 'common-lisp:string)
(common-lisp:deftype workgroup-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun convert-recovery-point-to-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-point-id retention-period
                     snapshot-name tags)
   (common-lisp:declare
    (common-lisp:ignorable recovery-point-id retention-period snapshot-name
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-convert-recovery-point-to-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ConvertRecoveryPointToSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'convert-recovery-point-to-snapshot))
(common-lisp:progn
 (common-lisp:defun create-custom-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-domain-certificate-arn
                     custom-domain-name workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable custom-domain-certificate-arn custom-domain-name
     workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-domain-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "CreateCustomDomainAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-custom-domain-association))
(common-lisp:progn
 (common-lisp:defun create-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name owner-account subnet-ids
                     vpc-security-group-ids workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name owner-account subnet-ids
     vpc-security-group-ids workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-endpoint-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "CreateEndpointAccess"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-endpoint-access))
(common-lisp:progn
 (common-lisp:defun create-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-password-secret-kms-key-id
                     admin-user-password admin-username db-name
                     default-iam-role-arn iam-roles kms-key-id log-exports
                     manage-admin-password namespace-name
                     redshift-idc-application-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable admin-password-secret-kms-key-id admin-user-password
     admin-username db-name default-iam-role-arn iam-roles kms-key-id
     log-exports manage-admin-password namespace-name
     redshift-idc-application-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "CreateNamespace"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-namespace))
(common-lisp:progn
 (common-lisp:defun create-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled end-time namespace-name role-arn
                     schedule scheduled-action-description
                     scheduled-action-name start-time target-action)
   (common-lisp:declare
    (common-lisp:ignorable enabled end-time namespace-name role-arn schedule
     scheduled-action-description scheduled-action-name start-time
     target-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-scheduled-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "CreateScheduledAction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-scheduled-action))
(common-lisp:progn
 (common-lisp:defun create-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key namespace-name retention-period
                     snapshot-name tags)
   (common-lisp:declare
    (common-lisp:ignorable namespace-name retention-period snapshot-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "CreateSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-snapshot))
(common-lisp:progn
 (common-lisp:defun create-snapshot-copy-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-kms-key-id destination-region
                     namespace-name snapshot-retention-period)
   (common-lisp:declare
    (common-lisp:ignorable destination-kms-key-id destination-region
     namespace-name snapshot-retention-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-snapshot-copy-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "CreateSnapshotCopyConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-snapshot-copy-configuration))
(common-lisp:progn
 (common-lisp:defun create-usage-limit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key amount breach-action period resource-arn
                     usage-type)
   (common-lisp:declare
    (common-lisp:ignorable amount breach-action period resource-arn
     usage-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-usage-limit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "CreateUsageLimit"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-usage-limit))
(common-lisp:progn
 (common-lisp:defun create-workgroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key base-capacity config-parameters
                     enhanced-vpc-routing max-capacity namespace-name port
                     publicly-accessible security-group-ids subnet-ids tags
                     workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable base-capacity config-parameters enhanced-vpc-routing
     max-capacity namespace-name port publicly-accessible security-group-ids
     subnet-ids tags workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workgroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "CreateWorkgroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workgroup))
(common-lisp:progn
 (common-lisp:defun delete-custom-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-domain-name workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable custom-domain-name workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-domain-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteCustomDomainAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-custom-domain-association))
(common-lisp:progn
 (common-lisp:defun delete-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-endpoint-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteEndpointAccess"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-endpoint-access))
(common-lisp:progn
 (common-lisp:defun delete-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key final-snapshot-name
                     final-snapshot-retention-period namespace-name)
   (common-lisp:declare
    (common-lisp:ignorable final-snapshot-name final-snapshot-retention-period
     namespace-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteNamespace"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-namespace))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-action-name)
   (common-lisp:declare (common-lisp:ignorable scheduled-action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scheduled-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteScheduledAction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-scheduled-action))
(common-lisp:progn
 (common-lisp:defun delete-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-name)
   (common-lisp:declare (common-lisp:ignorable snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-snapshot-copy-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-copy-configuration-id)
   (common-lisp:declare (common-lisp:ignorable snapshot-copy-configuration-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-snapshot-copy-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteSnapshotCopyConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-snapshot-copy-configuration))
(common-lisp:progn
 (common-lisp:defun delete-usage-limit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key usage-limit-id)
   (common-lisp:declare (common-lisp:ignorable usage-limit-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-usage-limit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteUsageLimit"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-usage-limit))
(common-lisp:progn
 (common-lisp:defun delete-workgroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workgroup-name)
   (common-lisp:declare (common-lisp:ignorable workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workgroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteWorkgroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workgroup))
(common-lisp:progn
 (common-lisp:defun get-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-domain-name db-name
                     duration-seconds workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable custom-domain-name db-name duration-seconds
     workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-credentials-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetCredentials"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-credentials))
(common-lisp:progn
 (common-lisp:defun get-custom-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-domain-name workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable custom-domain-name workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-custom-domain-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetCustomDomainAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-custom-domain-association))
(common-lisp:progn
 (common-lisp:defun get-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-endpoint-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetEndpointAccess"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-endpoint-access))
(common-lisp:progn
 (common-lisp:defun get-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key namespace-name)
   (common-lisp:declare (common-lisp:ignorable namespace-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetNamespace"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-namespace))
(common-lisp:progn
 (common-lisp:defun get-recovery-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recovery-point-id)
   (common-lisp:declare (common-lisp:ignorable recovery-point-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-recovery-point-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetRecoveryPoint"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-recovery-point))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun get-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-action-name)
   (common-lisp:declare (common-lisp:ignorable scheduled-action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-scheduled-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetScheduledAction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-scheduled-action))
(common-lisp:progn
 (common-lisp:defun get-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key owner-account snapshot-arn snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable owner-account snapshot-arn snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-snapshot))
(common-lisp:progn
 (common-lisp:defun get-table-restore-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key table-restore-request-id)
   (common-lisp:declare (common-lisp:ignorable table-restore-request-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-restore-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetTableRestoreStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-table-restore-status))
(common-lisp:progn
 (common-lisp:defun get-usage-limit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key usage-limit-id)
   (common-lisp:declare (common-lisp:ignorable usage-limit-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-usage-limit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetUsageLimit"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-usage-limit))
(common-lisp:progn
 (common-lisp:defun get-workgroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workgroup-name)
   (common-lisp:declare (common-lisp:ignorable workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workgroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "GetWorkgroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-workgroup))
(common-lisp:progn
 (common-lisp:defun list-custom-domain-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-domain-certificate-arn
                     custom-domain-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable custom-domain-certificate-arn custom-domain-name
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-custom-domain-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListCustomDomainAssociations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-custom-domain-associations))
(common-lisp:progn
 (common-lisp:defun list-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token owner-account
                     vpc-id workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token owner-account vpc-id
     workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-endpoint-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListEndpointAccess"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-endpoint-access))
(common-lisp:progn
 (common-lisp:defun list-namespaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-namespaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListNamespaces"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-namespaces))
(common-lisp:progn
 (common-lisp:defun list-recovery-points
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time max-results namespace-arn
                     namespace-name next-token start-time)
   (common-lisp:declare
    (common-lisp:ignorable end-time max-results namespace-arn namespace-name
     next-token start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-recovery-points-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListRecoveryPoints"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-recovery-points))
(common-lisp:progn
 (common-lisp:defun list-scheduled-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results namespace-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results namespace-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scheduled-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListScheduledActions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-scheduled-actions))
(common-lisp:progn
 (common-lisp:defun list-snapshot-copy-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results namespace-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results namespace-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-snapshot-copy-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListSnapshotCopyConfigurations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-snapshot-copy-configurations))
(common-lisp:progn
 (common-lisp:defun list-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time max-results namespace-arn
                     namespace-name next-token owner-account start-time)
   (common-lisp:declare
    (common-lisp:ignorable end-time max-results namespace-arn namespace-name
     next-token owner-account start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListSnapshots"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-snapshots))
(common-lisp:progn
 (common-lisp:defun list-table-restore-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results namespace-name next-token
                     workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable max-results namespace-name next-token
     workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-table-restore-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListTableRestoreStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-table-restore-status))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-usage-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token resource-arn
                     usage-type)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token resource-arn usage-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-usage-limits-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListUsageLimits"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-usage-limits))
(common-lisp:progn
 (common-lisp:defun list-workgroups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token owner-account)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token owner-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workgroups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "ListWorkgroups"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workgroups))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy resource-arn)
   (common-lisp:declare (common-lisp:ignorable policy resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "PutResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun restore-from-recovery-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key namespace-name recovery-point-id
                     workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable namespace-name recovery-point-id workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-from-recovery-point-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "RestoreFromRecoveryPoint"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-from-recovery-point))
(common-lisp:progn
 (common-lisp:defun restore-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-password-secret-kms-key-id
                     manage-admin-password namespace-name owner-account
                     snapshot-arn snapshot-name workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable admin-password-secret-kms-key-id
     manage-admin-password namespace-name owner-account snapshot-arn
     snapshot-name workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-from-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "RestoreFromSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-from-snapshot))
(common-lisp:progn
 (common-lisp:defun restore-table-from-recovery-point
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activate-case-sensitive-identifier
                     namespace-name new-table-name recovery-point-id
                     source-database-name source-schema-name source-table-name
                     target-database-name target-schema-name workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable activate-case-sensitive-identifier namespace-name
     new-table-name recovery-point-id source-database-name source-schema-name
     source-table-name target-database-name target-schema-name workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-table-from-recovery-point-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "RestoreTableFromRecoveryPoint"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-table-from-recovery-point))
(common-lisp:progn
 (common-lisp:defun restore-table-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activate-case-sensitive-identifier
                     namespace-name new-table-name snapshot-name
                     source-database-name source-schema-name source-table-name
                     target-database-name target-schema-name workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable activate-case-sensitive-identifier namespace-name
     new-table-name snapshot-name source-database-name source-schema-name
     source-table-name target-database-name target-schema-name workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-table-from-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "RestoreTableFromSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-table-from-snapshot))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-custom-domain-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key custom-domain-certificate-arn
                     custom-domain-name workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable custom-domain-certificate-arn custom-domain-name
     workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-custom-domain-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateCustomDomainAssociation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-custom-domain-association))
(common-lisp:progn
 (common-lisp:defun update-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name vpc-security-group-ids)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name vpc-security-group-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-endpoint-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateEndpointAccess"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-endpoint-access))
(common-lisp:progn
 (common-lisp:defun update-namespace
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key admin-password-secret-kms-key-id
                     admin-user-password admin-username default-iam-role-arn
                     iam-roles kms-key-id log-exports manage-admin-password
                     namespace-name)
   (common-lisp:declare
    (common-lisp:ignorable admin-password-secret-kms-key-id admin-user-password
     admin-username default-iam-role-arn iam-roles kms-key-id log-exports
     manage-admin-password namespace-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-namespace-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateNamespace"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-namespace))
(common-lisp:progn
 (common-lisp:defun update-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enabled end-time role-arn schedule
                     scheduled-action-description scheduled-action-name
                     start-time target-action)
   (common-lisp:declare
    (common-lisp:ignorable enabled end-time role-arn schedule
     scheduled-action-description scheduled-action-name start-time
     target-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-scheduled-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateScheduledAction"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-scheduled-action))
(common-lisp:progn
 (common-lisp:defun update-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key retention-period snapshot-name)
   (common-lisp:declare (common-lisp:ignorable retention-period snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-snapshot))
(common-lisp:progn
 (common-lisp:defun update-snapshot-copy-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-copy-configuration-id
                     snapshot-retention-period)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-copy-configuration-id
     snapshot-retention-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-snapshot-copy-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateSnapshotCopyConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-snapshot-copy-configuration))
(common-lisp:progn
 (common-lisp:defun update-usage-limit
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key amount breach-action usage-limit-id)
   (common-lisp:declare
    (common-lisp:ignorable amount breach-action usage-limit-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-usage-limit-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateUsageLimit"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-usage-limit))
(common-lisp:progn
 (common-lisp:defun update-workgroup
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key base-capacity config-parameters
                     enhanced-vpc-routing max-capacity port publicly-accessible
                     security-group-ids subnet-ids workgroup-name)
   (common-lisp:declare
    (common-lisp:ignorable base-capacity config-parameters enhanced-vpc-routing
     max-capacity port publicly-accessible security-group-ids subnet-ids
     workgroup-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workgroup-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'redshift-serverless-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateWorkgroup"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workgroup))
