;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/entityresolution/api
  (:use)
  (:nicknames #:aws/entityresolution)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/entityresolution/api)
(common-lisp:progn
 (common-lisp:define-condition entityresolution-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'entityresolution-error))
(common-lisp:progn
 (common-lisp:defclass entityresolution-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "entityresolution"
                        :api-version "2018-05-10" :host-prefix
                        "entityresolution" :signing-name "entityresolution"
                        :global-host common-lisp:nil))
 (common-lisp:export 'entityresolution-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("ExceedsLimitException" . exceeds-limit-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (entityresolution-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype attribute-matching-model () 'common-lisp:string)
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aws-account-id-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun make-aws-account-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (entityresolution-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-id-mapping-workflow-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-id-mapping-workflow-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (id-mapping-techniques
    (common-lisp:error ":idmappingtechniques is required") :type
    (common-lisp:or id-mapping-techniques common-lisp:null))
   (input-source-config (common-lisp:error ":inputsourceconfig is required")
    :type
    (common-lisp:or id-mapping-workflow-input-source-config common-lisp:null))
   (output-source-config (common-lisp:error ":outputsourceconfig is required")
    :type
    (common-lisp:or id-mapping-workflow-output-source-config common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-id-mapping-workflow-input
                    'make-create-id-mapping-workflow-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-id-mapping-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-id-mapping-workflow-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'id-mapping-techniques))
      (common-lisp:list
       (common-lisp:cons "idMappingTechniques"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-config))
      (common-lisp:list
       (common-lisp:cons "inputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-source-config))
      (common-lisp:list
       (common-lisp:cons "outputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "workflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-id-mapping-workflow-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-id-mapping-workflow-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-id-mapping-workflow-output-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (id-mapping-techniques
    (common-lisp:error ":idmappingtechniques is required") :type
    (common-lisp:or id-mapping-techniques common-lisp:null))
   (input-source-config (common-lisp:error ":inputsourceconfig is required")
    :type
    (common-lisp:or id-mapping-workflow-input-source-config common-lisp:null))
   (output-source-config (common-lisp:error ":outputsourceconfig is required")
    :type
    (common-lisp:or id-mapping-workflow-output-source-config common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (workflow-arn (common-lisp:error ":workflowarn is required") :type
    (common-lisp:or id-mapping-workflow-arn common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-id-mapping-workflow-output
                    'make-create-id-mapping-workflow-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-id-mapping-workflow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-id-mapping-workflow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'id-mapping-techniques))
      (common-lisp:list
       (common-lisp:cons "idMappingTechniques"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-config))
      (common-lisp:list
       (common-lisp:cons "inputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-source-config))
      (common-lisp:list
       (common-lisp:cons "outputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-arn))
      (common-lisp:list
       (common-lisp:cons "workflowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "workflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-id-mapping-workflow-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-matching-workflow-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-matching-workflow-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (incremental-run-config common-lisp:nil :type
    (common-lisp:or incremental-run-config common-lisp:null))
   (input-source-config (common-lisp:error ":inputsourceconfig is required")
    :type (common-lisp:or input-source-config common-lisp:null))
   (output-source-config (common-lisp:error ":outputsourceconfig is required")
    :type (common-lisp:or output-source-config common-lisp:null))
   (resolution-techniques
    (common-lisp:error ":resolutiontechniques is required") :type
    (common-lisp:or resolution-techniques common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-matching-workflow-input
                    'make-create-matching-workflow-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-matching-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-matching-workflow-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incremental-run-config))
      (common-lisp:list
       (common-lisp:cons "incrementalRunConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-config))
      (common-lisp:list
       (common-lisp:cons "inputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-source-config))
      (common-lisp:list
       (common-lisp:cons "outputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolution-techniques))
      (common-lisp:list
       (common-lisp:cons "resolutionTechniques"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "workflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-matching-workflow-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-matching-workflow-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-matching-workflow-output-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (incremental-run-config common-lisp:nil :type
    (common-lisp:or incremental-run-config common-lisp:null))
   (input-source-config (common-lisp:error ":inputsourceconfig is required")
    :type (common-lisp:or input-source-config common-lisp:null))
   (output-source-config (common-lisp:error ":outputsourceconfig is required")
    :type (common-lisp:or output-source-config common-lisp:null))
   (resolution-techniques
    (common-lisp:error ":resolutiontechniques is required") :type
    (common-lisp:or resolution-techniques common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or string common-lisp:null))
   (workflow-arn (common-lisp:error ":workflowarn is required") :type
    (common-lisp:or matching-workflow-arn common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-matching-workflow-output
                    'make-create-matching-workflow-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-matching-workflow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-matching-workflow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incremental-run-config))
      (common-lisp:list
       (common-lisp:cons "incrementalRunConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-config))
      (common-lisp:list
       (common-lisp:cons "inputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-source-config))
      (common-lisp:list
       (common-lisp:cons "outputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolution-techniques))
      (common-lisp:list
       (common-lisp:cons "resolutionTechniques"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-arn))
      (common-lisp:list
       (common-lisp:cons "workflowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "workflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-matching-workflow-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-schema-mapping-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-schema-mapping-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (mapped-input-fields (common-lisp:error ":mappedinputfields is required")
    :type (common-lisp:or schema-input-attributes common-lisp:null))
   (schema-name (common-lisp:error ":schemaname is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-schema-mapping-input
                    'make-create-schema-mapping-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-mapping-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-mapping-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapped-input-fields))
      (common-lisp:list
       (common-lisp:cons "mappedInputFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-mapping-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-schema-mapping-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-schema-mapping-output-"))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description common-lisp:null))
   (mapped-input-fields (common-lisp:error ":mappedinputfields is required")
    :type (common-lisp:or schema-input-attributes common-lisp:null))
   (schema-arn (common-lisp:error ":schemaarn is required") :type
    (common-lisp:or schema-mapping-arn common-lisp:null))
   (schema-name (common-lisp:error ":schemaname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-schema-mapping-output
                    'make-create-schema-mapping-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-mapping-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-mapping-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapped-input-fields))
      (common-lisp:list
       (common-lisp:cons "mappedInputFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "schemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-mapping-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-id-mapping-workflow-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-id-mapping-workflow-input-"))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-id-mapping-workflow-input
                    'make-delete-id-mapping-workflow-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-id-mapping-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-id-mapping-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-id-mapping-workflow-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-id-mapping-workflow-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-id-mapping-workflow-output-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-id-mapping-workflow-output
                    'make-delete-id-mapping-workflow-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-id-mapping-workflow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-id-mapping-workflow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-id-mapping-workflow-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-matching-workflow-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-matching-workflow-input-"))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-matching-workflow-input
                    'make-delete-matching-workflow-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-matching-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-matching-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-matching-workflow-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-matching-workflow-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-matching-workflow-output-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-matching-workflow-output
                    'make-delete-matching-workflow-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-matching-workflow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-matching-workflow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-matching-workflow-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-schema-mapping-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-schema-mapping-input-"))
   (schema-name (common-lisp:error ":schemaname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-schema-mapping-input
                    'make-delete-schema-mapping-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-mapping-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-mapping-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-mapping-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-schema-mapping-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-schema-mapping-output-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-schema-mapping-output
                    'make-delete-schema-mapping-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-mapping-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-mapping-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-mapping-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype entity-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-details-"))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition exceeds-limit-exception
     (entityresolution-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       exceeds-limit-exception-message)
      (quota-name :initarg :quota-name :initform common-lisp:nil :reader
       exceeds-limit-exception-quota-name)
      (quota-value :initarg :quota-value :initform common-lisp:nil :reader
       exceeds-limit-exception-quota-value)))
 (common-lisp:export
  (common-lisp:list 'exceeds-limit-exception 'exceeds-limit-exception-message
                    'exceeds-limit-exception-quota-name
                    'exceeds-limit-exception-quota-value)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-id-mapping-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-id-mapping-job-input-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-id-mapping-job-input 'make-get-id-mapping-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-id-mapping-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-id-mapping-job-output-"))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (error-details common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or id-mapping-job-metrics common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-id-mapping-job-output
                    'make-get-id-mapping-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "errorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-id-mapping-workflow-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-id-mapping-workflow-input-"))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-id-mapping-workflow-input
                    'make-get-id-mapping-workflow-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-workflow-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-id-mapping-workflow-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-id-mapping-workflow-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (id-mapping-techniques
    (common-lisp:error ":idmappingtechniques is required") :type
    (common-lisp:or id-mapping-techniques common-lisp:null))
   (input-source-config (common-lisp:error ":inputsourceconfig is required")
    :type
    (common-lisp:or id-mapping-workflow-input-source-config common-lisp:null))
   (output-source-config (common-lisp:error ":outputsourceconfig is required")
    :type
    (common-lisp:or id-mapping-workflow-output-source-config common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (workflow-arn (common-lisp:error ":workflowarn is required") :type
    (common-lisp:or id-mapping-workflow-arn common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-id-mapping-workflow-output
                    'make-get-id-mapping-workflow-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-workflow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-workflow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'id-mapping-techniques))
      (common-lisp:list
       (common-lisp:cons "idMappingTechniques"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-config))
      (common-lisp:list
       (common-lisp:cons "inputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-source-config))
      (common-lisp:list
       (common-lisp:cons "outputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-arn))
      (common-lisp:list
       (common-lisp:cons "workflowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "workflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-id-mapping-workflow-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-match-id-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-match-id-input-"))
   (record (common-lisp:error ":record is required") :type
    (common-lisp:or record-attribute-map common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-match-id-input 'make-get-match-id-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-match-id-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-match-id-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record))
      (common-lisp:list
       (common-lisp:cons "record"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-match-id-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-match-id-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-match-id-output-"))
   (match-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-match-id-output 'make-get-match-id-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-match-id-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-match-id-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-id))
      (common-lisp:list
       (common-lisp:cons "matchId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-match-id-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-matching-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-matching-job-input-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-matching-job-input 'make-get-matching-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-matching-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-matching-job-output-"))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (error-details common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or job-metrics common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-matching-job-output 'make-get-matching-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "errorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-matching-workflow-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-matching-workflow-input-"))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-matching-workflow-input
                    'make-get-matching-workflow-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-workflow-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-matching-workflow-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-matching-workflow-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (incremental-run-config common-lisp:nil :type
    (common-lisp:or incremental-run-config common-lisp:null))
   (input-source-config (common-lisp:error ":inputsourceconfig is required")
    :type (common-lisp:or input-source-config common-lisp:null))
   (output-source-config (common-lisp:error ":outputsourceconfig is required")
    :type (common-lisp:or output-source-config common-lisp:null))
   (resolution-techniques
    (common-lisp:error ":resolutiontechniques is required") :type
    (common-lisp:or resolution-techniques common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (workflow-arn (common-lisp:error ":workflowarn is required") :type
    (common-lisp:or matching-workflow-arn common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-matching-workflow-output
                    'make-get-matching-workflow-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-workflow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-workflow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incremental-run-config))
      (common-lisp:list
       (common-lisp:cons "incrementalRunConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-config))
      (common-lisp:list
       (common-lisp:cons "inputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-source-config))
      (common-lisp:list
       (common-lisp:cons "outputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolution-techniques))
      (common-lisp:list
       (common-lisp:cons "resolutionTechniques"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-arn))
      (common-lisp:list
       (common-lisp:cons "workflowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "workflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-matching-workflow-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-provider-service-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-provider-service-input-"))
   (provider-name (common-lisp:error ":providername is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (provider-service-name
    (common-lisp:error ":providerservicename is required") :type
    (common-lisp:or provider-service-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-provider-service-input
                    'make-get-provider-service-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-provider-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-provider-service-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-provider-service-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-mapping-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-mapping-input-"))
   (schema-name (common-lisp:error ":schemaname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-mapping-input 'make-get-schema-mapping-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-mapping-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-mapping-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-mapping-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-mapping-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-mapping-output-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (has-workflows (common-lisp:error ":hasworkflows is required") :type
    (common-lisp:or boolean common-lisp:null))
   (mapped-input-fields (common-lisp:error ":mappedinputfields is required")
    :type (common-lisp:or schema-input-attributes common-lisp:null))
   (schema-arn (common-lisp:error ":schemaarn is required") :type
    (common-lisp:or schema-mapping-arn common-lisp:null))
   (schema-name (common-lisp:error ":schemaname is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-mapping-output
                    'make-get-schema-mapping-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-mapping-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-mapping-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-workflows))
      (common-lisp:list
       (common-lisp:cons "hasWorkflows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapped-input-fields))
      (common-lisp:list
       (common-lisp:cons "mappedInputFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "schemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-mapping-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (id-mapping-job-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-id-mapping-job-metrics-"))
   (input-records common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (records-not-processed common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (total-records-processed common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'id-mapping-job-metrics 'make-id-mapping-job-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-job-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-job-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-records))
      (common-lisp:list
       (common-lisp:cons "inputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'records-not-processed))
      (common-lisp:list
       (common-lisp:cons "recordsNotProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-records-processed))
      (common-lisp:list
       (common-lisp:cons "totalRecordsProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-job-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (id-mapping-techniques (:copier common-lisp:nil)
      (:conc-name "struct-shape-id-mapping-techniques-"))
   (id-mapping-type (common-lisp:error ":idmappingtype is required") :type
    (common-lisp:or id-mapping-type common-lisp:null))
   (provider-properties (common-lisp:error ":providerproperties is required")
    :type (common-lisp:or provider-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'id-mapping-techniques 'make-id-mapping-techniques))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-techniques))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-techniques))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id-mapping-type))
      (common-lisp:list
       (common-lisp:cons "idMappingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-properties))
      (common-lisp:list
       (common-lisp:cons "providerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-techniques))
   common-lisp:nil))
(common-lisp:deftype id-mapping-type () 'common-lisp:string)
(common-lisp:deftype id-mapping-workflow-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (id-mapping-workflow-input-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-id-mapping-workflow-input-source-"))
   (input-source-arn (common-lisp:error ":inputsourcearn is required") :type
    (common-lisp:or id-mapping-workflow-input-source-input-source-arnstring
                    common-lisp:null))
   (schema-name (common-lisp:error ":schemaname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'id-mapping-workflow-input-source
                    'make-id-mapping-workflow-input-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-workflow-input-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-workflow-input-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-arn))
      (common-lisp:list
       (common-lisp:cons "inputSourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-workflow-input-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype id-mapping-workflow-input-source-config ()
   '(trivial-types:proper-list id-mapping-workflow-input-source))
 (common-lisp:defun make-id-mapping-workflow-input-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            id-mapping-workflow-input-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype id-mapping-workflow-input-source-input-source-arnstring ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype id-mapping-workflow-list ()
   '(trivial-types:proper-list id-mapping-workflow-summary))
 (common-lisp:defun make-id-mapping-workflow-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            id-mapping-workflow-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (id-mapping-workflow-output-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-id-mapping-workflow-output-source-"))
   (kmsarn common-lisp:nil :type (common-lisp:or kmsarn common-lisp:null))
   (output-s3path (common-lisp:error ":outputs3path is required") :type
    (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'id-mapping-workflow-output-source
                    'make-id-mapping-workflow-output-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-workflow-output-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-workflow-output-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmsarn))
      (common-lisp:list
       (common-lisp:cons "KMSArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3path))
      (common-lisp:list
       (common-lisp:cons "outputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-workflow-output-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype id-mapping-workflow-output-source-config ()
   '(trivial-types:proper-list id-mapping-workflow-output-source))
 (common-lisp:defun make-id-mapping-workflow-output-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            id-mapping-workflow-output-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (id-mapping-workflow-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-id-mapping-workflow-summary-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (workflow-arn (common-lisp:error ":workflowarn is required") :type
    (common-lisp:or id-mapping-workflow-arn common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'id-mapping-workflow-summary
                    'make-id-mapping-workflow-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-workflow-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-workflow-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-arn))
      (common-lisp:list
       (common-lisp:cons "workflowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "workflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          id-mapping-workflow-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (incremental-run-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-incremental-run-config-"))
   (incremental-run-type common-lisp:nil :type
    (common-lisp:or incremental-run-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'incremental-run-config 'make-incremental-run-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          incremental-run-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          incremental-run-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incremental-run-type))
      (common-lisp:list
       (common-lisp:cons "incrementalRunType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          incremental-run-config))
   common-lisp:nil))
(common-lisp:deftype incremental-run-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-source-"))
   (apply-normalization common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (input-source-arn (common-lisp:error ":inputsourcearn is required") :type
    (common-lisp:or input-source-input-source-arnstring common-lisp:null))
   (schema-name (common-lisp:error ":schemaname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-source 'make-input-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-normalization))
      (common-lisp:list
       (common-lisp:cons "applyNormalization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-arn))
      (common-lisp:list
       (common-lisp:cons "inputSourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-source-config ()
   '(trivial-types:proper-list input-source))
 (common-lisp:defun make-input-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype input-source-input-source-arnstring () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (intermediate-source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-intermediate-source-configuration-"))
   (intermediate-s3path (common-lisp:error ":intermediates3path is required")
    :type (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'intermediate-source-configuration
                    'make-intermediate-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          intermediate-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          intermediate-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intermediate-s3path))
      (common-lisp:list
       (common-lisp:cons "intermediateS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          intermediate-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (entityresolution-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-list () '(trivial-types:proper-list job-summary))
 (common-lisp:defun make-job-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-metrics-"))
   (input-records common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (match-ids common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (records-not-processed common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (total-records-processed common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-metrics 'make-job-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-records))
      (common-lisp:list
       (common-lisp:cons "inputRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-ids))
      (common-lisp:list
       (common-lisp:cons "matchIDs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'records-not-processed))
      (common-lisp:list
       (common-lisp:cons "recordsNotProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-records-processed))
      (common-lisp:list
       (common-lisp:cons "totalRecordsProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-metrics))
   common-lisp:nil))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-summary-"))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:deftype kmsarn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-id-mapping-jobs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-id-mapping-jobs-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-id-mapping-jobs-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-id-mapping-jobs-input
                    'make-list-id-mapping-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-jobs-input))
   common-lisp:nil))
(common-lisp:deftype list-id-mapping-jobs-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-id-mapping-jobs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-id-mapping-jobs-output-"))
   (jobs common-lisp:nil :type (common-lisp:or job-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-id-mapping-jobs-output
                    'make-list-id-mapping-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-id-mapping-workflows-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-id-mapping-workflows-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-id-mapping-workflows-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-id-mapping-workflows-input
                    'make-list-id-mapping-workflows-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-workflows-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-workflows-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-workflows-input))
   common-lisp:nil))
(common-lisp:deftype list-id-mapping-workflows-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-id-mapping-workflows-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-id-mapping-workflows-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (workflow-summaries common-lisp:nil :type
    (common-lisp:or id-mapping-workflow-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-id-mapping-workflows-output
                    'make-list-id-mapping-workflows-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-workflows-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-workflows-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-summaries))
      (common-lisp:list
       (common-lisp:cons "workflowSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-id-mapping-workflows-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-matching-jobs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-matching-jobs-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-matching-jobs-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-matching-jobs-input 'make-list-matching-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-jobs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-jobs-input))
   common-lisp:nil))
(common-lisp:deftype list-matching-jobs-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-matching-jobs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-matching-jobs-output-"))
   (jobs common-lisp:nil :type (common-lisp:or job-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-matching-jobs-output
                    'make-list-matching-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-jobs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-jobs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-jobs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-matching-workflows-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-matching-workflows-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-matching-workflows-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-matching-workflows-input
                    'make-list-matching-workflows-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-workflows-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-workflows-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-workflows-input))
   common-lisp:nil))
(common-lisp:deftype list-matching-workflows-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-matching-workflows-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-matching-workflows-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (workflow-summaries common-lisp:nil :type
    (common-lisp:or matching-workflow-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-matching-workflows-output
                    'make-list-matching-workflows-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-workflows-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-workflows-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-summaries))
      (common-lisp:list
       (common-lisp:cons "workflowSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-matching-workflows-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-provider-services-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-provider-services-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-provider-services-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (provider-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-provider-services-input
                    'make-list-provider-services-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provider-services-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provider-services-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provider-services-input))
   common-lisp:nil))
(common-lisp:deftype list-provider-services-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-provider-services-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-provider-services-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (provider-service-summaries common-lisp:nil :type
    (common-lisp:or provider-service-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-provider-services-output
                    'make-list-provider-services-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-provider-services-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-provider-services-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-service-summaries))
      (common-lisp:list
       (common-lisp:cons "providerServiceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-provider-services-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-schema-mappings-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schema-mappings-input-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-schema-mappings-input-max-results-integer
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schema-mappings-input
                    'make-list-schema-mappings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-mappings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-mappings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-mappings-input))
   common-lisp:nil))
(common-lisp:deftype list-schema-mappings-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-schema-mappings-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-schema-mappings-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (schema-list common-lisp:nil :type
    (common-lisp:or schema-mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-schema-mappings-output
                    'make-list-schema-mappings-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-mappings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-mappings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-list))
      (common-lisp:list
       (common-lisp:cons "schemaList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-mappings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or venice-global-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-output-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:deftype matching-workflow-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype matching-workflow-list ()
   '(trivial-types:proper-list matching-workflow-summary))
 (common-lisp:defun make-matching-workflow-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            matching-workflow-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (matching-workflow-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-matching-workflow-summary-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (resolution-type (common-lisp:error ":resolutiontype is required") :type
    (common-lisp:or resolution-type common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (workflow-arn (common-lisp:error ":workflowarn is required") :type
    (common-lisp:or matching-workflow-arn common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'matching-workflow-summary
                    'make-matching-workflow-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          matching-workflow-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          matching-workflow-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-type))
      (common-lisp:list
       (common-lisp:cons "resolutionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-arn))
      (common-lisp:list
       (common-lisp:cons "workflowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "workflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          matching-workflow-summary))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (output-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-attribute-"))
   (hashed common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or attribute-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-attribute 'make-output-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hashed))
      (common-lisp:list
       (common-lisp:cons "hashed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-source-"))
   (kmsarn common-lisp:nil :type (common-lisp:or kmsarn common-lisp:null))
   (apply-normalization common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (output (common-lisp:error ":output is required") :type
    (common-lisp:or output-source-output-list common-lisp:null))
   (output-s3path (common-lisp:error ":outputs3path is required") :type
    (common-lisp:or s3path common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-source 'make-output-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmsarn))
      (common-lisp:list
       (common-lisp:cons "KMSArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-normalization))
      (common-lisp:list
       (common-lisp:cons "applyNormalization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3path))
      (common-lisp:list
       (common-lisp:cons "outputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-source-config ()
   '(trivial-types:proper-list output-source))
 (common-lisp:defun make-output-source-config
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype output-source-output-list ()
   '(trivial-types:proper-list output-attribute))
 (common-lisp:defun make-output-source-output-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (provider-endpoint-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-provider-endpoint-configuration-"))
   (marketplace-configuration common-lisp:nil :type
    (common-lisp:or provider-marketplace-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provider-endpoint-configuration
                    'make-provider-endpoint-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provider-endpoint-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provider-endpoint-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-configuration))
      (common-lisp:list
       (common-lisp:cons "marketplaceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provider-endpoint-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provider-intermediate-data-access-configuration (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-provider-intermediate-data-access-configuration-"))
   (aws-account-ids common-lisp:nil :type
    (common-lisp:or aws-account-id-list common-lisp:null))
   (required-bucket-actions common-lisp:nil :type
    (common-lisp:or required-bucket-actions-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provider-intermediate-data-access-configuration
                    'make-provider-intermediate-data-access-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provider-intermediate-data-access-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provider-intermediate-data-access-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-account-ids))
      (common-lisp:list
       (common-lisp:cons "awsAccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'required-bucket-actions))
      (common-lisp:list
       (common-lisp:cons "requiredBucketActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provider-intermediate-data-access-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provider-marketplace-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-provider-marketplace-configuration-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or string common-lisp:null))
   (data-set-id (common-lisp:error ":datasetid is required") :type
    (common-lisp:or string common-lisp:null))
   (listing-id (common-lisp:error ":listingid is required") :type
    (common-lisp:or string common-lisp:null))
   (revision-id (common-lisp:error ":revisionid is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provider-marketplace-configuration
                    'make-provider-marketplace-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provider-marketplace-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provider-marketplace-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-set-id))
      (common-lisp:list
       (common-lisp:cons "dataSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-id))
      (common-lisp:list
       (common-lisp:cons "listingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provider-marketplace-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (provider-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-provider-properties-"))
   (intermediate-source-configuration common-lisp:nil :type
    (common-lisp:or intermediate-source-configuration common-lisp:null))
   (provider-service-arn (common-lisp:error ":providerservicearn is required")
    :type (common-lisp:or provider-service-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provider-properties 'make-provider-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input provider-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input provider-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'intermediate-source-configuration))
      (common-lisp:list
       (common-lisp:cons "intermediateSourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-service-arn))
      (common-lisp:list
       (common-lisp:cons "providerServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input provider-properties))
   common-lisp:nil))
(common-lisp:deftype provider-service-arn () 'common-lisp:string)
(common-lisp:deftype provider-service-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provider-service-list ()
   '(trivial-types:proper-list provider-service-summary))
 (common-lisp:defun make-provider-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            provider-service-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (provider-service-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-provider-service-summary-"))
   (provider-name (common-lisp:error ":providername is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (provider-service-arn (common-lisp:error ":providerservicearn is required")
    :type (common-lisp:or provider-service-arn common-lisp:null))
   (provider-service-display-name
    (common-lisp:error ":providerservicedisplayname is required") :type
    (common-lisp:or provider-service-display-name common-lisp:null))
   (provider-service-name
    (common-lisp:error ":providerservicename is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (provider-service-type
    (common-lisp:error ":providerservicetype is required") :type
    (common-lisp:or service-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provider-service-summary 'make-provider-service-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provider-service-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provider-service-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "providerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-service-arn))
      (common-lisp:list
       (common-lisp:cons "providerServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-service-display-name))
      (common-lisp:list
       (common-lisp:cons "providerServiceDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-service-name))
      (common-lisp:list
       (common-lisp:cons "providerServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provider-service-type))
      (common-lisp:list
       (common-lisp:cons "providerServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provider-service-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype record-attribute-map () 'common-lisp:hash-table)
 (common-lisp:defun make-record-attribute-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype record-attribute-map-key-string () 'common-lisp:string)
(common-lisp:deftype record-attribute-map-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype required-bucket-actions-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-required-bucket-actions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resolution-techniques (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolution-techniques-"))
   (provider-properties common-lisp:nil :type
    (common-lisp:or provider-properties common-lisp:null))
   (resolution-type (common-lisp:error ":resolutiontype is required") :type
    (common-lisp:or resolution-type common-lisp:null))
   (rule-based-properties common-lisp:nil :type
    (common-lisp:or rule-based-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resolution-techniques 'make-resolution-techniques))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolution-techniques))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolution-techniques))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-properties))
      (common-lisp:list
       (common-lisp:cons "providerProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-type))
      (common-lisp:list
       (common-lisp:cons "resolutionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-based-properties))
      (common-lisp:list
       (common-lisp:cons "ruleBasedProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolution-techniques))
   common-lisp:nil))
(common-lisp:deftype resolution-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (entityresolution-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rule (:copier common-lisp:nil) (:conc-name "struct-shape-rule-"))
   (matching-keys (common-lisp:error ":matchingkeys is required") :type
    (common-lisp:or rule-matching-keys-list common-lisp:null))
   (rule-name (common-lisp:error ":rulename is required") :type
    (common-lisp:or rule-rule-name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matching-keys))
      (common-lisp:list
       (common-lisp:cons "matchingKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-based-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-based-properties-"))
   (attribute-matching-model
    (common-lisp:error ":attributematchingmodel is required") :type
    (common-lisp:or attribute-matching-model common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or rule-based-properties-rules-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-based-properties 'make-rule-based-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rule-based-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rule-based-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-matching-model))
      (common-lisp:list
       (common-lisp:cons "attributeMatchingModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rule-based-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-based-properties-rules-list ()
   '(trivial-types:proper-list rule))
 (common-lisp:defun make-rule-based-properties-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype rule-matching-keys-list ()
   '(trivial-types:proper-list attribute-name))
 (common-lisp:defun make-rule-matching-keys-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-rule-name-string () 'common-lisp:string)
(common-lisp:deftype s3path () 'common-lisp:string)
(common-lisp:deftype schema-attribute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schema-input-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-input-attribute-"))
   (field-name (common-lisp:error ":fieldname is required") :type
    (common-lisp:or attribute-name common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (match-key common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (sub-type common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or schema-attribute-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-input-attribute 'make-schema-input-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-input-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-input-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-key))
      (common-lisp:list
       (common-lisp:cons "matchKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-type))
      (common-lisp:list
       (common-lisp:cons "subType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-input-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-input-attributes ()
   '(trivial-types:proper-list schema-input-attribute))
 (common-lisp:defun make-schema-input-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-input-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schema-mapping-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype schema-mapping-list ()
   '(trivial-types:proper-list schema-mapping-summary))
 (common-lisp:defun make-schema-mapping-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-mapping-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (schema-mapping-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-mapping-summary-"))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (has-workflows (common-lisp:error ":hasworkflows is required") :type
    (common-lisp:or boolean common-lisp:null))
   (schema-arn (common-lisp:error ":schemaarn is required") :type
    (common-lisp:or schema-mapping-arn common-lisp:null))
   (schema-name (common-lisp:error ":schemaname is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-mapping-summary 'make-schema-mapping-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-mapping-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-mapping-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-workflows))
      (common-lisp:list
       (common-lisp:cons "hasWorkflows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "schemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-mapping-summary))
   common-lisp:nil))
(common-lisp:deftype service-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-id-mapping-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-id-mapping-job-input-"))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-id-mapping-job-input
                    'make-start-id-mapping-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-id-mapping-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-id-mapping-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-id-mapping-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-id-mapping-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-id-mapping-job-output-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-id-mapping-job-output
                    'make-start-id-mapping-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-id-mapping-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-id-mapping-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-id-mapping-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-matching-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-matching-job-input-"))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-matching-job-input 'make-start-matching-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-matching-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-matching-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-matching-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-matching-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-matching-job-output-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-matching-job-output
                    'make-start-matching-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-matching-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-matching-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-matching-job-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or venice-global-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (entityresolution-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-input-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or venice-global-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-output-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-id-mapping-workflow-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-id-mapping-workflow-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (id-mapping-techniques
    (common-lisp:error ":idmappingtechniques is required") :type
    (common-lisp:or id-mapping-techniques common-lisp:null))
   (input-source-config (common-lisp:error ":inputsourceconfig is required")
    :type
    (common-lisp:or id-mapping-workflow-input-source-config common-lisp:null))
   (output-source-config (common-lisp:error ":outputsourceconfig is required")
    :type
    (common-lisp:or id-mapping-workflow-output-source-config common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-id-mapping-workflow-input
                    'make-update-id-mapping-workflow-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-id-mapping-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-id-mapping-workflow-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'id-mapping-techniques))
      (common-lisp:list
       (common-lisp:cons "idMappingTechniques"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-config))
      (common-lisp:list
       (common-lisp:cons "inputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-source-config))
      (common-lisp:list
       (common-lisp:cons "outputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-id-mapping-workflow-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-id-mapping-workflow-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-id-mapping-workflow-output-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (id-mapping-techniques
    (common-lisp:error ":idmappingtechniques is required") :type
    (common-lisp:or id-mapping-techniques common-lisp:null))
   (input-source-config (common-lisp:error ":inputsourceconfig is required")
    :type
    (common-lisp:or id-mapping-workflow-input-source-config common-lisp:null))
   (output-source-config (common-lisp:error ":outputsourceconfig is required")
    :type
    (common-lisp:or id-mapping-workflow-output-source-config common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (workflow-arn (common-lisp:error ":workflowarn is required") :type
    (common-lisp:or id-mapping-workflow-arn common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-id-mapping-workflow-output
                    'make-update-id-mapping-workflow-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-id-mapping-workflow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-id-mapping-workflow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'id-mapping-techniques))
      (common-lisp:list
       (common-lisp:cons "idMappingTechniques"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-config))
      (common-lisp:list
       (common-lisp:cons "inputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-source-config))
      (common-lisp:list
       (common-lisp:cons "outputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-arn))
      (common-lisp:list
       (common-lisp:cons "workflowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "workflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-id-mapping-workflow-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-matching-workflow-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-matching-workflow-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (incremental-run-config common-lisp:nil :type
    (common-lisp:or incremental-run-config common-lisp:null))
   (input-source-config (common-lisp:error ":inputsourceconfig is required")
    :type (common-lisp:or input-source-config common-lisp:null))
   (output-source-config (common-lisp:error ":outputsourceconfig is required")
    :type (common-lisp:or output-source-config common-lisp:null))
   (resolution-techniques
    (common-lisp:error ":resolutiontechniques is required") :type
    (common-lisp:or resolution-techniques common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or string common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-matching-workflow-input
                    'make-update-matching-workflow-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-matching-workflow-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-matching-workflow-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incremental-run-config))
      (common-lisp:list
       (common-lisp:cons "incrementalRunConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-config))
      (common-lisp:list
       (common-lisp:cons "inputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-source-config))
      (common-lisp:list
       (common-lisp:cons "outputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolution-techniques))
      (common-lisp:list
       (common-lisp:cons "resolutionTechniques"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-matching-workflow-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-matching-workflow-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-matching-workflow-output-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (incremental-run-config common-lisp:nil :type
    (common-lisp:or incremental-run-config common-lisp:null))
   (input-source-config (common-lisp:error ":inputsourceconfig is required")
    :type (common-lisp:or input-source-config common-lisp:null))
   (output-source-config (common-lisp:error ":outputsourceconfig is required")
    :type (common-lisp:or output-source-config common-lisp:null))
   (resolution-techniques
    (common-lisp:error ":resolutiontechniques is required") :type
    (common-lisp:or resolution-techniques common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or string common-lisp:null))
   (workflow-name (common-lisp:error ":workflowname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-matching-workflow-output
                    'make-update-matching-workflow-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-matching-workflow-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-matching-workflow-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incremental-run-config))
      (common-lisp:list
       (common-lisp:cons "incrementalRunConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-config))
      (common-lisp:list
       (common-lisp:cons "inputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-source-config))
      (common-lisp:list
       (common-lisp:cons "outputSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolution-techniques))
      (common-lisp:list
       (common-lisp:cons "resolutionTechniques"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "workflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-matching-workflow-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-schema-mapping-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-schema-mapping-input-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (mapped-input-fields (common-lisp:error ":mappedinputfields is required")
    :type (common-lisp:or schema-input-attributes common-lisp:null))
   (schema-name (common-lisp:error ":schemaname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-schema-mapping-input
                    'make-update-schema-mapping-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-mapping-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-mapping-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapped-input-fields))
      (common-lisp:list
       (common-lisp:cons "mappedInputFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-mapping-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-schema-mapping-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-schema-mapping-output-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (mapped-input-fields (common-lisp:error ":mappedinputfields is required")
    :type (common-lisp:or schema-input-attributes common-lisp:null))
   (schema-arn (common-lisp:error ":schemaarn is required") :type
    (common-lisp:or schema-mapping-arn common-lisp:null))
   (schema-name (common-lisp:error ":schemaname is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-schema-mapping-output
                    'make-update-schema-mapping-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-mapping-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-mapping-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapped-input-fields))
      (common-lisp:list
       (common-lisp:cons "mappedInputFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "schemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-mapping-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (entityresolution-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype venice-global-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-id-mapping-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description id-mapping-techniques
                     input-source-config output-source-config role-arn tags
                     workflow-name)
   (common-lisp:declare
    (common-lisp:ignorable description id-mapping-techniques
     input-source-config output-source-config role-arn tags workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-id-mapping-workflow-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "POST"
        "/idmappingworkflows" "CreateIdMappingWorkflow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-id-mapping-workflow))
(common-lisp:progn
 (common-lisp:defun create-matching-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description incremental-run-config
                     input-source-config output-source-config
                     resolution-techniques role-arn tags workflow-name)
   (common-lisp:declare
    (common-lisp:ignorable description incremental-run-config
     input-source-config output-source-config resolution-techniques role-arn
     tags workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-matching-workflow-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "POST"
        "/matchingworkflows" "CreateMatchingWorkflow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-matching-workflow))
(common-lisp:progn
 (common-lisp:defun create-schema-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description mapped-input-fields
                     schema-name tags)
   (common-lisp:declare
    (common-lisp:ignorable description mapped-input-fields schema-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-schema-mapping-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "POST"
        "/schemas" "CreateSchemaMapping"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-schema-mapping))
(common-lisp:progn
 (common-lisp:defun delete-id-mapping-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-name)
   (common-lisp:declare (common-lisp:ignorable workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-id-mapping-workflow-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/idmappingworkflows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "DeleteIdMappingWorkflow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-id-mapping-workflow))
(common-lisp:progn
 (common-lisp:defun delete-matching-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-name)
   (common-lisp:declare (common-lisp:ignorable workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-matching-workflow-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/matchingworkflows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "DeleteMatchingWorkflow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-matching-workflow))
(common-lisp:progn
 (common-lisp:defun delete-schema-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-name)
   (common-lisp:declare (common-lisp:ignorable schema-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schema-mapping-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/schemas/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'schema-name))))
        "DeleteSchemaMapping"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-schema-mapping))
(common-lisp:progn
 (common-lisp:defun get-id-mapping-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id workflow-name)
   (common-lisp:declare (common-lisp:ignorable job-id workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-id-mapping-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/idmappingworkflows/~A/jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'job-id))))
        "GetIdMappingJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-id-mapping-job))
(common-lisp:progn
 (common-lisp:defun get-id-mapping-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-name)
   (common-lisp:declare (common-lisp:ignorable workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-id-mapping-workflow-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/idmappingworkflows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "GetIdMappingWorkflow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-id-mapping-workflow))
(common-lisp:progn
 (common-lisp:defun get-match-id
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key record workflow-name)
   (common-lisp:declare (common-lisp:ignorable record workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-match-id-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/matchingworkflows/~A/matches"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "GetMatchId"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-match-id))
(common-lisp:progn
 (common-lisp:defun get-matching-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id workflow-name)
   (common-lisp:declare (common-lisp:ignorable job-id workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-matching-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/matchingworkflows/~A/jobs/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input 'job-id))))
        "GetMatchingJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-matching-job))
(common-lisp:progn
 (common-lisp:defun get-matching-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-name)
   (common-lisp:declare (common-lisp:ignorable workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-matching-workflow-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/matchingworkflows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "GetMatchingWorkflow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-matching-workflow))
(common-lisp:progn
 (common-lisp:defun get-schema-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-name)
   (common-lisp:declare (common-lisp:ignorable schema-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-mapping-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/schemas/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'schema-name))))
        "GetSchemaMapping"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema-mapping))
(common-lisp:progn
 (common-lisp:defun list-id-mapping-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token workflow-name)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-id-mapping-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/idmappingworkflows/~A/jobs"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "ListIdMappingJobs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-id-mapping-jobs))
(common-lisp:progn
 (common-lisp:defun list-id-mapping-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-id-mapping-workflows-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        "/idmappingworkflows" "ListIdMappingWorkflows"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-id-mapping-workflows))
(common-lisp:progn
 (common-lisp:defun list-matching-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token workflow-name)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-matching-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/matchingworkflows/~A/jobs"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "ListMatchingJobs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-matching-jobs))
(common-lisp:progn
 (common-lisp:defun list-matching-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-matching-workflows-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        "/matchingworkflows" "ListMatchingWorkflows"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-matching-workflows))
(common-lisp:progn
 (common-lisp:defun list-provider-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token provider-name)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token provider-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-provider-services-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        "/providerservices" "ListProviderServices"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-provider-services))
(common-lisp:progn
 (common-lisp:defun list-schema-mappings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schema-mappings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        "/schemas" "ListSchemaMappings"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-schema-mappings))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-id-mapping-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-name)
   (common-lisp:declare (common-lisp:ignorable workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-id-mapping-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/idmappingworkflows/~A/jobs"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "StartIdMappingJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-id-mapping-job))
(common-lisp:progn
 (common-lisp:defun start-matching-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-name)
   (common-lisp:declare (common-lisp:ignorable workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-matching-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/matchingworkflows/~A/jobs"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "StartMatchingJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-matching-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-id-mapping-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description id-mapping-techniques
                     input-source-config output-source-config role-arn
                     workflow-name)
   (common-lisp:declare
    (common-lisp:ignorable description id-mapping-techniques
     input-source-config output-source-config role-arn workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-id-mapping-workflow-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/idmappingworkflows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "UpdateIdMappingWorkflow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-id-mapping-workflow))
(common-lisp:progn
 (common-lisp:defun update-matching-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description incremental-run-config
                     input-source-config output-source-config
                     resolution-techniques role-arn workflow-name)
   (common-lisp:declare
    (common-lisp:ignorable description incremental-run-config
     input-source-config output-source-config resolution-techniques role-arn
     workflow-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-matching-workflow-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/matchingworkflows/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'workflow-name))))
        "UpdateMatchingWorkflow"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-matching-workflow))
(common-lisp:progn
 (common-lisp:defun update-schema-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description mapped-input-fields
                     schema-name)
   (common-lisp:declare
    (common-lisp:ignorable description mapped-input-fields schema-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-schema-mapping-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'entityresolution-request aws-sdk/generator/operation::input "PUT"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/schemas/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'schema-name))))
        "UpdateSchemaMapping"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-schema-mapping))
