;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/discovery/api
  (:use)
  (:nicknames #:aws/discovery)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/discovery/api)
(common-lisp:progn
 (common-lisp:defclass discovery-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "discovery" :protocol
                        :json))
 (common-lisp:export 'discovery-request))
(common-lisp:progn
 (common-lisp:define-condition discovery-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'discovery-error))
(common-lisp:defvar *error-map*
  '(("AuthorizationErrorException" . authorization-error-exception)
    ("ConflictErrorException" . conflict-error-exception)
    ("HomeRegionNotSetException" . home-region-not-set-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("OperationNotPermittedException" . operation-not-permitted-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServerInternalErrorException" . server-internal-error-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-configuration-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-configuration-status-"))
   (agent-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (operation-succeeded common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-configuration-status
                    'make-agent-configuration-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-configuration-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-configuration-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-succeeded))
      (common-lisp:list
       (common-lisp:cons "operationSucceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-configuration-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-configuration-status-list ()
   '(trivial-types:proper-list agent-configuration-status))
 (common-lisp:defun |make-agent-configuration-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            agent-configuration-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-ids () '(trivial-types:proper-list agent-id))
 (common-lisp:defun |make-agent-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-info-"))
   (agent-id common-lisp:nil :type (common-lisp:or agent-id common-lisp:null))
   (host-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (agent-network-info-list common-lisp:nil :type
    (common-lisp:or agent-network-info-list common-lisp:null))
   (connector-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (health common-lisp:nil :type
    (common-lisp:or agent-status common-lisp:null))
   (last-health-ping-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (collection-status common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (agent-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (registered-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent-info 'make-agent-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-name))
      (common-lisp:list
       (common-lisp:cons "hostName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-network-info-list))
      (common-lisp:list
       (common-lisp:cons "agentNetworkInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "connectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-health-ping-time))
      (common-lisp:list
       (common-lisp:cons "lastHealthPingTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-status))
      (common-lisp:list
       (common-lisp:cons "collectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-type))
      (common-lisp:list
       (common-lisp:cons "agentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-time))
      (common-lisp:list
       (common-lisp:cons "registeredTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-network-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-network-info-"))
   (ip-address common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (mac-address common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-network-info 'make-agent-network-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-network-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-network-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "macAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-network-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-network-info-list ()
   '(trivial-types:proper-list agent-network-info))
 (common-lisp:defun |make-agent-network-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-network-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agents-info () '(trivial-types:proper-list agent-info))
 (common-lisp:defun |make-agents-info|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-description () 'common-lisp:string)
(common-lisp:deftype application-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-ids-list ()
   '(trivial-types:proper-list application-id))
 (common-lisp:defun |make-application-ids-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-configuration-items-to-application-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-associate-configuration-items-to-application-request-"))
   (application-configuration-id
    (common-lisp:error ":applicationconfigurationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (configuration-ids (common-lisp:error ":configurationids is required") :type
    (common-lisp:or configuration-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-configuration-items-to-application-request
                    'make-associate-configuration-items-to-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-configuration-id))
      (common-lisp:list
       (common-lisp:cons "applicationConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-configuration-items-to-application-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-associate-configuration-items-to-application-response-")))
 (common-lisp:export
  (common-lisp:list 'associate-configuration-items-to-application-response
                    'make-associate-configuration-items-to-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-configuration-items-to-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition authorization-error-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       authorization-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'authorization-error-exception
                    'authorization-error-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-import-data-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-import-data-error-"))
   (import-task-id common-lisp:nil :type
    (common-lisp:or import-task-identifier common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or batch-delete-import-data-error-code common-lisp:null))
   (error-description common-lisp:nil :type
    (common-lisp:or batch-delete-import-data-error-description
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-import-data-error
                    'make-batch-delete-import-data-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-id))
      (common-lisp:list
       (common-lisp:cons "importTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-description))
      (common-lisp:list
       (common-lisp:cons "errorDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-error))
   common-lisp:nil))
(common-lisp:deftype batch-delete-import-data-error-code () 'common-lisp:string)
(common-lisp:deftype batch-delete-import-data-error-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-delete-import-data-error-list ()
   '(trivial-types:proper-list batch-delete-import-data-error))
 (common-lisp:defun |make-batch-delete-import-data-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-delete-import-data-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-import-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-import-data-request-"))
   (import-task-ids (common-lisp:error ":importtaskids is required") :type
    (common-lisp:or to-delete-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-import-data-request
                    'make-batch-delete-import-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-ids))
      (common-lisp:list
       (common-lisp:cons "importTaskIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-import-data-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-import-data-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or batch-delete-import-data-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-import-data-response
                    'make-batch-delete-import-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-import-data-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration () 'common-lisp:hash-table)
 (common-lisp:defun |make-configuration| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype configuration-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-id-list ()
   '(trivial-types:proper-list configuration-id))
 (common-lisp:defun |make-configuration-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-item-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-tag-"))
   (configuration-type common-lisp:nil :type
    (common-lisp:or configuration-item-type common-lisp:null))
   (configuration-id common-lisp:nil :type
    (common-lisp:or configuration-id common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null))
   (time-of-creation common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-tag 'make-configuration-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "configurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-of-creation))
      (common-lisp:list
       (common-lisp:cons "timeOfCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-tag-set ()
   '(trivial-types:proper-list configuration-tag))
 (common-lisp:defun |make-configuration-tag-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype configurations ()
   '(trivial-types:proper-list configuration))
 (common-lisp:defun |make-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configurations-download-url () 'common-lisp:string)
(common-lisp:deftype configurations-export-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-error-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-error-exception
                    'conflict-error-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (continuous-export-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-continuous-export-description-"))
   (export-id common-lisp:nil :type
    (common-lisp:or configurations-export-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or continuous-export-status common-lisp:null))
   (status-detail common-lisp:nil :type
    (common-lisp:or string-max255 common-lisp:null))
   (s3bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (stop-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null))
   (schema-storage-config common-lisp:nil :type
    (common-lisp:or schema-storage-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'continuous-export-description
                    'make-continuous-export-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-export-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-export-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-detail))
      (common-lisp:list
       (common-lisp:cons "statusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "stopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-storage-config))
      (common-lisp:list
       (common-lisp:cons "schemaStorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-export-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype continuous-export-descriptions ()
   '(trivial-types:proper-list continuous-export-description))
 (common-lisp:defun |make-continuous-export-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            continuous-export-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype continuous-export-ids ()
   '(trivial-types:proper-list configurations-export-id))
 (common-lisp:defun |make-continuous-export-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configurations-export-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype continuous-export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or application-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or application-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-response-"))
   (configuration-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-tags-request-"))
   (configuration-ids (common-lisp:error ":configurationids is required") :type
    (common-lisp:or configuration-id-list common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-tags-request 'make-create-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-tags-response-")))
 (common-lisp:export
  (common-lisp:list 'create-tags-response 'make-create-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (customer-agent-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-customer-agent-info-"))
   (active-agents (common-lisp:error ":activeagents is required") :type
    (common-lisp:or integer common-lisp:null))
   (healthy-agents (common-lisp:error ":healthyagents is required") :type
    (common-lisp:or integer common-lisp:null))
   (black-listed-agents (common-lisp:error ":blacklistedagents is required")
    :type (common-lisp:or integer common-lisp:null))
   (shutdown-agents (common-lisp:error ":shutdownagents is required") :type
    (common-lisp:or integer common-lisp:null))
   (unhealthy-agents (common-lisp:error ":unhealthyagents is required") :type
    (common-lisp:or integer common-lisp:null))
   (total-agents (common-lisp:error ":totalagents is required") :type
    (common-lisp:or integer common-lisp:null))
   (unknown-agents (common-lisp:error ":unknownagents is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customer-agent-info 'make-customer-agent-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input customer-agent-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input customer-agent-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-agents))
      (common-lisp:list
       (common-lisp:cons "activeAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-agents))
      (common-lisp:list
       (common-lisp:cons "healthyAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'black-listed-agents))
      (common-lisp:list
       (common-lisp:cons "blackListedAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shutdown-agents))
      (common-lisp:list
       (common-lisp:cons "shutdownAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-agents))
      (common-lisp:list
       (common-lisp:cons "unhealthyAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-agents))
      (common-lisp:list
       (common-lisp:cons "totalAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown-agents))
      (common-lisp:list
       (common-lisp:cons "unknownAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input customer-agent-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (customer-agentless-collector-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-customer-agentless-collector-info-"))
   (active-agentless-collectors
    (common-lisp:error ":activeagentlesscollectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (healthy-agentless-collectors
    (common-lisp:error ":healthyagentlesscollectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (deny-listed-agentless-collectors
    (common-lisp:error ":denylistedagentlesscollectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (shutdown-agentless-collectors
    (common-lisp:error ":shutdownagentlesscollectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (unhealthy-agentless-collectors
    (common-lisp:error ":unhealthyagentlesscollectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (total-agentless-collectors
    (common-lisp:error ":totalagentlesscollectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (unknown-agentless-collectors
    (common-lisp:error ":unknownagentlesscollectors is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customer-agentless-collector-info
                    'make-customer-agentless-collector-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-agentless-collector-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-agentless-collector-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "activeAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'healthy-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "healthyAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deny-listed-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "denyListedAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shutdown-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "shutdownAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "unhealthyAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "totalAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unknown-agentless-collectors))
      (common-lisp:list
       (common-lisp:cons "unknownAgentlessCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-agentless-collector-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (customer-connector-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-customer-connector-info-"))
   (active-connectors (common-lisp:error ":activeconnectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (healthy-connectors (common-lisp:error ":healthyconnectors is required")
    :type (common-lisp:or integer common-lisp:null))
   (black-listed-connectors
    (common-lisp:error ":blacklistedconnectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (shutdown-connectors (common-lisp:error ":shutdownconnectors is required")
    :type (common-lisp:or integer common-lisp:null))
   (unhealthy-connectors (common-lisp:error ":unhealthyconnectors is required")
    :type (common-lisp:or integer common-lisp:null))
   (total-connectors (common-lisp:error ":totalconnectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (unknown-connectors (common-lisp:error ":unknownconnectors is required")
    :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customer-connector-info 'make-customer-connector-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-connector-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-connector-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-connectors))
      (common-lisp:list
       (common-lisp:cons "activeConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-connectors))
      (common-lisp:list
       (common-lisp:cons "healthyConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'black-listed-connectors))
      (common-lisp:list
       (common-lisp:cons "blackListedConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shutdown-connectors))
      (common-lisp:list
       (common-lisp:cons "shutdownConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-connectors))
      (common-lisp:list
       (common-lisp:cons "unhealthyConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-connectors))
      (common-lisp:list
       (common-lisp:cons "totalConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unknown-connectors))
      (common-lisp:list
       (common-lisp:cons "unknownConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-connector-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (customer-me-collector-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-customer-me-collector-info-"))
   (active-me-collectors (common-lisp:error ":activemecollectors is required")
    :type (common-lisp:or integer common-lisp:null))
   (healthy-me-collectors
    (common-lisp:error ":healthymecollectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (deny-listed-me-collectors
    (common-lisp:error ":denylistedmecollectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (shutdown-me-collectors
    (common-lisp:error ":shutdownmecollectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (unhealthy-me-collectors
    (common-lisp:error ":unhealthymecollectors is required") :type
    (common-lisp:or integer common-lisp:null))
   (total-me-collectors (common-lisp:error ":totalmecollectors is required")
    :type (common-lisp:or integer common-lisp:null))
   (unknown-me-collectors
    (common-lisp:error ":unknownmecollectors is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customer-me-collector-info
                    'make-customer-me-collector-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-me-collector-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-me-collector-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-me-collectors))
      (common-lisp:list
       (common-lisp:cons "activeMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'healthy-me-collectors))
      (common-lisp:list
       (common-lisp:cons "healthyMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deny-listed-me-collectors))
      (common-lisp:list
       (common-lisp:cons "denyListedMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shutdown-me-collectors))
      (common-lisp:list
       (common-lisp:cons "shutdownMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unhealthy-me-collectors))
      (common-lisp:list
       (common-lisp:cons "unhealthyMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-me-collectors))
      (common-lisp:list
       (common-lisp:cons "totalMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unknown-me-collectors))
      (common-lisp:list
       (common-lisp:cons "unknownMeCollectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-me-collector-info))
   common-lisp:nil))
(common-lisp:deftype data-source () 'common-lisp:string)
(common-lisp:deftype database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-applications-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-applications-request-"))
   (configuration-ids (common-lisp:error ":configurationids is required") :type
    (common-lisp:or application-ids-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-applications-request
                    'make-delete-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-applications-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-applications-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-applications-response
                    'make-delete-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-request-"))
   (configuration-ids (common-lisp:error ":configurationids is required") :type
    (common-lisp:or configuration-id-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-tags-request 'make-delete-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-tags-response 'make-delete-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-agents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-agents-request-"))
   (agent-ids common-lisp:nil :type
    (common-lisp:or agent-ids common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-agents-request 'make-describe-agents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-ids))
      (common-lisp:list
       (common-lisp:cons "agentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-agents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-agents-response-"))
   (agents-info common-lisp:nil :type
    (common-lisp:or agents-info common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-agents-response 'make-describe-agents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agents-info))
      (common-lisp:list
       (common-lisp:cons "agentsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-configurations-attribute ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-describe-configurations-attribute|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype describe-configurations-attributes ()
   '(trivial-types:proper-list describe-configurations-attribute))
 (common-lisp:defun |make-describe-configurations-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-configurations-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-configurations-request-"))
   (configuration-ids (common-lisp:error ":configurationids is required") :type
    (common-lisp:or configuration-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-configurations-request
                    'make-describe-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-configurations-response-"))
   (configurations common-lisp:nil :type
    (common-lisp:or describe-configurations-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-configurations-response
                    'make-describe-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configurations-response))
   common-lisp:nil))
(common-lisp:deftype describe-continuous-exports-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-continuous-exports-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-continuous-exports-request-"))
   (export-ids common-lisp:nil :type
    (common-lisp:or continuous-export-ids common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or describe-continuous-exports-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-continuous-exports-request
                    'make-describe-continuous-exports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-ids))
      (common-lisp:list
       (common-lisp:cons "exportIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-continuous-exports-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-continuous-exports-response-"))
   (descriptions common-lisp:nil :type
    (common-lisp:or continuous-export-descriptions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-continuous-exports-response
                    'make-describe-continuous-exports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'descriptions))
      (common-lisp:list
       (common-lisp:cons "descriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-continuous-exports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-export-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-export-configurations-request-"))
   (export-ids common-lisp:nil :type
    (common-lisp:or export-ids common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-export-configurations-request
                    'make-describe-export-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-ids))
      (common-lisp:list
       (common-lisp:cons "exportIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-export-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-export-configurations-response-"))
   (exports-info common-lisp:nil :type
    (common-lisp:or exports-info common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-export-configurations-response
                    'make-describe-export-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exports-info))
      (common-lisp:list
       (common-lisp:cons "exportsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-export-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-export-tasks-request-"))
   (export-ids common-lisp:nil :type
    (common-lisp:or export-ids common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or export-filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-request
                    'make-describe-export-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-ids))
      (common-lisp:list
       (common-lisp:cons "exportIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-export-tasks-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-export-tasks-response-"))
   (exports-info common-lisp:nil :type
    (common-lisp:or exports-info common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-export-tasks-response
                    'make-describe-export-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exports-info))
      (common-lisp:list
       (common-lisp:cons "exportsInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-export-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-import-tasks-filter-list ()
   '(trivial-types:proper-list import-task-filter))
 (common-lisp:defun |make-describe-import-tasks-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-task-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype describe-import-tasks-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-import-tasks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-import-tasks-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or describe-import-tasks-filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or describe-import-tasks-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-import-tasks-request
                    'make-describe-import-tasks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-import-tasks-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-import-tasks-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (tasks common-lisp:nil :type
    (common-lisp:or import-task-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-import-tasks-response
                    'make-describe-import-tasks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-import-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-request-"))
   (filters common-lisp:nil :type
    (common-lisp:or tag-filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-request 'make-describe-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-tags-response-"))
   (tags common-lisp:nil :type
    (common-lisp:or configuration-tag-set common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-response 'make-describe-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-configuration-items-from-application-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-configuration-items-from-application-request-"))
   (application-configuration-id
    (common-lisp:error ":applicationconfigurationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (configuration-ids (common-lisp:error ":configurationids is required") :type
    (common-lisp:or configuration-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-configuration-items-from-application-request
                    'make-disassociate-configuration-items-from-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-configuration-id))
      (common-lisp:list
       (common-lisp:cons "applicationConfigurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-ids))
      (common-lisp:list
       (common-lisp:cons "configurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-configuration-items-from-application-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-configuration-items-from-application-response-")))
 (common-lisp:export
  (common-lisp:list 'disassociate-configuration-items-from-application-response
                    'make-disassociate-configuration-items-from-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-configuration-items-from-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-configurations-response-"))
   (export-id common-lisp:nil :type
    (common-lisp:or configurations-export-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-configurations-response
                    'make-export-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-configurations-response))
   common-lisp:nil))
(common-lisp:deftype export-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype export-data-formats ()
   '(trivial-types:proper-list export-data-format))
 (common-lisp:defun |make-export-data-formats|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-data-format))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (export-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-values common-lisp:null))
   (condition (common-lisp:error ":condition is required") :type
    (common-lisp:or condition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'export-filter 'make-export-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-filters ()
   '(trivial-types:proper-list export-filter))
 (common-lisp:defun |make-export-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype export-ids ()
   '(trivial-types:proper-list configurations-export-id))
 (common-lisp:defun |make-export-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configurations-export-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (export-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-info-"))
   (export-id (common-lisp:error ":exportid is required") :type
    (common-lisp:or configurations-export-id common-lisp:null))
   (export-status (common-lisp:error ":exportstatus is required") :type
    (common-lisp:or export-status common-lisp:null))
   (status-message (common-lisp:error ":statusmessage is required") :type
    (common-lisp:or export-status-message common-lisp:null))
   (configurations-download-url common-lisp:nil :type
    (common-lisp:or configurations-download-url common-lisp:null))
   (export-request-time (common-lisp:error ":exportrequesttime is required")
    :type (common-lisp:or export-request-time common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (requested-start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (requested-end-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'export-info 'make-export-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-status))
      (common-lisp:list
       (common-lisp:cons "exportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configurations-download-url))
      (common-lisp:list
       (common-lisp:cons "configurationsDownloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-request-time))
      (common-lisp:list
       (common-lisp:cons "exportRequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "isTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requested-start-time))
      (common-lisp:list
       (common-lisp:cons "requestedStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-end-time))
      (common-lisp:list
       (common-lisp:cons "requestedEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-info))
   common-lisp:nil))
(common-lisp:deftype export-request-time () 'common-lisp:string)
(common-lisp:deftype export-status () 'common-lisp:string)
(common-lisp:deftype export-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exports-info () '(trivial-types:proper-list export-info))
 (common-lisp:defun |make-exports-info|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-values common-lisp:null))
   (condition (common-lisp:error ":condition is required") :type
    (common-lisp:or condition common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-discovery-summary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-discovery-summary-request-")))
 (common-lisp:export
  (common-lisp:list 'get-discovery-summary-request
                    'make-get-discovery-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-discovery-summary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-discovery-summary-response-"))
   (servers common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (applications common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (servers-mapped-to-applications common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (servers-mappedto-tags common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (agent-summary common-lisp:nil :type
    (common-lisp:or customer-agent-info common-lisp:null))
   (connector-summary common-lisp:nil :type
    (common-lisp:or customer-connector-info common-lisp:null))
   (me-collector-summary common-lisp:nil :type
    (common-lisp:or customer-me-collector-info common-lisp:null))
   (agentless-collector-summary common-lisp:nil :type
    (common-lisp:or customer-agentless-collector-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-discovery-summary-response
                    'make-get-discovery-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'servers))
      (common-lisp:list
       (common-lisp:cons "servers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'servers-mapped-to-applications))
      (common-lisp:list
       (common-lisp:cons "serversMappedToApplications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'servers-mappedto-tags))
      (common-lisp:list
       (common-lisp:cons "serversMappedtoTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-summary))
      (common-lisp:list
       (common-lisp:cons "agentSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-summary))
      (common-lisp:list
       (common-lisp:cons "connectorSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'me-collector-summary))
      (common-lisp:list
       (common-lisp:cons "meCollectorSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agentless-collector-summary))
      (common-lisp:list
       (common-lisp:cons "agentlessCollectorSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-discovery-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition home-region-not-set-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       home-region-not-set-exception-message)))
 (common-lisp:export
  (common-lisp:list 'home-region-not-set-exception
                    'home-region-not-set-exception-message)))
(common-lisp:deftype import-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-task-"))
   (import-task-id common-lisp:nil :type
    (common-lisp:or import-task-identifier common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or import-task-name common-lisp:null))
   (import-url common-lisp:nil :type
    (common-lisp:or import-url common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or import-status common-lisp:null))
   (import-request-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (import-completion-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (import-deleted-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (server-import-success common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (server-import-failure common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (application-import-success common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (application-import-failure common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (errors-and-failed-entries-zip common-lisp:nil :type
    (common-lisp:or s3presigned-url common-lisp:null)))
 (common-lisp:export (common-lisp:list 'import-task 'make-import-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-task-id))
      (common-lisp:list
       (common-lisp:cons "importTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-url))
      (common-lisp:list
       (common-lisp:cons "importUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-request-time))
      (common-lisp:list
       (common-lisp:cons "importRequestTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-completion-time))
      (common-lisp:list
       (common-lisp:cons "importCompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-deleted-time))
      (common-lisp:list
       (common-lisp:cons "importDeletedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-import-success))
      (common-lisp:list
       (common-lisp:cons "serverImportSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-import-failure))
      (common-lisp:list
       (common-lisp:cons "serverImportFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-import-success))
      (common-lisp:list
       (common-lisp:cons "applicationImportSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-import-failure))
      (common-lisp:list
       (common-lisp:cons "applicationImportFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'errors-and-failed-entries-zip))
      (common-lisp:list
       (common-lisp:cons "errorsAndFailedEntriesZip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-task-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-task-filter-"))
   (name common-lisp:nil :type
    (common-lisp:or import-task-filter-name common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or import-task-filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-task-filter 'make-import-task-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-task-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-task-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-task-filter))
   common-lisp:nil))
(common-lisp:deftype import-task-filter-name () 'common-lisp:string)
(common-lisp:deftype import-task-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype import-task-filter-value-list ()
   '(trivial-types:proper-list import-task-filter-value))
 (common-lisp:defun |make-import-task-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            import-task-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype import-task-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype import-task-list ()
   '(trivial-types:proper-list import-task))
 (common-lisp:defun |make-import-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype import-task-name () 'common-lisp:string)
(common-lisp:deftype import-url () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-value-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-value-exception
                    'invalid-parameter-value-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-configurations-request-"))
   (configuration-type (common-lisp:error ":configurationtype is required")
    :type (common-lisp:or configuration-item-type common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (order-by common-lisp:nil :type
    (common-lisp:or order-by-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-configurations-request
                    'make-list-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-type))
      (common-lisp:list
       (common-lisp:cons "configurationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-configurations-response-"))
   (configurations common-lisp:nil :type
    (common-lisp:or configurations common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-configurations-response
                    'make-list-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-server-neighbors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-server-neighbors-request-"))
   (configuration-id (common-lisp:error ":configurationid is required") :type
    (common-lisp:or configuration-id common-lisp:null))
   (port-information-needed common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (neighbor-configuration-ids common-lisp:nil :type
    (common-lisp:or configuration-id-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-server-neighbors-request
                    'make-list-server-neighbors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'port-information-needed))
      (common-lisp:list
       (common-lisp:cons "portInformationNeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'neighbor-configuration-ids))
      (common-lisp:list
       (common-lisp:cons "neighborConfigurationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-server-neighbors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-server-neighbors-response-"))
   (neighbors (common-lisp:error ":neighbors is required") :type
    (common-lisp:or neighbor-details-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (known-dependency-count common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-server-neighbors-response
                    'make-list-server-neighbors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neighbors))
      (common-lisp:list
       (common-lisp:cons "neighbors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'known-dependency-count))
      (common-lisp:list
       (common-lisp:cons "knownDependencyCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-neighbors-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (neighbor-connection-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-neighbor-connection-detail-"))
   (source-server-id (common-lisp:error ":sourceserverid is required") :type
    (common-lisp:or configuration-id common-lisp:null))
   (destination-server-id
    (common-lisp:error ":destinationserverid is required") :type
    (common-lisp:or configuration-id common-lisp:null))
   (destination-port common-lisp:nil :type
    (common-lisp:or boxed-integer common-lisp:null))
   (transport-protocol common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (connections-count (common-lisp:error ":connectionscount is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'neighbor-connection-detail
                    'make-neighbor-connection-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          neighbor-connection-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          neighbor-connection-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-server-id))
      (common-lisp:list
       (common-lisp:cons "sourceServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-server-id))
      (common-lisp:list
       (common-lisp:cons "destinationServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-port))
      (common-lisp:list
       (common-lisp:cons "destinationPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-protocol))
      (common-lisp:list
       (common-lisp:cons "transportProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections-count))
      (common-lisp:list
       (common-lisp:cons "connectionsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          neighbor-connection-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype neighbor-details-list ()
   '(trivial-types:proper-list neighbor-connection-detail))
 (common-lisp:defun |make-neighbor-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            neighbor-connection-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-not-permitted-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-not-permitted-exception
                    'operation-not-permitted-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (order-by-element (:copier common-lisp:nil)
      (:conc-name "struct-shape-order-by-element-"))
   (field-name (common-lisp:error ":fieldname is required") :type
    (common-lisp:or order-by-element-field-name common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or |orderString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'order-by-element 'make-order-by-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order-by-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order-by-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order-by-element))
   common-lisp:nil))
(common-lisp:deftype order-by-element-field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype order-by-list ()
   '(trivial-types:proper-list order-by-element))
 (common-lisp:defun |make-order-by-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list order-by-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3presigned-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype schema-storage-config () 'common-lisp:hash-table)
 (common-lisp:defun |make-schema-storage-config|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition server-internal-error-exception
     (discovery-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       server-internal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'server-internal-error-exception
                    'server-internal-error-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-continuous-export-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-continuous-export-request-")))
 (common-lisp:export
  (common-lisp:list 'start-continuous-export-request
                    'make-start-continuous-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-continuous-export-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-continuous-export-response-"))
   (export-id common-lisp:nil :type
    (common-lisp:or configurations-export-id common-lisp:null))
   (s3bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or data-source common-lisp:null))
   (schema-storage-config common-lisp:nil :type
    (common-lisp:or schema-storage-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-continuous-export-response
                    'make-start-continuous-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-storage-config))
      (common-lisp:list
       (common-lisp:cons "schemaStorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-continuous-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-collection-by-agent-ids-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-data-collection-by-agent-ids-request-"))
   (agent-ids (common-lisp:error ":agentids is required") :type
    (common-lisp:or agent-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-collection-by-agent-ids-request
                    'make-start-data-collection-by-agent-ids-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-ids))
      (common-lisp:list
       (common-lisp:cons "agentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-collection-by-agent-ids-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-data-collection-by-agent-ids-response-"))
   (agents-configuration-status common-lisp:nil :type
    (common-lisp:or agent-configuration-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-collection-by-agent-ids-response
                    'make-start-data-collection-by-agent-ids-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agents-configuration-status))
      (common-lisp:list
       (common-lisp:cons "agentsConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-collection-by-agent-ids-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-export-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-export-task-request-"))
   (export-data-format common-lisp:nil :type
    (common-lisp:or export-data-formats common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or export-filters common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-export-task-request
                    'make-start-export-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-data-format))
      (common-lisp:list
       (common-lisp:cons "exportDataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-export-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-export-task-response-"))
   (export-id common-lisp:nil :type
    (common-lisp:or configurations-export-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-export-task-response
                    'make-start-export-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-import-task-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-import-task-request-"))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or import-task-name common-lisp:null))
   (import-url (common-lisp:error ":importurl is required") :type
    (common-lisp:or import-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-import-task-request
                    'make-start-import-task-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-url))
      (common-lisp:list
       (common-lisp:cons "importUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-import-task-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-import-task-response-"))
   (task common-lisp:nil :type (common-lisp:or import-task common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-import-task-response
                    'make-start-import-task-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-continuous-export-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-continuous-export-request-"))
   (export-id (common-lisp:error ":exportid is required") :type
    (common-lisp:or configurations-export-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-continuous-export-request
                    'make-stop-continuous-export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "exportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-continuous-export-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-continuous-export-response-"))
   (start-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null))
   (stop-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-continuous-export-response
                    'make-stop-continuous-export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "stopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-continuous-export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-data-collection-by-agent-ids-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-data-collection-by-agent-ids-request-"))
   (agent-ids (common-lisp:error ":agentids is required") :type
    (common-lisp:or agent-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-data-collection-by-agent-ids-request
                    'make-stop-data-collection-by-agent-ids-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-ids))
      (common-lisp:list
       (common-lisp:cons "agentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-data-collection-by-agent-ids-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-data-collection-by-agent-ids-response-"))
   (agents-configuration-status common-lisp:nil :type
    (common-lisp:or agent-configuration-status-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-data-collection-by-agent-ids-response
                    'make-stop-data-collection-by-agent-ids-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agents-configuration-status))
      (common-lisp:list
       (common-lisp:cons "agentsConfigurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-data-collection-by-agent-ids-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-max255 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or filter-name common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or filter-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-filter 'make-tag-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-filters () '(trivial-types:proper-list tag-filter))
 (common-lisp:defun |make-tag-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-set () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype to-delete-identifier-list ()
   '(trivial-types:proper-list import-task-identifier))
 (common-lisp:defun |make-to-delete-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list import-task-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-request-"))
   (configuration-id (common-lisp:error ":configurationid is required") :type
    (common-lisp:or application-id common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or application-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or application-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-id))
      (common-lisp:list
       (common-lisp:cons "configurationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-response-")))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:deftype |orderString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-configuration-items-to-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-configuration-id
                     configuration-ids)
   (common-lisp:declare
    (common-lisp:ignorable application-configuration-id configuration-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-configuration-items-to-application-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateConfigurationItemsToApplication"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-configuration-items-to-application))
(common-lisp:progn
 (common-lisp:defun batch-delete-import-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-task-ids)
   (common-lisp:declare (common-lisp:ignorable import-task-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-import-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "BatchDeleteImportData"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-import-data))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description)
   (common-lisp:declare (common-lisp:ignorable name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateApplication"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-ids tags)
   (common-lisp:declare (common-lisp:ignorable configuration-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateTags"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun delete-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-ids)
   (common-lisp:declare (common-lisp:ignorable configuration-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteApplications"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-applications))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-ids tags)
   (common-lisp:declare (common-lisp:ignorable configuration-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteTags"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun describe-agents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-ids filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable agent-ids filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-agents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAgents"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-agents))
(common-lisp:progn
 (common-lisp:defun describe-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-ids)
   (common-lisp:declare (common-lisp:ignorable configuration-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-configurations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeConfigurations"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-configurations))
(common-lisp:progn
 (common-lisp:defun describe-continuous-exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable export-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-continuous-exports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeContinuousExports"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-continuous-exports))
(common-lisp:progn
 (common-lisp:defun describe-export-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable export-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-export-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeExportConfigurations"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-export-configurations))
(common-lisp:progn
 (common-lisp:defun describe-export-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-ids filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable export-ids filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-export-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeExportTasks"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-export-tasks))
(common-lisp:progn
 (common-lisp:defun describe-import-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-import-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeImportTasks"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-import-tasks))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTags"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun disassociate-configuration-items-from-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key application-configuration-id
                     configuration-ids)
   (common-lisp:declare
    (common-lisp:ignorable application-configuration-id configuration-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-configuration-items-from-application-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateConfigurationItemsFromApplication"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-configuration-items-from-application))
(common-lisp:progn
 (common-lisp:defun export-configurations ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'discovery-request :method "POST" :path "/"
                                :protocol :json :operation
                                "ExportConfigurations" :params
                                `(("Action" ,@"ExportConfigurations")
                                  ("Version" ,@"2015-11-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'export-configurations))
(common-lisp:progn
 (common-lisp:defun get-discovery-summary ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'discovery-request :method "POST" :path "/"
                                :protocol :json :operation
                                "GetDiscoverySummary" :params
                                `(("Action" ,@"GetDiscoverySummary")
                                  ("Version" ,@"2015-11-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-discovery-summary))
(common-lisp:progn
 (common-lisp:defun list-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-type filters max-results
                     next-token order-by)
   (common-lisp:declare
    (common-lisp:ignorable configuration-type filters max-results next-token
     order-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-configurations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListConfigurations"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configurations))
(common-lisp:progn
 (common-lisp:defun list-server-neighbors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-id port-information-needed
                     neighbor-configuration-ids max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-id port-information-needed
     neighbor-configuration-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-server-neighbors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListServerNeighbors"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-server-neighbors))
(common-lisp:progn
 (common-lisp:defun start-continuous-export ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'discovery-request :method "POST" :path "/"
                                :protocol :json :operation
                                "StartContinuousExport" :params
                                `(("Action" ,@"StartContinuousExport")
                                  ("Version" ,@"2015-11-01"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'start-continuous-export))
(common-lisp:progn
 (common-lisp:defun start-data-collection-by-agent-ids
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-ids)
   (common-lisp:declare (common-lisp:ignorable agent-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-data-collection-by-agent-ids-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartDataCollectionByAgentIds"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-data-collection-by-agent-ids))
(common-lisp:progn
 (common-lisp:defun start-export-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-data-format filters start-time
                     end-time)
   (common-lisp:declare
    (common-lisp:ignorable export-data-format filters start-time end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-export-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartExportTask"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-export-task))
(common-lisp:progn
 (common-lisp:defun start-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-request-token name import-url)
   (common-lisp:declare
    (common-lisp:ignorable client-request-token name import-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartImportTask"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-import-task))
(common-lisp:progn
 (common-lisp:defun stop-continuous-export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-id)
   (common-lisp:declare (common-lisp:ignorable export-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-continuous-export-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopContinuousExport"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-continuous-export))
(common-lisp:progn
 (common-lisp:defun stop-data-collection-by-agent-ids
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-ids)
   (common-lisp:declare (common-lisp:ignorable agent-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-data-collection-by-agent-ids-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopDataCollectionByAgentIds"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-data-collection-by-agent-ids))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-id name description)
   (common-lisp:declare
    (common-lisp:ignorable configuration-id name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'discovery-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateApplication"
                                                        "2015-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
