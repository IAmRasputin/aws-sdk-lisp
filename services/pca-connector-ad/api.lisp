;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/pca-connector-ad/api
  (:use)
  (:nicknames #:aws/pca-connector-ad)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/pca-connector-ad/api)
(common-lisp:progn
 (common-lisp:define-condition pca-connector-ad-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'pca-connector-ad-error))
(common-lisp:progn
 (common-lisp:defclass pca-connector-ad-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "pca-connector-ad"
                        :api-version "2018-05-10" :host-prefix
                        "pca-connector-ad" :signing-name "pca-connector-ad"
                        :global-host common-lisp:nil))
 (common-lisp:export 'pca-connector-ad-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (access-control-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-control-entry-"))
   (access-rights common-lisp:nil :type
    (common-lisp:or access-rights common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (group-display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (group-security-identifier common-lisp:nil :type
    (common-lisp:or group-security-identifier common-lisp:null))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-control-entry 'make-access-control-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-control-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-control-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rights))
      (common-lisp:list
       (common-lisp:cons "AccessRights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-display-name))
      (common-lisp:list
       (common-lisp:cons "GroupDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-security-identifier))
      (common-lisp:list
       (common-lisp:cons "GroupSecurityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-control-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-control-entry-list ()
   '(trivial-types:proper-list access-control-entry-summary))
 (common-lisp:defun make-access-control-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            access-control-entry-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (access-control-entry-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-control-entry-summary-"))
   (access-rights common-lisp:nil :type
    (common-lisp:or access-rights common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (group-display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (group-security-identifier common-lisp:nil :type
    (common-lisp:or group-security-identifier common-lisp:null))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-control-entry-summary
                    'make-access-control-entry-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-control-entry-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-control-entry-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rights))
      (common-lisp:list
       (common-lisp:cons "AccessRights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-display-name))
      (common-lisp:list
       (common-lisp:cons "GroupDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-security-identifier))
      (common-lisp:list
       (common-lisp:cons "GroupSecurityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-control-entry-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-right () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (access-rights (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-rights-"))
   (auto-enroll common-lisp:nil :type
    (common-lisp:or access-right common-lisp:null))
   (enroll common-lisp:nil :type
    (common-lisp:or access-right common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-rights 'make-access-rights))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-rights))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-rights))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enroll))
      (common-lisp:list
       (common-lisp:cons "AutoEnroll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enroll))
      (common-lisp:list
       (common-lisp:cons "Enroll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-rights))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-policies (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-policies-"))
   (critical common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (policies (common-lisp:error ":policies is required") :type
    (common-lisp:or application-policy-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-policies 'make-application-policies))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-policies))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-policies))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'critical))
      (common-lisp:list
       (common-lisp:cons "Critical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-policies))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (application-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-policy-"))
   (policy-object-identifier common-lisp:nil :type
    (common-lisp:or custom-object-identifier common-lisp:null))
   (policy-type common-lisp:nil :type
    (common-lisp:or application-policy-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-policy 'make-application-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-object-identifier))
      (common-lisp:list
       (common-lisp:cons "PolicyObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-policy-list ()
   '(trivial-types:proper-list application-policy))
 (common-lisp:defun make-application-policy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-policy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype application-policy-type () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype certificate-authority-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-validity (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-validity-"))
   (renewal-period (common-lisp:error ":renewal-period is required") :type
    (common-lisp:or validity-period common-lisp:null))
   (validity-period (common-lisp:error ":validity-period is required") :type
    (common-lisp:or validity-period common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-validity 'make-certificate-validity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-validity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-validity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-period))
      (common-lisp:list
       (common-lisp:cons "RenewalPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity-period))
      (common-lisp:list
       (common-lisp:cons "ValidityPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-validity))
   common-lisp:nil))
(common-lisp:deftype client-compatibility-v2 () 'common-lisp:string)
(common-lisp:deftype client-compatibility-v3 () 'common-lisp:string)
(common-lisp:deftype client-compatibility-v4 () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (connector (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-"))
   (arn common-lisp:nil :type (common-lisp:or connector-arn common-lisp:null))
   (certificate-authority-arn common-lisp:nil :type
    (common-lisp:or certificate-authority-arn common-lisp:null))
   (certificate-enrollment-policy-server-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or connector-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or connector-status-reason common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (vpc-information common-lisp:nil :type
    (common-lisp:or vpc-information common-lisp:null)))
 (common-lisp:export (common-lisp:list 'connector 'make-connector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-enrollment-policy-server-endpoint))
      (common-lisp:list
       (common-lisp:cons "CertificateEnrollmentPolicyServerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-information))
      (common-lisp:list
       (common-lisp:cons "VpcInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector))
   common-lisp:nil))
(common-lisp:deftype connector-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connector-list ()
   '(trivial-types:proper-list connector-summary))
 (common-lisp:defun make-connector-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connector-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connector-status () 'common-lisp:string)
(common-lisp:deftype connector-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connector-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-connector-summary-"))
   (arn common-lisp:nil :type (common-lisp:or connector-arn common-lisp:null))
   (certificate-authority-arn common-lisp:nil :type
    (common-lisp:or certificate-authority-arn common-lisp:null))
   (certificate-enrollment-policy-server-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or connector-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or connector-status-reason common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (vpc-information common-lisp:nil :type
    (common-lisp:or vpc-information common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connector-summary 'make-connector-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connector-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connector-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-enrollment-policy-server-endpoint))
      (common-lisp:list
       (common-lisp:cons "CertificateEnrollmentPolicyServerEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-information))
      (common-lisp:list
       (common-lisp:cons "VpcInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connector-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connector-request-"))
   (certificate-authority-arn
    (common-lisp:error ":certificate-authority-arn is required") :type
    (common-lisp:or certificate-authority-arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (vpc-information (common-lisp:error ":vpc-information is required") :type
    (common-lisp:or vpc-information common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connector-request 'make-create-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-information))
      (common-lisp:list
       (common-lisp:cons "VpcInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connector-response-"))
   (connector-arn common-lisp:nil :type
    (common-lisp:or connector-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connector-response
                    'make-create-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-directory-registration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-directory-registration-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (directory-id (common-lisp:error ":directory-id is required") :type
    (common-lisp:or directory-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-directory-registration-request
                    'make-create-directory-registration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-directory-registration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-directory-registration-response-"))
   (directory-registration-arn common-lisp:nil :type
    (common-lisp:or directory-registration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-directory-registration-response
                    'make-create-directory-registration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-registration-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryRegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-registration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-principal-name-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-principal-name-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (connector-arn (common-lisp:error ":connector-arn is required") :type
    (common-lisp:or connector-arn common-lisp:null))
   (directory-registration-arn
    (common-lisp:error ":directory-registration-arn is required") :type
    (common-lisp:or directory-registration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-principal-name-request
                    'make-create-service-principal-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-principal-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-principal-name-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-principal-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-group-access-control-entry-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-template-group-access-control-entry-request-"))
   (access-rights (common-lisp:error ":access-rights is required") :type
    (common-lisp:or access-rights common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (group-display-name (common-lisp:error ":group-display-name is required")
    :type (common-lisp:or display-name common-lisp:null))
   (group-security-identifier
    (common-lisp:error ":group-security-identifier is required") :type
    (common-lisp:or group-security-identifier common-lisp:null))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-group-access-control-entry-request
                    'make-create-template-group-access-control-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-group-access-control-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rights))
      (common-lisp:list
       (common-lisp:cons "AccessRights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-display-name))
      (common-lisp:list
       (common-lisp:cons "GroupDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'group-security-identifier))
      (common-lisp:list
       (common-lisp:cons "GroupSecurityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-group-access-control-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-request-"))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (connector-arn (common-lisp:error ":connector-arn is required") :type
    (common-lisp:or connector-arn common-lisp:null))
   (definition (common-lisp:error ":definition is required") :type
    (common-lisp:or template-definition common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or template-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-request 'make-create-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-template-response-"))
   (template-arn common-lisp:nil :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-template-response 'make-create-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype crypto-providers-list ()
   '(trivial-types:proper-list crypto-providers-list-member-string))
 (common-lisp:defun make-crypto-providers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            crypto-providers-list-member-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype crypto-providers-list-member-string () 'common-lisp:string)
(common-lisp:deftype custom-object-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connector-request-"))
   (connector-arn (common-lisp:error ":connector-arn is required") :type
    (common-lisp:or connector-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connector-request 'make-delete-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-directory-registration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-directory-registration-request-"))
   (directory-registration-arn
    (common-lisp:error ":directory-registration-arn is required") :type
    (common-lisp:or directory-registration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-directory-registration-request
                    'make-delete-directory-registration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-registration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-principal-name-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-principal-name-request-"))
   (connector-arn (common-lisp:error ":connector-arn is required") :type
    (common-lisp:or connector-arn common-lisp:null))
   (directory-registration-arn
    (common-lisp:error ":directory-registration-arn is required") :type
    (common-lisp:or directory-registration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-principal-name-request
                    'make-delete-service-principal-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-principal-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-principal-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-principal-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-template-group-access-control-entry-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-template-group-access-control-entry-request-"))
   (group-security-identifier
    (common-lisp:error ":group-security-identifier is required") :type
    (common-lisp:or group-security-identifier common-lisp:null))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-template-group-access-control-entry-request
                    'make-delete-template-group-access-control-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-group-access-control-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-template-request-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-template-request 'make-delete-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-template-request))
   common-lisp:nil))
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (directory-registration (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-registration-"))
   (arn common-lisp:nil :type
    (common-lisp:or directory-registration-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or directory-registration-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or directory-registration-status-reason common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'directory-registration 'make-directory-registration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration))
   common-lisp:nil))
(common-lisp:deftype directory-registration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype directory-registration-list ()
   '(trivial-types:proper-list directory-registration-summary))
 (common-lisp:defun make-directory-registration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            directory-registration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype directory-registration-status () 'common-lisp:string)
(common-lisp:deftype directory-registration-status-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (directory-registration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-registration-summary-"))
   (arn common-lisp:nil :type
    (common-lisp:or directory-registration-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or directory-registration-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or directory-registration-status-reason common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'directory-registration-summary
                    'make-directory-registration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          directory-registration-summary))
   common-lisp:nil))
(common-lisp:deftype display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (enrollment-flags-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-enrollment-flags-v2-"))
   (enable-key-reuse-on-nt-token-keyset-storage-full common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-symmetric-algorithms common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (no-security-extension common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (remove-invalid-certificate-from-personal-store common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (user-interaction-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enrollment-flags-v2 'make-enrollment-flags-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enrollment-flags-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enrollment-flags-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-key-reuse-on-nt-token-keyset-storage-full))
      (common-lisp:list
       (common-lisp:cons "EnableKeyReuseOnNtTokenKeysetStorageFull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-symmetric-algorithms))
      (common-lisp:list
       (common-lisp:cons "IncludeSymmetricAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-security-extension))
      (common-lisp:list
       (common-lisp:cons "NoSecurityExtension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-invalid-certificate-from-personal-store))
      (common-lisp:list
       (common-lisp:cons "RemoveInvalidCertificateFromPersonalStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-interaction-required))
      (common-lisp:list
       (common-lisp:cons "UserInteractionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enrollment-flags-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enrollment-flags-v3 (:copier common-lisp:nil)
      (:conc-name "struct-shape-enrollment-flags-v3-"))
   (enable-key-reuse-on-nt-token-keyset-storage-full common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-symmetric-algorithms common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (no-security-extension common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (remove-invalid-certificate-from-personal-store common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (user-interaction-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enrollment-flags-v3 'make-enrollment-flags-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enrollment-flags-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enrollment-flags-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-key-reuse-on-nt-token-keyset-storage-full))
      (common-lisp:list
       (common-lisp:cons "EnableKeyReuseOnNtTokenKeysetStorageFull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-symmetric-algorithms))
      (common-lisp:list
       (common-lisp:cons "IncludeSymmetricAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-security-extension))
      (common-lisp:list
       (common-lisp:cons "NoSecurityExtension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-invalid-certificate-from-personal-store))
      (common-lisp:list
       (common-lisp:cons "RemoveInvalidCertificateFromPersonalStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-interaction-required))
      (common-lisp:list
       (common-lisp:cons "UserInteractionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enrollment-flags-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enrollment-flags-v4 (:copier common-lisp:nil)
      (:conc-name "struct-shape-enrollment-flags-v4-"))
   (enable-key-reuse-on-nt-token-keyset-storage-full common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (include-symmetric-algorithms common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (no-security-extension common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (remove-invalid-certificate-from-personal-store common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (user-interaction-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enrollment-flags-v4 'make-enrollment-flags-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enrollment-flags-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enrollment-flags-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-key-reuse-on-nt-token-keyset-storage-full))
      (common-lisp:list
       (common-lisp:cons "EnableKeyReuseOnNtTokenKeysetStorageFull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-symmetric-algorithms))
      (common-lisp:list
       (common-lisp:cons "IncludeSymmetricAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-security-extension))
      (common-lisp:list
       (common-lisp:cons "NoSecurityExtension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-invalid-certificate-from-personal-store))
      (common-lisp:list
       (common-lisp:cons "RemoveInvalidCertificateFromPersonalStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-interaction-required))
      (common-lisp:list
       (common-lisp:cons "UserInteractionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enrollment-flags-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (extensions-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-extensions-v2-"))
   (application-policies common-lisp:nil :type
    (common-lisp:or application-policies common-lisp:null))
   (key-usage (common-lisp:error ":key-usage is required") :type
    (common-lisp:or key-usage common-lisp:null)))
 (common-lisp:export (common-lisp:list 'extensions-v2 'make-extensions-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extensions-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extensions-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-policies))
      (common-lisp:list
       (common-lisp:cons "ApplicationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extensions-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (extensions-v3 (:copier common-lisp:nil)
      (:conc-name "struct-shape-extensions-v3-"))
   (application-policies common-lisp:nil :type
    (common-lisp:or application-policies common-lisp:null))
   (key-usage (common-lisp:error ":key-usage is required") :type
    (common-lisp:or key-usage common-lisp:null)))
 (common-lisp:export (common-lisp:list 'extensions-v3 'make-extensions-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extensions-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extensions-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-policies))
      (common-lisp:list
       (common-lisp:cons "ApplicationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extensions-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (extensions-v4 (:copier common-lisp:nil)
      (:conc-name "struct-shape-extensions-v4-"))
   (application-policies common-lisp:nil :type
    (common-lisp:or application-policies common-lisp:null))
   (key-usage (common-lisp:error ":key-usage is required") :type
    (common-lisp:or key-usage common-lisp:null)))
 (common-lisp:export (common-lisp:list 'extensions-v4 'make-extensions-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extensions-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extensions-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-policies))
      (common-lisp:list
       (common-lisp:cons "ApplicationPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extensions-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (general-flags-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-general-flags-v2-"))
   (auto-enrollment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (machine-type common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'general-flags-v2 'make-general-flags-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input general-flags-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input general-flags-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enrollment))
      (common-lisp:list
       (common-lisp:cons "AutoEnrollment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'machine-type))
      (common-lisp:list
       (common-lisp:cons "MachineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input general-flags-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (general-flags-v3 (:copier common-lisp:nil)
      (:conc-name "struct-shape-general-flags-v3-"))
   (auto-enrollment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (machine-type common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'general-flags-v3 'make-general-flags-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input general-flags-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input general-flags-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enrollment))
      (common-lisp:list
       (common-lisp:cons "AutoEnrollment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'machine-type))
      (common-lisp:list
       (common-lisp:cons "MachineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input general-flags-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (general-flags-v4 (:copier common-lisp:nil)
      (:conc-name "struct-shape-general-flags-v4-"))
   (auto-enrollment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (machine-type common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'general-flags-v4 'make-general-flags-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input general-flags-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input general-flags-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-enrollment))
      (common-lisp:list
       (common-lisp:cons "AutoEnrollment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'machine-type))
      (common-lisp:list
       (common-lisp:cons "MachineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input general-flags-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-connector-request-"))
   (connector-arn (common-lisp:error ":connector-arn is required") :type
    (common-lisp:or connector-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connector-request 'make-get-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-connector-response-"))
   (connector common-lisp:nil :type
    (common-lisp:or connector common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connector-response 'make-get-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector))
      (common-lisp:list
       (common-lisp:cons "Connector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-directory-registration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-directory-registration-request-"))
   (directory-registration-arn
    (common-lisp:error ":directory-registration-arn is required") :type
    (common-lisp:or directory-registration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-directory-registration-request
                    'make-get-directory-registration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-directory-registration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-directory-registration-response-"))
   (directory-registration common-lisp:nil :type
    (common-lisp:or directory-registration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-directory-registration-response
                    'make-get-directory-registration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-registration))
      (common-lisp:list
       (common-lisp:cons "DirectoryRegistration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-registration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-principal-name-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-principal-name-request-"))
   (connector-arn (common-lisp:error ":connector-arn is required") :type
    (common-lisp:or connector-arn common-lisp:null))
   (directory-registration-arn
    (common-lisp:error ":directory-registration-arn is required") :type
    (common-lisp:or directory-registration-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-principal-name-request
                    'make-get-service-principal-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-principal-name-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-principal-name-response-"))
   (service-principal-name common-lisp:nil :type
    (common-lisp:or service-principal-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-principal-name-response
                    'make-get-service-principal-name-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-principal-name))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-principal-name-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-group-access-control-entry-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-template-group-access-control-entry-request-"))
   (group-security-identifier
    (common-lisp:error ":group-security-identifier is required") :type
    (common-lisp:or group-security-identifier common-lisp:null))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-group-access-control-entry-request
                    'make-get-template-group-access-control-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-group-access-control-entry-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-template-group-access-control-entry-response-"))
   (access-control-entry common-lisp:nil :type
    (common-lisp:or access-control-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-group-access-control-entry-response
                    'make-get-template-group-access-control-entry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-entry))
      (common-lisp:list
       (common-lisp:cons "AccessControlEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-group-access-control-entry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-template-request-"))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-request 'make-get-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-template-response-"))
   (template common-lisp:nil :type (common-lisp:or template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-template-response 'make-get-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template))
      (common-lisp:list
       (common-lisp:cons "Template"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-response))
   common-lisp:nil))
(common-lisp:deftype group-security-identifier () 'common-lisp:string)
(common-lisp:deftype hash-algorithm () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype key-spec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (key-usage (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-usage-"))
   (critical common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (usage-flags (common-lisp:error ":usage-flags is required") :type
    (common-lisp:or key-usage-flags common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-usage 'make-key-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'critical))
      (common-lisp:list
       (common-lisp:cons "Critical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-flags))
      (common-lisp:list
       (common-lisp:cons "UsageFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (key-usage-flags (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-usage-flags-"))
   (data-encipherment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (digital-signature common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (key-agreement common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (key-encipherment common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (non-repudiation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-usage-flags 'make-key-usage-flags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-usage-flags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-usage-flags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-encipherment))
      (common-lisp:list
       (common-lisp:cons "DataEncipherment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digital-signature))
      (common-lisp:list
       (common-lisp:cons "DigitalSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-agreement))
      (common-lisp:list
       (common-lisp:cons "KeyAgreement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-encipherment))
      (common-lisp:list
       (common-lisp:cons "KeyEncipherment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-repudiation))
      (common-lisp:list
       (common-lisp:cons "NonRepudiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-usage-flags))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (key-usage-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-usage-property-"))
   (property-flags common-lisp:nil :type
    (common-lisp:or key-usage-property-flags common-lisp:null))
   (property-type common-lisp:nil :type
    (common-lisp:or key-usage-property-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'key-usage-property 'make-key-usage-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-usage-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-usage-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-flags))
      (common-lisp:list
       (common-lisp:cons "PropertyFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-type))
      (common-lisp:list
       (common-lisp:cons "PropertyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-usage-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (key-usage-property-flags (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-usage-property-flags-"))
   (decrypt common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (key-agreement common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (sign common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'key-usage-property-flags 'make-key-usage-property-flags))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          key-usage-property-flags))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          key-usage-property-flags))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decrypt))
      (common-lisp:list
       (common-lisp:cons "Decrypt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-agreement))
      (common-lisp:list
       (common-lisp:cons "KeyAgreement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign))
      (common-lisp:list
       (common-lisp:cons "Sign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          key-usage-property-flags))
   common-lisp:nil))
(common-lisp:deftype key-usage-property-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-connectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connectors-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connectors-request 'make-list-connectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-connectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connectors-response-"))
   (connectors common-lisp:nil :type
    (common-lisp:or connector-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connectors-response 'make-list-connectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectors))
      (common-lisp:list
       (common-lisp:cons "Connectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-directory-registrations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-directory-registrations-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-directory-registrations-request
                    'make-list-directory-registrations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-directory-registrations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-directory-registrations-response-"))
   (directory-registrations common-lisp:nil :type
    (common-lisp:or directory-registration-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-directory-registrations-response
                    'make-list-directory-registrations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-registrations))
      (common-lisp:list
       (common-lisp:cons "DirectoryRegistrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-directory-registrations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-principal-names-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-principal-names-request-"))
   (directory-registration-arn
    (common-lisp:error ":directory-registration-arn is required") :type
    (common-lisp:or directory-registration-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-principal-names-request
                    'make-list-service-principal-names-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-principal-names-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-principal-names-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (service-principal-names common-lisp:nil :type
    (common-lisp:or service-principal-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-principal-names-response
                    'make-list-service-principal-names-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-principal-names))
      (common-lisp:list
       (common-lisp:cons "ServicePrincipalNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-principal-names-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-template-group-access-control-entries-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-template-group-access-control-entries-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-template-group-access-control-entries-request
                    'make-list-template-group-access-control-entries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-template-group-access-control-entries-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-template-group-access-control-entries-response-"))
   (access-control-entries common-lisp:nil :type
    (common-lisp:or access-control-entry-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-template-group-access-control-entries-response
                    'make-list-template-group-access-control-entries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-control-entries))
      (common-lisp:list
       (common-lisp:cons "AccessControlEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-template-group-access-control-entries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-templates-request-"))
   (connector-arn (common-lisp:error ":connector-arn is required") :type
    (common-lisp:or connector-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-templates-request 'make-list-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-templates-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (templates common-lisp:nil :type
    (common-lisp:or template-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-templates-response 'make-list-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'templates))
      (common-lisp:list
       (common-lisp:cons "Templates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-templates-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype private-key-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (private-key-attributes-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-key-attributes-v2-"))
   (crypto-providers common-lisp:nil :type
    (common-lisp:or crypto-providers-list common-lisp:null))
   (key-spec (common-lisp:error ":key-spec is required") :type
    (common-lisp:or key-spec common-lisp:null))
   (minimal-key-length (common-lisp:error ":minimal-key-length is required")
    :type
    (common-lisp:or private-key-attributes-v2minimal-key-length-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-key-attributes-v2
                    'make-private-key-attributes-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crypto-providers))
      (common-lisp:list
       (common-lisp:cons "CryptoProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimal-key-length))
      (common-lisp:list
       (common-lisp:cons "MinimalKeyLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v2))
   common-lisp:nil))
(common-lisp:deftype private-key-attributes-v2minimal-key-length-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (private-key-attributes-v3 (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-key-attributes-v3-"))
   (algorithm (common-lisp:error ":algorithm is required") :type
    (common-lisp:or private-key-algorithm common-lisp:null))
   (crypto-providers common-lisp:nil :type
    (common-lisp:or crypto-providers-list common-lisp:null))
   (key-spec (common-lisp:error ":key-spec is required") :type
    (common-lisp:or key-spec common-lisp:null))
   (key-usage-property (common-lisp:error ":key-usage-property is required")
    :type (common-lisp:or key-usage-property common-lisp:null))
   (minimal-key-length (common-lisp:error ":minimal-key-length is required")
    :type
    (common-lisp:or private-key-attributes-v3minimal-key-length-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-key-attributes-v3
                    'make-private-key-attributes-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crypto-providers))
      (common-lisp:list
       (common-lisp:cons "CryptoProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage-property))
      (common-lisp:list
       (common-lisp:cons "KeyUsageProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimal-key-length))
      (common-lisp:list
       (common-lisp:cons "MinimalKeyLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v3))
   common-lisp:nil))
(common-lisp:deftype private-key-attributes-v3minimal-key-length-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (private-key-attributes-v4 (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-key-attributes-v4-"))
   (algorithm common-lisp:nil :type
    (common-lisp:or private-key-algorithm common-lisp:null))
   (crypto-providers common-lisp:nil :type
    (common-lisp:or crypto-providers-list common-lisp:null))
   (key-spec (common-lisp:error ":key-spec is required") :type
    (common-lisp:or key-spec common-lisp:null))
   (key-usage-property common-lisp:nil :type
    (common-lisp:or key-usage-property common-lisp:null))
   (minimal-key-length (common-lisp:error ":minimal-key-length is required")
    :type
    (common-lisp:or private-key-attributes-v4minimal-key-length-integer
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-key-attributes-v4
                    'make-private-key-attributes-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crypto-providers))
      (common-lisp:list
       (common-lisp:cons "CryptoProviders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-spec))
      (common-lisp:list
       (common-lisp:cons "KeySpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage-property))
      (common-lisp:list
       (common-lisp:cons "KeyUsageProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimal-key-length))
      (common-lisp:list
       (common-lisp:cons "MinimalKeyLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-key-attributes-v4))
   common-lisp:nil))
(common-lisp:deftype private-key-attributes-v4minimal-key-length-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (private-key-flags-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-key-flags-v2-"))
   (client-version (common-lisp:error ":client-version is required") :type
    (common-lisp:or client-compatibility-v2 common-lisp:null))
   (exportable-key common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (strong-key-protection-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-key-flags-v2 'make-private-key-flags-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input private-key-flags-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input private-key-flags-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-version))
      (common-lisp:list
       (common-lisp:cons "ClientVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exportable-key))
      (common-lisp:list
       (common-lisp:cons "ExportableKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'strong-key-protection-required))
      (common-lisp:list
       (common-lisp:cons "StrongKeyProtectionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input private-key-flags-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (private-key-flags-v3 (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-key-flags-v3-"))
   (client-version (common-lisp:error ":client-version is required") :type
    (common-lisp:or client-compatibility-v3 common-lisp:null))
   (exportable-key common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-alternate-signature-algorithm common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (strong-key-protection-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-key-flags-v3 'make-private-key-flags-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input private-key-flags-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input private-key-flags-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-version))
      (common-lisp:list
       (common-lisp:cons "ClientVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exportable-key))
      (common-lisp:list
       (common-lisp:cons "ExportableKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-alternate-signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "RequireAlternateSignatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'strong-key-protection-required))
      (common-lisp:list
       (common-lisp:cons "StrongKeyProtectionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input private-key-flags-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (private-key-flags-v4 (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-key-flags-v4-"))
   (client-version (common-lisp:error ":client-version is required") :type
    (common-lisp:or client-compatibility-v4 common-lisp:null))
   (exportable-key common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-alternate-signature-algorithm common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-same-key-renewal common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (strong-key-protection-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (use-legacy-provider common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-key-flags-v4 'make-private-key-flags-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input private-key-flags-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input private-key-flags-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-version))
      (common-lisp:list
       (common-lisp:cons "ClientVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exportable-key))
      (common-lisp:list
       (common-lisp:cons "ExportableKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-alternate-signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "RequireAlternateSignatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-same-key-renewal))
      (common-lisp:list
       (common-lisp:cons "RequireSameKeyRenewal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'strong-key-protection-required))
      (common-lisp:list
       (common-lisp:cons "StrongKeyProtectionRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-legacy-provider))
      (common-lisp:list
       (common-lisp:cons "UseLegacyProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input private-key-flags-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun make-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (service-principal-name (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-principal-name-"))
   (connector-arn common-lisp:nil :type
    (common-lisp:or connector-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (directory-registration-arn common-lisp:nil :type
    (common-lisp:or directory-registration-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or service-principal-name-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or service-principal-name-status-reason common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-principal-name 'make-service-principal-name))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-registration-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryRegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-principal-name-list ()
   '(trivial-types:proper-list service-principal-name-summary))
 (common-lisp:defun make-service-principal-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-principal-name-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-principal-name-status () 'common-lisp:string)
(common-lisp:deftype service-principal-name-status-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-principal-name-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-principal-name-summary-"))
   (connector-arn common-lisp:nil :type
    (common-lisp:or connector-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (directory-registration-arn common-lisp:nil :type
    (common-lisp:or directory-registration-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or service-principal-name-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or service-principal-name-status-reason common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-principal-name-summary
                    'make-service-principal-name-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'directory-registration-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryRegistrationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-principal-name-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (subject-name-flags-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-subject-name-flags-v2-"))
   (require-common-name common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-directory-path common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-dns-as-cn common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-email common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-directory-guid common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-dns common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-domain-dns common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-email common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-spn common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-upn common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subject-name-flags-v2 'make-subject-name-flags-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-common-name))
      (common-lisp:list
       (common-lisp:cons "RequireCommonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-directory-path))
      (common-lisp:list
       (common-lisp:cons "RequireDirectoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-dns-as-cn))
      (common-lisp:list
       (common-lisp:cons "RequireDnsAsCn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-email))
      (common-lisp:list
       (common-lisp:cons "RequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-directory-guid))
      (common-lisp:list
       (common-lisp:cons "SanRequireDirectoryGuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-domain-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDomainDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-email))
      (common-lisp:list
       (common-lisp:cons "SanRequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-spn))
      (common-lisp:list
       (common-lisp:cons "SanRequireSpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-upn))
      (common-lisp:list
       (common-lisp:cons "SanRequireUpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subject-name-flags-v3 (:copier common-lisp:nil)
      (:conc-name "struct-shape-subject-name-flags-v3-"))
   (require-common-name common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-directory-path common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-dns-as-cn common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-email common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-directory-guid common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-dns common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-domain-dns common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-email common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-spn common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-upn common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subject-name-flags-v3 'make-subject-name-flags-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-common-name))
      (common-lisp:list
       (common-lisp:cons "RequireCommonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-directory-path))
      (common-lisp:list
       (common-lisp:cons "RequireDirectoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-dns-as-cn))
      (common-lisp:list
       (common-lisp:cons "RequireDnsAsCn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-email))
      (common-lisp:list
       (common-lisp:cons "RequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-directory-guid))
      (common-lisp:list
       (common-lisp:cons "SanRequireDirectoryGuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-domain-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDomainDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-email))
      (common-lisp:list
       (common-lisp:cons "SanRequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-spn))
      (common-lisp:list
       (common-lisp:cons "SanRequireSpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-upn))
      (common-lisp:list
       (common-lisp:cons "SanRequireUpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subject-name-flags-v4 (:copier common-lisp:nil)
      (:conc-name "struct-shape-subject-name-flags-v4-"))
   (require-common-name common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-directory-path common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-dns-as-cn common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (require-email common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-directory-guid common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-dns common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-domain-dns common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-email common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-spn common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (san-require-upn common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subject-name-flags-v4 'make-subject-name-flags-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-common-name))
      (common-lisp:list
       (common-lisp:cons "RequireCommonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-directory-path))
      (common-lisp:list
       (common-lisp:cons "RequireDirectoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-dns-as-cn))
      (common-lisp:list
       (common-lisp:cons "RequireDnsAsCn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-email))
      (common-lisp:list
       (common-lisp:cons "RequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-directory-guid))
      (common-lisp:list
       (common-lisp:cons "SanRequireDirectoryGuid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'san-require-domain-dns))
      (common-lisp:list
       (common-lisp:cons "SanRequireDomainDns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-email))
      (common-lisp:list
       (common-lisp:cons "SanRequireEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-spn))
      (common-lisp:list
       (common-lisp:cons "SanRequireSpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'san-require-upn))
      (common-lisp:list
       (common-lisp:cons "SanRequireUpn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subject-name-flags-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (template (:copier common-lisp:nil) (:conc-name "struct-shape-template-"))
   (arn common-lisp:nil :type (common-lisp:or template-arn common-lisp:null))
   (connector-arn common-lisp:nil :type
    (common-lisp:or connector-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or template-definition common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or template-name common-lisp:null))
   (object-identifier common-lisp:nil :type
    (common-lisp:or custom-object-identifier common-lisp:null))
   (policy-schema common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (revision common-lisp:nil :type
    (common-lisp:or template-revision common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or template-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'template 'make-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-schema))
      (common-lisp:list
       (common-lisp:cons "PolicySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template))
   common-lisp:nil))
(common-lisp:deftype template-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (template-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-definition-"))
   (template-v2 common-lisp:nil :type
    (common-lisp:or template-v2 common-lisp:null))
   (template-v3 common-lisp:nil :type
    (common-lisp:or template-v3 common-lisp:null))
   (template-v4 common-lisp:nil :type
    (common-lisp:or template-v4 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-definition 'make-template-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-v2))
      (common-lisp:list
       (common-lisp:cons "TemplateV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-v3))
      (common-lisp:list
       (common-lisp:cons "TemplateV3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-v4))
      (common-lisp:list
       (common-lisp:cons "TemplateV4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-list ()
   '(trivial-types:proper-list template-summary))
 (common-lisp:defun make-template-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype template-name-list ()
   '(trivial-types:proper-list template-name))
 (common-lisp:defun make-template-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (template-revision (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-revision-"))
   (major-revision (common-lisp:error ":major-revision is required") :type
    (common-lisp:or integer common-lisp:null))
   (minor-revision (common-lisp:error ":minor-revision is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-revision 'make-template-revision))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-revision))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-revision))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-revision))
      (common-lisp:list
       (common-lisp:cons "MajorRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-revision))
      (common-lisp:list
       (common-lisp:cons "MinorRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-revision))
   common-lisp:nil))
(common-lisp:deftype template-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (template-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-summary-"))
   (arn common-lisp:nil :type (common-lisp:or template-arn common-lisp:null))
   (connector-arn common-lisp:nil :type
    (common-lisp:or connector-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (definition common-lisp:nil :type
    (common-lisp:or template-definition common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or template-name common-lisp:null))
   (object-identifier common-lisp:nil :type
    (common-lisp:or custom-object-identifier common-lisp:null))
   (policy-schema common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (revision common-lisp:nil :type
    (common-lisp:or template-revision common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or template-status common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'template-summary 'make-template-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-schema))
      (common-lisp:list
       (common-lisp:cons "PolicySchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-v2-"))
   (certificate-validity
    (common-lisp:error ":certificate-validity is required") :type
    (common-lisp:or certificate-validity common-lisp:null))
   (enrollment-flags (common-lisp:error ":enrollment-flags is required") :type
    (common-lisp:or enrollment-flags-v2 common-lisp:null))
   (extensions (common-lisp:error ":extensions is required") :type
    (common-lisp:or extensions-v2 common-lisp:null))
   (general-flags (common-lisp:error ":general-flags is required") :type
    (common-lisp:or general-flags-v2 common-lisp:null))
   (private-key-attributes
    (common-lisp:error ":private-key-attributes is required") :type
    (common-lisp:or private-key-attributes-v2 common-lisp:null))
   (private-key-flags (common-lisp:error ":private-key-flags is required")
    :type (common-lisp:or private-key-flags-v2 common-lisp:null))
   (subject-name-flags (common-lisp:error ":subject-name-flags is required")
    :type (common-lisp:or subject-name-flags-v2 common-lisp:null))
   (superseded-templates common-lisp:nil :type
    (common-lisp:or template-name-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'template-v2 'make-template-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-validity))
      (common-lisp:list
       (common-lisp:cons "CertificateValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-flags))
      (common-lisp:list
       (common-lisp:cons "EnrollmentFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extensions))
      (common-lisp:list
       (common-lisp:cons "Extensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'general-flags))
      (common-lisp:list
       (common-lisp:cons "GeneralFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-key-attributes))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key-flags))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-name-flags))
      (common-lisp:list
       (common-lisp:cons "SubjectNameFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'superseded-templates))
      (common-lisp:list
       (common-lisp:cons "SupersededTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-v3 (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-v3-"))
   (certificate-validity
    (common-lisp:error ":certificate-validity is required") :type
    (common-lisp:or certificate-validity common-lisp:null))
   (enrollment-flags (common-lisp:error ":enrollment-flags is required") :type
    (common-lisp:or enrollment-flags-v3 common-lisp:null))
   (extensions (common-lisp:error ":extensions is required") :type
    (common-lisp:or extensions-v3 common-lisp:null))
   (general-flags (common-lisp:error ":general-flags is required") :type
    (common-lisp:or general-flags-v3 common-lisp:null))
   (hash-algorithm (common-lisp:error ":hash-algorithm is required") :type
    (common-lisp:or hash-algorithm common-lisp:null))
   (private-key-attributes
    (common-lisp:error ":private-key-attributes is required") :type
    (common-lisp:or private-key-attributes-v3 common-lisp:null))
   (private-key-flags (common-lisp:error ":private-key-flags is required")
    :type (common-lisp:or private-key-flags-v3 common-lisp:null))
   (subject-name-flags (common-lisp:error ":subject-name-flags is required")
    :type (common-lisp:or subject-name-flags-v3 common-lisp:null))
   (superseded-templates common-lisp:nil :type
    (common-lisp:or template-name-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'template-v3 'make-template-v3))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-v3))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-v3))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-validity))
      (common-lisp:list
       (common-lisp:cons "CertificateValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-flags))
      (common-lisp:list
       (common-lisp:cons "EnrollmentFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extensions))
      (common-lisp:list
       (common-lisp:cons "Extensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'general-flags))
      (common-lisp:list
       (common-lisp:cons "GeneralFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-algorithm))
      (common-lisp:list
       (common-lisp:cons "HashAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-key-attributes))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key-flags))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-name-flags))
      (common-lisp:list
       (common-lisp:cons "SubjectNameFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'superseded-templates))
      (common-lisp:list
       (common-lisp:cons "SupersededTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-v3))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (template-v4 (:copier common-lisp:nil)
      (:conc-name "struct-shape-template-v4-"))
   (certificate-validity
    (common-lisp:error ":certificate-validity is required") :type
    (common-lisp:or certificate-validity common-lisp:null))
   (enrollment-flags (common-lisp:error ":enrollment-flags is required") :type
    (common-lisp:or enrollment-flags-v4 common-lisp:null))
   (extensions (common-lisp:error ":extensions is required") :type
    (common-lisp:or extensions-v4 common-lisp:null))
   (general-flags (common-lisp:error ":general-flags is required") :type
    (common-lisp:or general-flags-v4 common-lisp:null))
   (hash-algorithm common-lisp:nil :type
    (common-lisp:or hash-algorithm common-lisp:null))
   (private-key-attributes
    (common-lisp:error ":private-key-attributes is required") :type
    (common-lisp:or private-key-attributes-v4 common-lisp:null))
   (private-key-flags (common-lisp:error ":private-key-flags is required")
    :type (common-lisp:or private-key-flags-v4 common-lisp:null))
   (subject-name-flags (common-lisp:error ":subject-name-flags is required")
    :type (common-lisp:or subject-name-flags-v4 common-lisp:null))
   (superseded-templates common-lisp:nil :type
    (common-lisp:or template-name-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'template-v4 'make-template-v4))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-v4))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-v4))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-validity))
      (common-lisp:list
       (common-lisp:cons "CertificateValidity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enrollment-flags))
      (common-lisp:list
       (common-lisp:cons "EnrollmentFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extensions))
      (common-lisp:list
       (common-lisp:cons "Extensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'general-flags))
      (common-lisp:list
       (common-lisp:cons "GeneralFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-algorithm))
      (common-lisp:list
       (common-lisp:cons "HashAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-key-attributes))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key-flags))
      (common-lisp:list
       (common-lisp:cons "PrivateKeyFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-name-flags))
      (common-lisp:list
       (common-lisp:cons "SubjectNameFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'superseded-templates))
      (common-lisp:list
       (common-lisp:cons "SupersededTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-v4))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or string common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-group-access-control-entry-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-template-group-access-control-entry-request-"))
   (access-rights common-lisp:nil :type
    (common-lisp:or access-rights common-lisp:null))
   (group-display-name common-lisp:nil :type
    (common-lisp:or display-name common-lisp:null))
   (group-security-identifier
    (common-lisp:error ":group-security-identifier is required") :type
    (common-lisp:or group-security-identifier common-lisp:null))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-group-access-control-entry-request
                    'make-update-template-group-access-control-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-group-access-control-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-group-access-control-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rights))
      (common-lisp:list
       (common-lisp:cons "AccessRights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-display-name))
      (common-lisp:list
       (common-lisp:cons "GroupDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-group-access-control-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-template-request-"))
   (definition common-lisp:nil :type
    (common-lisp:or template-definition common-lisp:null))
   (reenroll-all-certificate-holders common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (template-arn (common-lisp:error ":template-arn is required") :type
    (common-lisp:or template-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-template-request 'make-update-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reenroll-all-certificate-holders))
      (common-lisp:list
       (common-lisp:cons "ReenrollAllCertificateHolders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (pca-connector-ad-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (validity-period (:copier common-lisp:nil)
      (:conc-name "struct-shape-validity-period-"))
   (period (common-lisp:error ":period is required") :type
    (common-lisp:or validity-period-period-long common-lisp:null))
   (period-type (common-lisp:error ":period-type is required") :type
    (common-lisp:or validity-period-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'validity-period 'make-validity-period))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validity-period))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validity-period))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-type))
      (common-lisp:list
       (common-lisp:cons "PeriodType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validity-period))
   common-lisp:nil))
(common-lisp:deftype validity-period-period-long () 'common-lisp:integer)
(common-lisp:deftype validity-period-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-information-"))
   (security-group-ids (common-lisp:error ":security-group-ids is required")
    :type (common-lisp:or security-group-id-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc-information 'make-vpc-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn client-token
                     directory-id tags vpc-information)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn client-token directory-id
     tags vpc-information))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        "/connectors" "CreateConnector"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connector))
(common-lisp:progn
 (common-lisp:defun create-directory-registration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token directory-id tags)
   (common-lisp:declare (common-lisp:ignorable client-token directory-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-directory-registration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        "/directoryRegistrations" "CreateDirectoryRegistration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-directory-registration))
(common-lisp:progn
 (common-lisp:defun create-service-principal-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token connector-arn
                     directory-registration-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token connector-arn
     directory-registration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-service-principal-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/directoryRegistrations/~A/servicePrincipalNames/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connector-arn))))
        "CreateServicePrincipalName"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service-principal-name))
(common-lisp:progn
 (common-lisp:defun create-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token connector-arn definition
                     name tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token connector-arn definition name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        "/templates" "CreateTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-template))
(common-lisp:progn
 (common-lisp:defun create-template-group-access-control-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-rights client-token
                     group-display-name group-security-identifier template-arn)
   (common-lisp:declare
    (common-lisp:ignorable access-rights client-token group-display-name
     group-security-identifier template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-template-group-access-control-entry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/templates/~A/accessControlEntries"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "CreateTemplateGroupAccessControlEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-template-group-access-control-entry))
(common-lisp:progn
 (common-lisp:defun delete-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn)
   (common-lisp:declare (common-lisp:ignorable connector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/connectors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connector-arn))))
        "DeleteConnector"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connector))
(common-lisp:progn
 (common-lisp:defun delete-directory-registration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-registration-arn)
   (common-lisp:declare (common-lisp:ignorable directory-registration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-directory-registration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/directoryRegistrations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))))
        "DeleteDirectoryRegistration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-directory-registration))
(common-lisp:progn
 (common-lisp:defun delete-service-principal-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn directory-registration-arn)
   (common-lisp:declare
    (common-lisp:ignorable connector-arn directory-registration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-service-principal-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/directoryRegistrations/~A/servicePrincipalNames/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connector-arn))))
        "DeleteServicePrincipalName"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service-principal-name))
(common-lisp:progn
 (common-lisp:defun delete-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn)
   (common-lisp:declare (common-lisp:ignorable template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "DeleteTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-template))
(common-lisp:progn
 (common-lisp:defun delete-template-group-access-control-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-security-identifier template-arn)
   (common-lisp:declare
    (common-lisp:ignorable group-security-identifier template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-template-group-access-control-entry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/templates/~A/accessControlEntries/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'group-security-identifier))))
        "DeleteTemplateGroupAccessControlEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-template-group-access-control-entry))
(common-lisp:progn
 (common-lisp:defun get-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn)
   (common-lisp:declare (common-lisp:ignorable connector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/connectors/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connector-arn))))
        "GetConnector"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-connector))
(common-lisp:progn
 (common-lisp:defun get-directory-registration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-registration-arn)
   (common-lisp:declare (common-lisp:ignorable directory-registration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-directory-registration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/directoryRegistrations/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))))
        "GetDirectoryRegistration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-directory-registration))
(common-lisp:progn
 (common-lisp:defun get-service-principal-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn directory-registration-arn)
   (common-lisp:declare
    (common-lisp:ignorable connector-arn directory-registration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-principal-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/directoryRegistrations/~A/servicePrincipalNames/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'connector-arn))))
        "GetServicePrincipalName"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service-principal-name))
(common-lisp:progn
 (common-lisp:defun get-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-arn)
   (common-lisp:declare (common-lisp:ignorable template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "GetTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-template))
(common-lisp:progn
 (common-lisp:defun get-template-group-access-control-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-security-identifier template-arn)
   (common-lisp:declare
    (common-lisp:ignorable group-security-identifier template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-template-group-access-control-entry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/templates/~A/accessControlEntries/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'group-security-identifier))))
        "GetTemplateGroupAccessControlEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-template-group-access-control-entry))
(common-lisp:progn
 (common-lisp:defun list-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        "/connectors" "ListConnectors"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-connectors))
(common-lisp:progn
 (common-lisp:defun list-directory-registrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-directory-registrations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        "/directoryRegistrations" "ListDirectoryRegistrations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-directory-registrations))
(common-lisp:progn
 (common-lisp:defun list-service-principal-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-registration-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable directory-registration-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-principal-names-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/directoryRegistrations/~A/servicePrincipalNames"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'directory-registration-arn))))
        "ListServicePrincipalNames"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-principal-names))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-template-group-access-control-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token template-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-template-group-access-control-entries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/templates/~A/accessControlEntries"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "ListTemplateGroupAccessControlEntries"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-template-group-access-control-entries))
(common-lisp:progn
 (common-lisp:defun list-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable connector-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-templates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "GET"
        "/templates" "ListTemplates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-templates))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "DELETE"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key definition
                     reenroll-all-certificate-holders template-arn)
   (common-lisp:declare
    (common-lisp:ignorable definition reenroll-all-certificate-holders
     template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/templates/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))))
        "UpdateTemplate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-template))
(common-lisp:progn
 (common-lisp:defun update-template-group-access-control-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-rights group-display-name
                     group-security-identifier template-arn)
   (common-lisp:declare
    (common-lisp:ignorable access-rights group-display-name
     group-security-identifier template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-template-group-access-control-entry-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'pca-connector-ad-request aws-sdk/generator/operation::input "PATCH"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/templates/~A/accessControlEntries/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'template-arn))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'group-security-identifier))))
        "UpdateTemplateGroupAccessControlEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-template-group-access-control-entry))
