;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ssm/api
  (:use)
  (:nicknames #:aws/ssm)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ssm/api)
(common-lisp:progn
 (common-lisp:defclass ssm-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "ssm" :protocol :json))
 (common-lisp:export 'ssm-request))
(common-lisp:progn
 (common-lisp:define-condition ssm-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ssm-error))
(common-lisp:defvar *error-map*
  '(("AlreadyExistsException" . already-exists-exception)
    ("AssociatedInstances" . associated-instances)
    ("AssociationAlreadyExists" . association-already-exists)
    ("AssociationDoesNotExist" . association-does-not-exist)
    ("AssociationExecutionDoesNotExist" . association-execution-does-not-exist)
    ("AssociationLimitExceeded" . association-limit-exceeded)
    ("AssociationVersionLimitExceeded" . association-version-limit-exceeded)
    ("AutomationDefinitionNotApprovedException"
     . automation-definition-not-approved-exception)
    ("AutomationDefinitionNotFoundException"
     . automation-definition-not-found-exception)
    ("AutomationDefinitionVersionNotFoundException"
     . automation-definition-version-not-found-exception)
    ("AutomationExecutionLimitExceededException"
     . automation-execution-limit-exceeded-exception)
    ("AutomationExecutionNotFoundException"
     . automation-execution-not-found-exception)
    ("AutomationStepNotFoundException" . automation-step-not-found-exception)
    ("ComplianceTypeCountLimitExceededException"
     . compliance-type-count-limit-exceeded-exception)
    ("CustomSchemaCountLimitExceededException"
     . custom-schema-count-limit-exceeded-exception)
    ("DocumentAlreadyExists" . document-already-exists)
    ("DocumentLimitExceeded" . document-limit-exceeded)
    ("DocumentPermissionLimit" . document-permission-limit)
    ("DocumentVersionLimitExceeded" . document-version-limit-exceeded)
    ("DoesNotExistException" . does-not-exist-exception)
    ("DuplicateDocumentContent" . duplicate-document-content)
    ("DuplicateDocumentVersionName" . duplicate-document-version-name)
    ("DuplicateInstanceId" . duplicate-instance-id)
    ("FeatureNotAvailableException" . feature-not-available-exception)
    ("HierarchyLevelLimitExceededException"
     . hierarchy-level-limit-exceeded-exception)
    ("HierarchyTypeMismatchException" . hierarchy-type-mismatch-exception)
    ("IdempotentParameterMismatch" . idempotent-parameter-mismatch)
    ("IncompatiblePolicyException" . incompatible-policy-exception)
    ("InternalServerError" . internal-server-error)
    ("InvalidActivation" . invalid-activation)
    ("InvalidActivationId" . invalid-activation-id)
    ("InvalidAggregatorException" . invalid-aggregator-exception)
    ("InvalidAllowedPatternException" . invalid-allowed-pattern-exception)
    ("InvalidAssociation" . invalid-association)
    ("InvalidAssociationVersion" . invalid-association-version)
    ("InvalidAutomationExecutionParametersException"
     . invalid-automation-execution-parameters-exception)
    ("InvalidAutomationSignalException" . invalid-automation-signal-exception)
    ("InvalidAutomationStatusUpdateException"
     . invalid-automation-status-update-exception)
    ("InvalidCommandId" . invalid-command-id)
    ("InvalidDeleteInventoryParametersException"
     . invalid-delete-inventory-parameters-exception)
    ("InvalidDeletionIdException" . invalid-deletion-id-exception)
    ("InvalidDocument" . invalid-document)
    ("InvalidDocumentContent" . invalid-document-content)
    ("InvalidDocumentOperation" . invalid-document-operation)
    ("InvalidDocumentSchemaVersion" . invalid-document-schema-version)
    ("InvalidDocumentType" . invalid-document-type)
    ("InvalidDocumentVersion" . invalid-document-version)
    ("InvalidFilter" . invalid-filter)
    ("InvalidFilterKey" . invalid-filter-key)
    ("InvalidFilterOption" . invalid-filter-option)
    ("InvalidFilterValue" . invalid-filter-value)
    ("InvalidInstanceId" . invalid-instance-id)
    ("InvalidInstanceInformationFilterValue"
     . invalid-instance-information-filter-value)
    ("InvalidInventoryGroupException" . invalid-inventory-group-exception)
    ("InvalidInventoryItemContextException"
     . invalid-inventory-item-context-exception)
    ("InvalidInventoryRequestException" . invalid-inventory-request-exception)
    ("InvalidItemContentException" . invalid-item-content-exception)
    ("InvalidKeyId" . invalid-key-id) ("InvalidNextToken" . invalid-next-token)
    ("InvalidNotificationConfig" . invalid-notification-config)
    ("InvalidOptionException" . invalid-option-exception)
    ("InvalidOutputFolder" . invalid-output-folder)
    ("InvalidOutputLocation" . invalid-output-location)
    ("InvalidParameters" . invalid-parameters)
    ("InvalidPermissionType" . invalid-permission-type)
    ("InvalidPluginName" . invalid-plugin-name)
    ("InvalidPolicyAttributeException" . invalid-policy-attribute-exception)
    ("InvalidPolicyTypeException" . invalid-policy-type-exception)
    ("InvalidResourceId" . invalid-resource-id)
    ("InvalidResourceType" . invalid-resource-type)
    ("InvalidResultAttributeException" . invalid-result-attribute-exception)
    ("InvalidRole" . invalid-role) ("InvalidSchedule" . invalid-schedule)
    ("InvalidTag" . invalid-tag) ("InvalidTarget" . invalid-target)
    ("InvalidTargetMaps" . invalid-target-maps)
    ("InvalidTypeNameException" . invalid-type-name-exception)
    ("InvalidUpdate" . invalid-update)
    ("InvocationDoesNotExist" . invocation-does-not-exist)
    ("ItemContentMismatchException" . item-content-mismatch-exception)
    ("ItemSizeLimitExceededException" . item-size-limit-exceeded-exception)
    ("MaxDocumentSizeExceeded" . max-document-size-exceeded)
    ("OpsItemAccessDeniedException" . ops-item-access-denied-exception)
    ("OpsItemAlreadyExistsException" . ops-item-already-exists-exception)
    ("OpsItemInvalidParameterException" . ops-item-invalid-parameter-exception)
    ("OpsItemLimitExceededException" . ops-item-limit-exceeded-exception)
    ("OpsItemNotFoundException" . ops-item-not-found-exception)
    ("OpsItemRelatedItemAlreadyExistsException"
     . ops-item-related-item-already-exists-exception)
    ("OpsItemRelatedItemAssociationNotFoundException"
     . ops-item-related-item-association-not-found-exception)
    ("OpsMetadataAlreadyExistsException"
     . ops-metadata-already-exists-exception)
    ("OpsMetadataInvalidArgumentException"
     . ops-metadata-invalid-argument-exception)
    ("OpsMetadataKeyLimitExceededException"
     . ops-metadata-key-limit-exceeded-exception)
    ("OpsMetadataLimitExceededException"
     . ops-metadata-limit-exceeded-exception)
    ("OpsMetadataNotFoundException" . ops-metadata-not-found-exception)
    ("OpsMetadataTooManyUpdatesException"
     . ops-metadata-too-many-updates-exception)
    ("ParameterAlreadyExists" . parameter-already-exists)
    ("ParameterLimitExceeded" . parameter-limit-exceeded)
    ("ParameterMaxVersionLimitExceeded" . parameter-max-version-limit-exceeded)
    ("ParameterNotFound" . parameter-not-found)
    ("ParameterPatternMismatchException"
     . parameter-pattern-mismatch-exception)
    ("ParameterVersionLabelLimitExceeded"
     . parameter-version-label-limit-exceeded)
    ("ParameterVersionNotFound" . parameter-version-not-found)
    ("PoliciesLimitExceededException" . policies-limit-exceeded-exception)
    ("ResourceDataSyncAlreadyExistsException"
     . resource-data-sync-already-exists-exception)
    ("ResourceDataSyncConflictException"
     . resource-data-sync-conflict-exception)
    ("ResourceDataSyncCountExceededException"
     . resource-data-sync-count-exceeded-exception)
    ("ResourceDataSyncInvalidConfigurationException"
     . resource-data-sync-invalid-configuration-exception)
    ("ResourceDataSyncNotFoundException"
     . resource-data-sync-not-found-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceLimitExceededException" . resource-limit-exceeded-exception)
    ("ResourcePolicyConflictException" . resource-policy-conflict-exception)
    ("ResourcePolicyInvalidParameterException"
     . resource-policy-invalid-parameter-exception)
    ("ResourcePolicyLimitExceededException"
     . resource-policy-limit-exceeded-exception)
    ("ServiceSettingNotFound" . service-setting-not-found)
    ("StatusUnchanged" . status-unchanged)
    ("SubTypeCountLimitExceededException"
     . sub-type-count-limit-exceeded-exception)
    ("TargetInUseException" . target-in-use-exception)
    ("TargetNotConnected" . target-not-connected)
    ("TooManyTagsError" . too-many-tags-error)
    ("TooManyUpdates" . too-many-updates)
    ("TotalSizeLimitExceededException" . total-size-limit-exceeded-exception)
    ("UnsupportedCalendarException" . unsupported-calendar-exception)
    ("UnsupportedFeatureRequiredException"
     . unsupported-feature-required-exception)
    ("UnsupportedInventoryItemContextException"
     . unsupported-inventory-item-context-exception)
    ("UnsupportedInventorySchemaVersionException"
     . unsupported-inventory-schema-version-exception)
    ("UnsupportedOperatingSystem" . unsupported-operating-system)
    ("UnsupportedParameterType" . unsupported-parameter-type)
    ("UnsupportedPlatformType" . unsupported-platform-type)))
(common-lisp:deftype account () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-id-list ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun |make-account-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass account-sharing-info common-lisp:nil
                       ((shared-document-version :initarg
                         :shared-document-version :type
                         (common-lisp:or shared-document-version
                                         common-lisp:null)
                         :accessor
                         %account-sharing-info-shared-document-version
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %account-sharing-info-account-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'account-sharing-info 'make-account-sharing-info))
 (common-lisp:defun make-account-sharing-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-document-version account-id)
   (common-lisp:apply #'common-lisp:make-instance 'account-sharing-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-sharing-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-sharing-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-document-version))
      (common-lisp:list
       (common-lisp:cons "SharedDocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-sharing-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-sharing-info-list ()
   '(trivial-types:proper-list account-sharing-info))
 (common-lisp:defun |make-account-sharing-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-sharing-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype accounts () '(trivial-types:proper-list account))
 (common-lisp:defun |make-accounts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass activation common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %activation-tags :initform common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or created-date common-lisp:null)
                         :accessor %activation-created-date :initform
                         common-lisp:nil)
                        (expired :initarg :expired :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %activation-expired :initform common-lisp:nil)
                        (expiration-date :initarg :expiration-date :type
                         (common-lisp:or expiration-date common-lisp:null)
                         :accessor %activation-expiration-date :initform
                         common-lisp:nil)
                        (registrations-count :initarg :registrations-count
                         :type
                         (common-lisp:or registrations-count common-lisp:null)
                         :accessor %activation-registrations-count :initform
                         common-lisp:nil)
                        (registration-limit :initarg :registration-limit :type
                         (common-lisp:or registration-limit common-lisp:null)
                         :accessor %activation-registration-limit :initform
                         common-lisp:nil)
                        (iam-role :initarg :iam-role :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %activation-iam-role :initform common-lisp:nil)
                        (default-instance-name :initarg :default-instance-name
                         :type
                         (common-lisp:or default-instance-name
                                         common-lisp:null)
                         :accessor %activation-default-instance-name :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or activation-description
                                         common-lisp:null)
                         :accessor %activation-description :initform
                         common-lisp:nil)
                        (activation-id :initarg :activation-id :type
                         (common-lisp:or activation-id common-lisp:null)
                         :accessor %activation-activation-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'activation 'make-activation))
 (common-lisp:defun make-activation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags created-date expired expiration-date
                     registrations-count registration-limit iam-role
                     default-instance-name description activation-id)
   (common-lisp:apply #'common-lisp:make-instance 'activation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-id))
      (common-lisp:list
       (common-lisp:cons "ActivationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-name))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "IamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-limit))
      (common-lisp:list
       (common-lisp:cons "RegistrationLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registrations-count))
      (common-lisp:list
       (common-lisp:cons "RegistrationsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expired))
      (common-lisp:list
       (common-lisp:cons "Expired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activation))
   common-lisp:nil))
(common-lisp:deftype activation-code () 'common-lisp:string)
(common-lisp:deftype activation-description () 'common-lisp:string)
(common-lisp:deftype activation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype activation-list ()
   '(trivial-types:proper-list activation))
 (common-lisp:defun |make-activation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list activation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass add-tags-to-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %add-tags-to-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %add-tags-to-resource-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type-for-tagging
                                         common-lisp:null)
                         :accessor %add-tags-to-resource-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-request
                    'make-add-tags-to-resource-request))
 (common-lisp:defun make-add-tags-to-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-id resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-to-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-to-resource-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'add-tags-to-resource-result
                    'make-add-tags-to-resource-result))
 (common-lisp:defun make-add-tags-to-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-to-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-tags-to-resource-result))
   common-lisp:nil))
(common-lisp:deftype agent-error-code () 'common-lisp:string)
(common-lisp:deftype aggregator-schema-only () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass alarm common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or alarm-name common-lisp:null) :accessor
                         %alarm-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'alarm 'make-alarm))
 (common-lisp:defun make-alarm
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'alarm
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass alarm-configuration common-lisp:nil
                       ((alarms :initarg :alarms :type
                         (common-lisp:or alarm-list common-lisp:null) :accessor
                         %alarm-configuration-alarms :initform
                         (common-lisp:error ":alarms is required"))
                        (ignore-poll-alarm-failure :initarg
                         :ignore-poll-alarm-failure :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %alarm-configuration-ignore-poll-alarm-failure
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'alarm-configuration 'make-alarm-configuration))
 (common-lisp:defun make-alarm-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarms ignore-poll-alarm-failure)
   (common-lisp:apply #'common-lisp:make-instance 'alarm-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ignore-poll-alarm-failure))
      (common-lisp:list
       (common-lisp:cons "IgnorePollAlarmFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "Alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alarm-list () '(trivial-types:proper-list alarm))
 (common-lisp:defun |make-alarm-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alarm-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass alarm-state-information common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or external-alarm-state common-lisp:null)
                         :accessor %alarm-state-information-state :initform
                         (common-lisp:error ":state is required"))
                        (name :initarg :name :type
                         (common-lisp:or alarm-name common-lisp:null) :accessor
                         %alarm-state-information-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'alarm-state-information 'make-alarm-state-information))
 (common-lisp:defun make-alarm-state-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state name)
   (common-lisp:apply #'common-lisp:make-instance 'alarm-state-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          alarm-state-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          alarm-state-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          alarm-state-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alarm-state-information-list ()
   '(trivial-types:proper-list alarm-state-information))
 (common-lisp:defun |make-alarm-state-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm-state-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype allowed-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception
                    'already-exists-exception-message)))
(common-lisp:deftype apply-only-at-cron-interval () 'common-lisp:boolean)
(common-lisp:deftype approve-after-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass associate-ops-item-related-item-request common-lisp:nil
                       ((resource-uri :initarg :resource-uri :type
                         (common-lisp:or
                          ops-item-related-item-association-resource-uri
                          common-lisp:null)
                         :accessor
                         %associate-ops-item-related-item-request-resource-uri
                         :initform
                         (common-lisp:error ":resource-uri is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or
                          ops-item-related-item-association-resource-type
                          common-lisp:null)
                         :accessor
                         %associate-ops-item-related-item-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (association-type :initarg :association-type :type
                         (common-lisp:or ops-item-related-item-association-type
                                         common-lisp:null)
                         :accessor
                         %associate-ops-item-related-item-request-association-type
                         :initform
                         (common-lisp:error ":association-type is required"))
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or ops-item-id common-lisp:null)
                         :accessor
                         %associate-ops-item-related-item-request-ops-item-id
                         :initform
                         (common-lisp:error ":ops-item-id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-ops-item-related-item-request
                    'make-associate-ops-item-related-item-request))
 (common-lisp:defun make-associate-ops-item-related-item-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-uri resource-type
                     association-type ops-item-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-ops-item-related-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-ops-item-related-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-ops-item-related-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "AssociationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-uri))
      (common-lisp:list
       (common-lisp:cons "ResourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-ops-item-related-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-ops-item-related-item-response common-lisp:nil
                       ((association-id :initarg :association-id :type
                         (common-lisp:or ops-item-related-item-association-id
                                         common-lisp:null)
                         :accessor
                         %associate-ops-item-related-item-response-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-ops-item-related-item-response
                    'make-associate-ops-item-related-item-response))
 (common-lisp:defun make-associate-ops-item-related-item-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-ops-item-related-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-ops-item-related-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-ops-item-related-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-ops-item-related-item-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition associated-instances
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'associated-instances)))
(common-lisp:progn
 (common-lisp:defclass association common-lisp:nil
                       ((target-maps :initarg :target-maps :type
                         (common-lisp:or target-maps common-lisp:null)
                         :accessor %association-target-maps :initform
                         common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or schedule-offset common-lisp:null)
                         :accessor %association-schedule-offset :initform
                         common-lisp:nil)
                        (association-name :initarg :association-name :type
                         (common-lisp:or association-name common-lisp:null)
                         :accessor %association-association-name :initform
                         common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor %association-schedule-expression :initform
                         common-lisp:nil)
                        (overview :initarg :overview :type
                         (common-lisp:or association-overview common-lisp:null)
                         :accessor %association-overview :initform
                         common-lisp:nil)
                        (last-execution-date :initarg :last-execution-date
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor %association-last-execution-date :initform
                         common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %association-targets :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %association-document-version :initform
                         common-lisp:nil)
                        (association-version :initarg :association-version
                         :type
                         (common-lisp:or association-version common-lisp:null)
                         :accessor %association-association-version :initform
                         common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor %association-association-id :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %association-instance-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %association-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'association 'make-association))
 (common-lisp:defun make-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-maps schedule-offset
                     association-name schedule-expression overview
                     last-execution-date targets document-version
                     association-version association-id instance-id name)
   (common-lisp:apply #'common-lisp:make-instance 'association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-version))
      (common-lisp:list
       (common-lisp:cons "AssociationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-execution-date))
      (common-lisp:list
       (common-lisp:cons "LastExecutionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overview))
      (common-lisp:list
       (common-lisp:cons "Overview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-name))
      (common-lisp:list
       (common-lisp:cons "AssociationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-maps))
      (common-lisp:list
       (common-lisp:cons "TargetMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition association-already-exists
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'association-already-exists)))
(common-lisp:deftype association-compliance-severity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass association-description common-lisp:nil
                       ((triggered-alarms :initarg :triggered-alarms :type
                         (common-lisp:or alarm-state-information-list
                                         common-lisp:null)
                         :accessor %association-description-triggered-alarms
                         :initform common-lisp:nil)
                        (alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor %association-description-alarm-configuration
                         :initform common-lisp:nil)
                        (target-maps :initarg :target-maps :type
                         (common-lisp:or target-maps common-lisp:null)
                         :accessor %association-description-target-maps
                         :initform common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or schedule-offset common-lisp:null)
                         :accessor %association-description-schedule-offset
                         :initform common-lisp:nil)
                        (target-locations :initarg :target-locations :type
                         (common-lisp:or target-locations common-lisp:null)
                         :accessor %association-description-target-locations
                         :initform common-lisp:nil)
                        (calendar-names :initarg :calendar-names :type
                         (common-lisp:or calendar-name-or-arnlist
                                         common-lisp:null)
                         :accessor %association-description-calendar-names
                         :initform common-lisp:nil)
                        (apply-only-at-cron-interval :initarg
                         :apply-only-at-cron-interval :type
                         (common-lisp:or apply-only-at-cron-interval
                                         common-lisp:null)
                         :accessor
                         %association-description-apply-only-at-cron-interval
                         :initform common-lisp:nil)
                        (sync-compliance :initarg :sync-compliance :type
                         (common-lisp:or association-sync-compliance
                                         common-lisp:null)
                         :accessor %association-description-sync-compliance
                         :initform common-lisp:nil)
                        (compliance-severity :initarg :compliance-severity
                         :type
                         (common-lisp:or association-compliance-severity
                                         common-lisp:null)
                         :accessor %association-description-compliance-severity
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor %association-description-max-concurrency
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %association-description-max-errors :initform
                         common-lisp:nil)
                        (association-name :initarg :association-name :type
                         (common-lisp:or association-name common-lisp:null)
                         :accessor %association-description-association-name
                         :initform common-lisp:nil)
                        (last-successful-execution-date :initarg
                         :last-successful-execution-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %association-description-last-successful-execution-date
                         :initform common-lisp:nil)
                        (last-execution-date :initarg :last-execution-date
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor %association-description-last-execution-date
                         :initform common-lisp:nil)
                        (output-location :initarg :output-location :type
                         (common-lisp:or instance-association-output-location
                                         common-lisp:null)
                         :accessor %association-description-output-location
                         :initform common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor %association-description-schedule-expression
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %association-description-targets :initform
                         common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor %association-description-association-id
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %association-description-parameters :initform
                         common-lisp:nil)
                        (automation-target-parameter-name :initarg
                         :automation-target-parameter-name :type
                         (common-lisp:or automation-target-parameter-name
                                         common-lisp:null)
                         :accessor
                         %association-description-automation-target-parameter-name
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %association-description-document-version
                         :initform common-lisp:nil)
                        (overview :initarg :overview :type
                         (common-lisp:or association-overview common-lisp:null)
                         :accessor %association-description-overview :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or association-status common-lisp:null)
                         :accessor %association-description-status :initform
                         common-lisp:nil)
                        (last-update-association-date :initarg
                         :last-update-association-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %association-description-last-update-association-date
                         :initform common-lisp:nil)
                        (date :initarg :date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %association-description-date :initform
                         common-lisp:nil)
                        (association-version :initarg :association-version
                         :type
                         (common-lisp:or association-version common-lisp:null)
                         :accessor %association-description-association-version
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %association-description-instance-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %association-description-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'association-description 'make-association-description))
 (common-lisp:defun make-association-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key triggered-alarms alarm-configuration
                     target-maps schedule-offset target-locations
                     calendar-names apply-only-at-cron-interval sync-compliance
                     compliance-severity max-concurrency max-errors
                     association-name last-successful-execution-date
                     last-execution-date output-location schedule-expression
                     targets association-id parameters
                     automation-target-parameter-name document-version overview
                     status last-update-association-date date
                     association-version instance-id name)
   (common-lisp:apply #'common-lisp:make-instance 'association-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          association-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          association-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-version))
      (common-lisp:list
       (common-lisp:cons "AssociationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-association-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdateAssociationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overview))
      (common-lisp:list
       (common-lisp:cons "Overview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-target-parameter-name))
      (common-lisp:list
       (common-lisp:cons "AutomationTargetParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-execution-date))
      (common-lisp:list
       (common-lisp:cons "LastExecutionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-execution-date))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulExecutionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-name))
      (common-lisp:list
       (common-lisp:cons "AssociationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-severity))
      (common-lisp:list
       (common-lisp:cons "ComplianceSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-compliance))
      (common-lisp:list
       (common-lisp:cons "SyncCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-only-at-cron-interval))
      (common-lisp:list
       (common-lisp:cons "ApplyOnlyAtCronInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calendar-names))
      (common-lisp:list
       (common-lisp:cons "CalendarNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-locations))
      (common-lisp:list
       (common-lisp:cons "TargetLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-maps))
      (common-lisp:list
       (common-lisp:cons "TargetMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggered-alarms))
      (common-lisp:list
       (common-lisp:cons "TriggeredAlarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          association-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype association-description-list ()
   '(trivial-types:proper-list association-description))
 (common-lisp:defun |make-association-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition association-does-not-exist
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       association-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'association-does-not-exist
                    'association-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:defclass association-execution common-lisp:nil
                       ((triggered-alarms :initarg :triggered-alarms :type
                         (common-lisp:or alarm-state-information-list
                                         common-lisp:null)
                         :accessor %association-execution-triggered-alarms
                         :initform common-lisp:nil)
                        (alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor %association-execution-alarm-configuration
                         :initform common-lisp:nil)
                        (resource-count-by-status :initarg
                         :resource-count-by-status :type
                         (common-lisp:or resource-count-by-status
                                         common-lisp:null)
                         :accessor
                         %association-execution-resource-count-by-status
                         :initform common-lisp:nil)
                        (last-execution-date :initarg :last-execution-date
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor %association-execution-last-execution-date
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %association-execution-created-time :initform
                         common-lisp:nil)
                        (detailed-status :initarg :detailed-status :type
                         (common-lisp:or status-name common-lisp:null)
                         :accessor %association-execution-detailed-status
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-name common-lisp:null)
                         :accessor %association-execution-status :initform
                         common-lisp:nil)
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or association-execution-id
                                         common-lisp:null)
                         :accessor %association-execution-execution-id
                         :initform common-lisp:nil)
                        (association-version :initarg :association-version
                         :type
                         (common-lisp:or association-version common-lisp:null)
                         :accessor %association-execution-association-version
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor %association-execution-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'association-execution 'make-association-execution))
 (common-lisp:defun make-association-execution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key triggered-alarms alarm-configuration
                     resource-count-by-status last-execution-date created-time
                     detailed-status status execution-id association-version
                     association-id)
   (common-lisp:apply #'common-lisp:make-instance 'association-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          association-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          association-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-version))
      (common-lisp:list
       (common-lisp:cons "AssociationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detailed-status))
      (common-lisp:list
       (common-lisp:cons "DetailedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-execution-date))
      (common-lisp:list
       (common-lisp:cons "LastExecutionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-count-by-status))
      (common-lisp:list
       (common-lisp:cons "ResourceCountByStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggered-alarms))
      (common-lisp:list
       (common-lisp:cons "TriggeredAlarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          association-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition association-execution-does-not-exist
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       association-execution-does-not-exist-message)))
 (common-lisp:export
  (common-lisp:list 'association-execution-does-not-exist
                    'association-execution-does-not-exist-message)))
(common-lisp:progn
 (common-lisp:defclass association-execution-filter common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or association-filter-operator-type
                                         common-lisp:null)
                         :accessor %association-execution-filter-type :initform
                         (common-lisp:error ":type is required"))
                        (value :initarg :value :type
                         (common-lisp:or association-execution-filter-value
                                         common-lisp:null)
                         :accessor %association-execution-filter-value
                         :initform (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or association-execution-filter-key
                                         common-lisp:null)
                         :accessor %association-execution-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'association-execution-filter
                    'make-association-execution-filter))
 (common-lisp:defun make-association-execution-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type value key)
   (common-lisp:apply #'common-lisp:make-instance 'association-execution-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          association-execution-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          association-execution-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          association-execution-filter))
   common-lisp:nil))
(common-lisp:deftype association-execution-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype association-execution-filter-list ()
   '(trivial-types:proper-list association-execution-filter))
 (common-lisp:defun |make-association-execution-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            association-execution-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype association-execution-filter-value () 'common-lisp:string)
(common-lisp:deftype association-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass association-execution-target common-lisp:nil
                       ((output-source :initarg :output-source :type
                         (common-lisp:or output-source common-lisp:null)
                         :accessor %association-execution-target-output-source
                         :initform common-lisp:nil)
                        (last-execution-date :initarg :last-execution-date
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         %association-execution-target-last-execution-date
                         :initform common-lisp:nil)
                        (detailed-status :initarg :detailed-status :type
                         (common-lisp:or status-name common-lisp:null)
                         :accessor
                         %association-execution-target-detailed-status
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-name common-lisp:null)
                         :accessor %association-execution-target-status
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or association-resource-type
                                         common-lisp:null)
                         :accessor %association-execution-target-resource-type
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or association-resource-id
                                         common-lisp:null)
                         :accessor %association-execution-target-resource-id
                         :initform common-lisp:nil)
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or association-execution-id
                                         common-lisp:null)
                         :accessor %association-execution-target-execution-id
                         :initform common-lisp:nil)
                        (association-version :initarg :association-version
                         :type
                         (common-lisp:or association-version common-lisp:null)
                         :accessor
                         %association-execution-target-association-version
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor %association-execution-target-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'association-execution-target
                    'make-association-execution-target))
 (common-lisp:defun make-association-execution-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-source last-execution-date
                     detailed-status status resource-type resource-id
                     execution-id association-version association-id)
   (common-lisp:apply #'common-lisp:make-instance 'association-execution-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          association-execution-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          association-execution-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-version))
      (common-lisp:list
       (common-lisp:cons "AssociationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detailed-status))
      (common-lisp:list
       (common-lisp:cons "DetailedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-execution-date))
      (common-lisp:list
       (common-lisp:cons "LastExecutionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-source))
      (common-lisp:list
       (common-lisp:cons "OutputSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          association-execution-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass association-execution-targets-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or
                          association-execution-targets-filter-value
                          common-lisp:null)
                         :accessor %association-execution-targets-filter-value
                         :initform (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or
                          association-execution-targets-filter-key
                          common-lisp:null)
                         :accessor %association-execution-targets-filter-key
                         :initform (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'association-execution-targets-filter
                    'make-association-execution-targets-filter))
 (common-lisp:defun make-association-execution-targets-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'association-execution-targets-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          association-execution-targets-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          association-execution-targets-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          association-execution-targets-filter))
   common-lisp:nil))
(common-lisp:deftype association-execution-targets-filter-key ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype association-execution-targets-filter-list ()
   '(trivial-types:proper-list association-execution-targets-filter))
 (common-lisp:defun |make-association-execution-targets-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            association-execution-targets-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype association-execution-targets-filter-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype association-execution-targets-list ()
   '(trivial-types:proper-list association-execution-target))
 (common-lisp:defun |make-association-execution-targets-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            association-execution-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype association-executions-list ()
   '(trivial-types:proper-list association-execution))
 (common-lisp:defun |make-association-executions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association-execution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass association-filter common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or association-filter-value
                                         common-lisp:null)
                         :accessor %association-filter-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or association-filter-key
                                         common-lisp:null)
                         :accessor %association-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'association-filter 'make-association-filter))
 (common-lisp:defun make-association-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'association-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input association-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input association-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input association-filter))
   common-lisp:nil))
(common-lisp:deftype association-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype association-filter-list ()
   '(trivial-types:proper-list association-filter))
 (common-lisp:defun |make-association-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype association-filter-operator-type () 'common-lisp:string)
(common-lisp:deftype association-filter-value () 'common-lisp:string)
(common-lisp:deftype association-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype association-id-list ()
   '(trivial-types:proper-list association-id))
 (common-lisp:defun |make-association-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition association-limit-exceeded
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'association-limit-exceeded)))
(common-lisp:progn
 (common-lisp:deftype association-list ()
   '(trivial-types:proper-list association))
 (common-lisp:defun |make-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype association-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass association-overview common-lisp:nil
                       ((association-status-aggregated-count :initarg
                         :association-status-aggregated-count :type
                         (common-lisp:or association-status-aggregated-count
                                         common-lisp:null)
                         :accessor
                         %association-overview-association-status-aggregated-count
                         :initform common-lisp:nil)
                        (detailed-status :initarg :detailed-status :type
                         (common-lisp:or status-name common-lisp:null)
                         :accessor %association-overview-detailed-status
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-name common-lisp:null)
                         :accessor %association-overview-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'association-overview 'make-association-overview))
 (common-lisp:defun make-association-overview
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-status-aggregated-count
                     detailed-status status)
   (common-lisp:apply #'common-lisp:make-instance 'association-overview
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input association-overview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input association-overview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detailed-status))
      (common-lisp:list
       (common-lisp:cons "DetailedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-status-aggregated-count))
      (common-lisp:list
       (common-lisp:cons "AssociationStatusAggregatedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input association-overview))
   common-lisp:nil))
(common-lisp:deftype association-resource-id () 'common-lisp:string)
(common-lisp:deftype association-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass association-status common-lisp:nil
                       ((additional-info :initarg :additional-info :type
                         (common-lisp:or status-additional-info
                                         common-lisp:null)
                         :accessor %association-status-additional-info
                         :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor %association-status-message :initform
                         (common-lisp:error ":message is required"))
                        (name :initarg :name :type
                         (common-lisp:or association-status-name
                                         common-lisp:null)
                         :accessor %association-status-name :initform
                         (common-lisp:error ":name is required"))
                        (date :initarg :date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %association-status-date :initform
                         (common-lisp:error ":date is required"))))
 (common-lisp:export
  (common-lisp:list 'association-status 'make-association-status))
 (common-lisp:defun make-association-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key additional-info message name date)
   (common-lisp:apply #'common-lisp:make-instance 'association-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input association-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input association-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-info))
      (common-lisp:list
       (common-lisp:cons "AdditionalInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input association-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype association-status-aggregated-count ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-association-status-aggregated-count|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype association-status-name () 'common-lisp:string)
(common-lisp:deftype association-sync-compliance () 'common-lisp:string)
(common-lisp:deftype association-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass association-version-info common-lisp:nil
                       ((target-maps :initarg :target-maps :type
                         (common-lisp:or target-maps common-lisp:null)
                         :accessor %association-version-info-target-maps
                         :initform common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or schedule-offset common-lisp:null)
                         :accessor %association-version-info-schedule-offset
                         :initform common-lisp:nil)
                        (target-locations :initarg :target-locations :type
                         (common-lisp:or target-locations common-lisp:null)
                         :accessor %association-version-info-target-locations
                         :initform common-lisp:nil)
                        (calendar-names :initarg :calendar-names :type
                         (common-lisp:or calendar-name-or-arnlist
                                         common-lisp:null)
                         :accessor %association-version-info-calendar-names
                         :initform common-lisp:nil)
                        (apply-only-at-cron-interval :initarg
                         :apply-only-at-cron-interval :type
                         (common-lisp:or apply-only-at-cron-interval
                                         common-lisp:null)
                         :accessor
                         %association-version-info-apply-only-at-cron-interval
                         :initform common-lisp:nil)
                        (sync-compliance :initarg :sync-compliance :type
                         (common-lisp:or association-sync-compliance
                                         common-lisp:null)
                         :accessor %association-version-info-sync-compliance
                         :initform common-lisp:nil)
                        (compliance-severity :initarg :compliance-severity
                         :type
                         (common-lisp:or association-compliance-severity
                                         common-lisp:null)
                         :accessor
                         %association-version-info-compliance-severity
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor %association-version-info-max-concurrency
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %association-version-info-max-errors :initform
                         common-lisp:nil)
                        (association-name :initarg :association-name :type
                         (common-lisp:or association-name common-lisp:null)
                         :accessor %association-version-info-association-name
                         :initform common-lisp:nil)
                        (output-location :initarg :output-location :type
                         (common-lisp:or instance-association-output-location
                                         common-lisp:null)
                         :accessor %association-version-info-output-location
                         :initform common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor
                         %association-version-info-schedule-expression
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %association-version-info-targets :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %association-version-info-parameters :initform
                         common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %association-version-info-document-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %association-version-info-name :initform
                         common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %association-version-info-created-date :initform
                         common-lisp:nil)
                        (association-version :initarg :association-version
                         :type
                         (common-lisp:or association-version common-lisp:null)
                         :accessor
                         %association-version-info-association-version
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor %association-version-info-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'association-version-info 'make-association-version-info))
 (common-lisp:defun make-association-version-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-maps schedule-offset
                     target-locations calendar-names
                     apply-only-at-cron-interval sync-compliance
                     compliance-severity max-concurrency max-errors
                     association-name output-location schedule-expression
                     targets parameters document-version name created-date
                     association-version association-id)
   (common-lisp:apply #'common-lisp:make-instance 'association-version-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          association-version-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          association-version-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-version))
      (common-lisp:list
       (common-lisp:cons "AssociationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-name))
      (common-lisp:list
       (common-lisp:cons "AssociationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-severity))
      (common-lisp:list
       (common-lisp:cons "ComplianceSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-compliance))
      (common-lisp:list
       (common-lisp:cons "SyncCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-only-at-cron-interval))
      (common-lisp:list
       (common-lisp:cons "ApplyOnlyAtCronInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calendar-names))
      (common-lisp:list
       (common-lisp:cons "CalendarNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-locations))
      (common-lisp:list
       (common-lisp:cons "TargetLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-maps))
      (common-lisp:list
       (common-lisp:cons "TargetMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          association-version-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition association-version-limit-exceeded
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       association-version-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'association-version-limit-exceeded
                    'association-version-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype association-version-list ()
   '(trivial-types:proper-list association-version-info))
 (common-lisp:defun |make-association-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            association-version-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass attachment-content common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or attachment-url common-lisp:null)
                         :accessor %attachment-content-url :initform
                         common-lisp:nil)
                        (hash-type :initarg :hash-type :type
                         (common-lisp:or attachment-hash-type common-lisp:null)
                         :accessor %attachment-content-hash-type :initform
                         common-lisp:nil)
                        (hash :initarg :hash :type
                         (common-lisp:or attachment-hash common-lisp:null)
                         :accessor %attachment-content-hash :initform
                         common-lisp:nil)
                        (size :initarg :size :type
                         (common-lisp:or content-length common-lisp:null)
                         :accessor %attachment-content-size :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or attachment-name common-lisp:null)
                         :accessor %attachment-content-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'attachment-content 'make-attachment-content))
 (common-lisp:defun make-attachment-content
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url hash-type hash size name)
   (common-lisp:apply #'common-lisp:make-instance 'attachment-content
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash))
      (common-lisp:list
       (common-lisp:cons "Hash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-type))
      (common-lisp:list
       (common-lisp:cons "HashType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment-content))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attachment-content-list ()
   '(trivial-types:proper-list attachment-content))
 (common-lisp:defun |make-attachment-content-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-content))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attachment-hash () 'common-lisp:string)
(common-lisp:deftype attachment-hash-type () 'common-lisp:string)
(common-lisp:deftype attachment-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attachment-information common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or attachment-name common-lisp:null)
                         :accessor %attachment-information-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'attachment-information 'make-attachment-information))
 (common-lisp:defun make-attachment-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'attachment-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attachment-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attachment-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attachment-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attachment-information-list ()
   '(trivial-types:proper-list attachment-information))
 (common-lisp:defun |make-attachment-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attachment-name () 'common-lisp:string)
(common-lisp:deftype attachment-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attachments-source common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or attachment-identifier
                                         common-lisp:null)
                         :accessor %attachments-source-name :initform
                         common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or attachments-source-values
                                         common-lisp:null)
                         :accessor %attachments-source-values :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or attachments-source-key
                                         common-lisp:null)
                         :accessor %attachments-source-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'attachments-source 'make-attachments-source))
 (common-lisp:defun make-attachments-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name values key)
   (common-lisp:apply #'common-lisp:make-instance 'attachments-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachments-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachments-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachments-source))
   common-lisp:nil))
(common-lisp:deftype attachments-source-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attachments-source-list ()
   '(trivial-types:proper-list attachments-source))
 (common-lisp:defun |make-attachments-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachments-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attachments-source-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attachments-source-values ()
   '(trivial-types:proper-list attachments-source-value))
 (common-lisp:defun |make-attachments-source-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            attachments-source-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:deftype automation-action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition automation-definition-not-approved-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       automation-definition-not-approved-exception-message)))
 (common-lisp:export
  (common-lisp:list 'automation-definition-not-approved-exception
                    'automation-definition-not-approved-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition automation-definition-not-found-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       automation-definition-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'automation-definition-not-found-exception
                    'automation-definition-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition automation-definition-version-not-found-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       automation-definition-version-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'automation-definition-version-not-found-exception
                    'automation-definition-version-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass automation-execution common-lisp:nil
                       ((change-request-name :initarg :change-request-name
                         :type
                         (common-lisp:or change-request-name common-lisp:null)
                         :accessor %automation-execution-change-request-name
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-association-id :initform
                         common-lisp:nil)
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-ops-item-id :initform
                         common-lisp:nil)
                        (runbooks :initarg :runbooks :type
                         (common-lisp:or runbooks common-lisp:null) :accessor
                         %automation-execution-runbooks :initform
                         common-lisp:nil)
                        (scheduled-time :initarg :scheduled-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %automation-execution-scheduled-time :initform
                         common-lisp:nil)
                        (automation-subtype :initarg :automation-subtype :type
                         (common-lisp:or automation-subtype common-lisp:null)
                         :accessor %automation-execution-automation-subtype
                         :initform common-lisp:nil)
                        (triggered-alarms :initarg :triggered-alarms :type
                         (common-lisp:or alarm-state-information-list
                                         common-lisp:null)
                         :accessor %automation-execution-triggered-alarms
                         :initform common-lisp:nil)
                        (alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor %automation-execution-alarm-configuration
                         :initform common-lisp:nil)
                        (progress-counters :initarg :progress-counters :type
                         (common-lisp:or progress-counters common-lisp:null)
                         :accessor %automation-execution-progress-counters
                         :initform common-lisp:nil)
                        (target-locations :initarg :target-locations :type
                         (common-lisp:or target-locations common-lisp:null)
                         :accessor %automation-execution-target-locations
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-target :initform
                         common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %automation-execution-max-errors :initform
                         common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor %automation-execution-max-concurrency
                         :initform common-lisp:nil)
                        (resolved-targets :initarg :resolved-targets :type
                         (common-lisp:or resolved-targets common-lisp:null)
                         :accessor %automation-execution-resolved-targets
                         :initform common-lisp:nil)
                        (target-maps :initarg :target-maps :type
                         (common-lisp:or target-maps common-lisp:null)
                         :accessor %automation-execution-target-maps :initform
                         common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %automation-execution-targets :initform
                         common-lisp:nil)
                        (target-parameter-name :initarg :target-parameter-name
                         :type
                         (common-lisp:or automation-parameter-key
                                         common-lisp:null)
                         :accessor %automation-execution-target-parameter-name
                         :initform common-lisp:nil)
                        (current-action :initarg :current-action :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-current-action :initform
                         common-lisp:nil)
                        (current-step-name :initarg :current-step-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-current-step-name :initform
                         common-lisp:nil)
                        (executed-by :initarg :executed-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-executed-by :initform
                         common-lisp:nil)
                        (parent-automation-execution-id :initarg
                         :parent-automation-execution-id :type
                         (common-lisp:or automation-execution-id
                                         common-lisp:null)
                         :accessor
                         %automation-execution-parent-automation-execution-id
                         :initform common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or execution-mode common-lisp:null)
                         :accessor %automation-execution-mode :initform
                         common-lisp:nil)
                        (failure-message :initarg :failure-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-failure-message :initform
                         common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor %automation-execution-outputs :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor %automation-execution-parameters :initform
                         common-lisp:nil)
                        (step-executions-truncated :initarg
                         :step-executions-truncated :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %automation-execution-step-executions-truncated
                         :initform common-lisp:nil)
                        (step-executions :initarg :step-executions :type
                         (common-lisp:or step-execution-list common-lisp:null)
                         :accessor %automation-execution-step-executions
                         :initform common-lisp:nil)
                        (automation-execution-status :initarg
                         :automation-execution-status :type
                         (common-lisp:or automation-execution-status
                                         common-lisp:null)
                         :accessor
                         %automation-execution-automation-execution-status
                         :initform common-lisp:nil)
                        (execution-end-time :initarg :execution-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %automation-execution-execution-end-time :initform
                         common-lisp:nil)
                        (execution-start-time :initarg :execution-start-time
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor %automation-execution-execution-start-time
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %automation-execution-document-version
                         :initform common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %automation-execution-document-name
                         :initform common-lisp:nil)
                        (automation-execution-id :initarg
                         :automation-execution-id :type
                         (common-lisp:or automation-execution-id
                                         common-lisp:null)
                         :accessor
                         %automation-execution-automation-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'automation-execution 'make-automation-execution))
 (common-lisp:defun make-automation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-request-name association-id
                     ops-item-id runbooks scheduled-time automation-subtype
                     triggered-alarms alarm-configuration progress-counters
                     target-locations target max-errors max-concurrency
                     resolved-targets target-maps targets target-parameter-name
                     current-action current-step-name executed-by
                     parent-automation-execution-id mode failure-message
                     outputs parameters step-executions-truncated
                     step-executions automation-execution-status
                     execution-end-time execution-start-time document-version
                     document-name automation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'automation-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input automation-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input automation-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-id))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-end-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-status))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-executions))
      (common-lisp:list
       (common-lisp:cons "StepExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'step-executions-truncated))
      (common-lisp:list
       (common-lisp:cons "StepExecutionsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "FailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-automation-execution-id))
      (common-lisp:list
       (common-lisp:cons "ParentAutomationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executed-by))
      (common-lisp:list
       (common-lisp:cons "ExecutedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-step-name))
      (common-lisp:list
       (common-lisp:cons "CurrentStepName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-action))
      (common-lisp:list
       (common-lisp:cons "CurrentAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-parameter-name))
      (common-lisp:list
       (common-lisp:cons "TargetParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-maps))
      (common-lisp:list
       (common-lisp:cons "TargetMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-targets))
      (common-lisp:list
       (common-lisp:cons "ResolvedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-locations))
      (common-lisp:list
       (common-lisp:cons "TargetLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-counters))
      (common-lisp:list
       (common-lisp:cons "ProgressCounters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggered-alarms))
      (common-lisp:list
       (common-lisp:cons "TriggeredAlarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation-subtype))
      (common-lisp:list
       (common-lisp:cons "AutomationSubtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-time))
      (common-lisp:list
       (common-lisp:cons "ScheduledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runbooks))
      (common-lisp:list
       (common-lisp:cons "Runbooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-request-name))
      (common-lisp:list
       (common-lisp:cons "ChangeRequestName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input automation-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass automation-execution-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or automation-execution-filter-value-list
                                         common-lisp:null)
                         :accessor %automation-execution-filter-values
                         :initform (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or automation-execution-filter-key
                                         common-lisp:null)
                         :accessor %automation-execution-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'automation-execution-filter
                    'make-automation-execution-filter))
 (common-lisp:defun make-automation-execution-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'automation-execution-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          automation-execution-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          automation-execution-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          automation-execution-filter))
   common-lisp:nil))
(common-lisp:deftype automation-execution-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype automation-execution-filter-list ()
   '(trivial-types:proper-list automation-execution-filter))
 (common-lisp:defun |make-automation-execution-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            automation-execution-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype automation-execution-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype automation-execution-filter-value-list ()
   '(trivial-types:proper-list automation-execution-filter-value))
 (common-lisp:defun |make-automation-execution-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            automation-execution-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype automation-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition automation-execution-limit-exceeded-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       automation-execution-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'automation-execution-limit-exceeded-exception
                    'automation-execution-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass automation-execution-metadata common-lisp:nil
                       ((change-request-name :initarg :change-request-name
                         :type
                         (common-lisp:or change-request-name common-lisp:null)
                         :accessor
                         %automation-execution-metadata-change-request-name
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-metadata-association-id
                         :initform common-lisp:nil)
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-metadata-ops-item-id :initform
                         common-lisp:nil)
                        (runbooks :initarg :runbooks :type
                         (common-lisp:or runbooks common-lisp:null) :accessor
                         %automation-execution-metadata-runbooks :initform
                         common-lisp:nil)
                        (scheduled-time :initarg :scheduled-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %automation-execution-metadata-scheduled-time
                         :initform common-lisp:nil)
                        (automation-subtype :initarg :automation-subtype :type
                         (common-lisp:or automation-subtype common-lisp:null)
                         :accessor
                         %automation-execution-metadata-automation-subtype
                         :initform common-lisp:nil)
                        (triggered-alarms :initarg :triggered-alarms :type
                         (common-lisp:or alarm-state-information-list
                                         common-lisp:null)
                         :accessor
                         %automation-execution-metadata-triggered-alarms
                         :initform common-lisp:nil)
                        (alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %automation-execution-metadata-alarm-configuration
                         :initform common-lisp:nil)
                        (automation-type :initarg :automation-type :type
                         (common-lisp:or automation-type common-lisp:null)
                         :accessor
                         %automation-execution-metadata-automation-type
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-metadata-target :initform
                         common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %automation-execution-metadata-max-errors :initform
                         common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         %automation-execution-metadata-max-concurrency
                         :initform common-lisp:nil)
                        (resolved-targets :initarg :resolved-targets :type
                         (common-lisp:or resolved-targets common-lisp:null)
                         :accessor
                         %automation-execution-metadata-resolved-targets
                         :initform common-lisp:nil)
                        (target-maps :initarg :target-maps :type
                         (common-lisp:or target-maps common-lisp:null)
                         :accessor %automation-execution-metadata-target-maps
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %automation-execution-metadata-targets :initform
                         common-lisp:nil)
                        (target-parameter-name :initarg :target-parameter-name
                         :type
                         (common-lisp:or automation-parameter-key
                                         common-lisp:null)
                         :accessor
                         %automation-execution-metadata-target-parameter-name
                         :initform common-lisp:nil)
                        (failure-message :initarg :failure-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-metadata-failure-message
                         :initform common-lisp:nil)
                        (current-action :initarg :current-action :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-metadata-current-action
                         :initform common-lisp:nil)
                        (current-step-name :initarg :current-step-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-metadata-current-step-name
                         :initform common-lisp:nil)
                        (parent-automation-execution-id :initarg
                         :parent-automation-execution-id :type
                         (common-lisp:or automation-execution-id
                                         common-lisp:null)
                         :accessor
                         %automation-execution-metadata-parent-automation-execution-id
                         :initform common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or execution-mode common-lisp:null)
                         :accessor %automation-execution-metadata-mode
                         :initform common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor %automation-execution-metadata-outputs
                         :initform common-lisp:nil)
                        (log-file :initarg :log-file :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-metadata-log-file :initform
                         common-lisp:nil)
                        (executed-by :initarg :executed-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %automation-execution-metadata-executed-by :initform
                         common-lisp:nil)
                        (execution-end-time :initarg :execution-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %automation-execution-metadata-execution-end-time
                         :initform common-lisp:nil)
                        (execution-start-time :initarg :execution-start-time
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor
                         %automation-execution-metadata-execution-start-time
                         :initform common-lisp:nil)
                        (automation-execution-status :initarg
                         :automation-execution-status :type
                         (common-lisp:or automation-execution-status
                                         common-lisp:null)
                         :accessor
                         %automation-execution-metadata-automation-execution-status
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %automation-execution-metadata-document-version
                         :initform common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %automation-execution-metadata-document-name
                         :initform common-lisp:nil)
                        (automation-execution-id :initarg
                         :automation-execution-id :type
                         (common-lisp:or automation-execution-id
                                         common-lisp:null)
                         :accessor
                         %automation-execution-metadata-automation-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'automation-execution-metadata
                    'make-automation-execution-metadata))
 (common-lisp:defun make-automation-execution-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-request-name association-id
                     ops-item-id runbooks scheduled-time automation-subtype
                     triggered-alarms alarm-configuration automation-type
                     target max-errors max-concurrency resolved-targets
                     target-maps targets target-parameter-name failure-message
                     current-action current-step-name
                     parent-automation-execution-id mode outputs log-file
                     executed-by execution-end-time execution-start-time
                     automation-execution-status document-version document-name
                     automation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'automation-execution-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          automation-execution-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          automation-execution-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-id))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-status))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-end-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executed-by))
      (common-lisp:list
       (common-lisp:cons "ExecutedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file))
      (common-lisp:list
       (common-lisp:cons "LogFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-automation-execution-id))
      (common-lisp:list
       (common-lisp:cons "ParentAutomationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-step-name))
      (common-lisp:list
       (common-lisp:cons "CurrentStepName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-action))
      (common-lisp:list
       (common-lisp:cons "CurrentAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "FailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-parameter-name))
      (common-lisp:list
       (common-lisp:cons "TargetParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-maps))
      (common-lisp:list
       (common-lisp:cons "TargetMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-targets))
      (common-lisp:list
       (common-lisp:cons "ResolvedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation-type))
      (common-lisp:list
       (common-lisp:cons "AutomationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggered-alarms))
      (common-lisp:list
       (common-lisp:cons "TriggeredAlarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation-subtype))
      (common-lisp:list
       (common-lisp:cons "AutomationSubtype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-time))
      (common-lisp:list
       (common-lisp:cons "ScheduledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runbooks))
      (common-lisp:list
       (common-lisp:cons "Runbooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-request-name))
      (common-lisp:list
       (common-lisp:cons "ChangeRequestName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          automation-execution-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype automation-execution-metadata-list ()
   '(trivial-types:proper-list automation-execution-metadata))
 (common-lisp:defun |make-automation-execution-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            automation-execution-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition automation-execution-not-found-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       automation-execution-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'automation-execution-not-found-exception
                    'automation-execution-not-found-exception-message)))
(common-lisp:deftype automation-execution-status () 'common-lisp:string)
(common-lisp:deftype automation-parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype automation-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-automation-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype automation-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype automation-parameter-value-list ()
   '(trivial-types:proper-list automation-parameter-value))
 (common-lisp:defun |make-automation-parameter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            automation-parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition automation-step-not-found-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       automation-step-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'automation-step-not-found-exception
                    'automation-step-not-found-exception-message)))
(common-lisp:deftype automation-subtype () 'common-lisp:string)
(common-lisp:deftype automation-target-parameter-name () 'common-lisp:string)
(common-lisp:deftype automation-type () 'common-lisp:string)
(common-lisp:deftype baseline-description () 'common-lisp:string)
(common-lisp:deftype baseline-id () 'common-lisp:string)
(common-lisp:deftype baseline-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass baseline-override common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or patch-source-list common-lisp:null)
                         :accessor %baseline-override-sources :initform
                         common-lisp:nil)
                        (approved-patches-enable-non-security :initarg
                         :approved-patches-enable-non-security :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %baseline-override-approved-patches-enable-non-security
                         :initform common-lisp:nil)
                        (rejected-patches-action :initarg
                         :rejected-patches-action :type
                         (common-lisp:or patch-action common-lisp:null)
                         :accessor %baseline-override-rejected-patches-action
                         :initform common-lisp:nil)
                        (rejected-patches :initarg :rejected-patches :type
                         (common-lisp:or patch-id-list common-lisp:null)
                         :accessor %baseline-override-rejected-patches
                         :initform common-lisp:nil)
                        (approved-patches-compliance-level :initarg
                         :approved-patches-compliance-level :type
                         (common-lisp:or patch-compliance-level
                                         common-lisp:null)
                         :accessor
                         %baseline-override-approved-patches-compliance-level
                         :initform common-lisp:nil)
                        (approved-patches :initarg :approved-patches :type
                         (common-lisp:or patch-id-list common-lisp:null)
                         :accessor %baseline-override-approved-patches
                         :initform common-lisp:nil)
                        (approval-rules :initarg :approval-rules :type
                         (common-lisp:or patch-rule-group common-lisp:null)
                         :accessor %baseline-override-approval-rules :initform
                         common-lisp:nil)
                        (global-filters :initarg :global-filters :type
                         (common-lisp:or patch-filter-group common-lisp:null)
                         :accessor %baseline-override-global-filters :initform
                         common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %baseline-override-operating-system
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'baseline-override 'make-baseline-override))
 (common-lisp:defun make-baseline-override
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources
                     approved-patches-enable-non-security
                     rejected-patches-action rejected-patches
                     approved-patches-compliance-level approved-patches
                     approval-rules global-filters operating-system)
   (common-lisp:apply #'common-lisp:make-instance 'baseline-override
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input baseline-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input baseline-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-filters))
      (common-lisp:list
       (common-lisp:cons "GlobalFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approval-rules))
      (common-lisp:list
       (common-lisp:cons "ApprovalRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approved-patches))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-patches-compliance-level))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatchesComplianceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejected-patches))
      (common-lisp:list
       (common-lisp:cons "RejectedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rejected-patches-action))
      (common-lisp:list
       (common-lisp:cons "RejectedPatchesAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-patches-enable-non-security))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatchesEnableNonSecurity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input baseline-override))
   common-lisp:nil))
(common-lisp:deftype batch-error-message () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype calendar-name-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype calendar-name-or-arnlist ()
   '(trivial-types:proper-list calendar-name-or-arn))
 (common-lisp:defun |make-calendar-name-or-arnlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list calendar-name-or-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype calendar-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-command-request common-lisp:nil
                       ((instance-ids :initarg :instance-ids :type
                         (common-lisp:or instance-id-list common-lisp:null)
                         :accessor %cancel-command-request-instance-ids
                         :initform common-lisp:nil)
                        (command-id :initarg :command-id :type
                         (common-lisp:or command-id common-lisp:null) :accessor
                         %cancel-command-request-command-id :initform
                         (common-lisp:error ":command-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-command-request 'make-cancel-command-request))
 (common-lisp:defun make-cancel-command-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-ids command-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-command-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-command-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-command-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-id))
      (common-lisp:list
       (common-lisp:cons "CommandId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-command-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-command-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-command-result 'make-cancel-command-result))
 (common-lisp:defun make-cancel-command-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-command-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-command-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-command-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-command-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-maintenance-window-execution-request
                       common-lisp:nil
                       ((window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %cancel-maintenance-window-execution-request-window-execution-id
                         :initform
                         (common-lisp:error
                          ":window-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-maintenance-window-execution-request
                    'make-cancel-maintenance-window-execution-request))
 (common-lisp:defun make-cancel-maintenance-window-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-maintenance-window-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-maintenance-window-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-maintenance-window-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-maintenance-window-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-maintenance-window-execution-result
                       common-lisp:nil
                       ((window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %cancel-maintenance-window-execution-result-window-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-maintenance-window-execution-result
                    'make-cancel-maintenance-window-execution-result))
 (common-lisp:defun make-cancel-maintenance-window-execution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-maintenance-window-execution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-maintenance-window-execution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-maintenance-window-execution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-maintenance-window-execution-result))
   common-lisp:nil))
(common-lisp:deftype category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype category-enum-list ()
   '(trivial-types:proper-list category))
 (common-lisp:defun |make-category-enum-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype category-list () '(trivial-types:proper-list category))
 (common-lisp:defun |make-category-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category))
   aws-sdk/generator/shape::members))
(common-lisp:deftype change-details-value () 'common-lisp:string)
(common-lisp:deftype change-request-name () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype cloud-watch-log-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-output-config common-lisp:nil
                       ((cloud-watch-output-enabled :initarg
                         :cloud-watch-output-enabled :type
                         (common-lisp:or cloud-watch-output-enabled
                                         common-lisp:null)
                         :accessor
                         %cloud-watch-output-config-cloud-watch-output-enabled
                         :initform common-lisp:nil)
                        (cloud-watch-log-group-name :initarg
                         :cloud-watch-log-group-name :type
                         (common-lisp:or cloud-watch-log-group-name
                                         common-lisp:null)
                         :accessor
                         %cloud-watch-output-config-cloud-watch-log-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-output-config
                    'make-cloud-watch-output-config))
 (common-lisp:defun make-cloud-watch-output-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-output-enabled
                     cloud-watch-log-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-output-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-log-group-name))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-output-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchOutputEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-output-config))
   common-lisp:nil))
(common-lisp:deftype cloud-watch-output-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass command common-lisp:nil
                       ((triggered-alarms :initarg :triggered-alarms :type
                         (common-lisp:or alarm-state-information-list
                                         common-lisp:null)
                         :accessor %command-triggered-alarms :initform
                         common-lisp:nil)
                        (alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor %command-alarm-configuration :initform
                         common-lisp:nil)
                        (timeout-seconds :initarg :timeout-seconds :type
                         (common-lisp:or timeout-seconds common-lisp:null)
                         :accessor %command-timeout-seconds :initform
                         common-lisp:nil)
                        (cloud-watch-output-config :initarg
                         :cloud-watch-output-config :type
                         (common-lisp:or cloud-watch-output-config
                                         common-lisp:null)
                         :accessor %command-cloud-watch-output-config :initform
                         common-lisp:nil)
                        (notification-config :initarg :notification-config
                         :type
                         (common-lisp:or notification-config common-lisp:null)
                         :accessor %command-notification-config :initform
                         common-lisp:nil)
                        (service-role :initarg :service-role :type
                         (common-lisp:or service-role common-lisp:null)
                         :accessor %command-service-role :initform
                         common-lisp:nil)
                        (delivery-timed-out-count :initarg
                         :delivery-timed-out-count :type
                         (common-lisp:or delivery-timed-out-count
                                         common-lisp:null)
                         :accessor %command-delivery-timed-out-count :initform
                         common-lisp:nil)
                        (error-count :initarg :error-count :type
                         (common-lisp:or error-count common-lisp:null)
                         :accessor %command-error-count :initform
                         common-lisp:nil)
                        (completed-count :initarg :completed-count :type
                         (common-lisp:or completed-count common-lisp:null)
                         :accessor %command-completed-count :initform
                         common-lisp:nil)
                        (target-count :initarg :target-count :type
                         (common-lisp:or target-count common-lisp:null)
                         :accessor %command-target-count :initform
                         common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %command-max-errors :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor %command-max-concurrency :initform
                         common-lisp:nil)
                        (output-s3key-prefix :initarg :output-s3key-prefix
                         :type (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor %command-output-s3key-prefix :initform
                         common-lisp:nil)
                        (output-s3bucket-name :initarg :output-s3bucket-name
                         :type (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %command-output-s3bucket-name :initform
                         common-lisp:nil)
                        (output-s3region :initarg :output-s3region :type
                         (common-lisp:or s3region common-lisp:null) :accessor
                         %command-output-s3region :initform common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or status-details common-lisp:null)
                         :accessor %command-status-details :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or command-status common-lisp:null)
                         :accessor %command-status :initform common-lisp:nil)
                        (requested-date-time :initarg :requested-date-time
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor %command-requested-date-time :initform
                         common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %command-targets :initform common-lisp:nil)
                        (instance-ids :initarg :instance-ids :type
                         (common-lisp:or instance-id-list common-lisp:null)
                         :accessor %command-instance-ids :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %command-parameters :initform common-lisp:nil)
                        (expires-after :initarg :expires-after :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %command-expires-after :initform common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or comment common-lisp:null) :accessor
                         %command-comment :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %command-document-version :initform
                         common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %command-document-name :initform
                         common-lisp:nil)
                        (command-id :initarg :command-id :type
                         (common-lisp:or command-id common-lisp:null) :accessor
                         %command-command-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'command 'make-command))
 (common-lisp:defun make-command
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key triggered-alarms alarm-configuration
                     timeout-seconds cloud-watch-output-config
                     notification-config service-role delivery-timed-out-count
                     error-count completed-count target-count max-errors
                     max-concurrency output-s3key-prefix output-s3bucket-name
                     output-s3region status-details status requested-date-time
                     targets instance-ids parameters expires-after comment
                     document-version document-name command-id)
   (common-lisp:apply #'common-lisp:make-instance 'command
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input command))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input command))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-id))
      (common-lisp:list
       (common-lisp:cons "CommandId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-after))
      (common-lisp:list
       (common-lisp:cons "ExpiresAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-date-time))
      (common-lisp:list
       (common-lisp:cons "RequestedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3region))
      (common-lisp:list
       (common-lisp:cons "OutputS3Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "OutputS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-count))
      (common-lisp:list
       (common-lisp:cons "TargetCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-count))
      (common-lisp:list
       (common-lisp:cons "CompletedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-count))
      (common-lisp:list
       (common-lisp:cons "ErrorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-timed-out-count))
      (common-lisp:list
       (common-lisp:cons "DeliveryTimedOutCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-config))
      (common-lisp:list
       (common-lisp:cons "NotificationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-output-config))
      (common-lisp:list
       (common-lisp:cons "CloudWatchOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggered-alarms))
      (common-lisp:list
       (common-lisp:cons "TriggeredAlarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input command))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass command-filter common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or command-filter-value common-lisp:null)
                         :accessor %command-filter-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or command-filter-key common-lisp:null)
                         :accessor %command-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'command-filter 'make-command-filter))
 (common-lisp:defun make-command-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'command-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input command-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input command-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input command-filter))
   common-lisp:nil))
(common-lisp:deftype command-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype command-filter-list ()
   '(trivial-types:proper-list command-filter))
 (common-lisp:defun |make-command-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list command-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype command-filter-value () 'common-lisp:string)
(common-lisp:deftype command-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass command-invocation common-lisp:nil
                       ((cloud-watch-output-config :initarg
                         :cloud-watch-output-config :type
                         (common-lisp:or cloud-watch-output-config
                                         common-lisp:null)
                         :accessor
                         %command-invocation-cloud-watch-output-config
                         :initform common-lisp:nil)
                        (notification-config :initarg :notification-config
                         :type
                         (common-lisp:or notification-config common-lisp:null)
                         :accessor %command-invocation-notification-config
                         :initform common-lisp:nil)
                        (service-role :initarg :service-role :type
                         (common-lisp:or service-role common-lisp:null)
                         :accessor %command-invocation-service-role :initform
                         common-lisp:nil)
                        (command-plugins :initarg :command-plugins :type
                         (common-lisp:or command-plugin-list common-lisp:null)
                         :accessor %command-invocation-command-plugins
                         :initform common-lisp:nil)
                        (standard-error-url :initarg :standard-error-url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %command-invocation-standard-error-url :initform
                         common-lisp:nil)
                        (standard-output-url :initarg :standard-output-url
                         :type (common-lisp:or url common-lisp:null) :accessor
                         %command-invocation-standard-output-url :initform
                         common-lisp:nil)
                        (trace-output :initarg :trace-output :type
                         (common-lisp:or invocation-trace-output
                                         common-lisp:null)
                         :accessor %command-invocation-trace-output :initform
                         common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or status-details common-lisp:null)
                         :accessor %command-invocation-status-details :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or command-invocation-status
                                         common-lisp:null)
                         :accessor %command-invocation-status :initform
                         common-lisp:nil)
                        (requested-date-time :initarg :requested-date-time
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor %command-invocation-requested-date-time
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %command-invocation-document-version
                         :initform common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %command-invocation-document-name :initform
                         common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or comment common-lisp:null) :accessor
                         %command-invocation-comment :initform common-lisp:nil)
                        (instance-name :initarg :instance-name :type
                         (common-lisp:or instance-tag-name common-lisp:null)
                         :accessor %command-invocation-instance-name :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %command-invocation-instance-id :initform
                         common-lisp:nil)
                        (command-id :initarg :command-id :type
                         (common-lisp:or command-id common-lisp:null) :accessor
                         %command-invocation-command-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'command-invocation 'make-command-invocation))
 (common-lisp:defun make-command-invocation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-output-config
                     notification-config service-role command-plugins
                     standard-error-url standard-output-url trace-output
                     status-details status requested-date-time document-version
                     document-name comment instance-name instance-id
                     command-id)
   (common-lisp:apply #'common-lisp:make-instance 'command-invocation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input command-invocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input command-invocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-id))
      (common-lisp:list
       (common-lisp:cons "CommandId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "InstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-date-time))
      (common-lisp:list
       (common-lisp:cons "RequestedDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-output))
      (common-lisp:list
       (common-lisp:cons "TraceOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-output-url))
      (common-lisp:list
       (common-lisp:cons "StandardOutputUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-error-url))
      (common-lisp:list
       (common-lisp:cons "StandardErrorUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-plugins))
      (common-lisp:list
       (common-lisp:cons "CommandPlugins"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-config))
      (common-lisp:list
       (common-lisp:cons "NotificationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-output-config))
      (common-lisp:list
       (common-lisp:cons "CloudWatchOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input command-invocation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype command-invocation-list ()
   '(trivial-types:proper-list command-invocation))
 (common-lisp:defun |make-command-invocation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list command-invocation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype command-invocation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype command-list () '(trivial-types:proper-list command))
 (common-lisp:defun |make-command-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list command))
   aws-sdk/generator/shape::members))
(common-lisp:deftype command-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass command-plugin common-lisp:nil
                       ((output-s3key-prefix :initarg :output-s3key-prefix
                         :type (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor %command-plugin-output-s3key-prefix
                         :initform common-lisp:nil)
                        (output-s3bucket-name :initarg :output-s3bucket-name
                         :type (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %command-plugin-output-s3bucket-name
                         :initform common-lisp:nil)
                        (output-s3region :initarg :output-s3region :type
                         (common-lisp:or s3region common-lisp:null) :accessor
                         %command-plugin-output-s3region :initform
                         common-lisp:nil)
                        (standard-error-url :initarg :standard-error-url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %command-plugin-standard-error-url :initform
                         common-lisp:nil)
                        (standard-output-url :initarg :standard-output-url
                         :type (common-lisp:or url common-lisp:null) :accessor
                         %command-plugin-standard-output-url :initform
                         common-lisp:nil)
                        (output :initarg :output :type
                         (common-lisp:or command-plugin-output
                                         common-lisp:null)
                         :accessor %command-plugin-output :initform
                         common-lisp:nil)
                        (response-finish-date-time :initarg
                         :response-finish-date-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %command-plugin-response-finish-date-time :initform
                         common-lisp:nil)
                        (response-start-date-time :initarg
                         :response-start-date-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %command-plugin-response-start-date-time :initform
                         common-lisp:nil)
                        (response-code :initarg :response-code :type
                         (common-lisp:or response-code common-lisp:null)
                         :accessor %command-plugin-response-code :initform
                         common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or status-details common-lisp:null)
                         :accessor %command-plugin-status-details :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or command-plugin-status
                                         common-lisp:null)
                         :accessor %command-plugin-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or command-plugin-name common-lisp:null)
                         :accessor %command-plugin-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'command-plugin 'make-command-plugin))
 (common-lisp:defun make-command-plugin
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-s3key-prefix output-s3bucket-name
                     output-s3region standard-error-url standard-output-url
                     output response-finish-date-time response-start-date-time
                     response-code status-details status name)
   (common-lisp:apply #'common-lisp:make-instance 'command-plugin
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input command-plugin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input command-plugin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code))
      (common-lisp:list
       (common-lisp:cons "ResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-start-date-time))
      (common-lisp:list
       (common-lisp:cons "ResponseStartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-finish-date-time))
      (common-lisp:list
       (common-lisp:cons "ResponseFinishDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-output-url))
      (common-lisp:list
       (common-lisp:cons "StandardOutputUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-error-url))
      (common-lisp:list
       (common-lisp:cons "StandardErrorUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3region))
      (common-lisp:list
       (common-lisp:cons "OutputS3Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "OutputS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input command-plugin))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype command-plugin-list ()
   '(trivial-types:proper-list command-plugin))
 (common-lisp:defun |make-command-plugin-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list command-plugin))
   aws-sdk/generator/shape::members))
(common-lisp:deftype command-plugin-name () 'common-lisp:string)
(common-lisp:deftype command-plugin-output () 'common-lisp:string)
(common-lisp:deftype command-plugin-status () 'common-lisp:string)
(common-lisp:deftype command-status () 'common-lisp:string)
(common-lisp:deftype comment () 'common-lisp:string)
(common-lisp:deftype completed-count () 'common-lisp:integer)
(common-lisp:deftype compliance-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compliance-execution-summary common-lisp:nil
                       ((execution-type :initarg :execution-type :type
                         (common-lisp:or compliance-execution-type
                                         common-lisp:null)
                         :accessor %compliance-execution-summary-execution-type
                         :initform common-lisp:nil)
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or compliance-execution-id
                                         common-lisp:null)
                         :accessor %compliance-execution-summary-execution-id
                         :initform common-lisp:nil)
                        (execution-time :initarg :execution-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %compliance-execution-summary-execution-time :initform
                         (common-lisp:error ":execution-time is required"))))
 (common-lisp:export
  (common-lisp:list 'compliance-execution-summary
                    'make-compliance-execution-summary))
 (common-lisp:defun make-compliance-execution-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key execution-type execution-id
                     execution-time)
   (common-lisp:apply #'common-lisp:make-instance 'compliance-execution-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compliance-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compliance-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-type))
      (common-lisp:list
       (common-lisp:cons "ExecutionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compliance-execution-summary))
   common-lisp:nil))
(common-lisp:deftype compliance-execution-type () 'common-lisp:string)
(common-lisp:deftype compliance-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compliance-item common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or compliance-item-details
                                         common-lisp:null)
                         :accessor %compliance-item-details :initform
                         common-lisp:nil)
                        (execution-summary :initarg :execution-summary :type
                         (common-lisp:or compliance-execution-summary
                                         common-lisp:null)
                         :accessor %compliance-item-execution-summary :initform
                         common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or compliance-severity common-lisp:null)
                         :accessor %compliance-item-severity :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or compliance-status common-lisp:null)
                         :accessor %compliance-item-status :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or compliance-item-title
                                         common-lisp:null)
                         :accessor %compliance-item-title :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or compliance-item-id common-lisp:null)
                         :accessor %compliance-item-id :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or compliance-resource-id
                                         common-lisp:null)
                         :accessor %compliance-item-resource-id :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or compliance-resource-type
                                         common-lisp:null)
                         :accessor %compliance-item-resource-type :initform
                         common-lisp:nil)
                        (compliance-type :initarg :compliance-type :type
                         (common-lisp:or compliance-type-name common-lisp:null)
                         :accessor %compliance-item-compliance-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'compliance-item 'make-compliance-item))
 (common-lisp:defun make-compliance-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details execution-summary severity status
                     title id resource-id resource-type compliance-type)
   (common-lisp:apply #'common-lisp:make-instance 'compliance-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compliance-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compliance-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-summary))
      (common-lisp:list
       (common-lisp:cons "ExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compliance-item))
   common-lisp:nil))
(common-lisp:deftype compliance-item-content-hash () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compliance-item-details () 'common-lisp:hash-table)
 (common-lisp:defun |make-compliance-item-details|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass compliance-item-entry common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or compliance-item-details
                                         common-lisp:null)
                         :accessor %compliance-item-entry-details :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or compliance-status common-lisp:null)
                         :accessor %compliance-item-entry-status :initform
                         (common-lisp:error ":status is required"))
                        (severity :initarg :severity :type
                         (common-lisp:or compliance-severity common-lisp:null)
                         :accessor %compliance-item-entry-severity :initform
                         (common-lisp:error ":severity is required"))
                        (title :initarg :title :type
                         (common-lisp:or compliance-item-title
                                         common-lisp:null)
                         :accessor %compliance-item-entry-title :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or compliance-item-id common-lisp:null)
                         :accessor %compliance-item-entry-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'compliance-item-entry 'make-compliance-item-entry))
 (common-lisp:defun make-compliance-item-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details status severity title id)
   (common-lisp:apply #'common-lisp:make-instance 'compliance-item-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compliance-item-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compliance-item-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compliance-item-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compliance-item-entry-list ()
   '(trivial-types:proper-list compliance-item-entry))
 (common-lisp:defun |make-compliance-item-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compliance-item-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compliance-item-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compliance-item-list ()
   '(trivial-types:proper-list compliance-item))
 (common-lisp:defun |make-compliance-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compliance-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compliance-item-title () 'common-lisp:string)
(common-lisp:deftype compliance-query-operator-type () 'common-lisp:string)
(common-lisp:deftype compliance-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compliance-resource-id-list ()
   '(trivial-types:proper-list compliance-resource-id))
 (common-lisp:defun |make-compliance-resource-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compliance-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compliance-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compliance-resource-type-list ()
   '(trivial-types:proper-list compliance-resource-type))
 (common-lisp:defun |make-compliance-resource-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            compliance-resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compliance-severity () 'common-lisp:string)
(common-lisp:deftype compliance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compliance-string-filter common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or compliance-query-operator-type
                                         common-lisp:null)
                         :accessor %compliance-string-filter-type :initform
                         common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or compliance-string-filter-value-list
                                         common-lisp:null)
                         :accessor %compliance-string-filter-values :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or compliance-string-filter-key
                                         common-lisp:null)
                         :accessor %compliance-string-filter-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'compliance-string-filter 'make-compliance-string-filter))
 (common-lisp:defun make-compliance-string-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type values key)
   (common-lisp:apply #'common-lisp:make-instance 'compliance-string-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compliance-string-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compliance-string-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compliance-string-filter))
   common-lisp:nil))
(common-lisp:deftype compliance-string-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compliance-string-filter-list ()
   '(trivial-types:proper-list compliance-string-filter))
 (common-lisp:defun |make-compliance-string-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            compliance-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype compliance-string-filter-value-list ()
   '(trivial-types:proper-list compliance-filter-value))
 (common-lisp:defun |make-compliance-string-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compliance-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compliance-summary-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass compliance-summary-item common-lisp:nil
                       ((non-compliant-summary :initarg :non-compliant-summary
                         :type
                         (common-lisp:or non-compliant-summary
                                         common-lisp:null)
                         :accessor
                         %compliance-summary-item-non-compliant-summary
                         :initform common-lisp:nil)
                        (compliant-summary :initarg :compliant-summary :type
                         (common-lisp:or compliant-summary common-lisp:null)
                         :accessor %compliance-summary-item-compliant-summary
                         :initform common-lisp:nil)
                        (compliance-type :initarg :compliance-type :type
                         (common-lisp:or compliance-type-name common-lisp:null)
                         :accessor %compliance-summary-item-compliance-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'compliance-summary-item 'make-compliance-summary-item))
 (common-lisp:defun make-compliance-summary-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key non-compliant-summary compliant-summary
                     compliance-type)
   (common-lisp:apply #'common-lisp:make-instance 'compliance-summary-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compliance-summary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compliance-summary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliant-summary))
      (common-lisp:list
       (common-lisp:cons "CompliantSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-summary))
      (common-lisp:list
       (common-lisp:cons "NonCompliantSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compliance-summary-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compliance-summary-item-list ()
   '(trivial-types:proper-list compliance-summary-item))
 (common-lisp:defun |make-compliance-summary-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compliance-summary-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition compliance-type-count-limit-exceeded-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       compliance-type-count-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'compliance-type-count-limit-exceeded-exception
                    'compliance-type-count-limit-exceeded-exception-message)))
(common-lisp:deftype compliance-type-name () 'common-lisp:string)
(common-lisp:deftype compliance-upload-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compliant-summary common-lisp:nil
                       ((severity-summary :initarg :severity-summary :type
                         (common-lisp:or severity-summary common-lisp:null)
                         :accessor %compliant-summary-severity-summary
                         :initform common-lisp:nil)
                        (compliant-count :initarg :compliant-count :type
                         (common-lisp:or compliance-summary-count
                                         common-lisp:null)
                         :accessor %compliant-summary-compliant-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'compliant-summary 'make-compliant-summary))
 (common-lisp:defun make-compliant-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity-summary compliant-count)
   (common-lisp:apply #'common-lisp:make-instance 'compliant-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compliant-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compliant-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliant-count))
      (common-lisp:list
       (common-lisp:cons "CompliantCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-summary))
      (common-lisp:list
       (common-lisp:cons "SeveritySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compliant-summary))
   common-lisp:nil))
(common-lisp:deftype computer-name () 'common-lisp:string)
(common-lisp:deftype connection-status () 'common-lisp:string)
(common-lisp:deftype content-length () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-activation-request common-lisp:nil
                       ((registration-metadata :initarg :registration-metadata
                         :type
                         (common-lisp:or registration-metadata-list
                                         common-lisp:null)
                         :accessor
                         %create-activation-request-registration-metadata
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-activation-request-tags :initform
                         common-lisp:nil)
                        (expiration-date :initarg :expiration-date :type
                         (common-lisp:or expiration-date common-lisp:null)
                         :accessor %create-activation-request-expiration-date
                         :initform common-lisp:nil)
                        (registration-limit :initarg :registration-limit :type
                         (common-lisp:or registration-limit common-lisp:null)
                         :accessor
                         %create-activation-request-registration-limit
                         :initform common-lisp:nil)
                        (iam-role :initarg :iam-role :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %create-activation-request-iam-role :initform
                         (common-lisp:error ":iam-role is required"))
                        (default-instance-name :initarg :default-instance-name
                         :type
                         (common-lisp:or default-instance-name
                                         common-lisp:null)
                         :accessor
                         %create-activation-request-default-instance-name
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or activation-description
                                         common-lisp:null)
                         :accessor %create-activation-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-activation-request
                    'make-create-activation-request))
 (common-lisp:defun make-create-activation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registration-metadata tags
                     expiration-date registration-limit iam-role
                     default-instance-name description)
   (common-lisp:apply #'common-lisp:make-instance 'create-activation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-activation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-activation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-instance-name))
      (common-lisp:list
       (common-lisp:cons "DefaultInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "IamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-limit))
      (common-lisp:list
       (common-lisp:cons "RegistrationLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-date))
      (common-lisp:list
       (common-lisp:cons "ExpirationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-metadata))
      (common-lisp:list
       (common-lisp:cons "RegistrationMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-activation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-activation-result common-lisp:nil
                       ((activation-code :initarg :activation-code :type
                         (common-lisp:or activation-code common-lisp:null)
                         :accessor %create-activation-result-activation-code
                         :initform common-lisp:nil)
                        (activation-id :initarg :activation-id :type
                         (common-lisp:or activation-id common-lisp:null)
                         :accessor %create-activation-result-activation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-activation-result 'make-create-activation-result))
 (common-lisp:defun make-create-activation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key activation-code activation-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-activation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-activation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-activation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-id))
      (common-lisp:list
       (common-lisp:cons "ActivationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-code))
      (common-lisp:list
       (common-lisp:cons "ActivationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-activation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-association-batch-request common-lisp:nil
                       ((entries :initarg :entries :type
                         (common-lisp:or
                          create-association-batch-request-entries
                          common-lisp:null)
                         :accessor %create-association-batch-request-entries
                         :initform
                         (common-lisp:error ":entries is required"))))
 (common-lisp:export
  (common-lisp:list 'create-association-batch-request
                    'make-create-association-batch-request))
 (common-lisp:defun make-create-association-batch-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entries)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-association-batch-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-association-batch-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-association-batch-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-association-batch-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-association-batch-request-entries ()
   '(trivial-types:proper-list create-association-batch-request-entry))
 (common-lisp:defun |make-create-association-batch-request-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            create-association-batch-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-association-batch-request-entry common-lisp:nil
                       ((alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-alarm-configuration
                         :initform common-lisp:nil)
                        (target-maps :initarg :target-maps :type
                         (common-lisp:or target-maps common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-target-maps
                         :initform common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or schedule-offset common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-schedule-offset
                         :initform common-lisp:nil)
                        (target-locations :initarg :target-locations :type
                         (common-lisp:or target-locations common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-target-locations
                         :initform common-lisp:nil)
                        (calendar-names :initarg :calendar-names :type
                         (common-lisp:or calendar-name-or-arnlist
                                         common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-calendar-names
                         :initform common-lisp:nil)
                        (apply-only-at-cron-interval :initarg
                         :apply-only-at-cron-interval :type
                         (common-lisp:or apply-only-at-cron-interval
                                         common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-apply-only-at-cron-interval
                         :initform common-lisp:nil)
                        (sync-compliance :initarg :sync-compliance :type
                         (common-lisp:or association-sync-compliance
                                         common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-sync-compliance
                         :initform common-lisp:nil)
                        (compliance-severity :initarg :compliance-severity
                         :type
                         (common-lisp:or association-compliance-severity
                                         common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-compliance-severity
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-max-concurrency
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %create-association-batch-request-entry-max-errors
                         :initform common-lisp:nil)
                        (association-name :initarg :association-name :type
                         (common-lisp:or association-name common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-association-name
                         :initform common-lisp:nil)
                        (output-location :initarg :output-location :type
                         (common-lisp:or instance-association-output-location
                                         common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-output-location
                         :initform common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-schedule-expression
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %create-association-batch-request-entry-targets
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-document-version
                         :initform common-lisp:nil)
                        (automation-target-parameter-name :initarg
                         :automation-target-parameter-name :type
                         (common-lisp:or automation-target-parameter-name
                                         common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-automation-target-parameter-name
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %create-association-batch-request-entry-parameters
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         %create-association-batch-request-entry-instance-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %create-association-batch-request-entry-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-association-batch-request-entry
                    'make-create-association-batch-request-entry))
 (common-lisp:defun make-create-association-batch-request-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-configuration target-maps
                     schedule-offset target-locations calendar-names
                     apply-only-at-cron-interval sync-compliance
                     compliance-severity max-concurrency max-errors
                     association-name output-location schedule-expression
                     targets document-version automation-target-parameter-name
                     parameters instance-id name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-association-batch-request-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-association-batch-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-association-batch-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-target-parameter-name))
      (common-lisp:list
       (common-lisp:cons "AutomationTargetParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-name))
      (common-lisp:list
       (common-lisp:cons "AssociationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-severity))
      (common-lisp:list
       (common-lisp:cons "ComplianceSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-compliance))
      (common-lisp:list
       (common-lisp:cons "SyncCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-only-at-cron-interval))
      (common-lisp:list
       (common-lisp:cons "ApplyOnlyAtCronInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calendar-names))
      (common-lisp:list
       (common-lisp:cons "CalendarNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-locations))
      (common-lisp:list
       (common-lisp:cons "TargetLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-maps))
      (common-lisp:list
       (common-lisp:cons "TargetMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-association-batch-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-association-batch-result common-lisp:nil
                       ((failed :initarg :failed :type
                         (common-lisp:or failed-create-association-list
                                         common-lisp:null)
                         :accessor %create-association-batch-result-failed
                         :initform common-lisp:nil)
                        (successful :initarg :successful :type
                         (common-lisp:or association-description-list
                                         common-lisp:null)
                         :accessor %create-association-batch-result-successful
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-association-batch-result
                    'make-create-association-batch-result))
 (common-lisp:defun make-create-association-batch-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed successful)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-association-batch-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-association-batch-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-association-batch-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-association-batch-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-association-request common-lisp:nil
                       ((alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %create-association-request-alarm-configuration
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-association-request-tags :initform
                         common-lisp:nil)
                        (target-maps :initarg :target-maps :type
                         (common-lisp:or target-maps common-lisp:null)
                         :accessor %create-association-request-target-maps
                         :initform common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or schedule-offset common-lisp:null)
                         :accessor %create-association-request-schedule-offset
                         :initform common-lisp:nil)
                        (target-locations :initarg :target-locations :type
                         (common-lisp:or target-locations common-lisp:null)
                         :accessor %create-association-request-target-locations
                         :initform common-lisp:nil)
                        (calendar-names :initarg :calendar-names :type
                         (common-lisp:or calendar-name-or-arnlist
                                         common-lisp:null)
                         :accessor %create-association-request-calendar-names
                         :initform common-lisp:nil)
                        (apply-only-at-cron-interval :initarg
                         :apply-only-at-cron-interval :type
                         (common-lisp:or apply-only-at-cron-interval
                                         common-lisp:null)
                         :accessor
                         %create-association-request-apply-only-at-cron-interval
                         :initform common-lisp:nil)
                        (sync-compliance :initarg :sync-compliance :type
                         (common-lisp:or association-sync-compliance
                                         common-lisp:null)
                         :accessor %create-association-request-sync-compliance
                         :initform common-lisp:nil)
                        (compliance-severity :initarg :compliance-severity
                         :type
                         (common-lisp:or association-compliance-severity
                                         common-lisp:null)
                         :accessor
                         %create-association-request-compliance-severity
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor %create-association-request-max-concurrency
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %create-association-request-max-errors :initform
                         common-lisp:nil)
                        (automation-target-parameter-name :initarg
                         :automation-target-parameter-name :type
                         (common-lisp:or automation-target-parameter-name
                                         common-lisp:null)
                         :accessor
                         %create-association-request-automation-target-parameter-name
                         :initform common-lisp:nil)
                        (association-name :initarg :association-name :type
                         (common-lisp:or association-name common-lisp:null)
                         :accessor %create-association-request-association-name
                         :initform common-lisp:nil)
                        (output-location :initarg :output-location :type
                         (common-lisp:or instance-association-output-location
                                         common-lisp:null)
                         :accessor %create-association-request-output-location
                         :initform common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor
                         %create-association-request-schedule-expression
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %create-association-request-targets :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %create-association-request-parameters :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %create-association-request-instance-id
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %create-association-request-document-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %create-association-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-association-request
                    'make-create-association-request))
 (common-lisp:defun make-create-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-configuration tags target-maps
                     schedule-offset target-locations calendar-names
                     apply-only-at-cron-interval sync-compliance
                     compliance-severity max-concurrency max-errors
                     automation-target-parameter-name association-name
                     output-location schedule-expression targets parameters
                     instance-id document-version name)
   (common-lisp:apply #'common-lisp:make-instance 'create-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-name))
      (common-lisp:list
       (common-lisp:cons "AssociationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-target-parameter-name))
      (common-lisp:list
       (common-lisp:cons "AutomationTargetParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-severity))
      (common-lisp:list
       (common-lisp:cons "ComplianceSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-compliance))
      (common-lisp:list
       (common-lisp:cons "SyncCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-only-at-cron-interval))
      (common-lisp:list
       (common-lisp:cons "ApplyOnlyAtCronInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calendar-names))
      (common-lisp:list
       (common-lisp:cons "CalendarNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-locations))
      (common-lisp:list
       (common-lisp:cons "TargetLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-maps))
      (common-lisp:list
       (common-lisp:cons "TargetMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-association-result common-lisp:nil
                       ((association-description :initarg
                         :association-description :type
                         (common-lisp:or association-description
                                         common-lisp:null)
                         :accessor
                         %create-association-result-association-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-association-result
                    'make-create-association-result))
 (common-lisp:defun make-create-association-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-description)
   (common-lisp:apply #'common-lisp:make-instance 'create-association-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-description))
      (common-lisp:list
       (common-lisp:cons "AssociationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-document-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-document-request-tags :initform
                         common-lisp:nil)
                        (target-type :initarg :target-type :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %create-document-request-target-type
                         :initform common-lisp:nil)
                        (document-format :initarg :document-format :type
                         (common-lisp:or document-format common-lisp:null)
                         :accessor %create-document-request-document-format
                         :initform common-lisp:nil)
                        (document-type :initarg :document-type :type
                         (common-lisp:or document-type common-lisp:null)
                         :accessor %create-document-request-document-type
                         :initform common-lisp:nil)
                        (version-name :initarg :version-name :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor %create-document-request-version-name
                         :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or document-display-name
                                         common-lisp:null)
                         :accessor %create-document-request-display-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %create-document-request-name :initform
                         (common-lisp:error ":name is required"))
                        (attachments :initarg :attachments :type
                         (common-lisp:or attachments-source-list
                                         common-lisp:null)
                         :accessor %create-document-request-attachments
                         :initform common-lisp:nil)
                        (requires :initarg :requires :type
                         (common-lisp:or document-requires-list
                                         common-lisp:null)
                         :accessor %create-document-request-requires :initform
                         common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or document-content common-lisp:null)
                         :accessor %create-document-request-content :initform
                         (common-lisp:error ":content is required"))))
 (common-lisp:export
  (common-lisp:list 'create-document-request 'make-create-document-request))
 (common-lisp:defun make-create-document-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags target-type document-format
                     document-type version-name display-name name attachments
                     requires content)
   (common-lisp:apply #'common-lisp:make-instance 'create-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requires))
      (common-lisp:list
       (common-lisp:cons "Requires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "Attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-type))
      (common-lisp:list
       (common-lisp:cons "DocumentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-format))
      (common-lisp:list
       (common-lisp:cons "DocumentFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-document-result common-lisp:nil
                       ((document-description :initarg :document-description
                         :type
                         (common-lisp:or document-description common-lisp:null)
                         :accessor %create-document-result-document-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-document-result 'make-create-document-result))
 (common-lisp:defun make-create-document-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key document-description)
   (common-lisp:apply #'common-lisp:make-instance 'create-document-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-document-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-document-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-description))
      (common-lisp:list
       (common-lisp:cons "DocumentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-document-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-maintenance-window-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-maintenance-window-request-tags :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %create-maintenance-window-request-client-token
                         :initform common-lisp:nil)
                        (allow-unassociated-targets :initarg
                         :allow-unassociated-targets :type
                         (common-lisp:or
                          maintenance-window-allow-unassociated-targets
                          common-lisp:null)
                         :accessor
                         %create-maintenance-window-request-allow-unassociated-targets
                         :initform
                         (common-lisp:error
                          ":allow-unassociated-targets is required"))
                        (cutoff :initarg :cutoff :type
                         (common-lisp:or maintenance-window-cutoff
                                         common-lisp:null)
                         :accessor %create-maintenance-window-request-cutoff
                         :initform (common-lisp:error ":cutoff is required"))
                        (duration :initarg :duration :type
                         (common-lisp:or maintenance-window-duration-hours
                                         common-lisp:null)
                         :accessor %create-maintenance-window-request-duration
                         :initform (common-lisp:error ":duration is required"))
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or maintenance-window-offset
                                         common-lisp:null)
                         :accessor
                         %create-maintenance-window-request-schedule-offset
                         :initform common-lisp:nil)
                        (schedule-timezone :initarg :schedule-timezone :type
                         (common-lisp:or maintenance-window-timezone
                                         common-lisp:null)
                         :accessor
                         %create-maintenance-window-request-schedule-timezone
                         :initform common-lisp:nil)
                        (schedule :initarg :schedule :type
                         (common-lisp:or maintenance-window-schedule
                                         common-lisp:null)
                         :accessor %create-maintenance-window-request-schedule
                         :initform (common-lisp:error ":schedule is required"))
                        (end-date :initarg :end-date :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor %create-maintenance-window-request-end-date
                         :initform common-lisp:nil)
                        (start-date :initarg :start-date :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor
                         %create-maintenance-window-request-start-date
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor
                         %create-maintenance-window-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %create-maintenance-window-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-maintenance-window-request
                    'make-create-maintenance-window-request))
 (common-lisp:defun make-create-maintenance-window-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-token
                     allow-unassociated-targets cutoff duration schedule-offset
                     schedule-timezone schedule end-date start-date description
                     name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-maintenance-window-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-maintenance-window-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-timezone))
      (common-lisp:list
       (common-lisp:cons "ScheduleTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cutoff))
      (common-lisp:list
       (common-lisp:cons "Cutoff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-unassociated-targets))
      (common-lisp:list
       (common-lisp:cons "AllowUnassociatedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-maintenance-window-result common-lisp:nil
                       ((window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %create-maintenance-window-result-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-maintenance-window-result
                    'make-create-maintenance-window-result))
 (common-lisp:defun make-create-maintenance-window-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-maintenance-window-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-maintenance-window-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-maintenance-window-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-maintenance-window-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ops-item-request common-lisp:nil
                       ((account-id :initarg :account-id :type
                         (common-lisp:or ops-item-account-id common-lisp:null)
                         :accessor %create-ops-item-request-account-id
                         :initform common-lisp:nil)
                        (planned-end-time :initarg :planned-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %create-ops-item-request-planned-end-time :initform
                         common-lisp:nil)
                        (planned-start-time :initarg :planned-start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %create-ops-item-request-planned-start-time :initform
                         common-lisp:nil)
                        (actual-end-time :initarg :actual-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %create-ops-item-request-actual-end-time :initform
                         common-lisp:nil)
                        (actual-start-time :initarg :actual-start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %create-ops-item-request-actual-start-time :initform
                         common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or ops-item-severity common-lisp:null)
                         :accessor %create-ops-item-request-severity :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or ops-item-category common-lisp:null)
                         :accessor %create-ops-item-request-category :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-ops-item-request-tags :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or ops-item-title common-lisp:null)
                         :accessor %create-ops-item-request-title :initform
                         (common-lisp:error ":title is required"))
                        (source :initarg :source :type
                         (common-lisp:or ops-item-source common-lisp:null)
                         :accessor %create-ops-item-request-source :initform
                         (common-lisp:error ":source is required"))
                        (related-ops-items :initarg :related-ops-items :type
                         (common-lisp:or related-ops-items common-lisp:null)
                         :accessor %create-ops-item-request-related-ops-items
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or ops-item-priority common-lisp:null)
                         :accessor %create-ops-item-request-priority :initform
                         common-lisp:nil)
                        (notifications :initarg :notifications :type
                         (common-lisp:or ops-item-notifications
                                         common-lisp:null)
                         :accessor %create-ops-item-request-notifications
                         :initform common-lisp:nil)
                        (operational-data :initarg :operational-data :type
                         (common-lisp:or ops-item-operational-data
                                         common-lisp:null)
                         :accessor %create-ops-item-request-operational-data
                         :initform common-lisp:nil)
                        (ops-item-type :initarg :ops-item-type :type
                         (common-lisp:or ops-item-type common-lisp:null)
                         :accessor %create-ops-item-request-ops-item-type
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or ops-item-description common-lisp:null)
                         :accessor %create-ops-item-request-description
                         :initform
                         (common-lisp:error ":description is required"))))
 (common-lisp:export
  (common-lisp:list 'create-ops-item-request 'make-create-ops-item-request))
 (common-lisp:defun make-create-ops-item-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-id planned-end-time
                     planned-start-time actual-end-time actual-start-time
                     severity category tags title source related-ops-items
                     priority notifications operational-data ops-item-type
                     description)
   (common-lisp:apply #'common-lisp:make-instance 'create-ops-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-type))
      (common-lisp:list
       (common-lisp:cons "OpsItemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-data))
      (common-lisp:list
       (common-lisp:cons "OperationalData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "Notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-ops-items))
      (common-lisp:list
       (common-lisp:cons "RelatedOpsItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-start-time))
      (common-lisp:list
       (common-lisp:cons "ActualStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-end-time))
      (common-lisp:list
       (common-lisp:cons "ActualEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'planned-start-time))
      (common-lisp:list
       (common-lisp:cons "PlannedStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'planned-end-time))
      (common-lisp:list
       (common-lisp:cons "PlannedEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ops-item-response common-lisp:nil
                       ((ops-item-arn :initarg :ops-item-arn :type
                         (common-lisp:or ops-item-arn common-lisp:null)
                         :accessor %create-ops-item-response-ops-item-arn
                         :initform common-lisp:nil)
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %create-ops-item-response-ops-item-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-ops-item-response 'make-create-ops-item-response))
 (common-lisp:defun make-create-ops-item-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ops-item-arn ops-item-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-ops-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-arn))
      (common-lisp:list
       (common-lisp:cons "OpsItemArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-item-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ops-metadata-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-ops-metadata-request-tags :initform
                         common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata-map common-lisp:null)
                         :accessor %create-ops-metadata-request-metadata
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or ops-metadata-resource-id
                                         common-lisp:null)
                         :accessor %create-ops-metadata-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-ops-metadata-request
                    'make-create-ops-metadata-request))
 (common-lisp:defun make-create-ops-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags metadata resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-ops-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ops-metadata-result common-lisp:nil
                       ((ops-metadata-arn :initarg :ops-metadata-arn :type
                         (common-lisp:or ops-metadata-arn common-lisp:null)
                         :accessor %create-ops-metadata-result-ops-metadata-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-ops-metadata-result
                    'make-create-ops-metadata-result))
 (common-lisp:defun make-create-ops-metadata-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ops-metadata-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-ops-metadata-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-metadata-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-metadata-arn))
      (common-lisp:list
       (common-lisp:cons "OpsMetadataArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ops-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-patch-baseline-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-patch-baseline-request-tags :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-patch-baseline-request-client-token
                         :initform common-lisp:nil)
                        (sources :initarg :sources :type
                         (common-lisp:or patch-source-list common-lisp:null)
                         :accessor %create-patch-baseline-request-sources
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or baseline-description common-lisp:null)
                         :accessor %create-patch-baseline-request-description
                         :initform common-lisp:nil)
                        (rejected-patches-action :initarg
                         :rejected-patches-action :type
                         (common-lisp:or patch-action common-lisp:null)
                         :accessor
                         %create-patch-baseline-request-rejected-patches-action
                         :initform common-lisp:nil)
                        (rejected-patches :initarg :rejected-patches :type
                         (common-lisp:or patch-id-list common-lisp:null)
                         :accessor
                         %create-patch-baseline-request-rejected-patches
                         :initform common-lisp:nil)
                        (approved-patches-enable-non-security :initarg
                         :approved-patches-enable-non-security :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-patch-baseline-request-approved-patches-enable-non-security
                         :initform common-lisp:nil)
                        (approved-patches-compliance-level :initarg
                         :approved-patches-compliance-level :type
                         (common-lisp:or patch-compliance-level
                                         common-lisp:null)
                         :accessor
                         %create-patch-baseline-request-approved-patches-compliance-level
                         :initform common-lisp:nil)
                        (approved-patches :initarg :approved-patches :type
                         (common-lisp:or patch-id-list common-lisp:null)
                         :accessor
                         %create-patch-baseline-request-approved-patches
                         :initform common-lisp:nil)
                        (approval-rules :initarg :approval-rules :type
                         (common-lisp:or patch-rule-group common-lisp:null)
                         :accessor
                         %create-patch-baseline-request-approval-rules
                         :initform common-lisp:nil)
                        (global-filters :initarg :global-filters :type
                         (common-lisp:or patch-filter-group common-lisp:null)
                         :accessor
                         %create-patch-baseline-request-global-filters
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or baseline-name common-lisp:null)
                         :accessor %create-patch-baseline-request-name
                         :initform (common-lisp:error ":name is required"))
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor
                         %create-patch-baseline-request-operating-system
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-patch-baseline-request
                    'make-create-patch-baseline-request))
 (common-lisp:defun make-create-patch-baseline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-token sources description
                     rejected-patches-action rejected-patches
                     approved-patches-enable-non-security
                     approved-patches-compliance-level approved-patches
                     approval-rules global-filters name operating-system)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-patch-baseline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-patch-baseline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-patch-baseline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-filters))
      (common-lisp:list
       (common-lisp:cons "GlobalFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approval-rules))
      (common-lisp:list
       (common-lisp:cons "ApprovalRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approved-patches))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-patches-compliance-level))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatchesComplianceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-patches-enable-non-security))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatchesEnableNonSecurity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejected-patches))
      (common-lisp:list
       (common-lisp:cons "RejectedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rejected-patches-action))
      (common-lisp:list
       (common-lisp:cons "RejectedPatchesAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-patch-baseline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-patch-baseline-result common-lisp:nil
                       ((baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor %create-patch-baseline-result-baseline-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-patch-baseline-result
                    'make-create-patch-baseline-result))
 (common-lisp:defun make-create-patch-baseline-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key baseline-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-patch-baseline-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-patch-baseline-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-patch-baseline-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-patch-baseline-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-data-sync-request common-lisp:nil
                       ((sync-source :initarg :sync-source :type
                         (common-lisp:or resource-data-sync-source
                                         common-lisp:null)
                         :accessor
                         %create-resource-data-sync-request-sync-source
                         :initform common-lisp:nil)
                        (sync-type :initarg :sync-type :type
                         (common-lisp:or resource-data-sync-type
                                         common-lisp:null)
                         :accessor %create-resource-data-sync-request-sync-type
                         :initform common-lisp:nil)
                        (s3destination :initarg :s3destination :type
                         (common-lisp:or resource-data-sync-s3destination
                                         common-lisp:null)
                         :accessor
                         %create-resource-data-sync-request-s3destination
                         :initform common-lisp:nil)
                        (sync-name :initarg :sync-name :type
                         (common-lisp:or resource-data-sync-name
                                         common-lisp:null)
                         :accessor %create-resource-data-sync-request-sync-name
                         :initform
                         (common-lisp:error ":sync-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-resource-data-sync-request
                    'make-create-resource-data-sync-request))
 (common-lisp:defun make-create-resource-data-sync-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sync-source sync-type s3destination
                     sync-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-data-sync-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-data-sync-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-data-sync-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-name))
      (common-lisp:list
       (common-lisp:cons "SyncName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "S3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "SyncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-data-sync-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-data-sync-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-resource-data-sync-result
                    'make-create-resource-data-sync-result))
 (common-lisp:defun make-create-resource-data-sync-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-data-sync-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-data-sync-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-data-sync-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-data-sync-result))
   common-lisp:nil))
(common-lisp:deftype created-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition custom-schema-count-limit-exceeded-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       custom-schema-count-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'custom-schema-count-limit-exceeded-exception
                    'custom-schema-count-limit-exceeded-exception-message)))
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:deftype default-baseline () 'common-lisp:boolean)
(common-lisp:deftype default-instance-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-activation-request common-lisp:nil
                       ((activation-id :initarg :activation-id :type
                         (common-lisp:or activation-id common-lisp:null)
                         :accessor %delete-activation-request-activation-id
                         :initform
                         (common-lisp:error ":activation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-activation-request
                    'make-delete-activation-request))
 (common-lisp:defun make-delete-activation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key activation-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-activation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-activation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-activation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-id))
      (common-lisp:list
       (common-lisp:cons "ActivationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-activation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-activation-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-activation-result 'make-delete-activation-result))
 (common-lisp:defun make-delete-activation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-activation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-activation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-activation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-activation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-association-request common-lisp:nil
                       ((association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor %delete-association-request-association-id
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %delete-association-request-instance-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %delete-association-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-association-request
                    'make-delete-association-request))
 (common-lisp:defun make-delete-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-id instance-id name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-association-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-association-result
                    'make-delete-association-result))
 (common-lisp:defun make-delete-association-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-association-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-document-request common-lisp:nil
                       ((force :initarg :force :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %delete-document-request-force :initform
                         common-lisp:nil)
                        (version-name :initarg :version-name :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor %delete-document-request-version-name
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %delete-document-request-document-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %delete-document-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-document-request 'make-delete-document-request))
 (common-lisp:defun make-delete-document-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force version-name document-version name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-document-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-document-result 'make-delete-document-result))
 (common-lisp:defun make-delete-document-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-document-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-document-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-inventory-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-inventory-request-client-token :initform
                         common-lisp:nil)
                        (dry-run :initarg :dry-run :type
                         (common-lisp:or dry-run common-lisp:null) :accessor
                         %delete-inventory-request-dry-run :initform
                         common-lisp:nil)
                        (schema-delete-option :initarg :schema-delete-option
                         :type
                         (common-lisp:or inventory-schema-delete-option
                                         common-lisp:null)
                         :accessor
                         %delete-inventory-request-schema-delete-option
                         :initform common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or inventory-item-type-name
                                         common-lisp:null)
                         :accessor %delete-inventory-request-type-name
                         :initform
                         (common-lisp:error ":type-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-inventory-request 'make-delete-inventory-request))
 (common-lisp:defun make-delete-inventory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token dry-run schema-delete-option
                     type-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-inventory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-inventory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-inventory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-delete-option))
      (common-lisp:list
       (common-lisp:cons "SchemaDeleteOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-inventory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-inventory-result common-lisp:nil
                       ((deletion-summary :initarg :deletion-summary :type
                         (common-lisp:or inventory-deletion-summary
                                         common-lisp:null)
                         :accessor %delete-inventory-result-deletion-summary
                         :initform common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or inventory-item-type-name
                                         common-lisp:null)
                         :accessor %delete-inventory-result-type-name :initform
                         common-lisp:nil)
                        (deletion-id :initarg :deletion-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-inventory-result-deletion-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-inventory-result 'make-delete-inventory-result))
 (common-lisp:defun make-delete-inventory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletion-summary type-name deletion-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-inventory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-inventory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-inventory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-id))
      (common-lisp:list
       (common-lisp:cons "DeletionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-summary))
      (common-lisp:list
       (common-lisp:cons "DeletionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-inventory-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-maintenance-window-request common-lisp:nil
                       ((window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %delete-maintenance-window-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-maintenance-window-request
                    'make-delete-maintenance-window-request))
 (common-lisp:defun make-delete-maintenance-window-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-maintenance-window-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-maintenance-window-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-maintenance-window-result common-lisp:nil
                       ((window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %delete-maintenance-window-result-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-maintenance-window-result
                    'make-delete-maintenance-window-result))
 (common-lisp:defun make-delete-maintenance-window-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-maintenance-window-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-maintenance-window-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-maintenance-window-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-maintenance-window-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ops-metadata-request common-lisp:nil
                       ((ops-metadata-arn :initarg :ops-metadata-arn :type
                         (common-lisp:or ops-metadata-arn common-lisp:null)
                         :accessor
                         %delete-ops-metadata-request-ops-metadata-arn
                         :initform
                         (common-lisp:error ":ops-metadata-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-ops-metadata-request
                    'make-delete-ops-metadata-request))
 (common-lisp:defun make-delete-ops-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ops-metadata-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-ops-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ops-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ops-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-metadata-arn))
      (common-lisp:list
       (common-lisp:cons "OpsMetadataArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ops-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ops-metadata-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-ops-metadata-result
                    'make-delete-ops-metadata-result))
 (common-lisp:defun make-delete-ops-metadata-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-ops-metadata-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ops-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ops-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ops-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-parameter-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or psparameter-name common-lisp:null)
                         :accessor %delete-parameter-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-parameter-request 'make-delete-parameter-request))
 (common-lisp:defun make-delete-parameter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-parameter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-parameter-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-parameter-result 'make-delete-parameter-result))
 (common-lisp:defun make-delete-parameter-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-parameter-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameter-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-parameters-request common-lisp:nil
                       ((names :initarg :names :type
                         (common-lisp:or parameter-name-list common-lisp:null)
                         :accessor %delete-parameters-request-names :initform
                         (common-lisp:error ":names is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-parameters-request
                    'make-delete-parameters-request))
 (common-lisp:defun make-delete-parameters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key names)
   (common-lisp:apply #'common-lisp:make-instance 'delete-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-parameters-result common-lisp:nil
                       ((invalid-parameters :initarg :invalid-parameters :type
                         (common-lisp:or parameter-name-list common-lisp:null)
                         :accessor %delete-parameters-result-invalid-parameters
                         :initform common-lisp:nil)
                        (deleted-parameters :initarg :deleted-parameters :type
                         (common-lisp:or parameter-name-list common-lisp:null)
                         :accessor %delete-parameters-result-deleted-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-parameters-result 'make-delete-parameters-result))
 (common-lisp:defun make-delete-parameters-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invalid-parameters deleted-parameters)
   (common-lisp:apply #'common-lisp:make-instance 'delete-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-parameters))
      (common-lisp:list
       (common-lisp:cons "DeletedParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-parameters))
      (common-lisp:list
       (common-lisp:cons "InvalidParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-patch-baseline-request common-lisp:nil
                       ((baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor %delete-patch-baseline-request-baseline-id
                         :initform
                         (common-lisp:error ":baseline-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-patch-baseline-request
                    'make-delete-patch-baseline-request))
 (common-lisp:defun make-delete-patch-baseline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-patch-baseline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-patch-baseline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-patch-baseline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-patch-baseline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-patch-baseline-result common-lisp:nil
                       ((baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor %delete-patch-baseline-result-baseline-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-patch-baseline-result
                    'make-delete-patch-baseline-result))
 (common-lisp:defun make-delete-patch-baseline-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key baseline-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-patch-baseline-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-patch-baseline-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-patch-baseline-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-patch-baseline-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-data-sync-request common-lisp:nil
                       ((sync-type :initarg :sync-type :type
                         (common-lisp:or resource-data-sync-type
                                         common-lisp:null)
                         :accessor %delete-resource-data-sync-request-sync-type
                         :initform common-lisp:nil)
                        (sync-name :initarg :sync-name :type
                         (common-lisp:or resource-data-sync-name
                                         common-lisp:null)
                         :accessor %delete-resource-data-sync-request-sync-name
                         :initform
                         (common-lisp:error ":sync-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-resource-data-sync-request
                    'make-delete-resource-data-sync-request))
 (common-lisp:defun make-delete-resource-data-sync-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sync-type sync-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-data-sync-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-data-sync-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-data-sync-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-name))
      (common-lisp:list
       (common-lisp:cons "SyncName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-data-sync-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-data-sync-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-resource-data-sync-result
                    'make-delete-resource-data-sync-result))
 (common-lisp:defun make-delete-resource-data-sync-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-data-sync-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-data-sync-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-data-sync-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-data-sync-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-request common-lisp:nil
                       ((policy-hash :initarg :policy-hash :type
                         (common-lisp:or policy-hash common-lisp:null)
                         :accessor %delete-resource-policy-request-policy-hash
                         :initform
                         (common-lisp:error ":policy-hash is required"))
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %delete-resource-policy-request-policy-id :initform
                         (common-lisp:error ":policy-id is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor %delete-resource-policy-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defun make-delete-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-hash policy-id resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-hash))
      (common-lisp:list
       (common-lisp:cons "PolicyHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defun make-delete-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:deftype delivery-timed-out-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass deregister-managed-instance-request common-lisp:nil
                       ((instance-id :initarg :instance-id :type
                         (common-lisp:or managed-instance-id common-lisp:null)
                         :accessor
                         %deregister-managed-instance-request-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-managed-instance-request
                    'make-deregister-managed-instance-request))
 (common-lisp:defun make-deregister-managed-instance-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-managed-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-managed-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-managed-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-managed-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-managed-instance-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deregister-managed-instance-result
                    'make-deregister-managed-instance-result))
 (common-lisp:defun make-deregister-managed-instance-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-managed-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-managed-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-managed-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-managed-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-patch-baseline-for-patch-group-request
                       common-lisp:nil
                       ((patch-group :initarg :patch-group :type
                         (common-lisp:or patch-group common-lisp:null)
                         :accessor
                         %deregister-patch-baseline-for-patch-group-request-patch-group
                         :initform
                         (common-lisp:error ":patch-group is required"))
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor
                         %deregister-patch-baseline-for-patch-group-request-baseline-id
                         :initform
                         (common-lisp:error ":baseline-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-patch-baseline-for-patch-group-request
                    'make-deregister-patch-baseline-for-patch-group-request))
 (common-lisp:defun make-deregister-patch-baseline-for-patch-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-group baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-patch-baseline-for-patch-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-patch-baseline-for-patch-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-patch-baseline-for-patch-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-patch-baseline-for-patch-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-patch-baseline-for-patch-group-result
                       common-lisp:nil
                       ((patch-group :initarg :patch-group :type
                         (common-lisp:or patch-group common-lisp:null)
                         :accessor
                         %deregister-patch-baseline-for-patch-group-result-patch-group
                         :initform common-lisp:nil)
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor
                         %deregister-patch-baseline-for-patch-group-result-baseline-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-patch-baseline-for-patch-group-result
                    'make-deregister-patch-baseline-for-patch-group-result))
 (common-lisp:defun make-deregister-patch-baseline-for-patch-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-group baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-patch-baseline-for-patch-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-patch-baseline-for-patch-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-patch-baseline-for-patch-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-patch-baseline-for-patch-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-target-from-maintenance-window-request
                       common-lisp:nil
                       ((safe :initarg :safe :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %deregister-target-from-maintenance-window-request-safe
                         :initform common-lisp:nil)
                        (window-target-id :initarg :window-target-id :type
                         (common-lisp:or maintenance-window-target-id
                                         common-lisp:null)
                         :accessor
                         %deregister-target-from-maintenance-window-request-window-target-id
                         :initform
                         (common-lisp:error ":window-target-id is required"))
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %deregister-target-from-maintenance-window-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-target-from-maintenance-window-request
                    'make-deregister-target-from-maintenance-window-request))
 (common-lisp:defun make-deregister-target-from-maintenance-window-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key safe window-target-id window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-target-from-maintenance-window-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-target-from-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-target-from-maintenance-window-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-target-id))
      (common-lisp:list
       (common-lisp:cons "WindowTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'safe))
      (common-lisp:list
       (common-lisp:cons "Safe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-target-from-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-target-from-maintenance-window-result
                       common-lisp:nil
                       ((window-target-id :initarg :window-target-id :type
                         (common-lisp:or maintenance-window-target-id
                                         common-lisp:null)
                         :accessor
                         %deregister-target-from-maintenance-window-result-window-target-id
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %deregister-target-from-maintenance-window-result-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-target-from-maintenance-window-result
                    'make-deregister-target-from-maintenance-window-result))
 (common-lisp:defun make-deregister-target-from-maintenance-window-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-target-id window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-target-from-maintenance-window-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-target-from-maintenance-window-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-target-from-maintenance-window-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-target-id))
      (common-lisp:list
       (common-lisp:cons "WindowTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-target-from-maintenance-window-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-task-from-maintenance-window-request
                       common-lisp:nil
                       ((window-task-id :initarg :window-task-id :type
                         (common-lisp:or maintenance-window-task-id
                                         common-lisp:null)
                         :accessor
                         %deregister-task-from-maintenance-window-request-window-task-id
                         :initform
                         (common-lisp:error ":window-task-id is required"))
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %deregister-task-from-maintenance-window-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-task-from-maintenance-window-request
                    'make-deregister-task-from-maintenance-window-request))
 (common-lisp:defun make-deregister-task-from-maintenance-window-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-task-id window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-task-from-maintenance-window-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-from-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-from-maintenance-window-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-task-id))
      (common-lisp:list
       (common-lisp:cons "WindowTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-from-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-task-from-maintenance-window-result
                       common-lisp:nil
                       ((window-task-id :initarg :window-task-id :type
                         (common-lisp:or maintenance-window-task-id
                                         common-lisp:null)
                         :accessor
                         %deregister-task-from-maintenance-window-result-window-task-id
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %deregister-task-from-maintenance-window-result-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-task-from-maintenance-window-result
                    'make-deregister-task-from-maintenance-window-result))
 (common-lisp:defun make-deregister-task-from-maintenance-window-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-task-id window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-task-from-maintenance-window-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-from-maintenance-window-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-from-maintenance-window-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-task-id))
      (common-lisp:list
       (common-lisp:cons "WindowTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-task-from-maintenance-window-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-activations-filter common-lisp:nil
                       ((filter-values :initarg :filter-values :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %describe-activations-filter-filter-values
                         :initform common-lisp:nil)
                        (filter-key :initarg :filter-key :type
                         (common-lisp:or describe-activations-filter-keys
                                         common-lisp:null)
                         :accessor %describe-activations-filter-filter-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-activations-filter
                    'make-describe-activations-filter))
 (common-lisp:defun make-describe-activations-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filter-values filter-key)
   (common-lisp:apply #'common-lisp:make-instance 'describe-activations-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activations-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activations-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-key))
      (common-lisp:list
       (common-lisp:cons "FilterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-values))
      (common-lisp:list
       (common-lisp:cons "FilterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activations-filter))
   common-lisp:nil))
(common-lisp:deftype describe-activations-filter-keys () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype describe-activations-filter-list ()
   '(trivial-types:proper-list describe-activations-filter))
 (common-lisp:defun |make-describe-activations-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-activations-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-activations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-activations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-activations-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or describe-activations-filter-list
                                         common-lisp:null)
                         :accessor %describe-activations-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-activations-request
                    'make-describe-activations-request))
 (common-lisp:defun make-describe-activations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance 'describe-activations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-activations-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-activations-result-next-token :initform
                         common-lisp:nil)
                        (activation-list :initarg :activation-list :type
                         (common-lisp:or activation-list common-lisp:null)
                         :accessor %describe-activations-result-activation-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-activations-result
                    'make-describe-activations-result))
 (common-lisp:defun make-describe-activations-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token activation-list)
   (common-lisp:apply #'common-lisp:make-instance 'describe-activations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-activations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-activations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-list))
      (common-lisp:list
       (common-lisp:cons "ActivationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-activations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-association-execution-targets-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-association-execution-targets-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-association-execution-targets-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or
                          association-execution-targets-filter-list
                          common-lisp:null)
                         :accessor
                         %describe-association-execution-targets-request-filters
                         :initform common-lisp:nil)
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or association-execution-id
                                         common-lisp:null)
                         :accessor
                         %describe-association-execution-targets-request-execution-id
                         :initform
                         (common-lisp:error ":execution-id is required"))
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor
                         %describe-association-execution-targets-request-association-id
                         :initform
                         (common-lisp:error ":association-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-association-execution-targets-request
                    'make-describe-association-execution-targets-request))
 (common-lisp:defun make-describe-association-execution-targets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     execution-id association-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-association-execution-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-execution-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-execution-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-execution-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-association-execution-targets-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-association-execution-targets-result-next-token
                         :initform common-lisp:nil)
                        (association-execution-targets :initarg
                         :association-execution-targets :type
                         (common-lisp:or association-execution-targets-list
                                         common-lisp:null)
                         :accessor
                         %describe-association-execution-targets-result-association-execution-targets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-association-execution-targets-result
                    'make-describe-association-execution-targets-result))
 (common-lisp:defun make-describe-association-execution-targets-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token association-execution-targets)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-association-execution-targets-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-execution-targets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-execution-targets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-execution-targets))
      (common-lisp:list
       (common-lisp:cons "AssociationExecutionTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-execution-targets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-association-executions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-association-executions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-association-executions-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or association-execution-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-association-executions-request-filters
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor
                         %describe-association-executions-request-association-id
                         :initform
                         (common-lisp:error ":association-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-association-executions-request
                    'make-describe-association-executions-request))
 (common-lisp:defun make-describe-association-executions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     association-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-association-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-association-executions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-association-executions-result-next-token
                         :initform common-lisp:nil)
                        (association-executions :initarg
                         :association-executions :type
                         (common-lisp:or association-executions-list
                                         common-lisp:null)
                         :accessor
                         %describe-association-executions-result-association-executions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-association-executions-result
                    'make-describe-association-executions-result))
 (common-lisp:defun make-describe-association-executions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token association-executions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-association-executions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-executions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-executions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-executions))
      (common-lisp:list
       (common-lisp:cons "AssociationExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-executions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-association-request common-lisp:nil
                       ((association-version :initarg :association-version
                         :type
                         (common-lisp:or association-version common-lisp:null)
                         :accessor
                         %describe-association-request-association-version
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor %describe-association-request-association-id
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %describe-association-request-instance-id
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %describe-association-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-association-request
                    'make-describe-association-request))
 (common-lisp:defun make-describe-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-version association-id
                     instance-id name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-version))
      (common-lisp:list
       (common-lisp:cons "AssociationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-association-result common-lisp:nil
                       ((association-description :initarg
                         :association-description :type
                         (common-lisp:or association-description
                                         common-lisp:null)
                         :accessor
                         %describe-association-result-association-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-association-result
                    'make-describe-association-result))
 (common-lisp:defun make-describe-association-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-description)
   (common-lisp:apply #'common-lisp:make-instance 'describe-association-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-description))
      (common-lisp:list
       (common-lisp:cons "AssociationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-automation-executions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-automation-executions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-automation-executions-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or automation-execution-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-automation-executions-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-automation-executions-request
                    'make-describe-automation-executions-request))
 (common-lisp:defun make-describe-automation-executions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-automation-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-automation-executions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-automation-executions-result-next-token
                         :initform common-lisp:nil)
                        (automation-execution-metadata-list :initarg
                         :automation-execution-metadata-list :type
                         (common-lisp:or automation-execution-metadata-list
                                         common-lisp:null)
                         :accessor
                         %describe-automation-executions-result-automation-execution-metadata-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-automation-executions-result
                    'make-describe-automation-executions-result))
 (common-lisp:defun make-describe-automation-executions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     automation-execution-metadata-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-automation-executions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-executions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-executions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-metadata-list))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-executions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-automation-step-executions-request
                       common-lisp:nil
                       ((reverse-order :initarg :reverse-order :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %describe-automation-step-executions-request-reverse-order
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-automation-step-executions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-automation-step-executions-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or step-execution-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-automation-step-executions-request-filters
                         :initform common-lisp:nil)
                        (automation-execution-id :initarg
                         :automation-execution-id :type
                         (common-lisp:or automation-execution-id
                                         common-lisp:null)
                         :accessor
                         %describe-automation-step-executions-request-automation-execution-id
                         :initform
                         (common-lisp:error
                          ":automation-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-automation-step-executions-request
                    'make-describe-automation-step-executions-request))
 (common-lisp:defun make-describe-automation-step-executions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reverse-order max-results next-token
                     filters automation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-automation-step-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-step-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-step-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-id))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reverse-order))
      (common-lisp:list
       (common-lisp:cons "ReverseOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-step-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-automation-step-executions-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-automation-step-executions-result-next-token
                         :initform common-lisp:nil)
                        (step-executions :initarg :step-executions :type
                         (common-lisp:or step-execution-list common-lisp:null)
                         :accessor
                         %describe-automation-step-executions-result-step-executions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-automation-step-executions-result
                    'make-describe-automation-step-executions-result))
 (common-lisp:defun make-describe-automation-step-executions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token step-executions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-automation-step-executions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-step-executions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-step-executions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-executions))
      (common-lisp:list
       (common-lisp:cons "StepExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-automation-step-executions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-available-patches-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-available-patches-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or patch-baseline-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-available-patches-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or patch-orchestrator-filter-list
                                         common-lisp:null)
                         :accessor %describe-available-patches-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-available-patches-request
                    'make-describe-available-patches-request))
 (common-lisp:defun make-describe-available-patches-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-available-patches-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-available-patches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-available-patches-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-available-patches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-available-patches-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-available-patches-result-next-token
                         :initform common-lisp:nil)
                        (patches :initarg :patches :type
                         (common-lisp:or patch-list common-lisp:null) :accessor
                         %describe-available-patches-result-patches :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-available-patches-result
                    'make-describe-available-patches-result))
 (common-lisp:defun make-describe-available-patches-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token patches)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-available-patches-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-available-patches-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-available-patches-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patches))
      (common-lisp:list
       (common-lisp:cons "Patches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-available-patches-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-document-permission-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-document-permission-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or document-permission-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-document-permission-request-max-results
                         :initform common-lisp:nil)
                        (permission-type :initarg :permission-type :type
                         (common-lisp:or document-permission-type
                                         common-lisp:null)
                         :accessor
                         %describe-document-permission-request-permission-type
                         :initform
                         (common-lisp:error ":permission-type is required"))
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %describe-document-permission-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-document-permission-request
                    'make-describe-document-permission-request))
 (common-lisp:defun make-describe-document-permission-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results permission-type
                     name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-document-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-document-permission-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-document-permission-response-next-token
                         :initform common-lisp:nil)
                        (account-sharing-info-list :initarg
                         :account-sharing-info-list :type
                         (common-lisp:or account-sharing-info-list
                                         common-lisp:null)
                         :accessor
                         %describe-document-permission-response-account-sharing-info-list
                         :initform common-lisp:nil)
                        (account-ids :initarg :account-ids :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor
                         %describe-document-permission-response-account-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-document-permission-response
                    'make-describe-document-permission-response))
 (common-lisp:defun make-describe-document-permission-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token account-sharing-info-list
                     account-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-document-permission-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-permission-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-permission-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-sharing-info-list))
      (common-lisp:list
       (common-lisp:cons "AccountSharingInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-permission-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-document-request common-lisp:nil
                       ((version-name :initarg :version-name :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor %describe-document-request-version-name
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %describe-document-request-document-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %describe-document-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-document-request
                    'make-describe-document-request))
 (common-lisp:defun make-describe-document-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-name document-version name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-document-result common-lisp:nil
                       ((document :initarg :document :type
                         (common-lisp:or document-description common-lisp:null)
                         :accessor %describe-document-result-document :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-document-result 'make-describe-document-result))
 (common-lisp:defun make-describe-document-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key document)
   (common-lisp:apply #'common-lisp:make-instance 'describe-document-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-document-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-effective-instance-associations-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-effective-instance-associations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or
                          effective-instance-association-max-results
                          common-lisp:null)
                         :accessor
                         %describe-effective-instance-associations-request-max-results
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         %describe-effective-instance-associations-request-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-effective-instance-associations-request
                    'make-describe-effective-instance-associations-request))
 (common-lisp:defun make-describe-effective-instance-associations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-effective-instance-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-instance-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-instance-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-instance-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-effective-instance-associations-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-effective-instance-associations-result-next-token
                         :initform common-lisp:nil)
                        (associations :initarg :associations :type
                         (common-lisp:or instance-association-list
                                         common-lisp:null)
                         :accessor
                         %describe-effective-instance-associations-result-associations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-effective-instance-associations-result
                    'make-describe-effective-instance-associations-result))
 (common-lisp:defun make-describe-effective-instance-associations-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token associations)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-effective-instance-associations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-instance-associations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-instance-associations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "Associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-instance-associations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-effective-patches-for-patch-baseline-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-effective-patches-for-patch-baseline-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or patch-baseline-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-effective-patches-for-patch-baseline-request-max-results
                         :initform common-lisp:nil)
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor
                         %describe-effective-patches-for-patch-baseline-request-baseline-id
                         :initform
                         (common-lisp:error ":baseline-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-effective-patches-for-patch-baseline-request
                    'make-describe-effective-patches-for-patch-baseline-request))
 (common-lisp:defun make-describe-effective-patches-for-patch-baseline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-effective-patches-for-patch-baseline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-patches-for-patch-baseline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-patches-for-patch-baseline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-patches-for-patch-baseline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-effective-patches-for-patch-baseline-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-effective-patches-for-patch-baseline-result-next-token
                         :initform common-lisp:nil)
                        (effective-patches :initarg :effective-patches :type
                         (common-lisp:or effective-patch-list common-lisp:null)
                         :accessor
                         %describe-effective-patches-for-patch-baseline-result-effective-patches
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-effective-patches-for-patch-baseline-result
                    'make-describe-effective-patches-for-patch-baseline-result))
 (common-lisp:defun make-describe-effective-patches-for-patch-baseline-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token effective-patches)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-effective-patches-for-patch-baseline-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-patches-for-patch-baseline-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-patches-for-patch-baseline-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'effective-patches))
      (common-lisp:list
       (common-lisp:cons "EffectivePatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-effective-patches-for-patch-baseline-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-associations-status-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instance-associations-status-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-instance-associations-status-request-max-results
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         %describe-instance-associations-status-request-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-instance-associations-status-request
                    'make-describe-instance-associations-status-request))
 (common-lisp:defun make-describe-instance-associations-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-associations-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-associations-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-associations-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-associations-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-associations-status-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instance-associations-status-result-next-token
                         :initform common-lisp:nil)
                        (instance-association-status-infos :initarg
                         :instance-association-status-infos :type
                         (common-lisp:or instance-association-status-infos
                                         common-lisp:null)
                         :accessor
                         %describe-instance-associations-status-result-instance-association-status-infos
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-associations-status-result
                    'make-describe-instance-associations-status-result))
 (common-lisp:defun make-describe-instance-associations-status-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     instance-association-status-infos)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-associations-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-associations-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-associations-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-association-status-infos))
      (common-lisp:list
       (common-lisp:cons "InstanceAssociationStatusInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-associations-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-information-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instance-information-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-ec2compatible
                                         common-lisp:null)
                         :accessor
                         %describe-instance-information-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or
                          instance-information-string-filter-list
                          common-lisp:null)
                         :accessor
                         %describe-instance-information-request-filters
                         :initform common-lisp:nil)
                        (instance-information-filter-list :initarg
                         :instance-information-filter-list :type
                         (common-lisp:or instance-information-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-instance-information-request-instance-information-filter-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-information-request
                    'make-describe-instance-information-request))
 (common-lisp:defun make-describe-instance-information-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     instance-information-filter-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-information-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-information-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-information-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-information-filter-list))
      (common-lisp:list
       (common-lisp:cons "InstanceInformationFilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-information-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-information-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instance-information-result-next-token
                         :initform common-lisp:nil)
                        (instance-information-list :initarg
                         :instance-information-list :type
                         (common-lisp:or instance-information-list
                                         common-lisp:null)
                         :accessor
                         %describe-instance-information-result-instance-information-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-information-result
                    'make-describe-instance-information-result))
 (common-lisp:defun make-describe-instance-information-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token instance-information-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-information-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-information-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-information-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-information-list))
      (common-lisp:list
       (common-lisp:cons "InstanceInformationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-information-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-patch-states-for-patch-group-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or patch-compliance-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-instance-patch-states-for-patch-group-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instance-patch-states-for-patch-group-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or instance-patch-state-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-instance-patch-states-for-patch-group-request-filters
                         :initform common-lisp:nil)
                        (patch-group :initarg :patch-group :type
                         (common-lisp:or patch-group common-lisp:null)
                         :accessor
                         %describe-instance-patch-states-for-patch-group-request-patch-group
                         :initform
                         (common-lisp:error ":patch-group is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-instance-patch-states-for-patch-group-request
                    'make-describe-instance-patch-states-for-patch-group-request))
 (common-lisp:defun make-describe-instance-patch-states-for-patch-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     patch-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-patch-states-for-patch-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-for-patch-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-for-patch-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-for-patch-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-patch-states-for-patch-group-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instance-patch-states-for-patch-group-result-next-token
                         :initform common-lisp:nil)
                        (instance-patch-states :initarg :instance-patch-states
                         :type
                         (common-lisp:or instance-patch-states-list
                                         common-lisp:null)
                         :accessor
                         %describe-instance-patch-states-for-patch-group-result-instance-patch-states
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-patch-states-for-patch-group-result
                    'make-describe-instance-patch-states-for-patch-group-result))
 (common-lisp:defun make-describe-instance-patch-states-for-patch-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token instance-patch-states)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-patch-states-for-patch-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-for-patch-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-for-patch-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-patch-states))
      (common-lisp:list
       (common-lisp:cons "InstancePatchStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-for-patch-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-patch-states-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or patch-compliance-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-instance-patch-states-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instance-patch-states-request-next-token
                         :initform common-lisp:nil)
                        (instance-ids :initarg :instance-ids :type
                         (common-lisp:or instance-id-list common-lisp:null)
                         :accessor
                         %describe-instance-patch-states-request-instance-ids
                         :initform
                         (common-lisp:error ":instance-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-instance-patch-states-request
                    'make-describe-instance-patch-states-request))
 (common-lisp:defun make-describe-instance-patch-states-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token instance-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-patch-states-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-patch-states-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instance-patch-states-result-next-token
                         :initform common-lisp:nil)
                        (instance-patch-states :initarg :instance-patch-states
                         :type
                         (common-lisp:or instance-patch-state-list
                                         common-lisp:null)
                         :accessor
                         %describe-instance-patch-states-result-instance-patch-states
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-patch-states-result
                    'make-describe-instance-patch-states-result))
 (common-lisp:defun make-describe-instance-patch-states-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token instance-patch-states)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-patch-states-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-patch-states))
      (common-lisp:list
       (common-lisp:cons "InstancePatchStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patch-states-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-patches-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or patch-compliance-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-instance-patches-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instance-patches-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or patch-orchestrator-filter-list
                                         common-lisp:null)
                         :accessor %describe-instance-patches-request-filters
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         %describe-instance-patches-request-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-instance-patches-request
                    'make-describe-instance-patches-request))
 (common-lisp:defun make-describe-instance-patches-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters
                     instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-patches-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patches-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patches-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patches-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-patches-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-instance-patches-result-next-token :initform
                         common-lisp:nil)
                        (patches :initarg :patches :type
                         (common-lisp:or patch-compliance-data-list
                                         common-lisp:null)
                         :accessor %describe-instance-patches-result-patches
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-patches-result
                    'make-describe-instance-patches-result))
 (common-lisp:defun make-describe-instance-patches-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token patches)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-patches-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patches-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patches-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patches))
      (common-lisp:list
       (common-lisp:cons "Patches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-patches-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-inventory-deletions-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-inventory-deletions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-inventory-deletions-request-next-token
                         :initform common-lisp:nil)
                        (deletion-id :initarg :deletion-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %describe-inventory-deletions-request-deletion-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-inventory-deletions-request
                    'make-describe-inventory-deletions-request))
 (common-lisp:defun make-describe-inventory-deletions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token deletion-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-inventory-deletions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inventory-deletions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inventory-deletions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-id))
      (common-lisp:list
       (common-lisp:cons "DeletionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inventory-deletions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-inventory-deletions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-inventory-deletions-result-next-token
                         :initform common-lisp:nil)
                        (inventory-deletions :initarg :inventory-deletions
                         :type
                         (common-lisp:or inventory-deletions-list
                                         common-lisp:null)
                         :accessor
                         %describe-inventory-deletions-result-inventory-deletions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-inventory-deletions-result
                    'make-describe-inventory-deletions-result))
 (common-lisp:defun make-describe-inventory-deletions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token inventory-deletions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-inventory-deletions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inventory-deletions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inventory-deletions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inventory-deletions))
      (common-lisp:list
       (common-lisp:cons "InventoryDeletions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inventory-deletions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-maintenance-window-execution-task-invocations-request
  common-lisp:nil
  ((next-token :initarg :next-token :type
    (common-lisp:or next-token common-lisp:null) :accessor
    %describe-maintenance-window-execution-task-invocations-request-next-token
    :initform common-lisp:nil)
   (max-results :initarg :max-results :type
    (common-lisp:or maintenance-window-max-results common-lisp:null) :accessor
    %describe-maintenance-window-execution-task-invocations-request-max-results
    :initform common-lisp:nil)
   (filters :initarg :filters :type
    (common-lisp:or maintenance-window-filter-list common-lisp:null) :accessor
    %describe-maintenance-window-execution-task-invocations-request-filters
    :initform common-lisp:nil)
   (task-id :initarg :task-id :type
    (common-lisp:or maintenance-window-execution-task-id common-lisp:null)
    :accessor
    %describe-maintenance-window-execution-task-invocations-request-task-id
    :initform (common-lisp:error ":task-id is required"))
   (window-execution-id :initarg :window-execution-id :type
    (common-lisp:or maintenance-window-execution-id common-lisp:null) :accessor
    %describe-maintenance-window-execution-task-invocations-request-window-execution-id
    :initform (common-lisp:error ":window-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list
   'describe-maintenance-window-execution-task-invocations-request
   'make-describe-maintenance-window-execution-task-invocations-request))
 (common-lisp:defun make-describe-maintenance-window-execution-task-invocations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters task-id
                     window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-execution-task-invocations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-task-invocations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-task-invocations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-task-invocations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-maintenance-window-execution-task-invocations-result common-lisp:nil
  ((next-token :initarg :next-token :type
    (common-lisp:or next-token common-lisp:null) :accessor
    %describe-maintenance-window-execution-task-invocations-result-next-token
    :initform common-lisp:nil)
   (window-execution-task-invocation-identities :initarg
    :window-execution-task-invocation-identities :type
    (common-lisp:or maintenance-window-execution-task-invocation-identity-list
                    common-lisp:null)
    :accessor
    %describe-maintenance-window-execution-task-invocations-result-window-execution-task-invocation-identities
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'describe-maintenance-window-execution-task-invocations-result
   'make-describe-maintenance-window-execution-task-invocations-result))
 (common-lisp:defun make-describe-maintenance-window-execution-task-invocations-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     window-execution-task-invocation-identities)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-execution-task-invocations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-task-invocations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-task-invocations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'window-execution-task-invocation-identities))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionTaskInvocationIdentities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-task-invocations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-window-execution-tasks-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-window-execution-tasks-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or maintenance-window-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-execution-tasks-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or maintenance-window-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-execution-tasks-request-filters
                         :initform common-lisp:nil)
                        (window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-execution-tasks-request-window-execution-id
                         :initform
                         (common-lisp:error
                          ":window-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-window-execution-tasks-request
                    'make-describe-maintenance-window-execution-tasks-request))
 (common-lisp:defun make-describe-maintenance-window-execution-tasks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-execution-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-window-execution-tasks-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-window-execution-tasks-result-next-token
                         :initform common-lisp:nil)
                        (window-execution-task-identities :initarg
                         :window-execution-task-identities :type
                         (common-lisp:or
                          maintenance-window-execution-task-identity-list
                          common-lisp:null)
                         :accessor
                         %describe-maintenance-window-execution-tasks-result-window-execution-task-identities
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-window-execution-tasks-result
                    'make-describe-maintenance-window-execution-tasks-result))
 (common-lisp:defun make-describe-maintenance-window-execution-tasks-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     window-execution-task-identities)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-execution-tasks-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-tasks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-tasks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'window-execution-task-identities))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionTaskIdentities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-execution-tasks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-window-executions-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-window-executions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or maintenance-window-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-executions-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or maintenance-window-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-executions-request-filters
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-executions-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-window-executions-request
                    'make-describe-maintenance-window-executions-request))
 (common-lisp:defun make-describe-maintenance-window-executions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-window-executions-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-window-executions-result-next-token
                         :initform common-lisp:nil)
                        (window-executions :initarg :window-executions :type
                         (common-lisp:or maintenance-window-execution-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-executions-result-window-executions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-window-executions-result
                    'make-describe-maintenance-window-executions-result))
 (common-lisp:defun make-describe-maintenance-window-executions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token window-executions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-executions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-executions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-executions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-executions))
      (common-lisp:list
       (common-lisp:cons "WindowExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-executions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-window-schedule-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-window-schedule-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or maintenance-window-search-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-schedule-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or patch-orchestrator-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-schedule-request-filters
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or maintenance-window-resource-type
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-schedule-request-resource-type
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %describe-maintenance-window-schedule-request-targets
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-schedule-request-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-window-schedule-request
                    'make-describe-maintenance-window-schedule-request))
 (common-lisp:defun make-describe-maintenance-window-schedule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     resource-type targets window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-window-schedule-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-window-schedule-result-next-token
                         :initform common-lisp:nil)
                        (scheduled-window-executions :initarg
                         :scheduled-window-executions :type
                         (common-lisp:or scheduled-window-execution-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-schedule-result-scheduled-window-executions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-window-schedule-result
                    'make-describe-maintenance-window-schedule-result))
 (common-lisp:defun make-describe-maintenance-window-schedule-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token scheduled-window-executions)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-schedule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-schedule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-schedule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-window-executions))
      (common-lisp:list
       (common-lisp:cons "ScheduledWindowExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-schedule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-window-targets-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-window-targets-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or maintenance-window-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-targets-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or maintenance-window-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-targets-request-filters
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-targets-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-window-targets-request
                    'make-describe-maintenance-window-targets-request))
 (common-lisp:defun make-describe-maintenance-window-targets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-window-targets-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-window-targets-result-next-token
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or maintenance-window-target-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-targets-result-targets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-window-targets-result
                    'make-describe-maintenance-window-targets-result))
 (common-lisp:defun make-describe-maintenance-window-targets-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token targets)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-targets-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-targets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-targets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-targets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-window-tasks-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-window-tasks-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or maintenance-window-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-tasks-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or maintenance-window-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-tasks-request-filters
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-tasks-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-window-tasks-request
                    'make-describe-maintenance-window-tasks-request))
 (common-lisp:defun make-describe-maintenance-window-tasks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-tasks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-window-tasks-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-window-tasks-result-next-token
                         :initform common-lisp:nil)
                        (tasks :initarg :tasks :type
                         (common-lisp:or maintenance-window-task-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-window-tasks-result-tasks
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-window-tasks-result
                    'make-describe-maintenance-window-tasks-result))
 (common-lisp:defun make-describe-maintenance-window-tasks-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token tasks)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-window-tasks-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-tasks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-tasks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tasks))
      (common-lisp:list
       (common-lisp:cons "Tasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-window-tasks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-windows-for-target-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-windows-for-target-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or maintenance-window-search-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-windows-for-target-request-max-results
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or maintenance-window-resource-type
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-windows-for-target-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %describe-maintenance-windows-for-target-request-targets
                         :initform
                         (common-lisp:error ":targets is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-windows-for-target-request
                    'make-describe-maintenance-windows-for-target-request))
 (common-lisp:defun make-describe-maintenance-windows-for-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results resource-type
                     targets)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-windows-for-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-for-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-for-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-for-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-windows-for-target-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-windows-for-target-result-next-token
                         :initform common-lisp:nil)
                        (window-identities :initarg :window-identities :type
                         (common-lisp:or maintenance-windows-for-target-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-windows-for-target-result-window-identities
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-windows-for-target-result
                    'make-describe-maintenance-windows-for-target-result))
 (common-lisp:defun make-describe-maintenance-windows-for-target-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token window-identities)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-windows-for-target-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-for-target-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-for-target-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-identities))
      (common-lisp:list
       (common-lisp:cons "WindowIdentities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-for-target-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-windows-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-windows-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or maintenance-window-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-windows-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or maintenance-window-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-windows-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-windows-request
                    'make-describe-maintenance-windows-request))
 (common-lisp:defun make-describe-maintenance-windows-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-windows-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-maintenance-windows-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-maintenance-windows-result-next-token
                         :initform common-lisp:nil)
                        (window-identities :initarg :window-identities :type
                         (common-lisp:or maintenance-window-identity-list
                                         common-lisp:null)
                         :accessor
                         %describe-maintenance-windows-result-window-identities
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-maintenance-windows-result
                    'make-describe-maintenance-windows-result))
 (common-lisp:defun make-describe-maintenance-windows-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token window-identities)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-maintenance-windows-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-identities))
      (common-lisp:list
       (common-lisp:cons "WindowIdentities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-maintenance-windows-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ops-items-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-ops-items-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or ops-item-max-results common-lisp:null)
                         :accessor %describe-ops-items-request-max-results
                         :initform common-lisp:nil)
                        (ops-item-filters :initarg :ops-item-filters :type
                         (common-lisp:or ops-item-filters common-lisp:null)
                         :accessor %describe-ops-items-request-ops-item-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-ops-items-request
                    'make-describe-ops-items-request))
 (common-lisp:defun make-describe-ops-items-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results ops-item-filters)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ops-items-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ops-items-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ops-items-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-filters))
      (common-lisp:list
       (common-lisp:cons "OpsItemFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ops-items-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ops-items-response common-lisp:nil
                       ((ops-item-summaries :initarg :ops-item-summaries :type
                         (common-lisp:or ops-item-summaries common-lisp:null)
                         :accessor
                         %describe-ops-items-response-ops-item-summaries
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-ops-items-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-ops-items-response
                    'make-describe-ops-items-response))
 (common-lisp:defun make-describe-ops-items-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ops-item-summaries next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ops-items-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ops-items-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ops-items-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-summaries))
      (common-lisp:list
       (common-lisp:cons "OpsItemSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ops-items-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-parameters-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-parameters-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-parameters-request-max-results
                         :initform common-lisp:nil)
                        (parameter-filters :initarg :parameter-filters :type
                         (common-lisp:or parameter-string-filter-list
                                         common-lisp:null)
                         :accessor
                         %describe-parameters-request-parameter-filters
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or parameters-filter-list
                                         common-lisp:null)
                         :accessor %describe-parameters-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-parameters-request
                    'make-describe-parameters-request))
 (common-lisp:defun make-describe-parameters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results parameter-filters
                     filters)
   (common-lisp:apply #'common-lisp:make-instance 'describe-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-filters))
      (common-lisp:list
       (common-lisp:cons "ParameterFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-parameters-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-parameters-result-next-token :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameter-metadata-list
                                         common-lisp:null)
                         :accessor %describe-parameters-result-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-parameters-result
                    'make-describe-parameters-result))
 (common-lisp:defun make-describe-parameters-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token parameters)
   (common-lisp:apply #'common-lisp:make-instance 'describe-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-patch-baselines-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-patch-baselines-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or patch-baseline-max-results
                                         common-lisp:null)
                         :accessor
                         %describe-patch-baselines-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or patch-orchestrator-filter-list
                                         common-lisp:null)
                         :accessor %describe-patch-baselines-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-patch-baselines-request
                    'make-describe-patch-baselines-request))
 (common-lisp:defun make-describe-patch-baselines-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-patch-baselines-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-baselines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-baselines-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-baselines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-patch-baselines-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-patch-baselines-result-next-token :initform
                         common-lisp:nil)
                        (baseline-identities :initarg :baseline-identities
                         :type
                         (common-lisp:or patch-baseline-identity-list
                                         common-lisp:null)
                         :accessor
                         %describe-patch-baselines-result-baseline-identities
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-patch-baselines-result
                    'make-describe-patch-baselines-result))
 (common-lisp:defun make-describe-patch-baselines-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token baseline-identities)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-patch-baselines-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-baselines-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-baselines-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-identities))
      (common-lisp:list
       (common-lisp:cons "BaselineIdentities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-baselines-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-patch-group-state-request common-lisp:nil
                       ((patch-group :initarg :patch-group :type
                         (common-lisp:or patch-group common-lisp:null)
                         :accessor
                         %describe-patch-group-state-request-patch-group
                         :initform
                         (common-lisp:error ":patch-group is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-patch-group-state-request
                    'make-describe-patch-group-state-request))
 (common-lisp:defun make-describe-patch-group-state-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-patch-group-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-group-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-group-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-group-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-patch-group-state-result common-lisp:nil
                       ((instances-with-other-non-compliant-patches :initarg
                         :instances-with-other-non-compliant-patches :type
                         (common-lisp:or instances-count common-lisp:null)
                         :accessor
                         %describe-patch-group-state-result-instances-with-other-non-compliant-patches
                         :initform common-lisp:nil)
                        (instances-with-security-non-compliant-patches :initarg
                         :instances-with-security-non-compliant-patches :type
                         (common-lisp:or instances-count common-lisp:null)
                         :accessor
                         %describe-patch-group-state-result-instances-with-security-non-compliant-patches
                         :initform common-lisp:nil)
                        (instances-with-critical-non-compliant-patches :initarg
                         :instances-with-critical-non-compliant-patches :type
                         (common-lisp:or instances-count common-lisp:null)
                         :accessor
                         %describe-patch-group-state-result-instances-with-critical-non-compliant-patches
                         :initform common-lisp:nil)
                        (instances-with-unreported-not-applicable-patches
                         :initarg
                         :instances-with-unreported-not-applicable-patches
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         %describe-patch-group-state-result-instances-with-unreported-not-applicable-patches
                         :initform common-lisp:nil)
                        (instances-with-not-applicable-patches :initarg
                         :instances-with-not-applicable-patches :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-patch-group-state-result-instances-with-not-applicable-patches
                         :initform common-lisp:nil)
                        (instances-with-failed-patches :initarg
                         :instances-with-failed-patches :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-patch-group-state-result-instances-with-failed-patches
                         :initform common-lisp:nil)
                        (instances-with-missing-patches :initarg
                         :instances-with-missing-patches :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-patch-group-state-result-instances-with-missing-patches
                         :initform common-lisp:nil)
                        (instances-with-installed-rejected-patches :initarg
                         :instances-with-installed-rejected-patches :type
                         (common-lisp:or instances-count common-lisp:null)
                         :accessor
                         %describe-patch-group-state-result-instances-with-installed-rejected-patches
                         :initform common-lisp:nil)
                        (instances-with-installed-pending-reboot-patches
                         :initarg
                         :instances-with-installed-pending-reboot-patches :type
                         (common-lisp:or instances-count common-lisp:null)
                         :accessor
                         %describe-patch-group-state-result-instances-with-installed-pending-reboot-patches
                         :initform common-lisp:nil)
                        (instances-with-installed-other-patches :initarg
                         :instances-with-installed-other-patches :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-patch-group-state-result-instances-with-installed-other-patches
                         :initform common-lisp:nil)
                        (instances-with-installed-patches :initarg
                         :instances-with-installed-patches :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-patch-group-state-result-instances-with-installed-patches
                         :initform common-lisp:nil)
                        (instances :initarg :instances :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %describe-patch-group-state-result-instances :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-patch-group-state-result
                    'make-describe-patch-group-state-result))
 (common-lisp:defun make-describe-patch-group-state-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     instances-with-other-non-compliant-patches
                     instances-with-security-non-compliant-patches
                     instances-with-critical-non-compliant-patches
                     instances-with-unreported-not-applicable-patches
                     instances-with-not-applicable-patches
                     instances-with-failed-patches
                     instances-with-missing-patches
                     instances-with-installed-rejected-patches
                     instances-with-installed-pending-reboot-patches
                     instances-with-installed-other-patches
                     instances-with-installed-patches instances)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-patch-group-state-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-group-state-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-group-state-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "Instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-installed-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithInstalledPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-installed-other-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithInstalledOtherPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-installed-pending-reboot-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithInstalledPendingRebootPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-installed-rejected-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithInstalledRejectedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-missing-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithMissingPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-failed-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithFailedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-not-applicable-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithNotApplicablePatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-unreported-not-applicable-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithUnreportedNotApplicablePatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-critical-non-compliant-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithCriticalNonCompliantPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-security-non-compliant-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithSecurityNonCompliantPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instances-with-other-non-compliant-patches))
      (common-lisp:list
       (common-lisp:cons "InstancesWithOtherNonCompliantPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-group-state-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-patch-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-patch-groups-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or patch-orchestrator-filter-list
                                         common-lisp:null)
                         :accessor %describe-patch-groups-request-filters
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or patch-baseline-max-results
                                         common-lisp:null)
                         :accessor %describe-patch-groups-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-patch-groups-request
                    'make-describe-patch-groups-request))
 (common-lisp:defun make-describe-patch-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token filters max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-patch-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-patch-groups-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-patch-groups-result-next-token :initform
                         common-lisp:nil)
                        (mappings :initarg :mappings :type
                         (common-lisp:or
                          patch-group-patch-baseline-mapping-list
                          common-lisp:null)
                         :accessor %describe-patch-groups-result-mappings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-patch-groups-result
                    'make-describe-patch-groups-result))
 (common-lisp:defun make-describe-patch-groups-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token mappings)
   (common-lisp:apply #'common-lisp:make-instance 'describe-patch-groups-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-groups-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-groups-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mappings))
      (common-lisp:list
       (common-lisp:cons "Mappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-groups-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-patch-properties-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-patch-properties-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-patch-properties-request-max-results
                         :initform common-lisp:nil)
                        (patch-set :initarg :patch-set :type
                         (common-lisp:or patch-set common-lisp:null) :accessor
                         %describe-patch-properties-request-patch-set :initform
                         common-lisp:nil)
                        (property :initarg :property :type
                         (common-lisp:or patch-property common-lisp:null)
                         :accessor %describe-patch-properties-request-property
                         :initform (common-lisp:error ":property is required"))
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor
                         %describe-patch-properties-request-operating-system
                         :initform
                         (common-lisp:error ":operating-system is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-patch-properties-request
                    'make-describe-patch-properties-request))
 (common-lisp:defun make-describe-patch-properties-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results patch-set property
                     operating-system)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-patch-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property))
      (common-lisp:list
       (common-lisp:cons "Property"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-set))
      (common-lisp:list
       (common-lisp:cons "PatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-patch-properties-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-patch-properties-result-next-token :initform
                         common-lisp:nil)
                        (properties :initarg :properties :type
                         (common-lisp:or patch-properties-list
                                         common-lisp:null)
                         :accessor %describe-patch-properties-result-properties
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-patch-properties-result
                    'make-describe-patch-properties-result))
 (common-lisp:defun make-describe-patch-properties-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token properties)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-patch-properties-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-properties-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-properties-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-patch-properties-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-sessions-request common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or session-filter-list common-lisp:null)
                         :accessor %describe-sessions-request-filters :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-sessions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or session-max-results common-lisp:null)
                         :accessor %describe-sessions-request-max-results
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or session-state common-lisp:null)
                         :accessor %describe-sessions-request-state :initform
                         (common-lisp:error ":state is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-sessions-request
                    'make-describe-sessions-request))
 (common-lisp:defun make-describe-sessions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters next-token max-results state)
   (common-lisp:apply #'common-lisp:make-instance 'describe-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-sessions-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-sessions-response-next-token :initform
                         common-lisp:nil)
                        (sessions :initarg :sessions :type
                         (common-lisp:or session-list common-lisp:null)
                         :accessor %describe-sessions-response-sessions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-sessions-response
                    'make-describe-sessions-response))
 (common-lisp:defun make-describe-sessions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token sessions)
   (common-lisp:apply #'common-lisp:make-instance 'describe-sessions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "Sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-sessions-response))
   common-lisp:nil))
(common-lisp:deftype description-in-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-ops-item-related-item-request
                       common-lisp:nil
                       ((association-id :initarg :association-id :type
                         (common-lisp:or ops-item-related-item-association-id
                                         common-lisp:null)
                         :accessor
                         %disassociate-ops-item-related-item-request-association-id
                         :initform
                         (common-lisp:error ":association-id is required"))
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or ops-item-id common-lisp:null)
                         :accessor
                         %disassociate-ops-item-related-item-request-ops-item-id
                         :initform
                         (common-lisp:error ":ops-item-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-ops-item-related-item-request
                    'make-disassociate-ops-item-related-item-request))
 (common-lisp:defun make-disassociate-ops-item-related-item-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-id ops-item-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-ops-item-related-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ops-item-related-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ops-item-related-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ops-item-related-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-ops-item-related-item-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-ops-item-related-item-response
                    'make-disassociate-ops-item-related-item-response))
 (common-lisp:defun make-disassociate-ops-item-related-item-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-ops-item-related-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ops-item-related-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ops-item-related-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-ops-item-related-item-response))
   common-lisp:nil))
(common-lisp:deftype document-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition document-already-exists
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       document-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'document-already-exists 'document-already-exists-message)))
(common-lisp:deftype document-author () 'common-lisp:string)
(common-lisp:deftype document-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document-default-version-description common-lisp:nil
                       ((default-version-name :initarg :default-version-name
                         :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor
                         %document-default-version-description-default-version-name
                         :initform common-lisp:nil)
                        (default-version :initarg :default-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %document-default-version-description-default-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %document-default-version-description-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-default-version-description
                    'make-document-default-version-description))
 (common-lisp:defun make-document-default-version-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-version-name default-version
                     name)
   (common-lisp:apply #'common-lisp:make-instance
                      'document-default-version-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-default-version-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-default-version-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version))
      (common-lisp:list
       (common-lisp:cons "DefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-version-name))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-default-version-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass document-description common-lisp:nil
                       ((category-enum :initarg :category-enum :type
                         (common-lisp:or category-enum-list common-lisp:null)
                         :accessor %document-description-category-enum
                         :initform common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or category-list common-lisp:null)
                         :accessor %document-description-category :initform
                         common-lisp:nil)
                        (review-status :initarg :review-status :type
                         (common-lisp:or review-status common-lisp:null)
                         :accessor %document-description-review-status
                         :initform common-lisp:nil)
                        (pending-review-version :initarg
                         :pending-review-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %document-description-pending-review-version
                         :initform common-lisp:nil)
                        (approved-version :initarg :approved-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %document-description-approved-version
                         :initform common-lisp:nil)
                        (review-information :initarg :review-information :type
                         (common-lisp:or review-information-list
                                         common-lisp:null)
                         :accessor %document-description-review-information
                         :initform common-lisp:nil)
                        (author :initarg :author :type
                         (common-lisp:or document-author common-lisp:null)
                         :accessor %document-description-author :initform
                         common-lisp:nil)
                        (requires :initarg :requires :type
                         (common-lisp:or document-requires-list
                                         common-lisp:null)
                         :accessor %document-description-requires :initform
                         common-lisp:nil)
                        (attachments-information :initarg
                         :attachments-information :type
                         (common-lisp:or attachment-information-list
                                         common-lisp:null)
                         :accessor
                         %document-description-attachments-information
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %document-description-tags :initform common-lisp:nil)
                        (target-type :initarg :target-type :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %document-description-target-type :initform
                         common-lisp:nil)
                        (document-format :initarg :document-format :type
                         (common-lisp:or document-format common-lisp:null)
                         :accessor %document-description-document-format
                         :initform common-lisp:nil)
                        (default-version :initarg :default-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %document-description-default-version
                         :initform common-lisp:nil)
                        (latest-version :initarg :latest-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %document-description-latest-version
                         :initform common-lisp:nil)
                        (schema-version :initarg :schema-version :type
                         (common-lisp:or document-schema-version
                                         common-lisp:null)
                         :accessor %document-description-schema-version
                         :initform common-lisp:nil)
                        (document-type :initarg :document-type :type
                         (common-lisp:or document-type common-lisp:null)
                         :accessor %document-description-document-type
                         :initform common-lisp:nil)
                        (platform-types :initarg :platform-types :type
                         (common-lisp:or platform-type-list common-lisp:null)
                         :accessor %document-description-platform-types
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or document-parameter-list
                                         common-lisp:null)
                         :accessor %document-description-parameters :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description-in-document
                                         common-lisp:null)
                         :accessor %document-description-description :initform
                         common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %document-description-document-version
                         :initform common-lisp:nil)
                        (status-information :initarg :status-information :type
                         (common-lisp:or document-status-information
                                         common-lisp:null)
                         :accessor %document-description-status-information
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or document-status common-lisp:null)
                         :accessor %document-description-status :initform
                         common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %document-description-created-date :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or document-owner common-lisp:null)
                         :accessor %document-description-owner :initform
                         common-lisp:nil)
                        (version-name :initarg :version-name :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor %document-description-version-name :initform
                         common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or document-display-name
                                         common-lisp:null)
                         :accessor %document-description-display-name :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %document-description-name :initform
                         common-lisp:nil)
                        (hash-type :initarg :hash-type :type
                         (common-lisp:or document-hash-type common-lisp:null)
                         :accessor %document-description-hash-type :initform
                         common-lisp:nil)
                        (hash :initarg :hash :type
                         (common-lisp:or document-hash common-lisp:null)
                         :accessor %document-description-hash :initform
                         common-lisp:nil)
                        (sha1 :initarg :sha1 :type
                         (common-lisp:or document-sha1 common-lisp:null)
                         :accessor %document-description-sha1 :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-description 'make-document-description))
 (common-lisp:defun make-document-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key category-enum category review-status
                     pending-review-version approved-version review-information
                     author requires attachments-information tags target-type
                     document-format default-version latest-version
                     schema-version document-type platform-types parameters
                     description document-version status-information status
                     created-date owner version-name display-name name
                     hash-type hash sha1)
   (common-lisp:apply #'common-lisp:make-instance 'document-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sha1))
      (common-lisp:list
       (common-lisp:cons "Sha1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash))
      (common-lisp:list
       (common-lisp:cons "Hash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hash-type))
      (common-lisp:list
       (common-lisp:cons "HashType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-information))
      (common-lisp:list
       (common-lisp:cons "StatusInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-types))
      (common-lisp:list
       (common-lisp:cons "PlatformTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-type))
      (common-lisp:list
       (common-lisp:cons "DocumentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "SchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version))
      (common-lisp:list
       (common-lisp:cons "LatestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version))
      (common-lisp:list
       (common-lisp:cons "DefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-format))
      (common-lisp:list
       (common-lisp:cons "DocumentFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachments-information))
      (common-lisp:list
       (common-lisp:cons "AttachmentsInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requires))
      (common-lisp:list
       (common-lisp:cons "Requires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-information))
      (common-lisp:list
       (common-lisp:cons "ReviewInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approved-version))
      (common-lisp:list
       (common-lisp:cons "ApprovedVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-review-version))
      (common-lisp:list
       (common-lisp:cons "PendingReviewVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-status))
      (common-lisp:list
       (common-lisp:cons "ReviewStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-enum))
      (common-lisp:list
       (common-lisp:cons "CategoryEnum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-description))
   common-lisp:nil))
(common-lisp:deftype document-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document-filter common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or document-filter-value
                                         common-lisp:null)
                         :accessor %document-filter-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or document-filter-key common-lisp:null)
                         :accessor %document-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'document-filter 'make-document-filter))
 (common-lisp:defun make-document-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'document-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-filter))
   common-lisp:nil))
(common-lisp:deftype document-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-filter-list ()
   '(trivial-types:proper-list document-filter))
 (common-lisp:defun |make-document-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-filter-value () 'common-lisp:string)
(common-lisp:deftype document-format () 'common-lisp:string)
(common-lisp:deftype document-hash () 'common-lisp:string)
(common-lisp:deftype document-hash-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document-identifier common-lisp:nil
                       ((author :initarg :author :type
                         (common-lisp:or document-author common-lisp:null)
                         :accessor %document-identifier-author :initform
                         common-lisp:nil)
                        (review-status :initarg :review-status :type
                         (common-lisp:or review-status common-lisp:null)
                         :accessor %document-identifier-review-status :initform
                         common-lisp:nil)
                        (requires :initarg :requires :type
                         (common-lisp:or document-requires-list
                                         common-lisp:null)
                         :accessor %document-identifier-requires :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %document-identifier-tags :initform common-lisp:nil)
                        (target-type :initarg :target-type :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %document-identifier-target-type :initform
                         common-lisp:nil)
                        (document-format :initarg :document-format :type
                         (common-lisp:or document-format common-lisp:null)
                         :accessor %document-identifier-document-format
                         :initform common-lisp:nil)
                        (schema-version :initarg :schema-version :type
                         (common-lisp:or document-schema-version
                                         common-lisp:null)
                         :accessor %document-identifier-schema-version
                         :initform common-lisp:nil)
                        (document-type :initarg :document-type :type
                         (common-lisp:or document-type common-lisp:null)
                         :accessor %document-identifier-document-type :initform
                         common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %document-identifier-document-version
                         :initform common-lisp:nil)
                        (platform-types :initarg :platform-types :type
                         (common-lisp:or platform-type-list common-lisp:null)
                         :accessor %document-identifier-platform-types
                         :initform common-lisp:nil)
                        (version-name :initarg :version-name :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor %document-identifier-version-name :initform
                         common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or document-owner common-lisp:null)
                         :accessor %document-identifier-owner :initform
                         common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or document-display-name
                                         common-lisp:null)
                         :accessor %document-identifier-display-name :initform
                         common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %document-identifier-created-date :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %document-identifier-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-identifier 'make-document-identifier))
 (common-lisp:defun make-document-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key author review-status requires tags
                     target-type document-format schema-version document-type
                     document-version platform-types version-name owner
                     display-name created-date name)
   (common-lisp:apply #'common-lisp:make-instance 'document-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-types))
      (common-lisp:list
       (common-lisp:cons "PlatformTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-type))
      (common-lisp:list
       (common-lisp:cons "DocumentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "SchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-format))
      (common-lisp:list
       (common-lisp:cons "DocumentFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requires))
      (common-lisp:list
       (common-lisp:cons "Requires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-status))
      (common-lisp:list
       (common-lisp:cons "ReviewStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-identifier-list ()
   '(trivial-types:proper-list document-identifier))
 (common-lisp:defun |make-document-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass document-key-values-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or document-key-values-filter-values
                                         common-lisp:null)
                         :accessor %document-key-values-filter-values :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or document-key-values-filter-key
                                         common-lisp:null)
                         :accessor %document-key-values-filter-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-key-values-filter
                    'make-document-key-values-filter))
 (common-lisp:defun make-document-key-values-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'document-key-values-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-key-values-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-key-values-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-key-values-filter))
   common-lisp:nil))
(common-lisp:deftype document-key-values-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-key-values-filter-list ()
   '(trivial-types:proper-list document-key-values-filter))
 (common-lisp:defun |make-document-key-values-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-key-values-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-key-values-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-key-values-filter-values ()
   '(trivial-types:proper-list document-key-values-filter-value))
 (common-lisp:defun |make-document-key-values-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-key-values-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition document-limit-exceeded
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       document-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'document-limit-exceeded 'document-limit-exceeded-message)))
(common-lisp:deftype document-metadata-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document-metadata-response-info common-lisp:nil
                       ((reviewer-response :initarg :reviewer-response :type
                         (common-lisp:or document-reviewer-response-list
                                         common-lisp:null)
                         :accessor
                         %document-metadata-response-info-reviewer-response
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-metadata-response-info
                    'make-document-metadata-response-info))
 (common-lisp:defun make-document-metadata-response-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reviewer-response)
   (common-lisp:apply #'common-lisp:make-instance
                      'document-metadata-response-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-metadata-response-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-metadata-response-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer-response))
      (common-lisp:list
       (common-lisp:cons "ReviewerResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-metadata-response-info))
   common-lisp:nil))
(common-lisp:deftype document-name () 'common-lisp:string)
(common-lisp:deftype document-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document-parameter common-lisp:nil
                       ((default-value :initarg :default-value :type
                         (common-lisp:or document-parameter-default-value
                                         common-lisp:null)
                         :accessor %document-parameter-default-value :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or document-parameter-descrption
                                         common-lisp:null)
                         :accessor %document-parameter-description :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or document-parameter-type
                                         common-lisp:null)
                         :accessor %document-parameter-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-parameter-name
                                         common-lisp:null)
                         :accessor %document-parameter-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-parameter 'make-document-parameter))
 (common-lisp:defun make-document-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-value description type name)
   (common-lisp:apply #'common-lisp:make-instance 'document-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-parameter))
   common-lisp:nil))
(common-lisp:deftype document-parameter-default-value () 'common-lisp:string)
(common-lisp:deftype document-parameter-descrption () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-parameter-list ()
   '(trivial-types:proper-list document-parameter))
 (common-lisp:defun |make-document-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-parameter-name () 'common-lisp:string)
(common-lisp:deftype document-parameter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition document-permission-limit
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       document-permission-limit-message)))
 (common-lisp:export
  (common-lisp:list 'document-permission-limit
                    'document-permission-limit-message)))
(common-lisp:deftype document-permission-max-results () 'common-lisp:integer)
(common-lisp:deftype document-permission-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document-requires common-lisp:nil
                       ((version-name :initarg :version-name :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor %document-requires-version-name :initform
                         common-lisp:nil)
                        (require-type :initarg :require-type :type
                         (common-lisp:or require-type common-lisp:null)
                         :accessor %document-requires-require-type :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %document-requires-version :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %document-requires-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'document-requires 'make-document-requires))
 (common-lisp:defun make-document-requires
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-name require-type version name)
   (common-lisp:apply #'common-lisp:make-instance 'document-requires
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-requires))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-requires))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-type))
      (common-lisp:list
       (common-lisp:cons "RequireType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-requires))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype document-requires-list ()
   '(trivial-types:proper-list document-requires))
 (common-lisp:defun |make-document-requires-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-requires))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-review-action () 'common-lisp:string)
(common-lisp:deftype document-review-comment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-review-comment-list ()
   '(trivial-types:proper-list document-review-comment-source))
 (common-lisp:defun |make-document-review-comment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-review-comment-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass document-review-comment-source common-lisp:nil
                       ((content :initarg :content :type
                         (common-lisp:or document-review-comment
                                         common-lisp:null)
                         :accessor %document-review-comment-source-content
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or document-review-comment-type
                                         common-lisp:null)
                         :accessor %document-review-comment-source-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-review-comment-source
                    'make-document-review-comment-source))
 (common-lisp:defun make-document-review-comment-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content type)
   (common-lisp:apply #'common-lisp:make-instance
                      'document-review-comment-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-review-comment-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-review-comment-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-review-comment-source))
   common-lisp:nil))
(common-lisp:deftype document-review-comment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype document-reviewer-response-list ()
   '(trivial-types:proper-list document-reviewer-response-source))
 (common-lisp:defun |make-document-reviewer-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            document-reviewer-response-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass document-reviewer-response-source common-lisp:nil
                       ((reviewer :initarg :reviewer :type
                         (common-lisp:or reviewer common-lisp:null) :accessor
                         %document-reviewer-response-source-reviewer :initform
                         common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or document-review-comment-list
                                         common-lisp:null)
                         :accessor %document-reviewer-response-source-comment
                         :initform common-lisp:nil)
                        (review-status :initarg :review-status :type
                         (common-lisp:or review-status common-lisp:null)
                         :accessor
                         %document-reviewer-response-source-review-status
                         :initform common-lisp:nil)
                        (updated-time :initarg :updated-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %document-reviewer-response-source-updated-time
                         :initform common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %document-reviewer-response-source-create-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-reviewer-response-source
                    'make-document-reviewer-response-source))
 (common-lisp:defun make-document-reviewer-response-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reviewer comment review-status
                     updated-time create-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'document-reviewer-response-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-reviewer-response-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-reviewer-response-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-status))
      (common-lisp:list
       (common-lisp:cons "ReviewStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer))
      (common-lisp:list
       (common-lisp:cons "Reviewer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-reviewer-response-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass document-reviews common-lisp:nil
                       ((comment :initarg :comment :type
                         (common-lisp:or document-review-comment-list
                                         common-lisp:null)
                         :accessor %document-reviews-comment :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or document-review-action
                                         common-lisp:null)
                         :accessor %document-reviews-action :initform
                         (common-lisp:error ":action is required"))))
 (common-lisp:export
  (common-lisp:list 'document-reviews 'make-document-reviews))
 (common-lisp:defun make-document-reviews
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key comment action)
   (common-lisp:apply #'common-lisp:make-instance 'document-reviews
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input document-reviews))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input document-reviews))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input document-reviews))
   common-lisp:nil))
(common-lisp:deftype document-schema-version () 'common-lisp:string)
(common-lisp:deftype document-sha1 () 'common-lisp:string)
(common-lisp:deftype document-status () 'common-lisp:string)
(common-lisp:deftype document-status-information () 'common-lisp:string)
(common-lisp:deftype document-type () 'common-lisp:string)
(common-lisp:deftype document-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass document-version-info common-lisp:nil
                       ((review-status :initarg :review-status :type
                         (common-lisp:or review-status common-lisp:null)
                         :accessor %document-version-info-review-status
                         :initform common-lisp:nil)
                        (status-information :initarg :status-information :type
                         (common-lisp:or document-status-information
                                         common-lisp:null)
                         :accessor %document-version-info-status-information
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or document-status common-lisp:null)
                         :accessor %document-version-info-status :initform
                         common-lisp:nil)
                        (document-format :initarg :document-format :type
                         (common-lisp:or document-format common-lisp:null)
                         :accessor %document-version-info-document-format
                         :initform common-lisp:nil)
                        (is-default-version :initarg :is-default-version :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %document-version-info-is-default-version :initform
                         common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %document-version-info-created-date :initform
                         common-lisp:nil)
                        (version-name :initarg :version-name :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor %document-version-info-version-name
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %document-version-info-document-version
                         :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or document-display-name
                                         common-lisp:null)
                         :accessor %document-version-info-display-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %document-version-info-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'document-version-info 'make-document-version-info))
 (common-lisp:defun make-document-version-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key review-status status-information status
                     document-format is-default-version created-date
                     version-name document-version display-name name)
   (common-lisp:apply #'common-lisp:make-instance 'document-version-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          document-version-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          document-version-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "IsDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-format))
      (common-lisp:list
       (common-lisp:cons "DocumentFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-information))
      (common-lisp:list
       (common-lisp:cons "StatusInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-status))
      (common-lisp:list
       (common-lisp:cons "ReviewStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          document-version-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition document-version-limit-exceeded
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       document-version-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'document-version-limit-exceeded
                    'document-version-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype document-version-list ()
   '(trivial-types:proper-list document-version-info))
 (common-lisp:defun |make-document-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list document-version-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype document-version-name () 'common-lisp:string)
(common-lisp:deftype document-version-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition does-not-exist-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       does-not-exist-exception-message)))
 (common-lisp:export
  (common-lisp:list 'does-not-exist-exception
                    'does-not-exist-exception-message)))
(common-lisp:deftype dry-run () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition duplicate-document-content
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-document-content-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-document-content
                    'duplicate-document-content-message)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-document-version-name
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-document-version-name-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-document-version-name
                    'duplicate-document-version-name-message)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-instance-id
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'duplicate-instance-id)))
(common-lisp:deftype effective-instance-association-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass effective-patch common-lisp:nil
                       ((patch-status :initarg :patch-status :type
                         (common-lisp:or patch-status common-lisp:null)
                         :accessor %effective-patch-patch-status :initform
                         common-lisp:nil)
                        (patch :initarg :patch :type
                         (common-lisp:or patch common-lisp:null) :accessor
                         %effective-patch-patch :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'effective-patch 'make-effective-patch))
 (common-lisp:defun make-effective-patch
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-status patch)
   (common-lisp:apply #'common-lisp:make-instance 'effective-patch
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input effective-patch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input effective-patch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch))
      (common-lisp:list
       (common-lisp:cons "Patch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-status))
      (common-lisp:list
       (common-lisp:cons "PatchStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input effective-patch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype effective-patch-list ()
   '(trivial-types:proper-list effective-patch))
 (common-lisp:defun |make-effective-patch-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list effective-patch))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-count () 'common-lisp:integer)
(common-lisp:deftype execution-mode () 'common-lisp:string)
(common-lisp:deftype execution-role-name () 'common-lisp:string)
(common-lisp:deftype expiration-date () 'common-lisp:string)
(common-lisp:deftype external-alarm-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass failed-create-association common-lisp:nil
                       ((fault :initarg :fault :type
                         (common-lisp:or fault common-lisp:null) :accessor
                         %failed-create-association-fault :initform
                         common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or batch-error-message common-lisp:null)
                         :accessor %failed-create-association-message :initform
                         common-lisp:nil)
                        (entry :initarg :entry :type
                         (common-lisp:or create-association-batch-request-entry
                                         common-lisp:null)
                         :accessor %failed-create-association-entry :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failed-create-association
                    'make-failed-create-association))
 (common-lisp:defun make-failed-create-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fault message entry)
   (common-lisp:apply #'common-lisp:make-instance 'failed-create-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry))
      (common-lisp:list
       (common-lisp:cons "Entry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault))
      (common-lisp:list
       (common-lisp:cons "Fault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-create-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-create-association-list ()
   '(trivial-types:proper-list failed-create-association))
 (common-lisp:defun |make-failed-create-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-create-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass failure-details common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor %failure-details-details :initform
                         common-lisp:nil)
                        (failure-type :initarg :failure-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %failure-details-failure-type :initform
                         common-lisp:nil)
                        (failure-stage :initarg :failure-stage :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %failure-details-failure-stage :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'failure-details 'make-failure-details))
 (common-lisp:defun make-failure-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details failure-type failure-stage)
   (common-lisp:apply #'common-lisp:make-instance 'failure-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failure-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failure-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-stage))
      (common-lisp:list
       (common-lisp:cons "FailureStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-type))
      (common-lisp:list
       (common-lisp:cons "FailureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failure-details))
   common-lisp:nil))
(common-lisp:deftype fault () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition feature-not-available-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       feature-not-available-exception-message)))
 (common-lisp:export
  (common-lisp:list 'feature-not-available-exception
                    'feature-not-available-exception-message)))
(common-lisp:progn
 (common-lisp:defclass get-automation-execution-request common-lisp:nil
                       ((automation-execution-id :initarg
                         :automation-execution-id :type
                         (common-lisp:or automation-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-automation-execution-request-automation-execution-id
                         :initform
                         (common-lisp:error
                          ":automation-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-automation-execution-request
                    'make-get-automation-execution-request))
 (common-lisp:defun make-get-automation-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key automation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-automation-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-automation-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-automation-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-id))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-automation-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-automation-execution-result common-lisp:nil
                       ((automation-execution :initarg :automation-execution
                         :type
                         (common-lisp:or automation-execution common-lisp:null)
                         :accessor
                         %get-automation-execution-result-automation-execution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-automation-execution-result
                    'make-get-automation-execution-result))
 (common-lisp:defun make-get-automation-execution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key automation-execution)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-automation-execution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-automation-execution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-automation-execution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution))
      (common-lisp:list
       (common-lisp:cons "AutomationExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-automation-execution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calendar-state-request common-lisp:nil
                       ((at-time :initarg :at-time :type
                         (common-lisp:or iso8601string common-lisp:null)
                         :accessor %get-calendar-state-request-at-time
                         :initform common-lisp:nil)
                        (calendar-names :initarg :calendar-names :type
                         (common-lisp:or calendar-name-or-arnlist
                                         common-lisp:null)
                         :accessor %get-calendar-state-request-calendar-names
                         :initform
                         (common-lisp:error ":calendar-names is required"))))
 (common-lisp:export
  (common-lisp:list 'get-calendar-state-request
                    'make-get-calendar-state-request))
 (common-lisp:defun make-get-calendar-state-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key at-time calendar-names)
   (common-lisp:apply #'common-lisp:make-instance 'get-calendar-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calendar-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calendar-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calendar-names))
      (common-lisp:list
       (common-lisp:cons "CalendarNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'at-time))
      (common-lisp:list
       (common-lisp:cons "AtTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calendar-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-calendar-state-response common-lisp:nil
                       ((next-transition-time :initarg :next-transition-time
                         :type (common-lisp:or iso8601string common-lisp:null)
                         :accessor
                         %get-calendar-state-response-next-transition-time
                         :initform common-lisp:nil)
                        (at-time :initarg :at-time :type
                         (common-lisp:or iso8601string common-lisp:null)
                         :accessor %get-calendar-state-response-at-time
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or calendar-state common-lisp:null)
                         :accessor %get-calendar-state-response-state :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-calendar-state-response
                    'make-get-calendar-state-response))
 (common-lisp:defun make-get-calendar-state-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-transition-time at-time state)
   (common-lisp:apply #'common-lisp:make-instance 'get-calendar-state-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-calendar-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-calendar-state-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'at-time))
      (common-lisp:list
       (common-lisp:cons "AtTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-transition-time))
      (common-lisp:list
       (common-lisp:cons "NextTransitionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-calendar-state-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-command-invocation-request common-lisp:nil
                       ((plugin-name :initarg :plugin-name :type
                         (common-lisp:or command-plugin-name common-lisp:null)
                         :accessor %get-command-invocation-request-plugin-name
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %get-command-invocation-request-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))
                        (command-id :initarg :command-id :type
                         (common-lisp:or command-id common-lisp:null) :accessor
                         %get-command-invocation-request-command-id :initform
                         (common-lisp:error ":command-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-command-invocation-request
                    'make-get-command-invocation-request))
 (common-lisp:defun make-get-command-invocation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key plugin-name instance-id command-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-command-invocation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-command-invocation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-command-invocation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-id))
      (common-lisp:list
       (common-lisp:cons "CommandId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-name))
      (common-lisp:list
       (common-lisp:cons "PluginName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-command-invocation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-command-invocation-result common-lisp:nil
                       ((cloud-watch-output-config :initarg
                         :cloud-watch-output-config :type
                         (common-lisp:or cloud-watch-output-config
                                         common-lisp:null)
                         :accessor
                         %get-command-invocation-result-cloud-watch-output-config
                         :initform common-lisp:nil)
                        (standard-error-url :initarg :standard-error-url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %get-command-invocation-result-standard-error-url
                         :initform common-lisp:nil)
                        (standard-error-content :initarg
                         :standard-error-content :type
                         (common-lisp:or standard-error-content
                                         common-lisp:null)
                         :accessor
                         %get-command-invocation-result-standard-error-content
                         :initform common-lisp:nil)
                        (standard-output-url :initarg :standard-output-url
                         :type (common-lisp:or url common-lisp:null) :accessor
                         %get-command-invocation-result-standard-output-url
                         :initform common-lisp:nil)
                        (standard-output-content :initarg
                         :standard-output-content :type
                         (common-lisp:or standard-output-content
                                         common-lisp:null)
                         :accessor
                         %get-command-invocation-result-standard-output-content
                         :initform common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or status-details common-lisp:null)
                         :accessor
                         %get-command-invocation-result-status-details
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or command-invocation-status
                                         common-lisp:null)
                         :accessor %get-command-invocation-result-status
                         :initform common-lisp:nil)
                        (execution-end-date-time :initarg
                         :execution-end-date-time :type
                         (common-lisp:or string-date-time common-lisp:null)
                         :accessor
                         %get-command-invocation-result-execution-end-date-time
                         :initform common-lisp:nil)
                        (execution-elapsed-time :initarg
                         :execution-elapsed-time :type
                         (common-lisp:or string-date-time common-lisp:null)
                         :accessor
                         %get-command-invocation-result-execution-elapsed-time
                         :initform common-lisp:nil)
                        (execution-start-date-time :initarg
                         :execution-start-date-time :type
                         (common-lisp:or string-date-time common-lisp:null)
                         :accessor
                         %get-command-invocation-result-execution-start-date-time
                         :initform common-lisp:nil)
                        (response-code :initarg :response-code :type
                         (common-lisp:or response-code common-lisp:null)
                         :accessor %get-command-invocation-result-response-code
                         :initform common-lisp:nil)
                        (plugin-name :initarg :plugin-name :type
                         (common-lisp:or command-plugin-name common-lisp:null)
                         :accessor %get-command-invocation-result-plugin-name
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %get-command-invocation-result-document-version
                         :initform common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %get-command-invocation-result-document-name
                         :initform common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or comment common-lisp:null) :accessor
                         %get-command-invocation-result-comment :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %get-command-invocation-result-instance-id
                         :initform common-lisp:nil)
                        (command-id :initarg :command-id :type
                         (common-lisp:or command-id common-lisp:null) :accessor
                         %get-command-invocation-result-command-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-command-invocation-result
                    'make-get-command-invocation-result))
 (common-lisp:defun make-get-command-invocation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-output-config
                     standard-error-url standard-error-content
                     standard-output-url standard-output-content status-details
                     status execution-end-date-time execution-elapsed-time
                     execution-start-date-time response-code plugin-name
                     document-version document-name comment instance-id
                     command-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-command-invocation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-command-invocation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-command-invocation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-id))
      (common-lisp:list
       (common-lisp:cons "CommandId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plugin-name))
      (common-lisp:list
       (common-lisp:cons "PluginName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code))
      (common-lisp:list
       (common-lisp:cons "ResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-date-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionStartDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-elapsed-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionElapsedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-end-date-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionEndDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-output-content))
      (common-lisp:list
       (common-lisp:cons "StandardOutputContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-output-url))
      (common-lisp:list
       (common-lisp:cons "StandardOutputUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-error-content))
      (common-lisp:list
       (common-lisp:cons "StandardErrorContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-error-url))
      (common-lisp:list
       (common-lisp:cons "StandardErrorUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-output-config))
      (common-lisp:list
       (common-lisp:cons "CloudWatchOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-command-invocation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connection-status-request common-lisp:nil
                       ((target :initarg :target :type
                         (common-lisp:or session-target common-lisp:null)
                         :accessor %get-connection-status-request-target
                         :initform (common-lisp:error ":target is required"))))
 (common-lisp:export
  (common-lisp:list 'get-connection-status-request
                    'make-get-connection-status-request))
 (common-lisp:defun make-get-connection-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-connection-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connection-status-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or connection-status common-lisp:null)
                         :accessor %get-connection-status-response-status
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or session-target common-lisp:null)
                         :accessor %get-connection-status-response-target
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-connection-status-response
                    'make-get-connection-status-response))
 (common-lisp:defun make-get-connection-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status target)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-connection-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-default-patch-baseline-request common-lisp:nil
                       ((operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor
                         %get-default-patch-baseline-request-operating-system
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-default-patch-baseline-request
                    'make-get-default-patch-baseline-request))
 (common-lisp:defun make-get-default-patch-baseline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operating-system)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-default-patch-baseline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-default-patch-baseline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-default-patch-baseline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-default-patch-baseline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-default-patch-baseline-result common-lisp:nil
                       ((operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor
                         %get-default-patch-baseline-result-operating-system
                         :initform common-lisp:nil)
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor
                         %get-default-patch-baseline-result-baseline-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-default-patch-baseline-result
                    'make-get-default-patch-baseline-result))
 (common-lisp:defun make-get-default-patch-baseline-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operating-system baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-default-patch-baseline-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-default-patch-baseline-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-default-patch-baseline-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-default-patch-baseline-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployable-patch-snapshot-for-instance-request
                       common-lisp:nil
                       ((baseline-override :initarg :baseline-override :type
                         (common-lisp:or baseline-override common-lisp:null)
                         :accessor
                         %get-deployable-patch-snapshot-for-instance-request-baseline-override
                         :initform common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor
                         %get-deployable-patch-snapshot-for-instance-request-snapshot-id
                         :initform
                         (common-lisp:error ":snapshot-id is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         %get-deployable-patch-snapshot-for-instance-request-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-deployable-patch-snapshot-for-instance-request
                    'make-get-deployable-patch-snapshot-for-instance-request))
 (common-lisp:defun make-get-deployable-patch-snapshot-for-instance-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key baseline-override snapshot-id
                     instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-deployable-patch-snapshot-for-instance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployable-patch-snapshot-for-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployable-patch-snapshot-for-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-override))
      (common-lisp:list
       (common-lisp:cons "BaselineOverride"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployable-patch-snapshot-for-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-deployable-patch-snapshot-for-instance-result
                       common-lisp:nil
                       ((product :initarg :product :type
                         (common-lisp:or product common-lisp:null) :accessor
                         %get-deployable-patch-snapshot-for-instance-result-product
                         :initform common-lisp:nil)
                        (snapshot-download-url :initarg :snapshot-download-url
                         :type
                         (common-lisp:or snapshot-download-url
                                         common-lisp:null)
                         :accessor
                         %get-deployable-patch-snapshot-for-instance-result-snapshot-download-url
                         :initform common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor
                         %get-deployable-patch-snapshot-for-instance-result-snapshot-id
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         %get-deployable-patch-snapshot-for-instance-result-instance-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-deployable-patch-snapshot-for-instance-result
                    'make-get-deployable-patch-snapshot-for-instance-result))
 (common-lisp:defun make-get-deployable-patch-snapshot-for-instance-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key product snapshot-download-url snapshot-id
                     instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-deployable-patch-snapshot-for-instance-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-deployable-patch-snapshot-for-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-deployable-patch-snapshot-for-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-download-url))
      (common-lisp:list
       (common-lisp:cons "SnapshotDownloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-deployable-patch-snapshot-for-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-document-request common-lisp:nil
                       ((document-format :initarg :document-format :type
                         (common-lisp:or document-format common-lisp:null)
                         :accessor %get-document-request-document-format
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %get-document-request-document-version
                         :initform common-lisp:nil)
                        (version-name :initarg :version-name :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor %get-document-request-version-name :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %get-document-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-document-request 'make-get-document-request))
 (common-lisp:defun make-get-document-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key document-format document-version
                     version-name name)
   (common-lisp:apply #'common-lisp:make-instance 'get-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-format))
      (common-lisp:list
       (common-lisp:cons "DocumentFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-document-result common-lisp:nil
                       ((review-status :initarg :review-status :type
                         (common-lisp:or review-status common-lisp:null)
                         :accessor %get-document-result-review-status :initform
                         common-lisp:nil)
                        (attachments-content :initarg :attachments-content
                         :type
                         (common-lisp:or attachment-content-list
                                         common-lisp:null)
                         :accessor %get-document-result-attachments-content
                         :initform common-lisp:nil)
                        (requires :initarg :requires :type
                         (common-lisp:or document-requires-list
                                         common-lisp:null)
                         :accessor %get-document-result-requires :initform
                         common-lisp:nil)
                        (document-format :initarg :document-format :type
                         (common-lisp:or document-format common-lisp:null)
                         :accessor %get-document-result-document-format
                         :initform common-lisp:nil)
                        (document-type :initarg :document-type :type
                         (common-lisp:or document-type common-lisp:null)
                         :accessor %get-document-result-document-type :initform
                         common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or document-content common-lisp:null)
                         :accessor %get-document-result-content :initform
                         common-lisp:nil)
                        (status-information :initarg :status-information :type
                         (common-lisp:or document-status-information
                                         common-lisp:null)
                         :accessor %get-document-result-status-information
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or document-status common-lisp:null)
                         :accessor %get-document-result-status :initform
                         common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %get-document-result-document-version
                         :initform common-lisp:nil)
                        (version-name :initarg :version-name :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor %get-document-result-version-name :initform
                         common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or document-display-name
                                         common-lisp:null)
                         :accessor %get-document-result-display-name :initform
                         common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-document-result-created-date :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %get-document-result-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-document-result 'make-get-document-result))
 (common-lisp:defun make-get-document-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key review-status attachments-content
                     requires document-format document-type content
                     status-information status document-version version-name
                     display-name created-date name)
   (common-lisp:apply #'common-lisp:make-instance 'get-document-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-document-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-document-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-information))
      (common-lisp:list
       (common-lisp:cons "StatusInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-type))
      (common-lisp:list
       (common-lisp:cons "DocumentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-format))
      (common-lisp:list
       (common-lisp:cons "DocumentFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requires))
      (common-lisp:list
       (common-lisp:cons "Requires"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments-content))
      (common-lisp:list
       (common-lisp:cons "AttachmentsContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'review-status))
      (common-lisp:list
       (common-lisp:cons "ReviewStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-document-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-inventory-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-inventory-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-inventory-request-next-token :initform
                         common-lisp:nil)
                        (result-attributes :initarg :result-attributes :type
                         (common-lisp:or result-attribute-list
                                         common-lisp:null)
                         :accessor %get-inventory-request-result-attributes
                         :initform common-lisp:nil)
                        (aggregators :initarg :aggregators :type
                         (common-lisp:or inventory-aggregator-list
                                         common-lisp:null)
                         :accessor %get-inventory-request-aggregators :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or inventory-filter-list
                                         common-lisp:null)
                         :accessor %get-inventory-request-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-inventory-request 'make-get-inventory-request))
 (common-lisp:defun make-get-inventory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token result-attributes
                     aggregators filters)
   (common-lisp:apply #'common-lisp:make-instance 'get-inventory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-inventory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-inventory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregators))
      (common-lisp:list
       (common-lisp:cons "Aggregators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-attributes))
      (common-lisp:list
       (common-lisp:cons "ResultAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-inventory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-inventory-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-inventory-result-next-token :initform
                         common-lisp:nil)
                        (entities :initarg :entities :type
                         (common-lisp:or inventory-result-entity-list
                                         common-lisp:null)
                         :accessor %get-inventory-result-entities :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-inventory-result 'make-get-inventory-result))
 (common-lisp:defun make-get-inventory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entities)
   (common-lisp:apply #'common-lisp:make-instance 'get-inventory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-inventory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-inventory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-inventory-result))
   common-lisp:nil))
(common-lisp:deftype get-inventory-schema-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-inventory-schema-request common-lisp:nil
                       ((sub-type :initarg :sub-type :type
                         (common-lisp:or is-sub-type-schema common-lisp:null)
                         :accessor %get-inventory-schema-request-sub-type
                         :initform common-lisp:nil)
                        (aggregator :initarg :aggregator :type
                         (common-lisp:or aggregator-schema-only
                                         common-lisp:null)
                         :accessor %get-inventory-schema-request-aggregator
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or get-inventory-schema-max-results
                                         common-lisp:null)
                         :accessor %get-inventory-schema-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-inventory-schema-request-next-token :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or inventory-item-type-name-filter
                                         common-lisp:null)
                         :accessor %get-inventory-schema-request-type-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-inventory-schema-request
                    'make-get-inventory-schema-request))
 (common-lisp:defun make-get-inventory-schema-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sub-type aggregator max-results
                     next-token type-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-inventory-schema-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-inventory-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-inventory-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregator))
      (common-lisp:list
       (common-lisp:cons "Aggregator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-type))
      (common-lisp:list
       (common-lisp:cons "SubType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-inventory-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-inventory-schema-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-inventory-schema-result-next-token :initform
                         common-lisp:nil)
                        (schemas :initarg :schemas :type
                         (common-lisp:or inventory-item-schema-result-list
                                         common-lisp:null)
                         :accessor %get-inventory-schema-result-schemas
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-inventory-schema-result
                    'make-get-inventory-schema-result))
 (common-lisp:defun make-get-inventory-schema-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token schemas)
   (common-lisp:apply #'common-lisp:make-instance 'get-inventory-schema-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-inventory-schema-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-inventory-schema-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schemas))
      (common-lisp:list
       (common-lisp:cons "Schemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-inventory-schema-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-maintenance-window-execution-request common-lisp:nil
                       ((window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-request-window-execution-id
                         :initform
                         (common-lisp:error
                          ":window-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-maintenance-window-execution-request
                    'make-get-maintenance-window-execution-request))
 (common-lisp:defun make-get-maintenance-window-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-maintenance-window-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-maintenance-window-execution-result common-lisp:nil
                       ((end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-maintenance-window-execution-result-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-maintenance-window-execution-result-start-time
                         :initform common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or
                          maintenance-window-execution-status-details
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-result-status-details
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or maintenance-window-execution-status
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-result-status
                         :initform common-lisp:nil)
                        (task-ids :initarg :task-ids :type
                         (common-lisp:or
                          maintenance-window-execution-task-id-list
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-result-task-ids
                         :initform common-lisp:nil)
                        (window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-result-window-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-maintenance-window-execution-result
                    'make-get-maintenance-window-execution-result))
 (common-lisp:defun make-get-maintenance-window-execution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time status-details status
                     task-ids window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-maintenance-window-execution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-ids))
      (common-lisp:list
       (common-lisp:cons "TaskIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-maintenance-window-execution-task-invocation-request
                       common-lisp:nil
                       ((invocation-id :initarg :invocation-id :type
                         (common-lisp:or
                          maintenance-window-execution-task-invocation-id
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-request-invocation-id
                         :initform
                         (common-lisp:error ":invocation-id is required"))
                        (task-id :initarg :task-id :type
                         (common-lisp:or maintenance-window-execution-task-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-request-task-id
                         :initform (common-lisp:error ":task-id is required"))
                        (window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-request-window-execution-id
                         :initform
                         (common-lisp:error
                          ":window-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-maintenance-window-execution-task-invocation-request
                    'make-get-maintenance-window-execution-task-invocation-request))
 (common-lisp:defun make-get-maintenance-window-execution-task-invocation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invocation-id task-id
                     window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-maintenance-window-execution-task-invocation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-invocation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-invocation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-id))
      (common-lisp:list
       (common-lisp:cons "InvocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-invocation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-maintenance-window-execution-task-invocation-result
                       common-lisp:nil
                       ((window-target-id :initarg :window-target-id :type
                         (common-lisp:or maintenance-window-task-target-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-result-window-target-id
                         :initform common-lisp:nil)
                        (owner-information :initarg :owner-information :type
                         (common-lisp:or owner-information common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-result-owner-information
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-maintenance-window-execution-task-invocation-result-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-maintenance-window-execution-task-invocation-result-start-time
                         :initform common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or
                          maintenance-window-execution-status-details
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-result-status-details
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or maintenance-window-execution-status
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-result-status
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or
                          maintenance-window-execution-task-invocation-parameters
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-result-parameters
                         :initform common-lisp:nil)
                        (task-type :initarg :task-type :type
                         (common-lisp:or maintenance-window-task-type
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-result-task-type
                         :initform common-lisp:nil)
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or
                          maintenance-window-execution-task-execution-id
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-result-execution-id
                         :initform common-lisp:nil)
                        (invocation-id :initarg :invocation-id :type
                         (common-lisp:or
                          maintenance-window-execution-task-invocation-id
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-result-invocation-id
                         :initform common-lisp:nil)
                        (task-execution-id :initarg :task-execution-id :type
                         (common-lisp:or maintenance-window-execution-task-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-result-task-execution-id
                         :initform common-lisp:nil)
                        (window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-invocation-result-window-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-maintenance-window-execution-task-invocation-result
                    'make-get-maintenance-window-execution-task-invocation-result))
 (common-lisp:defun make-get-maintenance-window-execution-task-invocation-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-target-id owner-information
                     end-time start-time status-details status parameters
                     task-type execution-id invocation-id task-execution-id
                     window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-maintenance-window-execution-task-invocation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-invocation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-invocation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-execution-id))
      (common-lisp:list
       (common-lisp:cons "TaskExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-id))
      (common-lisp:list
       (common-lisp:cons "InvocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "TaskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-information))
      (common-lisp:list
       (common-lisp:cons "OwnerInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-target-id))
      (common-lisp:list
       (common-lisp:cons "WindowTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-invocation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-maintenance-window-execution-task-request
                       common-lisp:nil
                       ((task-id :initarg :task-id :type
                         (common-lisp:or maintenance-window-execution-task-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-request-task-id
                         :initform (common-lisp:error ":task-id is required"))
                        (window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-request-window-execution-id
                         :initform
                         (common-lisp:error
                          ":window-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-maintenance-window-execution-task-request
                    'make-get-maintenance-window-execution-task-request))
 (common-lisp:defun make-get-maintenance-window-execution-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-id window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-maintenance-window-execution-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-id))
      (common-lisp:list
       (common-lisp:cons "TaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-maintenance-window-execution-task-result
                       common-lisp:nil
                       ((triggered-alarms :initarg :triggered-alarms :type
                         (common-lisp:or alarm-state-information-list
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-triggered-alarms
                         :initform common-lisp:nil)
                        (alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-alarm-configuration
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-maintenance-window-execution-task-result-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-maintenance-window-execution-task-result-start-time
                         :initform common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or
                          maintenance-window-execution-status-details
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-status-details
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or maintenance-window-execution-status
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-status
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %get-maintenance-window-execution-task-result-max-errors
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-max-concurrency
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or maintenance-window-task-priority
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-priority
                         :initform common-lisp:nil)
                        (task-parameters :initarg :task-parameters :type
                         (common-lisp:or
                          maintenance-window-task-parameters-list
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-task-parameters
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or maintenance-window-task-type
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-type
                         :initform common-lisp:nil)
                        (service-role :initarg :service-role :type
                         (common-lisp:or service-role common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-service-role
                         :initform common-lisp:nil)
                        (task-arn :initarg :task-arn :type
                         (common-lisp:or maintenance-window-task-arn
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-task-arn
                         :initform common-lisp:nil)
                        (task-execution-id :initarg :task-execution-id :type
                         (common-lisp:or maintenance-window-execution-task-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-task-execution-id
                         :initform common-lisp:nil)
                        (window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-execution-task-result-window-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-maintenance-window-execution-task-result
                    'make-get-maintenance-window-execution-task-result))
 (common-lisp:defun make-get-maintenance-window-execution-task-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key triggered-alarms alarm-configuration
                     end-time start-time status-details status max-errors
                     max-concurrency priority task-parameters type service-role
                     task-arn task-execution-id window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-maintenance-window-execution-task-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-execution-id))
      (common-lisp:list
       (common-lisp:cons "TaskExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "TaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role))
      (common-lisp:list
       (common-lisp:cons "ServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-parameters))
      (common-lisp:list
       (common-lisp:cons "TaskParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggered-alarms))
      (common-lisp:list
       (common-lisp:cons "TriggeredAlarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-execution-task-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-maintenance-window-request common-lisp:nil
                       ((window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %get-maintenance-window-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-maintenance-window-request
                    'make-get-maintenance-window-request))
 (common-lisp:defun make-get-maintenance-window-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-maintenance-window-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-maintenance-window-result common-lisp:nil
                       ((modified-date :initarg :modified-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-maintenance-window-result-modified-date :initform
                         common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-maintenance-window-result-created-date :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or maintenance-window-enabled
                                         common-lisp:null)
                         :accessor %get-maintenance-window-result-enabled
                         :initform common-lisp:nil)
                        (allow-unassociated-targets :initarg
                         :allow-unassociated-targets :type
                         (common-lisp:or
                          maintenance-window-allow-unassociated-targets
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-result-allow-unassociated-targets
                         :initform common-lisp:nil)
                        (cutoff :initarg :cutoff :type
                         (common-lisp:or maintenance-window-cutoff
                                         common-lisp:null)
                         :accessor %get-maintenance-window-result-cutoff
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or maintenance-window-duration-hours
                                         common-lisp:null)
                         :accessor %get-maintenance-window-result-duration
                         :initform common-lisp:nil)
                        (next-execution-time :initarg :next-execution-time
                         :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-result-next-execution-time
                         :initform common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or maintenance-window-offset
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-result-schedule-offset
                         :initform common-lisp:nil)
                        (schedule-timezone :initarg :schedule-timezone :type
                         (common-lisp:or maintenance-window-timezone
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-result-schedule-timezone
                         :initform common-lisp:nil)
                        (schedule :initarg :schedule :type
                         (common-lisp:or maintenance-window-schedule
                                         common-lisp:null)
                         :accessor %get-maintenance-window-result-schedule
                         :initform common-lisp:nil)
                        (end-date :initarg :end-date :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor %get-maintenance-window-result-end-date
                         :initform common-lisp:nil)
                        (start-date :initarg :start-date :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor %get-maintenance-window-result-start-date
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor %get-maintenance-window-result-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %get-maintenance-window-result-name
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %get-maintenance-window-result-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-maintenance-window-result
                    'make-get-maintenance-window-result))
 (common-lisp:defun make-get-maintenance-window-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key modified-date created-date enabled
                     allow-unassociated-targets cutoff duration
                     next-execution-time schedule-offset schedule-timezone
                     schedule end-date start-date description name window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-maintenance-window-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-timezone))
      (common-lisp:list
       (common-lisp:cons "ScheduleTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-execution-time))
      (common-lisp:list
       (common-lisp:cons "NextExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cutoff))
      (common-lisp:list
       (common-lisp:cons "Cutoff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-unassociated-targets))
      (common-lisp:list
       (common-lisp:cons "AllowUnassociatedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-date))
      (common-lisp:list
       (common-lisp:cons "ModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-maintenance-window-task-request common-lisp:nil
                       ((window-task-id :initarg :window-task-id :type
                         (common-lisp:or maintenance-window-task-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-request-window-task-id
                         :initform
                         (common-lisp:error ":window-task-id is required"))
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-maintenance-window-task-request
                    'make-get-maintenance-window-task-request))
 (common-lisp:defun make-get-maintenance-window-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-task-id window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-maintenance-window-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-task-id))
      (common-lisp:list
       (common-lisp:cons "WindowTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-maintenance-window-task-result common-lisp:nil
                       ((alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-alarm-configuration
                         :initform common-lisp:nil)
                        (cutoff-behavior :initarg :cutoff-behavior :type
                         (common-lisp:or
                          maintenance-window-task-cutoff-behavior
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-cutoff-behavior
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %get-maintenance-window-task-result-name
                         :initform common-lisp:nil)
                        (logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-logging-info
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %get-maintenance-window-task-result-max-errors
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-max-concurrency
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or maintenance-window-task-priority
                                         common-lisp:null)
                         :accessor %get-maintenance-window-task-result-priority
                         :initform common-lisp:nil)
                        (task-invocation-parameters :initarg
                         :task-invocation-parameters :type
                         (common-lisp:or
                          maintenance-window-task-invocation-parameters
                          common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-task-invocation-parameters
                         :initform common-lisp:nil)
                        (task-parameters :initarg :task-parameters :type
                         (common-lisp:or maintenance-window-task-parameters
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-task-parameters
                         :initform common-lisp:nil)
                        (task-type :initarg :task-type :type
                         (common-lisp:or maintenance-window-task-type
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-task-type
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :type
                         (common-lisp:or service-role common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-service-role-arn
                         :initform common-lisp:nil)
                        (task-arn :initarg :task-arn :type
                         (common-lisp:or maintenance-window-task-arn
                                         common-lisp:null)
                         :accessor %get-maintenance-window-task-result-task-arn
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %get-maintenance-window-task-result-targets :initform
                         common-lisp:nil)
                        (window-task-id :initarg :window-task-id :type
                         (common-lisp:or maintenance-window-task-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-window-task-id
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %get-maintenance-window-task-result-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-maintenance-window-task-result
                    'make-get-maintenance-window-task-result))
 (common-lisp:defun make-get-maintenance-window-task-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-configuration cutoff-behavior
                     description name logging-info max-errors max-concurrency
                     priority task-invocation-parameters task-parameters
                     task-type service-role-arn task-arn targets window-task-id
                     window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-maintenance-window-task-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-task-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-task-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-task-id))
      (common-lisp:list
       (common-lisp:cons "WindowTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "TaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "TaskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-parameters))
      (common-lisp:list
       (common-lisp:cons "TaskParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-invocation-parameters))
      (common-lisp:list
       (common-lisp:cons "TaskInvocationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cutoff-behavior))
      (common-lisp:list
       (common-lisp:cons "CutoffBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-maintenance-window-task-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-ops-item-request common-lisp:nil
                       ((ops-item-arn :initarg :ops-item-arn :type
                         (common-lisp:or ops-item-arn common-lisp:null)
                         :accessor %get-ops-item-request-ops-item-arn :initform
                         common-lisp:nil)
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or ops-item-id common-lisp:null)
                         :accessor %get-ops-item-request-ops-item-id :initform
                         (common-lisp:error ":ops-item-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-ops-item-request 'make-get-ops-item-request))
 (common-lisp:defun make-get-ops-item-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ops-item-arn ops-item-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-ops-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-ops-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-ops-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-arn))
      (common-lisp:list
       (common-lisp:cons "OpsItemArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-ops-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-ops-item-response common-lisp:nil
                       ((ops-item :initarg :ops-item :type
                         (common-lisp:or ops-item common-lisp:null) :accessor
                         %get-ops-item-response-ops-item :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-ops-item-response 'make-get-ops-item-response))
 (common-lisp:defun make-get-ops-item-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ops-item)
   (common-lisp:apply #'common-lisp:make-instance 'get-ops-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-item-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item))
      (common-lisp:list
       (common-lisp:cons "OpsItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-item-response))
   common-lisp:nil))
(common-lisp:deftype get-ops-metadata-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-ops-metadata-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-ops-metadata-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or get-ops-metadata-max-results
                                         common-lisp:null)
                         :accessor %get-ops-metadata-request-max-results
                         :initform common-lisp:nil)
                        (ops-metadata-arn :initarg :ops-metadata-arn :type
                         (common-lisp:or ops-metadata-arn common-lisp:null)
                         :accessor %get-ops-metadata-request-ops-metadata-arn
                         :initform
                         (common-lisp:error ":ops-metadata-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-ops-metadata-request 'make-get-ops-metadata-request))
 (common-lisp:defun make-get-ops-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results ops-metadata-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-ops-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-metadata-arn))
      (common-lisp:list
       (common-lisp:cons "OpsMetadataArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-ops-metadata-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-ops-metadata-result-next-token :initform
                         common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata-map common-lisp:null)
                         :accessor %get-ops-metadata-result-metadata :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or ops-metadata-resource-id
                                         common-lisp:null)
                         :accessor %get-ops-metadata-result-resource-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-ops-metadata-result 'make-get-ops-metadata-result))
 (common-lisp:defun make-get-ops-metadata-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token metadata resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-ops-metadata-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-metadata-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-ops-summary-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-ops-summary-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-ops-summary-request-next-token :initform
                         common-lisp:nil)
                        (result-attributes :initarg :result-attributes :type
                         (common-lisp:or ops-result-attribute-list
                                         common-lisp:null)
                         :accessor %get-ops-summary-request-result-attributes
                         :initform common-lisp:nil)
                        (aggregators :initarg :aggregators :type
                         (common-lisp:or ops-aggregator-list common-lisp:null)
                         :accessor %get-ops-summary-request-aggregators
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or ops-filter-list common-lisp:null)
                         :accessor %get-ops-summary-request-filters :initform
                         common-lisp:nil)
                        (sync-name :initarg :sync-name :type
                         (common-lisp:or resource-data-sync-name
                                         common-lisp:null)
                         :accessor %get-ops-summary-request-sync-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-ops-summary-request 'make-get-ops-summary-request))
 (common-lisp:defun make-get-ops-summary-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token result-attributes
                     aggregators filters sync-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-ops-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-summary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-name))
      (common-lisp:list
       (common-lisp:cons "SyncName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregators))
      (common-lisp:list
       (common-lisp:cons "Aggregators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-attributes))
      (common-lisp:list
       (common-lisp:cons "ResultAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-ops-summary-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-ops-summary-result-next-token :initform
                         common-lisp:nil)
                        (entities :initarg :entities :type
                         (common-lisp:or ops-entity-list common-lisp:null)
                         :accessor %get-ops-summary-result-entities :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-ops-summary-result 'make-get-ops-summary-result))
 (common-lisp:defun make-get-ops-summary-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entities)
   (common-lisp:apply #'common-lisp:make-instance 'get-ops-summary-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-summary-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-summary-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-ops-summary-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-parameter-history-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-parameter-history-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-parameter-history-request-max-results
                         :initform common-lisp:nil)
                        (with-decryption :initarg :with-decryption :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-parameter-history-request-with-decryption
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or psparameter-name common-lisp:null)
                         :accessor %get-parameter-history-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-parameter-history-request
                    'make-get-parameter-history-request))
 (common-lisp:defun make-get-parameter-history-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results with-decryption
                     name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-parameter-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameter-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameter-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-decryption))
      (common-lisp:list
       (common-lisp:cons "WithDecryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameter-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-parameter-history-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-parameter-history-result-next-token :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameter-history-list
                                         common-lisp:null)
                         :accessor %get-parameter-history-result-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-parameter-history-result
                    'make-get-parameter-history-result))
 (common-lisp:defun make-get-parameter-history-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token parameters)
   (common-lisp:apply #'common-lisp:make-instance 'get-parameter-history-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameter-history-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameter-history-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameter-history-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-parameter-request common-lisp:nil
                       ((with-decryption :initarg :with-decryption :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-parameter-request-with-decryption :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or psparameter-name common-lisp:null)
                         :accessor %get-parameter-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-parameter-request 'make-get-parameter-request))
 (common-lisp:defun make-get-parameter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key with-decryption name)
   (common-lisp:apply #'common-lisp:make-instance 'get-parameter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-decryption))
      (common-lisp:list
       (common-lisp:cons "WithDecryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-parameter-result common-lisp:nil
                       ((parameter :initarg :parameter :type
                         (common-lisp:or parameter common-lisp:null) :accessor
                         %get-parameter-result-parameter :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-parameter-result 'make-get-parameter-result))
 (common-lisp:defun make-get-parameter-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter)
   (common-lisp:apply #'common-lisp:make-instance 'get-parameter-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-parameter-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-parameter-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter))
      (common-lisp:list
       (common-lisp:cons "Parameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-parameter-result))
   common-lisp:nil))
(common-lisp:deftype get-parameters-by-path-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-parameters-by-path-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-parameters-by-path-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or get-parameters-by-path-max-results
                                         common-lisp:null)
                         :accessor %get-parameters-by-path-request-max-results
                         :initform common-lisp:nil)
                        (with-decryption :initarg :with-decryption :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-parameters-by-path-request-with-decryption
                         :initform common-lisp:nil)
                        (parameter-filters :initarg :parameter-filters :type
                         (common-lisp:or parameter-string-filter-list
                                         common-lisp:null)
                         :accessor
                         %get-parameters-by-path-request-parameter-filters
                         :initform common-lisp:nil)
                        (recursive :initarg :recursive :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-parameters-by-path-request-recursive :initform
                         common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or psparameter-name common-lisp:null)
                         :accessor %get-parameters-by-path-request-path
                         :initform (common-lisp:error ":path is required"))))
 (common-lisp:export
  (common-lisp:list 'get-parameters-by-path-request
                    'make-get-parameters-by-path-request))
 (common-lisp:defun make-get-parameters-by-path-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results with-decryption
                     parameter-filters recursive path)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-parameters-by-path-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-by-path-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-by-path-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recursive))
      (common-lisp:list
       (common-lisp:cons "Recursive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-filters))
      (common-lisp:list
       (common-lisp:cons "ParameterFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-decryption))
      (common-lisp:list
       (common-lisp:cons "WithDecryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-by-path-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-parameters-by-path-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-parameters-by-path-result-next-token :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameter-list common-lisp:null)
                         :accessor %get-parameters-by-path-result-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-parameters-by-path-result
                    'make-get-parameters-by-path-result))
 (common-lisp:defun make-get-parameters-by-path-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token parameters)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-parameters-by-path-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-by-path-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-by-path-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-by-path-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-parameters-request common-lisp:nil
                       ((with-decryption :initarg :with-decryption :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-parameters-request-with-decryption :initform
                         common-lisp:nil)
                        (names :initarg :names :type
                         (common-lisp:or parameter-name-list common-lisp:null)
                         :accessor %get-parameters-request-names :initform
                         (common-lisp:error ":names is required"))))
 (common-lisp:export
  (common-lisp:list 'get-parameters-request 'make-get-parameters-request))
 (common-lisp:defun make-get-parameters-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key with-decryption names)
   (common-lisp:apply #'common-lisp:make-instance 'get-parameters-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-decryption))
      (common-lisp:list
       (common-lisp:cons "WithDecryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-parameters-result common-lisp:nil
                       ((invalid-parameters :initarg :invalid-parameters :type
                         (common-lisp:or parameter-name-list common-lisp:null)
                         :accessor %get-parameters-result-invalid-parameters
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameter-list common-lisp:null)
                         :accessor %get-parameters-result-parameters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-parameters-result 'make-get-parameters-result))
 (common-lisp:defun make-get-parameters-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invalid-parameters parameters)
   (common-lisp:apply #'common-lisp:make-instance 'get-parameters-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-parameters))
      (common-lisp:list
       (common-lisp:cons "InvalidParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-patch-baseline-for-patch-group-request
                       common-lisp:nil
                       ((operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor
                         %get-patch-baseline-for-patch-group-request-operating-system
                         :initform common-lisp:nil)
                        (patch-group :initarg :patch-group :type
                         (common-lisp:or patch-group common-lisp:null)
                         :accessor
                         %get-patch-baseline-for-patch-group-request-patch-group
                         :initform
                         (common-lisp:error ":patch-group is required"))))
 (common-lisp:export
  (common-lisp:list 'get-patch-baseline-for-patch-group-request
                    'make-get-patch-baseline-for-patch-group-request))
 (common-lisp:defun make-get-patch-baseline-for-patch-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operating-system patch-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-patch-baseline-for-patch-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-for-patch-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-for-patch-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-for-patch-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-patch-baseline-for-patch-group-result
                       common-lisp:nil
                       ((operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor
                         %get-patch-baseline-for-patch-group-result-operating-system
                         :initform common-lisp:nil)
                        (patch-group :initarg :patch-group :type
                         (common-lisp:or patch-group common-lisp:null)
                         :accessor
                         %get-patch-baseline-for-patch-group-result-patch-group
                         :initform common-lisp:nil)
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor
                         %get-patch-baseline-for-patch-group-result-baseline-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-patch-baseline-for-patch-group-result
                    'make-get-patch-baseline-for-patch-group-result))
 (common-lisp:defun make-get-patch-baseline-for-patch-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operating-system patch-group baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-patch-baseline-for-patch-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-for-patch-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-for-patch-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-for-patch-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-patch-baseline-request common-lisp:nil
                       ((baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor %get-patch-baseline-request-baseline-id
                         :initform
                         (common-lisp:error ":baseline-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-patch-baseline-request
                    'make-get-patch-baseline-request))
 (common-lisp:defun make-get-patch-baseline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key baseline-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-patch-baseline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-patch-baseline-result common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or patch-source-list common-lisp:null)
                         :accessor %get-patch-baseline-result-sources :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or baseline-description common-lisp:null)
                         :accessor %get-patch-baseline-result-description
                         :initform common-lisp:nil)
                        (modified-date :initarg :modified-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-patch-baseline-result-modified-date :initform
                         common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %get-patch-baseline-result-created-date :initform
                         common-lisp:nil)
                        (patch-groups :initarg :patch-groups :type
                         (common-lisp:or patch-group-list common-lisp:null)
                         :accessor %get-patch-baseline-result-patch-groups
                         :initform common-lisp:nil)
                        (rejected-patches-action :initarg
                         :rejected-patches-action :type
                         (common-lisp:or patch-action common-lisp:null)
                         :accessor
                         %get-patch-baseline-result-rejected-patches-action
                         :initform common-lisp:nil)
                        (rejected-patches :initarg :rejected-patches :type
                         (common-lisp:or patch-id-list common-lisp:null)
                         :accessor %get-patch-baseline-result-rejected-patches
                         :initform common-lisp:nil)
                        (approved-patches-enable-non-security :initarg
                         :approved-patches-enable-non-security :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-patch-baseline-result-approved-patches-enable-non-security
                         :initform common-lisp:nil)
                        (approved-patches-compliance-level :initarg
                         :approved-patches-compliance-level :type
                         (common-lisp:or patch-compliance-level
                                         common-lisp:null)
                         :accessor
                         %get-patch-baseline-result-approved-patches-compliance-level
                         :initform common-lisp:nil)
                        (approved-patches :initarg :approved-patches :type
                         (common-lisp:or patch-id-list common-lisp:null)
                         :accessor %get-patch-baseline-result-approved-patches
                         :initform common-lisp:nil)
                        (approval-rules :initarg :approval-rules :type
                         (common-lisp:or patch-rule-group common-lisp:null)
                         :accessor %get-patch-baseline-result-approval-rules
                         :initform common-lisp:nil)
                        (global-filters :initarg :global-filters :type
                         (common-lisp:or patch-filter-group common-lisp:null)
                         :accessor %get-patch-baseline-result-global-filters
                         :initform common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %get-patch-baseline-result-operating-system
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or baseline-name common-lisp:null)
                         :accessor %get-patch-baseline-result-name :initform
                         common-lisp:nil)
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor %get-patch-baseline-result-baseline-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-patch-baseline-result
                    'make-get-patch-baseline-result))
 (common-lisp:defun make-get-patch-baseline-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources description modified-date
                     created-date patch-groups rejected-patches-action
                     rejected-patches approved-patches-enable-non-security
                     approved-patches-compliance-level approved-patches
                     approval-rules global-filters operating-system name
                     baseline-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-patch-baseline-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-filters))
      (common-lisp:list
       (common-lisp:cons "GlobalFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approval-rules))
      (common-lisp:list
       (common-lisp:cons "ApprovalRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approved-patches))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-patches-compliance-level))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatchesComplianceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-patches-enable-non-security))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatchesEnableNonSecurity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejected-patches))
      (common-lisp:list
       (common-lisp:cons "RejectedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rejected-patches-action))
      (common-lisp:list
       (common-lisp:cons "RejectedPatchesAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-groups))
      (common-lisp:list
       (common-lisp:cons "PatchGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-date))
      (common-lisp:list
       (common-lisp:cons "ModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-patch-baseline-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policies-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or resource-policy-max-results
                                         common-lisp:null)
                         :accessor %get-resource-policies-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-resource-policies-request-next-token :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor %get-resource-policies-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-policies-request
                    'make-get-resource-policies-request))
 (common-lisp:defun make-get-resource-policies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policies-response common-lisp:nil
                       ((policies :initarg :policies :type
                         (common-lisp:or get-resource-policies-response-entries
                                         common-lisp:null)
                         :accessor %get-resource-policies-response-policies
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-resource-policies-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policies-response
                    'make-get-resource-policies-response))
 (common-lisp:defun make-get-resource-policies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policies next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-resource-policies-response-entries ()
   '(trivial-types:proper-list get-resource-policies-response-entry))
 (common-lisp:defun |make-get-resource-policies-response-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            get-resource-policies-response-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-resource-policies-response-entry common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %get-resource-policies-response-entry-policy :initform
                         common-lisp:nil)
                        (policy-hash :initarg :policy-hash :type
                         (common-lisp:or policy-hash common-lisp:null)
                         :accessor
                         %get-resource-policies-response-entry-policy-hash
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %get-resource-policies-response-entry-policy-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policies-response-entry
                    'make-get-resource-policies-response-entry))
 (common-lisp:defun make-get-resource-policies-response-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy policy-hash policy-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-policies-response-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-hash))
      (common-lisp:list
       (common-lisp:cons "PolicyHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-setting-request common-lisp:nil
                       ((setting-id :initarg :setting-id :type
                         (common-lisp:or service-setting-id common-lisp:null)
                         :accessor %get-service-setting-request-setting-id
                         :initform
                         (common-lisp:error ":setting-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-service-setting-request
                    'make-get-service-setting-request))
 (common-lisp:defun make-get-service-setting-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key setting-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-setting-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-setting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-setting-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-id))
      (common-lisp:list
       (common-lisp:cons "SettingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-setting-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-setting-result common-lisp:nil
                       ((service-setting :initarg :service-setting :type
                         (common-lisp:or service-setting common-lisp:null)
                         :accessor %get-service-setting-result-service-setting
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-service-setting-result
                    'make-get-service-setting-result))
 (common-lisp:defun make-get-service-setting-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-setting)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-setting-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-setting-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-setting-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-setting))
      (common-lisp:list
       (common-lisp:cons "ServiceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-setting-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition hierarchy-level-limit-exceeded-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       hierarchy-level-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'hierarchy-level-limit-exceeded-exception
                    'hierarchy-level-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition hierarchy-type-mismatch-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       hierarchy-type-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'hierarchy-type-mismatch-exception
                    'hierarchy-type-mismatch-exception-message)))
(common-lisp:deftype ipaddress () 'common-lisp:string)
(common-lisp:deftype iso8601string () 'common-lisp:string)
(common-lisp:deftype iam-role () 'common-lisp:string)
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-message)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch
                    'idempotent-parameter-mismatch-message)))
(common-lisp:progn
 (common-lisp:define-condition incompatible-policy-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       incompatible-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'incompatible-policy-exception
                    'incompatible-policy-exception-message)))
(common-lisp:deftype install-override-list () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass instance-aggregated-association-overview common-lisp:nil
                       ((instance-association-status-aggregated-count :initarg
                         :instance-association-status-aggregated-count :type
                         (common-lisp:or
                          instance-association-status-aggregated-count
                          common-lisp:null)
                         :accessor
                         %instance-aggregated-association-overview-instance-association-status-aggregated-count
                         :initform common-lisp:nil)
                        (detailed-status :initarg :detailed-status :type
                         (common-lisp:or status-name common-lisp:null)
                         :accessor
                         %instance-aggregated-association-overview-detailed-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-aggregated-association-overview
                    'make-instance-aggregated-association-overview))
 (common-lisp:defun make-instance-aggregated-association-overview
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     instance-association-status-aggregated-count
                     detailed-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-aggregated-association-overview
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-aggregated-association-overview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-aggregated-association-overview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detailed-status))
      (common-lisp:list
       (common-lisp:cons "DetailedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-association-status-aggregated-count))
      (common-lisp:list
       (common-lisp:cons "InstanceAssociationStatusAggregatedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-aggregated-association-overview))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-association common-lisp:nil
                       ((association-version :initarg :association-version
                         :type
                         (common-lisp:or association-version common-lisp:null)
                         :accessor %instance-association-association-version
                         :initform common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or document-content common-lisp:null)
                         :accessor %instance-association-content :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %instance-association-instance-id :initform
                         common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor %instance-association-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-association 'make-instance-association))
 (common-lisp:defun make-instance-association
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-version content instance-id
                     association-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance-association
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-version))
      (common-lisp:list
       (common-lisp:cons "AssociationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-association))
   common-lisp:nil))
(common-lisp:deftype instance-association-execution-summary ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-association-list ()
   '(trivial-types:proper-list instance-association))
 (common-lisp:defun |make-instance-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-association-output-location common-lisp:nil
                       ((s3location :initarg :s3location :type
                         (common-lisp:or s3output-location common-lisp:null)
                         :accessor
                         %instance-association-output-location-s3location
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-association-output-location
                    'make-instance-association-output-location))
 (common-lisp:defun make-instance-association-output-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3location)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-association-output-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-association-output-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-association-output-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "S3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-association-output-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-association-output-url common-lisp:nil
                       ((s3output-url :initarg :s3output-url :type
                         (common-lisp:or s3output-url common-lisp:null)
                         :accessor
                         %instance-association-output-url-s3output-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-association-output-url
                    'make-instance-association-output-url))
 (common-lisp:defun make-instance-association-output-url
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3output-url)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-association-output-url
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-association-output-url))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-association-output-url))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-url))
      (common-lisp:list
       (common-lisp:cons "S3OutputUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-association-output-url))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-association-status-aggregated-count ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-instance-association-status-aggregated-count|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass instance-association-status-info common-lisp:nil
                       ((association-name :initarg :association-name :type
                         (common-lisp:or association-name common-lisp:null)
                         :accessor
                         %instance-association-status-info-association-name
                         :initform common-lisp:nil)
                        (output-url :initarg :output-url :type
                         (common-lisp:or instance-association-output-url
                                         common-lisp:null)
                         :accessor %instance-association-status-info-output-url
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or agent-error-code common-lisp:null)
                         :accessor %instance-association-status-info-error-code
                         :initform common-lisp:nil)
                        (execution-summary :initarg :execution-summary :type
                         (common-lisp:or instance-association-execution-summary
                                         common-lisp:null)
                         :accessor
                         %instance-association-status-info-execution-summary
                         :initform common-lisp:nil)
                        (detailed-status :initarg :detailed-status :type
                         (common-lisp:or status-name common-lisp:null)
                         :accessor
                         %instance-association-status-info-detailed-status
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status-name common-lisp:null)
                         :accessor %instance-association-status-info-status
                         :initform common-lisp:nil)
                        (execution-date :initarg :execution-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %instance-association-status-info-execution-date
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         %instance-association-status-info-instance-id
                         :initform common-lisp:nil)
                        (association-version :initarg :association-version
                         :type
                         (common-lisp:or association-version common-lisp:null)
                         :accessor
                         %instance-association-status-info-association-version
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %instance-association-status-info-document-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %instance-association-status-info-name
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor
                         %instance-association-status-info-association-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-association-status-info
                    'make-instance-association-status-info))
 (common-lisp:defun make-instance-association-status-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-name output-url error-code
                     execution-summary detailed-status status execution-date
                     instance-id association-version document-version name
                     association-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-association-status-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-association-status-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-association-status-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-version))
      (common-lisp:list
       (common-lisp:cons "AssociationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-date))
      (common-lisp:list
       (common-lisp:cons "ExecutionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detailed-status))
      (common-lisp:list
       (common-lisp:cons "DetailedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-summary))
      (common-lisp:list
       (common-lisp:cons "ExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-url))
      (common-lisp:list
       (common-lisp:cons "OutputUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-name))
      (common-lisp:list
       (common-lisp:cons "AssociationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-association-status-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-association-status-infos ()
   '(trivial-types:proper-list instance-association-status-info))
 (common-lisp:defun |make-instance-association-status-infos|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-association-status-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-count () 'common-lisp:integer)
(common-lisp:deftype instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-id-list ()
   '(trivial-types:proper-list instance-id))
 (common-lisp:defun |make-instance-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-information common-lisp:nil
                       ((source-type :initarg :source-type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %instance-information-source-type :initform
                         common-lisp:nil)
                        (source-id :initarg :source-id :type
                         (common-lisp:or source-id common-lisp:null) :accessor
                         %instance-information-source-id :initform
                         common-lisp:nil)
                        (association-overview :initarg :association-overview
                         :type
                         (common-lisp:or
                          instance-aggregated-association-overview
                          common-lisp:null)
                         :accessor %instance-information-association-overview
                         :initform common-lisp:nil)
                        (last-successful-association-execution-date :initarg
                         :last-successful-association-execution-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %instance-information-last-successful-association-execution-date
                         :initform common-lisp:nil)
                        (last-association-execution-date :initarg
                         :last-association-execution-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %instance-information-last-association-execution-date
                         :initform common-lisp:nil)
                        (association-status :initarg :association-status :type
                         (common-lisp:or status-name common-lisp:null)
                         :accessor %instance-information-association-status
                         :initform common-lisp:nil)
                        (computer-name :initarg :computer-name :type
                         (common-lisp:or computer-name common-lisp:null)
                         :accessor %instance-information-computer-name
                         :initform common-lisp:nil)
                        (ipaddress :initarg :ipaddress :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         %instance-information-ipaddress :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %instance-information-name :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %instance-information-resource-type
                         :initform common-lisp:nil)
                        (registration-date :initarg :registration-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %instance-information-registration-date :initform
                         common-lisp:nil)
                        (iam-role :initarg :iam-role :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %instance-information-iam-role :initform
                         common-lisp:nil)
                        (activation-id :initarg :activation-id :type
                         (common-lisp:or activation-id common-lisp:null)
                         :accessor %instance-information-activation-id
                         :initform common-lisp:nil)
                        (platform-version :initarg :platform-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %instance-information-platform-version :initform
                         common-lisp:nil)
                        (platform-name :initarg :platform-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %instance-information-platform-name :initform
                         common-lisp:nil)
                        (platform-type :initarg :platform-type :type
                         (common-lisp:or platform-type common-lisp:null)
                         :accessor %instance-information-platform-type
                         :initform common-lisp:nil)
                        (is-latest-version :initarg :is-latest-version :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %instance-information-is-latest-version :initform
                         common-lisp:nil)
                        (agent-version :initarg :agent-version :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %instance-information-agent-version :initform
                         common-lisp:nil)
                        (last-ping-date-time :initarg :last-ping-date-time
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor %instance-information-last-ping-date-time
                         :initform common-lisp:nil)
                        (ping-status :initarg :ping-status :type
                         (common-lisp:or ping-status common-lisp:null)
                         :accessor %instance-information-ping-status :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %instance-information-instance-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-information 'make-instance-information))
 (common-lisp:defun make-instance-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-type source-id
                     association-overview
                     last-successful-association-execution-date
                     last-association-execution-date association-status
                     computer-name ipaddress name resource-type
                     registration-date iam-role activation-id platform-version
                     platform-name platform-type is-latest-version
                     agent-version last-ping-date-time ping-status instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ping-status))
      (common-lisp:list
       (common-lisp:cons "PingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-ping-date-time))
      (common-lisp:list
       (common-lisp:cons "LastPingDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "AgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-latest-version))
      (common-lisp:list
       (common-lisp:cons "IsLatestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-type))
      (common-lisp:list
       (common-lisp:cons "PlatformType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-name))
      (common-lisp:list
       (common-lisp:cons "PlatformName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-version))
      (common-lisp:list
       (common-lisp:cons "PlatformVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activation-id))
      (common-lisp:list
       (common-lisp:cons "ActivationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "IamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-date))
      (common-lisp:list
       (common-lisp:cons "RegistrationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipaddress))
      (common-lisp:list
       (common-lisp:cons "IPAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'computer-name))
      (common-lisp:list
       (common-lisp:cons "ComputerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "AssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-association-execution-date))
      (common-lisp:list
       (common-lisp:cons "LastAssociationExecutionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-association-execution-date))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulAssociationExecutionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-overview))
      (common-lisp:list
       (common-lisp:cons "AssociationOverview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-information-filter common-lisp:nil
                       ((value-set :initarg :|valueSet| :type
                         (common-lisp:or instance-information-filter-value-set
                                         common-lisp:null)
                         :accessor %instance-information-filter-value-set
                         :initform (common-lisp:error ":valueset is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or instance-information-filter-key
                                         common-lisp:null)
                         :accessor %instance-information-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'instance-information-filter
                    'make-instance-information-filter))
 (common-lisp:defun make-instance-information-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-set key)
   (common-lisp:apply #'common-lisp:make-instance 'instance-information-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-information-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-information-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-set))
      (common-lisp:list
       (common-lisp:cons "valueSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-information-filter))
   common-lisp:nil))
(common-lisp:deftype instance-information-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-information-filter-list ()
   '(trivial-types:proper-list instance-information-filter))
 (common-lisp:defun |make-instance-information-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-information-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-information-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-information-filter-value-set ()
   '(trivial-types:proper-list instance-information-filter-value))
 (common-lisp:defun |make-instance-information-filter-value-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-information-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-information-list ()
   '(trivial-types:proper-list instance-information))
 (common-lisp:defun |make-instance-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-information))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-information-string-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or instance-information-filter-value-set
                                         common-lisp:null)
                         :accessor %instance-information-string-filter-values
                         :initform (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or instance-information-string-filter-key
                                         common-lisp:null)
                         :accessor %instance-information-string-filter-key
                         :initform (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'instance-information-string-filter
                    'make-instance-information-string-filter))
 (common-lisp:defun make-instance-information-string-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance
                      'instance-information-string-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-information-string-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-information-string-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-information-string-filter))
   common-lisp:nil))
(common-lisp:deftype instance-information-string-filter-key ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-information-string-filter-list ()
   '(trivial-types:proper-list instance-information-string-filter))
 (common-lisp:defun |make-instance-information-string-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-information-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-patch-state common-lisp:nil
                       ((other-non-compliant-count :initarg
                         :other-non-compliant-count :type
                         (common-lisp:or patch-other-non-compliant-count
                                         common-lisp:null)
                         :accessor
                         %instance-patch-state-other-non-compliant-count
                         :initform common-lisp:nil)
                        (security-non-compliant-count :initarg
                         :security-non-compliant-count :type
                         (common-lisp:or patch-security-non-compliant-count
                                         common-lisp:null)
                         :accessor
                         %instance-patch-state-security-non-compliant-count
                         :initform common-lisp:nil)
                        (critical-non-compliant-count :initarg
                         :critical-non-compliant-count :type
                         (common-lisp:or patch-critical-non-compliant-count
                                         common-lisp:null)
                         :accessor
                         %instance-patch-state-critical-non-compliant-count
                         :initform common-lisp:nil)
                        (reboot-option :initarg :reboot-option :type
                         (common-lisp:or reboot-option common-lisp:null)
                         :accessor %instance-patch-state-reboot-option
                         :initform common-lisp:nil)
                        (last-no-reboot-install-operation-time :initarg
                         :last-no-reboot-install-operation-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %instance-patch-state-last-no-reboot-install-operation-time
                         :initform common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or patch-operation-type common-lisp:null)
                         :accessor %instance-patch-state-operation :initform
                         (common-lisp:error ":operation is required"))
                        (operation-end-time :initarg :operation-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %instance-patch-state-operation-end-time :initform
                         (common-lisp:error ":operation-end-time is required"))
                        (operation-start-time :initarg :operation-start-time
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor %instance-patch-state-operation-start-time
                         :initform
                         (common-lisp:error
                          ":operation-start-time is required"))
                        (not-applicable-count :initarg :not-applicable-count
                         :type
                         (common-lisp:or patch-not-applicable-count
                                         common-lisp:null)
                         :accessor %instance-patch-state-not-applicable-count
                         :initform common-lisp:nil)
                        (unreported-not-applicable-count :initarg
                         :unreported-not-applicable-count :type
                         (common-lisp:or patch-unreported-not-applicable-count
                                         common-lisp:null)
                         :accessor
                         %instance-patch-state-unreported-not-applicable-count
                         :initform common-lisp:nil)
                        (failed-count :initarg :failed-count :type
                         (common-lisp:or patch-failed-count common-lisp:null)
                         :accessor %instance-patch-state-failed-count :initform
                         common-lisp:nil)
                        (missing-count :initarg :missing-count :type
                         (common-lisp:or patch-missing-count common-lisp:null)
                         :accessor %instance-patch-state-missing-count
                         :initform common-lisp:nil)
                        (installed-rejected-count :initarg
                         :installed-rejected-count :type
                         (common-lisp:or patch-installed-rejected-count
                                         common-lisp:null)
                         :accessor
                         %instance-patch-state-installed-rejected-count
                         :initform common-lisp:nil)
                        (installed-pending-reboot-count :initarg
                         :installed-pending-reboot-count :type
                         (common-lisp:or patch-installed-pending-reboot-count
                                         common-lisp:null)
                         :accessor
                         %instance-patch-state-installed-pending-reboot-count
                         :initform common-lisp:nil)
                        (installed-other-count :initarg :installed-other-count
                         :type
                         (common-lisp:or patch-installed-other-count
                                         common-lisp:null)
                         :accessor %instance-patch-state-installed-other-count
                         :initform common-lisp:nil)
                        (installed-count :initarg :installed-count :type
                         (common-lisp:or patch-installed-count
                                         common-lisp:null)
                         :accessor %instance-patch-state-installed-count
                         :initform common-lisp:nil)
                        (owner-information :initarg :owner-information :type
                         (common-lisp:or owner-information common-lisp:null)
                         :accessor %instance-patch-state-owner-information
                         :initform common-lisp:nil)
                        (install-override-list :initarg :install-override-list
                         :type
                         (common-lisp:or install-override-list
                                         common-lisp:null)
                         :accessor %instance-patch-state-install-override-list
                         :initform common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %instance-patch-state-snapshot-id :initform
                         common-lisp:nil)
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor %instance-patch-state-baseline-id :initform
                         (common-lisp:error ":baseline-id is required"))
                        (patch-group :initarg :patch-group :type
                         (common-lisp:or patch-group common-lisp:null)
                         :accessor %instance-patch-state-patch-group :initform
                         (common-lisp:error ":patch-group is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %instance-patch-state-instance-id :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'instance-patch-state 'make-instance-patch-state))
 (common-lisp:defun make-instance-patch-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key other-non-compliant-count
                     security-non-compliant-count critical-non-compliant-count
                     reboot-option last-no-reboot-install-operation-time
                     operation operation-end-time operation-start-time
                     not-applicable-count unreported-not-applicable-count
                     failed-count missing-count installed-rejected-count
                     installed-pending-reboot-count installed-other-count
                     installed-count owner-information install-override-list
                     snapshot-id baseline-id patch-group instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'instance-patch-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-patch-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-patch-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'install-override-list))
      (common-lisp:list
       (common-lisp:cons "InstallOverrideList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-information))
      (common-lisp:list
       (common-lisp:cons "OwnerInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'installed-count))
      (common-lisp:list
       (common-lisp:cons "InstalledCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'installed-other-count))
      (common-lisp:list
       (common-lisp:cons "InstalledOtherCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'installed-pending-reboot-count))
      (common-lisp:list
       (common-lisp:cons "InstalledPendingRebootCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'installed-rejected-count))
      (common-lisp:list
       (common-lisp:cons "InstalledRejectedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-count))
      (common-lisp:list
       (common-lisp:cons "MissingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-count))
      (common-lisp:list
       (common-lisp:cons "FailedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unreported-not-applicable-count))
      (common-lisp:list
       (common-lisp:cons "UnreportedNotApplicableCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'not-applicable-count))
      (common-lisp:list
       (common-lisp:cons "NotApplicableCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-start-time))
      (common-lisp:list
       (common-lisp:cons "OperationStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-end-time))
      (common-lisp:list
       (common-lisp:cons "OperationEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-no-reboot-install-operation-time))
      (common-lisp:list
       (common-lisp:cons "LastNoRebootInstallOperationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reboot-option))
      (common-lisp:list
       (common-lisp:cons "RebootOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'critical-non-compliant-count))
      (common-lisp:list
       (common-lisp:cons "CriticalNonCompliantCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-non-compliant-count))
      (common-lisp:list
       (common-lisp:cons "SecurityNonCompliantCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'other-non-compliant-count))
      (common-lisp:list
       (common-lisp:cons "OtherNonCompliantCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-patch-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-patch-state-filter common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or instance-patch-state-operator-type
                                         common-lisp:null)
                         :accessor %instance-patch-state-filter-type :initform
                         (common-lisp:error ":type is required"))
                        (values :initarg :values :type
                         (common-lisp:or instance-patch-state-filter-values
                                         common-lisp:null)
                         :accessor %instance-patch-state-filter-values
                         :initform (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or instance-patch-state-filter-key
                                         common-lisp:null)
                         :accessor %instance-patch-state-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'instance-patch-state-filter
                    'make-instance-patch-state-filter))
 (common-lisp:defun make-instance-patch-state-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type values key)
   (common-lisp:apply #'common-lisp:make-instance 'instance-patch-state-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-patch-state-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-patch-state-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-patch-state-filter))
   common-lisp:nil))
(common-lisp:deftype instance-patch-state-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-patch-state-filter-list ()
   '(trivial-types:proper-list instance-patch-state-filter))
 (common-lisp:defun |make-instance-patch-state-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-patch-state-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-patch-state-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-patch-state-filter-values ()
   '(trivial-types:proper-list instance-patch-state-filter-value))
 (common-lisp:defun |make-instance-patch-state-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            instance-patch-state-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-patch-state-list ()
   '(trivial-types:proper-list instance-patch-state))
 (common-lisp:defun |make-instance-patch-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-patch-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-patch-state-operator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-patch-states-list ()
   '(trivial-types:proper-list instance-patch-state))
 (common-lisp:defun |make-instance-patch-states-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-patch-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-tag-name () 'common-lisp:string)
(common-lisp:deftype instances-count () 'common-lisp:integer)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-error
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error 'internal-server-error-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-activation
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-activation-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-activation 'invalid-activation-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-activation-id
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-activation-id-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-activation-id 'invalid-activation-id-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-aggregator-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-aggregator-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-aggregator-exception
                    'invalid-aggregator-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-allowed-pattern-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-allowed-pattern-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-allowed-pattern-exception
                    'invalid-allowed-pattern-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-association
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-association-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-association 'invalid-association-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-association-version
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-association-version-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-association-version
                    'invalid-association-version-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-automation-execution-parameters-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-automation-execution-parameters-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-automation-execution-parameters-exception
                    'invalid-automation-execution-parameters-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-automation-signal-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-automation-signal-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-automation-signal-exception
                    'invalid-automation-signal-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-automation-status-update-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-automation-status-update-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-automation-status-update-exception
                    'invalid-automation-status-update-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-command-id
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-command-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-delete-inventory-parameters-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-delete-inventory-parameters-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-delete-inventory-parameters-exception
                    'invalid-delete-inventory-parameters-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-deletion-id-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-deletion-id-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-deletion-id-exception
                    'invalid-deletion-id-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-document
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-document-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-document 'invalid-document-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-document-content
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-document-content-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-document-content
                    'invalid-document-content-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-document-operation
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-document-operation-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-document-operation
                    'invalid-document-operation-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-document-schema-version
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-document-schema-version-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-document-schema-version
                    'invalid-document-schema-version-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-document-type
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-document-type-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-document-type 'invalid-document-type-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-document-version
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-document-version-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-document-version
                    'invalid-document-version-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-filter
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-filter-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-filter 'invalid-filter-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-filter-key
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-filter-key)))
(common-lisp:progn
 (common-lisp:define-condition invalid-filter-option
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-filter-option-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-filter-option 'invalid-filter-option-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-filter-value
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-filter-value-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-filter-value 'invalid-filter-value-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-instance-id
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-instance-id-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-instance-id 'invalid-instance-id-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-instance-information-filter-value
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-instance-information-filter-value-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-instance-information-filter-value
                    'invalid-instance-information-filter-value-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-inventory-group-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-inventory-group-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-inventory-group-exception
                    'invalid-inventory-group-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-inventory-item-context-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-inventory-item-context-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-inventory-item-context-exception
                    'invalid-inventory-item-context-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-inventory-request-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-inventory-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-inventory-request-exception
                    'invalid-inventory-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-item-content-exception
     (ssm-error)
     ((type-name :initarg :type-name :initform common-lisp:nil :reader
       invalid-item-content-exception-type-name)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-item-content-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-item-content-exception
                    'invalid-item-content-exception-type-name
                    'invalid-item-content-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-key-id
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-key-id-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-key-id 'invalid-key-id-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token 'invalid-next-token-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-notification-config
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-notification-config-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-notification-config
                    'invalid-notification-config-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-option-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-option-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-option-exception
                    'invalid-option-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-output-folder
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-output-folder)))
(common-lisp:progn
 (common-lisp:define-condition invalid-output-location
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-output-location)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameters
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameters-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameters 'invalid-parameters-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-permission-type
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-permission-type-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-permission-type 'invalid-permission-type-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-plugin-name
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-plugin-name)))
(common-lisp:progn
 (common-lisp:define-condition invalid-policy-attribute-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-policy-attribute-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-policy-attribute-exception
                    'invalid-policy-attribute-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-policy-type-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-policy-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-policy-type-exception
                    'invalid-policy-type-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-id
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-resource-id)))
(common-lisp:progn
 (common-lisp:define-condition invalid-resource-type
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-resource-type)))
(common-lisp:progn
 (common-lisp:define-condition invalid-result-attribute-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-result-attribute-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-result-attribute-exception
                    'invalid-result-attribute-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-role
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-role-message)))
 (common-lisp:export (common-lisp:list 'invalid-role 'invalid-role-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-schedule
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-schedule-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-schedule 'invalid-schedule-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tag-message)))
 (common-lisp:export (common-lisp:list 'invalid-tag 'invalid-tag-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-target-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-target 'invalid-target-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-target-maps
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-target-maps-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-target-maps 'invalid-target-maps-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-type-name-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-type-name-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-type-name-exception
                    'invalid-type-name-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-update
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-update-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-update 'invalid-update-message)))
(common-lisp:progn
 (common-lisp:defclass inventory-aggregator common-lisp:nil
                       ((groups :initarg :groups :type
                         (common-lisp:or inventory-group-list common-lisp:null)
                         :accessor %inventory-aggregator-groups :initform
                         common-lisp:nil)
                        (aggregators :initarg :aggregators :type
                         (common-lisp:or inventory-aggregator-list
                                         common-lisp:null)
                         :accessor %inventory-aggregator-aggregators :initform
                         common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or inventory-aggregator-expression
                                         common-lisp:null)
                         :accessor %inventory-aggregator-expression :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inventory-aggregator 'make-inventory-aggregator))
 (common-lisp:defun make-inventory-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key groups aggregators expression)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-aggregator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-aggregator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-aggregator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregators))
      (common-lisp:list
       (common-lisp:cons "Aggregators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-aggregator))
   common-lisp:nil))
(common-lisp:deftype inventory-aggregator-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-aggregator-list ()
   '(trivial-types:proper-list inventory-aggregator))
 (common-lisp:defun |make-inventory-aggregator-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-aggregator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inventory-attribute-data-type () 'common-lisp:string)
(common-lisp:deftype inventory-deletion-last-status-message ()
  'common-lisp:string)
(common-lisp:deftype inventory-deletion-last-status-update-time ()
  'common-lisp:string)
(common-lisp:deftype inventory-deletion-start-time () 'common-lisp:string)
(common-lisp:deftype inventory-deletion-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass inventory-deletion-status-item common-lisp:nil
                       ((last-status-update-time :initarg
                         :last-status-update-time :type
                         (common-lisp:or
                          inventory-deletion-last-status-update-time
                          common-lisp:null)
                         :accessor
                         %inventory-deletion-status-item-last-status-update-time
                         :initform common-lisp:nil)
                        (deletion-summary :initarg :deletion-summary :type
                         (common-lisp:or inventory-deletion-summary
                                         common-lisp:null)
                         :accessor
                         %inventory-deletion-status-item-deletion-summary
                         :initform common-lisp:nil)
                        (last-status-message :initarg :last-status-message
                         :type
                         (common-lisp:or inventory-deletion-last-status-message
                                         common-lisp:null)
                         :accessor
                         %inventory-deletion-status-item-last-status-message
                         :initform common-lisp:nil)
                        (last-status :initarg :last-status :type
                         (common-lisp:or inventory-deletion-status
                                         common-lisp:null)
                         :accessor %inventory-deletion-status-item-last-status
                         :initform common-lisp:nil)
                        (deletion-start-time :initarg :deletion-start-time
                         :type
                         (common-lisp:or inventory-deletion-start-time
                                         common-lisp:null)
                         :accessor
                         %inventory-deletion-status-item-deletion-start-time
                         :initform common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or inventory-item-type-name
                                         common-lisp:null)
                         :accessor %inventory-deletion-status-item-type-name
                         :initform common-lisp:nil)
                        (deletion-id :initarg :deletion-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %inventory-deletion-status-item-deletion-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inventory-deletion-status-item
                    'make-inventory-deletion-status-item))
 (common-lisp:defun make-inventory-deletion-status-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-status-update-time deletion-summary
                     last-status-message last-status deletion-start-time
                     type-name deletion-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'inventory-deletion-status-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-deletion-status-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-deletion-status-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-id))
      (common-lisp:list
       (common-lisp:cons "DeletionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-start-time))
      (common-lisp:list
       (common-lisp:cons "DeletionStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "LastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status-message))
      (common-lisp:list
       (common-lisp:cons "LastStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-summary))
      (common-lisp:list
       (common-lisp:cons "DeletionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-status-update-time))
      (common-lisp:list
       (common-lisp:cons "LastStatusUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-deletion-status-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inventory-deletion-summary common-lisp:nil
                       ((summary-items :initarg :summary-items :type
                         (common-lisp:or inventory-deletion-summary-items
                                         common-lisp:null)
                         :accessor %inventory-deletion-summary-summary-items
                         :initform common-lisp:nil)
                        (remaining-count :initarg :remaining-count :type
                         (common-lisp:or remaining-count common-lisp:null)
                         :accessor %inventory-deletion-summary-remaining-count
                         :initform common-lisp:nil)
                        (total-count :initarg :total-count :type
                         (common-lisp:or total-count common-lisp:null)
                         :accessor %inventory-deletion-summary-total-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inventory-deletion-summary
                    'make-inventory-deletion-summary))
 (common-lisp:defun make-inventory-deletion-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key summary-items remaining-count
                     total-count)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-deletion-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-deletion-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-deletion-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remaining-count))
      (common-lisp:list
       (common-lisp:cons "RemainingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-items))
      (common-lisp:list
       (common-lisp:cons "SummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-deletion-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inventory-deletion-summary-item common-lisp:nil
                       ((remaining-count :initarg :remaining-count :type
                         (common-lisp:or remaining-count common-lisp:null)
                         :accessor
                         %inventory-deletion-summary-item-remaining-count
                         :initform common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or resource-count common-lisp:null)
                         :accessor %inventory-deletion-summary-item-count
                         :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or inventory-item-schema-version
                                         common-lisp:null)
                         :accessor %inventory-deletion-summary-item-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inventory-deletion-summary-item
                    'make-inventory-deletion-summary-item))
 (common-lisp:defun make-inventory-deletion-summary-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key remaining-count count version)
   (common-lisp:apply #'common-lisp:make-instance
                      'inventory-deletion-summary-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-deletion-summary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-deletion-summary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remaining-count))
      (common-lisp:list
       (common-lisp:cons "RemainingCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-deletion-summary-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inventory-deletion-summary-items ()
   '(trivial-types:proper-list inventory-deletion-summary-item))
 (common-lisp:defun |make-inventory-deletion-summary-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inventory-deletion-summary-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype inventory-deletions-list ()
   '(trivial-types:proper-list inventory-deletion-status-item))
 (common-lisp:defun |make-inventory-deletions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inventory-deletion-status-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass inventory-filter common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or inventory-query-operator-type
                                         common-lisp:null)
                         :accessor %inventory-filter-type :initform
                         common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or inventory-filter-value-list
                                         common-lisp:null)
                         :accessor %inventory-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or inventory-filter-key common-lisp:null)
                         :accessor %inventory-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'inventory-filter 'make-inventory-filter))
 (common-lisp:defun make-inventory-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type values key)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-filter))
   common-lisp:nil))
(common-lisp:deftype inventory-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-filter-list ()
   '(trivial-types:proper-list inventory-filter))
 (common-lisp:defun |make-inventory-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inventory-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-filter-value-list ()
   '(trivial-types:proper-list inventory-filter-value))
 (common-lisp:defun |make-inventory-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass inventory-group common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or inventory-filter-list
                                         common-lisp:null)
                         :accessor %inventory-group-filters :initform
                         (common-lisp:error ":filters is required"))
                        (name :initarg :name :type
                         (common-lisp:or inventory-group-name common-lisp:null)
                         :accessor %inventory-group-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'inventory-group 'make-inventory-group))
 (common-lisp:defun make-inventory-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters name)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inventory-group-list ()
   '(trivial-types:proper-list inventory-group))
 (common-lisp:defun |make-inventory-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inventory-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass inventory-item common-lisp:nil
                       ((context :initarg :context :type
                         (common-lisp:or inventory-item-content-context
                                         common-lisp:null)
                         :accessor %inventory-item-context :initform
                         common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or inventory-item-entry-list
                                         common-lisp:null)
                         :accessor %inventory-item-content :initform
                         common-lisp:nil)
                        (content-hash :initarg :content-hash :type
                         (common-lisp:or inventory-item-content-hash
                                         common-lisp:null)
                         :accessor %inventory-item-content-hash :initform
                         common-lisp:nil)
                        (capture-time :initarg :capture-time :type
                         (common-lisp:or inventory-item-capture-time
                                         common-lisp:null)
                         :accessor %inventory-item-capture-time :initform
                         (common-lisp:error ":capture-time is required"))
                        (schema-version :initarg :schema-version :type
                         (common-lisp:or inventory-item-schema-version
                                         common-lisp:null)
                         :accessor %inventory-item-schema-version :initform
                         (common-lisp:error ":schema-version is required"))
                        (type-name :initarg :type-name :type
                         (common-lisp:or inventory-item-type-name
                                         common-lisp:null)
                         :accessor %inventory-item-type-name :initform
                         (common-lisp:error ":type-name is required"))))
 (common-lisp:export (common-lisp:list 'inventory-item 'make-inventory-item))
 (common-lisp:defun make-inventory-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key context content content-hash capture-time
                     schema-version type-name)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inventory-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inventory-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "SchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-time))
      (common-lisp:list
       (common-lisp:cons "CaptureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-hash))
      (common-lisp:list
       (common-lisp:cons "ContentHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context))
      (common-lisp:list
       (common-lisp:cons "Context"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inventory-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inventory-item-attribute common-lisp:nil
                       ((data-type :initarg :data-type :type
                         (common-lisp:or inventory-attribute-data-type
                                         common-lisp:null)
                         :accessor %inventory-item-attribute-data-type
                         :initform
                         (common-lisp:error ":data-type is required"))
                        (name :initarg :name :type
                         (common-lisp:or inventory-item-attribute-name
                                         common-lisp:null)
                         :accessor %inventory-item-attribute-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'inventory-item-attribute 'make-inventory-item-attribute))
 (common-lisp:defun make-inventory-item-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-type name)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-item-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-item-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-item-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-item-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inventory-item-attribute-list ()
   '(trivial-types:proper-list inventory-item-attribute))
 (common-lisp:defun |make-inventory-item-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inventory-item-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inventory-item-attribute-name () 'common-lisp:string)
(common-lisp:deftype inventory-item-capture-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-item-content-context ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-inventory-item-content-context|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype inventory-item-content-hash () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-item-entry () 'common-lisp:hash-table)
 (common-lisp:defun |make-inventory-item-entry|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype inventory-item-entry-list ()
   '(trivial-types:proper-list inventory-item-entry))
 (common-lisp:defun |make-inventory-item-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-item-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype inventory-item-list ()
   '(trivial-types:proper-list inventory-item))
 (common-lisp:defun |make-inventory-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass inventory-item-schema common-lisp:nil
                       ((display-name :initarg :display-name :type
                         (common-lisp:or inventory-type-display-name
                                         common-lisp:null)
                         :accessor %inventory-item-schema-display-name
                         :initform common-lisp:nil)
                        (attributes :initarg :attributes :type
                         (common-lisp:or inventory-item-attribute-list
                                         common-lisp:null)
                         :accessor %inventory-item-schema-attributes :initform
                         (common-lisp:error ":attributes is required"))
                        (version :initarg :version :type
                         (common-lisp:or inventory-item-schema-version
                                         common-lisp:null)
                         :accessor %inventory-item-schema-version :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or inventory-item-type-name
                                         common-lisp:null)
                         :accessor %inventory-item-schema-type-name :initform
                         (common-lisp:error ":type-name is required"))))
 (common-lisp:export
  (common-lisp:list 'inventory-item-schema 'make-inventory-item-schema))
 (common-lisp:defun make-inventory-item-schema
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key display-name attributes version
                     type-name)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-item-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-item-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-item-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-item-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inventory-item-schema-result-list ()
   '(trivial-types:proper-list inventory-item-schema))
 (common-lisp:defun |make-inventory-item-schema-result-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-item-schema))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inventory-item-schema-version () 'common-lisp:string)
(common-lisp:deftype inventory-item-type-name () 'common-lisp:string)
(common-lisp:deftype inventory-item-type-name-filter () 'common-lisp:string)
(common-lisp:deftype inventory-query-operator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass inventory-result-entity common-lisp:nil
                       ((data :initarg :data :type
                         (common-lisp:or inventory-result-item-map
                                         common-lisp:null)
                         :accessor %inventory-result-entity-data :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or inventory-result-entity-id
                                         common-lisp:null)
                         :accessor %inventory-result-entity-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inventory-result-entity 'make-inventory-result-entity))
 (common-lisp:defun make-inventory-result-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data id)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-result-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-result-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-result-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-result-entity))
   common-lisp:nil))
(common-lisp:deftype inventory-result-entity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-result-entity-list ()
   '(trivial-types:proper-list inventory-result-entity))
 (common-lisp:defun |make-inventory-result-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inventory-result-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass inventory-result-item common-lisp:nil
                       ((content :initarg :content :type
                         (common-lisp:or inventory-item-entry-list
                                         common-lisp:null)
                         :accessor %inventory-result-item-content :initform
                         (common-lisp:error ":content is required"))
                        (content-hash :initarg :content-hash :type
                         (common-lisp:or inventory-item-content-hash
                                         common-lisp:null)
                         :accessor %inventory-result-item-content-hash
                         :initform common-lisp:nil)
                        (capture-time :initarg :capture-time :type
                         (common-lisp:or inventory-item-capture-time
                                         common-lisp:null)
                         :accessor %inventory-result-item-capture-time
                         :initform common-lisp:nil)
                        (schema-version :initarg :schema-version :type
                         (common-lisp:or inventory-item-schema-version
                                         common-lisp:null)
                         :accessor %inventory-result-item-schema-version
                         :initform
                         (common-lisp:error ":schema-version is required"))
                        (type-name :initarg :type-name :type
                         (common-lisp:or inventory-item-type-name
                                         common-lisp:null)
                         :accessor %inventory-result-item-type-name :initform
                         (common-lisp:error ":type-name is required"))))
 (common-lisp:export
  (common-lisp:list 'inventory-result-item 'make-inventory-result-item))
 (common-lisp:defun make-inventory-result-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content content-hash capture-time
                     schema-version type-name)
   (common-lisp:apply #'common-lisp:make-instance 'inventory-result-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inventory-result-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inventory-result-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "SchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-time))
      (common-lisp:list
       (common-lisp:cons "CaptureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-hash))
      (common-lisp:list
       (common-lisp:cons "ContentHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inventory-result-item))
   common-lisp:nil))
(common-lisp:deftype inventory-result-item-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inventory-result-item-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-inventory-result-item-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype inventory-schema-delete-option () 'common-lisp:string)
(common-lisp:deftype inventory-type-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invocation-does-not-exist
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invocation-does-not-exist)))
(common-lisp:deftype invocation-trace-output () 'common-lisp:string)
(common-lisp:deftype is-sub-type-schema () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition item-content-mismatch-exception
     (ssm-error)
     ((type-name :initarg :type-name :initform common-lisp:nil :reader
       item-content-mismatch-exception-type-name)
      (message :initarg :message :initform common-lisp:nil :reader
       item-content-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'item-content-mismatch-exception
                    'item-content-mismatch-exception-type-name
                    'item-content-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition item-size-limit-exceeded-exception
     (ssm-error)
     ((type-name :initarg :type-name :initform common-lisp:nil :reader
       item-size-limit-exceeded-exception-type-name)
      (message :initarg :message :initform common-lisp:nil :reader
       item-size-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'item-size-limit-exceeded-exception
                    'item-size-limit-exceeded-exception-type-name
                    'item-size-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass label-parameter-version-request common-lisp:nil
                       ((labels :initarg :labels :type
                         (common-lisp:or parameter-label-list common-lisp:null)
                         :accessor %label-parameter-version-request-labels
                         :initform (common-lisp:error ":labels is required"))
                        (parameter-version :initarg :parameter-version :type
                         (common-lisp:or psparameter-version common-lisp:null)
                         :accessor
                         %label-parameter-version-request-parameter-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or psparameter-name common-lisp:null)
                         :accessor %label-parameter-version-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'label-parameter-version-request
                    'make-label-parameter-version-request))
 (common-lisp:defun make-label-parameter-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key labels parameter-version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'label-parameter-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          label-parameter-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          label-parameter-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-version))
      (common-lisp:list
       (common-lisp:cons "ParameterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          label-parameter-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass label-parameter-version-result common-lisp:nil
                       ((parameter-version :initarg :parameter-version :type
                         (common-lisp:or psparameter-version common-lisp:null)
                         :accessor
                         %label-parameter-version-result-parameter-version
                         :initform common-lisp:nil)
                        (invalid-labels :initarg :invalid-labels :type
                         (common-lisp:or parameter-label-list common-lisp:null)
                         :accessor
                         %label-parameter-version-result-invalid-labels
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'label-parameter-version-result
                    'make-label-parameter-version-result))
 (common-lisp:defun make-label-parameter-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-version invalid-labels)
   (common-lisp:apply #'common-lisp:make-instance
                      'label-parameter-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          label-parameter-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          label-parameter-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-labels))
      (common-lisp:list
       (common-lisp:cons "InvalidLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-version))
      (common-lisp:list
       (common-lisp:cons "ParameterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          label-parameter-version-result))
   common-lisp:nil))
(common-lisp:deftype last-resource-data-sync-message () 'common-lisp:string)
(common-lisp:deftype last-resource-data-sync-status () 'common-lisp:string)
(common-lisp:deftype last-resource-data-sync-time () 'common-lisp:string)
(common-lisp:deftype last-successful-resource-data-sync-time ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-association-versions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-association-versions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-association-versions-request-max-results
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor
                         %list-association-versions-request-association-id
                         :initform
                         (common-lisp:error ":association-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-association-versions-request
                    'make-list-association-versions-request))
 (common-lisp:defun make-list-association-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results association-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-association-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-association-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-association-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-association-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-association-versions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-association-versions-result-next-token :initform
                         common-lisp:nil)
                        (association-versions :initarg :association-versions
                         :type
                         (common-lisp:or association-version-list
                                         common-lisp:null)
                         :accessor
                         %list-association-versions-result-association-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-association-versions-result
                    'make-list-association-versions-result))
 (common-lisp:defun make-list-association-versions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token association-versions)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-association-versions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-association-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-association-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-versions))
      (common-lisp:list
       (common-lisp:cons "AssociationVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-association-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-associations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-associations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-associations-request-max-results
                         :initform common-lisp:nil)
                        (association-filter-list :initarg
                         :association-filter-list :type
                         (common-lisp:or association-filter-list
                                         common-lisp:null)
                         :accessor
                         %list-associations-request-association-filter-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-associations-request
                    'make-list-associations-request))
 (common-lisp:defun make-list-associations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     association-filter-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-filter-list))
      (common-lisp:list
       (common-lisp:cons "AssociationFilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-associations-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-associations-result-next-token :initform
                         common-lisp:nil)
                        (associations :initarg :associations :type
                         (common-lisp:or association-list common-lisp:null)
                         :accessor %list-associations-result-associations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-associations-result 'make-list-associations-result))
 (common-lisp:defun make-list-associations-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token associations)
   (common-lisp:apply #'common-lisp:make-instance 'list-associations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'associations))
      (common-lisp:list
       (common-lisp:cons "Associations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-command-invocations-request common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-command-invocations-request-details :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or command-filter-list common-lisp:null)
                         :accessor %list-command-invocations-request-filters
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-command-invocations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or command-max-results common-lisp:null)
                         :accessor
                         %list-command-invocations-request-max-results
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         %list-command-invocations-request-instance-id
                         :initform common-lisp:nil)
                        (command-id :initarg :command-id :type
                         (common-lisp:or command-id common-lisp:null) :accessor
                         %list-command-invocations-request-command-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-command-invocations-request
                    'make-list-command-invocations-request))
 (common-lisp:defun make-list-command-invocations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details filters next-token max-results
                     instance-id command-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-command-invocations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-command-invocations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-command-invocations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-id))
      (common-lisp:list
       (common-lisp:cons "CommandId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-command-invocations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-command-invocations-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-command-invocations-result-next-token :initform
                         common-lisp:nil)
                        (command-invocations :initarg :command-invocations
                         :type
                         (common-lisp:or command-invocation-list
                                         common-lisp:null)
                         :accessor
                         %list-command-invocations-result-command-invocations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-command-invocations-result
                    'make-list-command-invocations-result))
 (common-lisp:defun make-list-command-invocations-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token command-invocations)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-command-invocations-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-command-invocations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-command-invocations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-invocations))
      (common-lisp:list
       (common-lisp:cons "CommandInvocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-command-invocations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-commands-request common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or command-filter-list common-lisp:null)
                         :accessor %list-commands-request-filters :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-commands-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or command-max-results common-lisp:null)
                         :accessor %list-commands-request-max-results :initform
                         common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %list-commands-request-instance-id :initform
                         common-lisp:nil)
                        (command-id :initarg :command-id :type
                         (common-lisp:or command-id common-lisp:null) :accessor
                         %list-commands-request-command-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-commands-request 'make-list-commands-request))
 (common-lisp:defun make-list-commands-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters next-token max-results
                     instance-id command-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-commands-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-commands-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-commands-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command-id))
      (common-lisp:list
       (common-lisp:cons "CommandId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-commands-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-commands-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-commands-result-next-token :initform
                         common-lisp:nil)
                        (commands :initarg :commands :type
                         (common-lisp:or command-list common-lisp:null)
                         :accessor %list-commands-result-commands :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-commands-result 'make-list-commands-result))
 (common-lisp:defun make-list-commands-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token commands)
   (common-lisp:apply #'common-lisp:make-instance 'list-commands-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-commands-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-commands-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commands))
      (common-lisp:list
       (common-lisp:cons "Commands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-commands-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-compliance-items-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-compliance-items-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-compliance-items-request-next-token :initform
                         common-lisp:nil)
                        (resource-types :initarg :resource-types :type
                         (common-lisp:or compliance-resource-type-list
                                         common-lisp:null)
                         :accessor
                         %list-compliance-items-request-resource-types
                         :initform common-lisp:nil)
                        (resource-ids :initarg :resource-ids :type
                         (common-lisp:or compliance-resource-id-list
                                         common-lisp:null)
                         :accessor %list-compliance-items-request-resource-ids
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or compliance-string-filter-list
                                         common-lisp:null)
                         :accessor %list-compliance-items-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-compliance-items-request
                    'make-list-compliance-items-request))
 (common-lisp:defun make-list-compliance-items-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token resource-types
                     resource-ids filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-compliance-items-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-items-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-items-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "ResourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-items-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-compliance-items-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-compliance-items-result-next-token :initform
                         common-lisp:nil)
                        (compliance-items :initarg :compliance-items :type
                         (common-lisp:or compliance-item-list common-lisp:null)
                         :accessor
                         %list-compliance-items-result-compliance-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-compliance-items-result
                    'make-list-compliance-items-result))
 (common-lisp:defun make-list-compliance-items-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token compliance-items)
   (common-lisp:apply #'common-lisp:make-instance 'list-compliance-items-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-items-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-items-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-items))
      (common-lisp:list
       (common-lisp:cons "ComplianceItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-items-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-compliance-summaries-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-compliance-summaries-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-compliance-summaries-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or compliance-string-filter-list
                                         common-lisp:null)
                         :accessor %list-compliance-summaries-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-compliance-summaries-request
                    'make-list-compliance-summaries-request))
 (common-lisp:defun make-list-compliance-summaries-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-compliance-summaries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-summaries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-summaries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-compliance-summaries-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-compliance-summaries-result-next-token :initform
                         common-lisp:nil)
                        (compliance-summary-items :initarg
                         :compliance-summary-items :type
                         (common-lisp:or compliance-summary-item-list
                                         common-lisp:null)
                         :accessor
                         %list-compliance-summaries-result-compliance-summary-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-compliance-summaries-result
                    'make-list-compliance-summaries-result))
 (common-lisp:defun make-list-compliance-summaries-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token compliance-summary-items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-compliance-summaries-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-summaries-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-summaries-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-summary-items))
      (common-lisp:list
       (common-lisp:cons "ComplianceSummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compliance-summaries-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-document-metadata-history-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-document-metadata-history-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-document-metadata-history-request-next-token
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or document-metadata-enum
                                         common-lisp:null)
                         :accessor
                         %list-document-metadata-history-request-metadata
                         :initform (common-lisp:error ":metadata is required"))
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %list-document-metadata-history-request-document-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %list-document-metadata-history-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-document-metadata-history-request
                    'make-list-document-metadata-history-request))
 (common-lisp:defun make-list-document-metadata-history-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token metadata
                     document-version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-document-metadata-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-document-metadata-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-document-metadata-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-document-metadata-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-document-metadata-history-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-document-metadata-history-response-next-token
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or document-metadata-response-info
                                         common-lisp:null)
                         :accessor
                         %list-document-metadata-history-response-metadata
                         :initform common-lisp:nil)
                        (author :initarg :author :type
                         (common-lisp:or document-author common-lisp:null)
                         :accessor
                         %list-document-metadata-history-response-author
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %list-document-metadata-history-response-document-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor
                         %list-document-metadata-history-response-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-document-metadata-history-response
                    'make-list-document-metadata-history-response))
 (common-lisp:defun make-list-document-metadata-history-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token metadata author
                     document-version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-document-metadata-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-document-metadata-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-document-metadata-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'author))
      (common-lisp:list
       (common-lisp:cons "Author"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-document-metadata-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-document-versions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-document-versions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-document-versions-request-max-results
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %list-document-versions-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-document-versions-request
                    'make-list-document-versions-request))
 (common-lisp:defun make-list-document-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-document-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-document-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-document-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-document-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-document-versions-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-document-versions-result-next-token :initform
                         common-lisp:nil)
                        (document-versions :initarg :document-versions :type
                         (common-lisp:or document-version-list
                                         common-lisp:null)
                         :accessor
                         %list-document-versions-result-document-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-document-versions-result
                    'make-list-document-versions-result))
 (common-lisp:defun make-list-document-versions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token document-versions)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-document-versions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-document-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-document-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-versions))
      (common-lisp:list
       (common-lisp:cons "DocumentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-document-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-documents-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-documents-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-documents-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or document-key-values-filter-list
                                         common-lisp:null)
                         :accessor %list-documents-request-filters :initform
                         common-lisp:nil)
                        (document-filter-list :initarg :document-filter-list
                         :type
                         (common-lisp:or document-filter-list common-lisp:null)
                         :accessor %list-documents-request-document-filter-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-documents-request 'make-list-documents-request))
 (common-lisp:defun make-list-documents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     document-filter-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-documents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-filter-list))
      (common-lisp:list
       (common-lisp:cons "DocumentFilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-documents-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-documents-result-next-token :initform
                         common-lisp:nil)
                        (document-identifiers :initarg :document-identifiers
                         :type
                         (common-lisp:or document-identifier-list
                                         common-lisp:null)
                         :accessor %list-documents-result-document-identifiers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-documents-result 'make-list-documents-result))
 (common-lisp:defun make-list-documents-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token document-identifiers)
   (common-lisp:apply #'common-lisp:make-instance 'list-documents-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-identifiers))
      (common-lisp:list
       (common-lisp:cons "DocumentIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-documents-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-inventory-entries-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-inventory-entries-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-inventory-entries-request-next-token :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or inventory-filter-list
                                         common-lisp:null)
                         :accessor %list-inventory-entries-request-filters
                         :initform common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or inventory-item-type-name
                                         common-lisp:null)
                         :accessor %list-inventory-entries-request-type-name
                         :initform
                         (common-lisp:error ":type-name is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %list-inventory-entries-request-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-inventory-entries-request
                    'make-list-inventory-entries-request))
 (common-lisp:defun make-list-inventory-entries-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters type-name
                     instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-inventory-entries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inventory-entries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inventory-entries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inventory-entries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-inventory-entries-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-inventory-entries-result-next-token :initform
                         common-lisp:nil)
                        (entries :initarg :entries :type
                         (common-lisp:or inventory-item-entry-list
                                         common-lisp:null)
                         :accessor %list-inventory-entries-result-entries
                         :initform common-lisp:nil)
                        (capture-time :initarg :capture-time :type
                         (common-lisp:or inventory-item-capture-time
                                         common-lisp:null)
                         :accessor %list-inventory-entries-result-capture-time
                         :initform common-lisp:nil)
                        (schema-version :initarg :schema-version :type
                         (common-lisp:or inventory-item-schema-version
                                         common-lisp:null)
                         :accessor
                         %list-inventory-entries-result-schema-version
                         :initform common-lisp:nil)
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %list-inventory-entries-result-instance-id
                         :initform common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or inventory-item-type-name
                                         common-lisp:null)
                         :accessor %list-inventory-entries-result-type-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-inventory-entries-result
                    'make-list-inventory-entries-result))
 (common-lisp:defun make-list-inventory-entries-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entries capture-time
                     schema-version instance-id type-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-inventory-entries-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inventory-entries-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inventory-entries-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "SchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-time))
      (common-lisp:list
       (common-lisp:cons "CaptureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inventory-entries-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ops-item-events-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-ops-item-events-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or ops-item-event-max-results
                                         common-lisp:null)
                         :accessor %list-ops-item-events-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or ops-item-event-filters
                                         common-lisp:null)
                         :accessor %list-ops-item-events-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ops-item-events-request
                    'make-list-ops-item-events-request))
 (common-lisp:defun make-list-ops-item-events-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-ops-item-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ops-item-events-response common-lisp:nil
                       ((summaries :initarg :summaries :type
                         (common-lisp:or ops-item-event-summaries
                                         common-lisp:null)
                         :accessor %list-ops-item-events-response-summaries
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-ops-item-events-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ops-item-events-response
                    'make-list-ops-item-events-response))
 (common-lisp:defun make-list-ops-item-events-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key summaries next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-ops-item-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ops-item-related-items-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-ops-item-related-items-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or ops-item-related-items-max-results
                                         common-lisp:null)
                         :accessor
                         %list-ops-item-related-items-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or ops-item-related-items-filters
                                         common-lisp:null)
                         :accessor %list-ops-item-related-items-request-filters
                         :initform common-lisp:nil)
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or ops-item-id common-lisp:null)
                         :accessor
                         %list-ops-item-related-items-request-ops-item-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ops-item-related-items-request
                    'make-list-ops-item-related-items-request))
 (common-lisp:defun make-list-ops-item-related-items-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters
                     ops-item-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-ops-item-related-items-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-related-items-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-related-items-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-related-items-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ops-item-related-items-response common-lisp:nil
                       ((summaries :initarg :summaries :type
                         (common-lisp:or ops-item-related-item-summaries
                                         common-lisp:null)
                         :accessor
                         %list-ops-item-related-items-response-summaries
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-ops-item-related-items-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ops-item-related-items-response
                    'make-list-ops-item-related-items-response))
 (common-lisp:defun make-list-ops-item-related-items-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key summaries next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-ops-item-related-items-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-related-items-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-related-items-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-item-related-items-response))
   common-lisp:nil))
(common-lisp:deftype list-ops-metadata-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-ops-metadata-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-ops-metadata-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or list-ops-metadata-max-results
                                         common-lisp:null)
                         :accessor %list-ops-metadata-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or ops-metadata-filter-list
                                         common-lisp:null)
                         :accessor %list-ops-metadata-request-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ops-metadata-request
                    'make-list-ops-metadata-request))
 (common-lisp:defun make-list-ops-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance 'list-ops-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ops-metadata-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-ops-metadata-result-next-token :initform
                         common-lisp:nil)
                        (ops-metadata-list :initarg :ops-metadata-list :type
                         (common-lisp:or ops-metadata-list common-lisp:null)
                         :accessor %list-ops-metadata-result-ops-metadata-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-ops-metadata-result 'make-list-ops-metadata-result))
 (common-lisp:defun make-list-ops-metadata-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token ops-metadata-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-ops-metadata-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-metadata-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-metadata-list))
      (common-lisp:list
       (common-lisp:cons "OpsMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ops-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-compliance-summaries-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-resource-compliance-summaries-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-resource-compliance-summaries-request-next-token
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or compliance-string-filter-list
                                         common-lisp:null)
                         :accessor
                         %list-resource-compliance-summaries-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-compliance-summaries-request
                    'make-list-resource-compliance-summaries-request))
 (common-lisp:defun make-list-resource-compliance-summaries-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-compliance-summaries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-compliance-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-compliance-summaries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-compliance-summaries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-compliance-summaries-result
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-resource-compliance-summaries-result-next-token
                         :initform common-lisp:nil)
                        (resource-compliance-summary-items :initarg
                         :resource-compliance-summary-items :type
                         (common-lisp:or resource-compliance-summary-item-list
                                         common-lisp:null)
                         :accessor
                         %list-resource-compliance-summaries-result-resource-compliance-summary-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-compliance-summaries-result
                    'make-list-resource-compliance-summaries-result))
 (common-lisp:defun make-list-resource-compliance-summaries-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     resource-compliance-summary-items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-compliance-summaries-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-compliance-summaries-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-compliance-summaries-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-compliance-summary-items))
      (common-lisp:list
       (common-lisp:cons "ResourceComplianceSummaryItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-compliance-summaries-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-data-sync-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-resource-data-sync-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-resource-data-sync-request-next-token :initform
                         common-lisp:nil)
                        (sync-type :initarg :sync-type :type
                         (common-lisp:or resource-data-sync-type
                                         common-lisp:null)
                         :accessor %list-resource-data-sync-request-sync-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-data-sync-request
                    'make-list-resource-data-sync-request))
 (common-lisp:defun make-list-resource-data-sync-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token sync-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-data-sync-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-data-sync-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-data-sync-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-data-sync-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-data-sync-result common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-resource-data-sync-result-next-token :initform
                         common-lisp:nil)
                        (resource-data-sync-items :initarg
                         :resource-data-sync-items :type
                         (common-lisp:or resource-data-sync-item-list
                                         common-lisp:null)
                         :accessor
                         %list-resource-data-sync-result-resource-data-sync-items
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-resource-data-sync-result
                    'make-list-resource-data-sync-result))
 (common-lisp:defun make-list-resource-data-sync-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token resource-data-sync-items)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-data-sync-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-data-sync-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-data-sync-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-data-sync-items))
      (common-lisp:list
       (common-lisp:cons "ResourceDataSyncItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-data-sync-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type-for-tagging
                                         common-lisp:null)
                         :accessor
                         %list-tags-for-resource-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-id resource-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-result common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-result-tag-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defun make-list-tags-for-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass logging-info common-lisp:nil
                       ((s3region :initarg :s3region :type
                         (common-lisp:or s3region common-lisp:null) :accessor
                         %logging-info-s3region :initform
                         (common-lisp:error ":s3region is required"))
                        (s3key-prefix :initarg :s3key-prefix :type
                         (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor %logging-info-s3key-prefix :initform
                         common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %logging-info-s3bucket-name :initform
                         (common-lisp:error ":s3bucket-name is required"))))
 (common-lisp:export (common-lisp:list 'logging-info 'make-logging-info))
 (common-lisp:defun make-logging-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3region s3key-prefix s3bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 'logging-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3region))
      (common-lisp:list
       (common-lisp:cons "S3Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-info))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype maintenance-window-allow-unassociated-targets ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-automation-parameters common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-automation-parameters-parameters
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %maintenance-window-automation-parameters-document-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-automation-parameters
                    'make-maintenance-window-automation-parameters))
 (common-lisp:defun make-maintenance-window-automation-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters document-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'maintenance-window-automation-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-automation-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-automation-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-automation-parameters))
   common-lisp:nil))
(common-lisp:deftype maintenance-window-cutoff () 'common-lisp:integer)
(common-lisp:deftype maintenance-window-description () 'common-lisp:string)
(common-lisp:deftype maintenance-window-duration-hours () 'common-lisp:integer)
(common-lisp:deftype maintenance-window-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-execution common-lisp:nil
                       ((end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %maintenance-window-execution-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %maintenance-window-execution-start-time :initform
                         common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or
                          maintenance-window-execution-status-details
                          common-lisp:null)
                         :accessor %maintenance-window-execution-status-details
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or maintenance-window-execution-status
                                         common-lisp:null)
                         :accessor %maintenance-window-execution-status
                         :initform common-lisp:nil)
                        (window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-window-execution-id
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %maintenance-window-execution-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-execution
                    'make-maintenance-window-execution))
 (common-lisp:defun make-maintenance-window-execution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-time start-time status-details status
                     window-execution-id window-id)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-window-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-execution))
   common-lisp:nil))
(common-lisp:deftype maintenance-window-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype maintenance-window-execution-list ()
   '(trivial-types:proper-list maintenance-window-execution))
 (common-lisp:defun |make-maintenance-window-execution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-execution))
   aws-sdk/generator/shape::members))
(common-lisp:deftype maintenance-window-execution-status () 'common-lisp:string)
(common-lisp:deftype maintenance-window-execution-status-details ()
  'common-lisp:string)
(common-lisp:deftype maintenance-window-execution-task-execution-id ()
  'common-lisp:string)
(common-lisp:deftype maintenance-window-execution-task-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype maintenance-window-execution-task-id-list ()
   '(trivial-types:proper-list maintenance-window-execution-task-id))
 (common-lisp:defun |make-maintenance-window-execution-task-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-execution-task-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass maintenance-window-execution-task-identity
                       common-lisp:nil
                       ((triggered-alarms :initarg :triggered-alarms :type
                         (common-lisp:or alarm-state-information-list
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-identity-triggered-alarms
                         :initform common-lisp:nil)
                        (alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-identity-alarm-configuration
                         :initform common-lisp:nil)
                        (task-type :initarg :task-type :type
                         (common-lisp:or maintenance-window-task-type
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-identity-task-type
                         :initform common-lisp:nil)
                        (task-arn :initarg :task-arn :type
                         (common-lisp:or maintenance-window-task-arn
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-identity-task-arn
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %maintenance-window-execution-task-identity-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %maintenance-window-execution-task-identity-start-time
                         :initform common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or
                          maintenance-window-execution-status-details
                          common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-identity-status-details
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or maintenance-window-execution-status
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-identity-status
                         :initform common-lisp:nil)
                        (task-execution-id :initarg :task-execution-id :type
                         (common-lisp:or maintenance-window-execution-task-id
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-identity-task-execution-id
                         :initform common-lisp:nil)
                        (window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-identity-window-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-execution-task-identity
                    'make-maintenance-window-execution-task-identity))
 (common-lisp:defun make-maintenance-window-execution-task-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key triggered-alarms alarm-configuration
                     task-type task-arn end-time start-time status-details
                     status task-execution-id window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'maintenance-window-execution-task-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-execution-task-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-execution-task-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-execution-id))
      (common-lisp:list
       (common-lisp:cons "TaskExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "TaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "TaskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggered-alarms))
      (common-lisp:list
       (common-lisp:cons "TriggeredAlarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-execution-task-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype maintenance-window-execution-task-identity-list ()
   '(trivial-types:proper-list maintenance-window-execution-task-identity))
 (common-lisp:defun |make-maintenance-window-execution-task-identity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-execution-task-identity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype maintenance-window-execution-task-invocation-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-execution-task-invocation-identity
                       common-lisp:nil
                       ((window-target-id :initarg :window-target-id :type
                         (common-lisp:or maintenance-window-task-target-id
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-invocation-identity-window-target-id
                         :initform common-lisp:nil)
                        (owner-information :initarg :owner-information :type
                         (common-lisp:or owner-information common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-invocation-identity-owner-information
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %maintenance-window-execution-task-invocation-identity-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %maintenance-window-execution-task-invocation-identity-start-time
                         :initform common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or
                          maintenance-window-execution-status-details
                          common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-invocation-identity-status-details
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or maintenance-window-execution-status
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-invocation-identity-status
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or
                          maintenance-window-execution-task-invocation-parameters
                          common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-invocation-identity-parameters
                         :initform common-lisp:nil)
                        (task-type :initarg :task-type :type
                         (common-lisp:or maintenance-window-task-type
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-invocation-identity-task-type
                         :initform common-lisp:nil)
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or
                          maintenance-window-execution-task-execution-id
                          common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-invocation-identity-execution-id
                         :initform common-lisp:nil)
                        (invocation-id :initarg :invocation-id :type
                         (common-lisp:or
                          maintenance-window-execution-task-invocation-id
                          common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-invocation-identity-invocation-id
                         :initform common-lisp:nil)
                        (task-execution-id :initarg :task-execution-id :type
                         (common-lisp:or maintenance-window-execution-task-id
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-invocation-identity-task-execution-id
                         :initform common-lisp:nil)
                        (window-execution-id :initarg :window-execution-id
                         :type
                         (common-lisp:or maintenance-window-execution-id
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-execution-task-invocation-identity-window-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-execution-task-invocation-identity
                    'make-maintenance-window-execution-task-invocation-identity))
 (common-lisp:defun make-maintenance-window-execution-task-invocation-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-target-id owner-information
                     end-time start-time status-details status parameters
                     task-type execution-id invocation-id task-execution-id
                     window-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'maintenance-window-execution-task-invocation-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-execution-task-invocation-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-execution-task-invocation-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-execution-id))
      (common-lisp:list
       (common-lisp:cons "WindowExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-execution-id))
      (common-lisp:list
       (common-lisp:cons "TaskExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-id))
      (common-lisp:list
       (common-lisp:cons "InvocationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "TaskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-information))
      (common-lisp:list
       (common-lisp:cons "OwnerInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-target-id))
      (common-lisp:list
       (common-lisp:cons "WindowTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-execution-task-invocation-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype maintenance-window-execution-task-invocation-identity-list
                      ()
   '(trivial-types:proper-list
     maintenance-window-execution-task-invocation-identity))
 (common-lisp:defun |make-maintenance-window-execution-task-invocation-identity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-execution-task-invocation-identity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype maintenance-window-execution-task-invocation-parameters ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or maintenance-window-filter-values
                                         common-lisp:null)
                         :accessor %maintenance-window-filter-values :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or maintenance-window-filter-key
                                         common-lisp:null)
                         :accessor %maintenance-window-filter-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-filter
                    'make-maintenance-window-filter))
 (common-lisp:defun make-maintenance-window-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-window-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-filter))
   common-lisp:nil))
(common-lisp:deftype maintenance-window-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype maintenance-window-filter-list ()
   '(trivial-types:proper-list maintenance-window-filter))
 (common-lisp:defun |make-maintenance-window-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype maintenance-window-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype maintenance-window-filter-values ()
   '(trivial-types:proper-list maintenance-window-filter-value))
 (common-lisp:defun |make-maintenance-window-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype maintenance-window-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-identity common-lisp:nil
                       ((next-execution-time :initarg :next-execution-time
                         :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-identity-next-execution-time
                         :initform common-lisp:nil)
                        (start-date :initarg :start-date :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-start-date
                         :initform common-lisp:nil)
                        (end-date :initarg :end-date :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-end-date
                         :initform common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or maintenance-window-offset
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-schedule-offset
                         :initform common-lisp:nil)
                        (schedule-timezone :initarg :schedule-timezone :type
                         (common-lisp:or maintenance-window-timezone
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-identity-schedule-timezone
                         :initform common-lisp:nil)
                        (schedule :initarg :schedule :type
                         (common-lisp:or maintenance-window-schedule
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-schedule
                         :initform common-lisp:nil)
                        (cutoff :initarg :cutoff :type
                         (common-lisp:or maintenance-window-cutoff
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-cutoff
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or maintenance-window-duration-hours
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-duration
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or maintenance-window-enabled
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-enabled
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-name :initform
                         common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-identity
                    'make-maintenance-window-identity))
 (common-lisp:defun make-maintenance-window-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-execution-time start-date end-date
                     schedule-offset schedule-timezone schedule cutoff duration
                     enabled description name window-id)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-window-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cutoff))
      (common-lisp:list
       (common-lisp:cons "Cutoff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-timezone))
      (common-lisp:list
       (common-lisp:cons "ScheduleTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-execution-time))
      (common-lisp:list
       (common-lisp:cons "NextExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass maintenance-window-identity-for-target common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %maintenance-window-identity-for-target-name
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-identity-for-target-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-identity-for-target
                    'make-maintenance-window-identity-for-target))
 (common-lisp:defun make-maintenance-window-identity-for-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'maintenance-window-identity-for-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-identity-for-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-identity-for-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-identity-for-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype maintenance-window-identity-list ()
   '(trivial-types:proper-list maintenance-window-identity))
 (common-lisp:defun |make-maintenance-window-identity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-identity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype maintenance-window-lambda-client-context ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-lambda-parameters common-lisp:nil
                       ((payload :initarg :payload :type
                         (common-lisp:or maintenance-window-lambda-payload
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-lambda-parameters-payload
                         :initform common-lisp:nil)
                        (qualifier :initarg :qualifier :type
                         (common-lisp:or maintenance-window-lambda-qualifier
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-lambda-parameters-qualifier
                         :initform common-lisp:nil)
                        (client-context :initarg :client-context :type
                         (common-lisp:or
                          maintenance-window-lambda-client-context
                          common-lisp:null)
                         :accessor
                         %maintenance-window-lambda-parameters-client-context
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-lambda-parameters
                    'make-maintenance-window-lambda-parameters))
 (common-lisp:defun make-maintenance-window-lambda-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload qualifier client-context)
   (common-lisp:apply #'common-lisp:make-instance
                      'maintenance-window-lambda-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-lambda-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-lambda-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-context))
      (common-lisp:list
       (common-lisp:cons "ClientContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualifier))
      (common-lisp:list
       (common-lisp:cons "Qualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-lambda-parameters))
   common-lisp:nil))
(common-lisp:deftype maintenance-window-lambda-payload ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype maintenance-window-lambda-qualifier () 'common-lisp:string)
(common-lisp:deftype maintenance-window-max-results () 'common-lisp:integer)
(common-lisp:deftype maintenance-window-name () 'common-lisp:string)
(common-lisp:deftype maintenance-window-offset () 'common-lisp:integer)
(common-lisp:deftype maintenance-window-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-run-command-parameters
                       common-lisp:nil
                       ((timeout-seconds :initarg :timeout-seconds :type
                         (common-lisp:or timeout-seconds common-lisp:null)
                         :accessor
                         %maintenance-window-run-command-parameters-timeout-seconds
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :type
                         (common-lisp:or service-role common-lisp:null)
                         :accessor
                         %maintenance-window-run-command-parameters-service-role-arn
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %maintenance-window-run-command-parameters-parameters
                         :initform common-lisp:nil)
                        (output-s3key-prefix :initarg :output-s3key-prefix
                         :type (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor
                         %maintenance-window-run-command-parameters-output-s3key-prefix
                         :initform common-lisp:nil)
                        (output-s3bucket-name :initarg :output-s3bucket-name
                         :type (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         %maintenance-window-run-command-parameters-output-s3bucket-name
                         :initform common-lisp:nil)
                        (notification-config :initarg :notification-config
                         :type
                         (common-lisp:or notification-config common-lisp:null)
                         :accessor
                         %maintenance-window-run-command-parameters-notification-config
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %maintenance-window-run-command-parameters-document-version
                         :initform common-lisp:nil)
                        (document-hash-type :initarg :document-hash-type :type
                         (common-lisp:or document-hash-type common-lisp:null)
                         :accessor
                         %maintenance-window-run-command-parameters-document-hash-type
                         :initform common-lisp:nil)
                        (document-hash :initarg :document-hash :type
                         (common-lisp:or document-hash common-lisp:null)
                         :accessor
                         %maintenance-window-run-command-parameters-document-hash
                         :initform common-lisp:nil)
                        (cloud-watch-output-config :initarg
                         :cloud-watch-output-config :type
                         (common-lisp:or cloud-watch-output-config
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-run-command-parameters-cloud-watch-output-config
                         :initform common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or comment common-lisp:null) :accessor
                         %maintenance-window-run-command-parameters-comment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-run-command-parameters
                    'make-maintenance-window-run-command-parameters))
 (common-lisp:defun make-maintenance-window-run-command-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout-seconds service-role-arn
                     parameters output-s3key-prefix output-s3bucket-name
                     notification-config document-version document-hash-type
                     document-hash cloud-watch-output-config comment)
   (common-lisp:apply #'common-lisp:make-instance
                      'maintenance-window-run-command-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-run-command-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-run-command-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-output-config))
      (common-lisp:list
       (common-lisp:cons "CloudWatchOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-hash))
      (common-lisp:list
       (common-lisp:cons "DocumentHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-hash-type))
      (common-lisp:list
       (common-lisp:cons "DocumentHashType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-config))
      (common-lisp:list
       (common-lisp:cons "NotificationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "OutputS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-run-command-parameters))
   common-lisp:nil))
(common-lisp:deftype maintenance-window-schedule () 'common-lisp:string)
(common-lisp:deftype maintenance-window-search-max-results ()
  'common-lisp:integer)
(common-lisp:deftype maintenance-window-step-functions-input ()
  'common-lisp:string)
(common-lisp:deftype maintenance-window-step-functions-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-step-functions-parameters
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or maintenance-window-step-functions-name
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-step-functions-parameters-name
                         :initform common-lisp:nil)
                        (input :initarg :input :type
                         (common-lisp:or
                          maintenance-window-step-functions-input
                          common-lisp:null)
                         :accessor
                         %maintenance-window-step-functions-parameters-input
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-step-functions-parameters
                    'make-maintenance-window-step-functions-parameters))
 (common-lisp:defun make-maintenance-window-step-functions-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name input)
   (common-lisp:apply #'common-lisp:make-instance
                      'maintenance-window-step-functions-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-step-functions-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-step-functions-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-step-functions-parameters))
   common-lisp:nil))
(common-lisp:deftype maintenance-window-string-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-target common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor %maintenance-window-target-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %maintenance-window-target-name :initform
                         common-lisp:nil)
                        (owner-information :initarg :owner-information :type
                         (common-lisp:or owner-information common-lisp:null)
                         :accessor %maintenance-window-target-owner-information
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %maintenance-window-target-targets :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or maintenance-window-resource-type
                                         common-lisp:null)
                         :accessor %maintenance-window-target-resource-type
                         :initform common-lisp:nil)
                        (window-target-id :initarg :window-target-id :type
                         (common-lisp:or maintenance-window-target-id
                                         common-lisp:null)
                         :accessor %maintenance-window-target-window-target-id
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %maintenance-window-target-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-target
                    'make-maintenance-window-target))
 (common-lisp:defun make-maintenance-window-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description name owner-information
                     targets resource-type window-target-id window-id)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-window-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-target-id))
      (common-lisp:list
       (common-lisp:cons "WindowTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-information))
      (common-lisp:list
       (common-lisp:cons "OwnerInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-target))
   common-lisp:nil))
(common-lisp:deftype maintenance-window-target-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype maintenance-window-target-list ()
   '(trivial-types:proper-list maintenance-window-target))
 (common-lisp:defun |make-maintenance-window-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass maintenance-window-task common-lisp:nil
                       ((alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor %maintenance-window-task-alarm-configuration
                         :initform common-lisp:nil)
                        (cutoff-behavior :initarg :cutoff-behavior :type
                         (common-lisp:or
                          maintenance-window-task-cutoff-behavior
                          common-lisp:null)
                         :accessor %maintenance-window-task-cutoff-behavior
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor %maintenance-window-task-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %maintenance-window-task-name :initform
                         common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %maintenance-window-task-max-errors :initform
                         common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor %maintenance-window-task-max-concurrency
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :type
                         (common-lisp:or service-role common-lisp:null)
                         :accessor %maintenance-window-task-service-role-arn
                         :initform common-lisp:nil)
                        (logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor %maintenance-window-task-logging-info
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or maintenance-window-task-priority
                                         common-lisp:null)
                         :accessor %maintenance-window-task-priority :initform
                         common-lisp:nil)
                        (task-parameters :initarg :task-parameters :type
                         (common-lisp:or maintenance-window-task-parameters
                                         common-lisp:null)
                         :accessor %maintenance-window-task-task-parameters
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %maintenance-window-task-targets :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or maintenance-window-task-type
                                         common-lisp:null)
                         :accessor %maintenance-window-task-type :initform
                         common-lisp:nil)
                        (task-arn :initarg :task-arn :type
                         (common-lisp:or maintenance-window-task-arn
                                         common-lisp:null)
                         :accessor %maintenance-window-task-task-arn :initform
                         common-lisp:nil)
                        (window-task-id :initarg :window-task-id :type
                         (common-lisp:or maintenance-window-task-id
                                         common-lisp:null)
                         :accessor %maintenance-window-task-window-task-id
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %maintenance-window-task-window-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-task 'make-maintenance-window-task))
 (common-lisp:defun make-maintenance-window-task
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-configuration cutoff-behavior
                     description name max-errors max-concurrency
                     service-role-arn logging-info priority task-parameters
                     targets type task-arn window-task-id window-id)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-window-task
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-task-id))
      (common-lisp:list
       (common-lisp:cons "WindowTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "TaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-parameters))
      (common-lisp:list
       (common-lisp:cons "TaskParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cutoff-behavior))
      (common-lisp:list
       (common-lisp:cons "CutoffBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-task))
   common-lisp:nil))
(common-lisp:deftype maintenance-window-task-arn () 'common-lisp:string)
(common-lisp:deftype maintenance-window-task-cutoff-behavior ()
  'common-lisp:string)
(common-lisp:deftype maintenance-window-task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-task-invocation-parameters
                       common-lisp:nil
                       ((lambda :initarg :lambda :type
                         (common-lisp:or maintenance-window-lambda-parameters
                                         common-lisp:null)
                         :accessor
                         %maintenance-window-task-invocation-parameters-lambda
                         :initform common-lisp:nil)
                        (step-functions :initarg :step-functions :type
                         (common-lisp:or
                          maintenance-window-step-functions-parameters
                          common-lisp:null)
                         :accessor
                         %maintenance-window-task-invocation-parameters-step-functions
                         :initform common-lisp:nil)
                        (automation :initarg :automation :type
                         (common-lisp:or
                          maintenance-window-automation-parameters
                          common-lisp:null)
                         :accessor
                         %maintenance-window-task-invocation-parameters-automation
                         :initform common-lisp:nil)
                        (run-command :initarg :run-command :type
                         (common-lisp:or
                          maintenance-window-run-command-parameters
                          common-lisp:null)
                         :accessor
                         %maintenance-window-task-invocation-parameters-run-command
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-task-invocation-parameters
                    'make-maintenance-window-task-invocation-parameters))
 (common-lisp:defun make-maintenance-window-task-invocation-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lambda step-functions automation
                     run-command)
   (common-lisp:apply #'common-lisp:make-instance
                      'maintenance-window-task-invocation-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-task-invocation-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-task-invocation-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-command))
      (common-lisp:list
       (common-lisp:cons "RunCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automation))
      (common-lisp:list
       (common-lisp:cons "Automation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-functions))
      (common-lisp:list
       (common-lisp:cons "StepFunctions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "Lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-task-invocation-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype maintenance-window-task-list ()
   '(trivial-types:proper-list maintenance-window-task))
 (common-lisp:defun |make-maintenance-window-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list maintenance-window-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype maintenance-window-task-parameter-name ()
  'common-lisp:string)
(common-lisp:deftype maintenance-window-task-parameter-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-window-task-parameter-value-expression
                       common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or
                          maintenance-window-task-parameter-value-list
                          common-lisp:null)
                         :accessor
                         %maintenance-window-task-parameter-value-expression-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-window-task-parameter-value-expression
                    'make-maintenance-window-task-parameter-value-expression))
 (common-lisp:defun make-maintenance-window-task-parameter-value-expression
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values)
   (common-lisp:apply #'common-lisp:make-instance
                      'maintenance-window-task-parameter-value-expression
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-task-parameter-value-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-task-parameter-value-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-window-task-parameter-value-expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype maintenance-window-task-parameter-value-list ()
   '(trivial-types:proper-list maintenance-window-task-parameter-value))
 (common-lisp:defun |make-maintenance-window-task-parameter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-task-parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype maintenance-window-task-parameters ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-maintenance-window-task-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype maintenance-window-task-parameters-list ()
   '(trivial-types:proper-list maintenance-window-task-parameters))
 (common-lisp:defun |make-maintenance-window-task-parameters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-task-parameters))
   aws-sdk/generator/shape::members))
(common-lisp:deftype maintenance-window-task-priority () 'common-lisp:integer)
(common-lisp:deftype maintenance-window-task-target-id () 'common-lisp:string)
(common-lisp:deftype maintenance-window-task-type () 'common-lisp:string)
(common-lisp:deftype maintenance-window-timezone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype maintenance-windows-for-target-list ()
   '(trivial-types:proper-list maintenance-window-identity-for-target))
 (common-lisp:defun |make-maintenance-windows-for-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            maintenance-window-identity-for-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype managed-instance-id () 'common-lisp:string)
(common-lisp:deftype max-concurrency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition max-document-size-exceeded
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       max-document-size-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'max-document-size-exceeded
                    'max-document-size-exceeded-message)))
(common-lisp:deftype max-errors () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-results-ec2compatible () 'common-lisp:integer)
(common-lisp:deftype max-session-duration () 'common-lisp:string)
(common-lisp:deftype metadata-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metadata-keys-to-delete-list ()
   '(trivial-types:proper-list metadata-key))
 (common-lisp:defun |make-metadata-keys-to-delete-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metadata-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-metadata-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass metadata-value common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or metadata-value-string
                                         common-lisp:null)
                         :accessor %metadata-value-value :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'metadata-value 'make-metadata-value))
 (common-lisp:defun make-metadata-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'metadata-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata-value))
   common-lisp:nil))
(common-lisp:deftype metadata-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass modify-document-permission-request common-lisp:nil
                       ((shared-document-version :initarg
                         :shared-document-version :type
                         (common-lisp:or shared-document-version
                                         common-lisp:null)
                         :accessor
                         %modify-document-permission-request-shared-document-version
                         :initform common-lisp:nil)
                        (account-ids-to-remove :initarg :account-ids-to-remove
                         :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor
                         %modify-document-permission-request-account-ids-to-remove
                         :initform common-lisp:nil)
                        (account-ids-to-add :initarg :account-ids-to-add :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor
                         %modify-document-permission-request-account-ids-to-add
                         :initform common-lisp:nil)
                        (permission-type :initarg :permission-type :type
                         (common-lisp:or document-permission-type
                                         common-lisp:null)
                         :accessor
                         %modify-document-permission-request-permission-type
                         :initform
                         (common-lisp:error ":permission-type is required"))
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %modify-document-permission-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'modify-document-permission-request
                    'make-modify-document-permission-request))
 (common-lisp:defun make-modify-document-permission-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key shared-document-version
                     account-ids-to-remove account-ids-to-add permission-type
                     name)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-document-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-document-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-document-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-type))
      (common-lisp:list
       (common-lisp:cons "PermissionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids-to-add))
      (common-lisp:list
       (common-lisp:cons "AccountIdsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-ids-to-remove))
      (common-lisp:list
       (common-lisp:cons "AccountIdsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shared-document-version))
      (common-lisp:list
       (common-lisp:cons "SharedDocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-document-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass modify-document-permission-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'modify-document-permission-response
                    'make-modify-document-permission-response))
 (common-lisp:defun make-modify-document-permission-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'modify-document-permission-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          modify-document-permission-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          modify-document-permission-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          modify-document-permission-response))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass non-compliant-summary common-lisp:nil
                       ((severity-summary :initarg :severity-summary :type
                         (common-lisp:or severity-summary common-lisp:null)
                         :accessor %non-compliant-summary-severity-summary
                         :initform common-lisp:nil)
                        (non-compliant-count :initarg :non-compliant-count
                         :type
                         (common-lisp:or compliance-summary-count
                                         common-lisp:null)
                         :accessor %non-compliant-summary-non-compliant-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'non-compliant-summary 'make-non-compliant-summary))
 (common-lisp:defun make-non-compliant-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity-summary non-compliant-count)
   (common-lisp:apply #'common-lisp:make-instance 'non-compliant-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          non-compliant-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          non-compliant-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-compliant-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-summary))
      (common-lisp:list
       (common-lisp:cons "SeveritySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          non-compliant-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype normal-string-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-normal-string-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype notification-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-config common-lisp:nil
                       ((notification-type :initarg :notification-type :type
                         (common-lisp:or notification-type common-lisp:null)
                         :accessor %notification-config-notification-type
                         :initform common-lisp:nil)
                        (notification-events :initarg :notification-events
                         :type
                         (common-lisp:or notification-event-list
                                         common-lisp:null)
                         :accessor %notification-config-notification-events
                         :initform common-lisp:nil)
                        (notification-arn :initarg :notification-arn :type
                         (common-lisp:or notification-arn common-lisp:null)
                         :accessor %notification-config-notification-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notification-config 'make-notification-config))
 (common-lisp:defun make-notification-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-type notification-events
                     notification-arn)
   (common-lisp:apply #'common-lisp:make-instance 'notification-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input notification-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input notification-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-events))
      (common-lisp:list
       (common-lisp:cons "NotificationEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-type))
      (common-lisp:list
       (common-lisp:cons "NotificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input notification-config))
   common-lisp:nil))
(common-lisp:deftype notification-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-event-list ()
   '(trivial-types:proper-list notification-event))
 (common-lisp:defun |make-notification-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notification-type () 'common-lisp:string)
(common-lisp:deftype operating-system () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ops-aggregator common-lisp:nil
                       ((aggregators :initarg :aggregators :type
                         (common-lisp:or ops-aggregator-list common-lisp:null)
                         :accessor %ops-aggregator-aggregators :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or ops-filter-list common-lisp:null)
                         :accessor %ops-aggregator-filters :initform
                         common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or ops-aggregator-value-map
                                         common-lisp:null)
                         :accessor %ops-aggregator-values :initform
                         common-lisp:nil)
                        (attribute-name :initarg :attribute-name :type
                         (common-lisp:or ops-data-attribute-name
                                         common-lisp:null)
                         :accessor %ops-aggregator-attribute-name :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or ops-data-type-name common-lisp:null)
                         :accessor %ops-aggregator-type-name :initform
                         common-lisp:nil)
                        (aggregator-type :initarg :aggregator-type :type
                         (common-lisp:or ops-aggregator-type common-lisp:null)
                         :accessor %ops-aggregator-aggregator-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ops-aggregator 'make-ops-aggregator))
 (common-lisp:defun make-ops-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aggregators filters values attribute-name
                     type-name aggregator-type)
   (common-lisp:apply #'common-lisp:make-instance 'ops-aggregator
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-aggregator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-aggregator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregator-type))
      (common-lisp:list
       (common-lisp:cons "AggregatorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregators))
      (common-lisp:list
       (common-lisp:cons "Aggregators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-aggregator))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ops-aggregator-list ()
   '(trivial-types:proper-list ops-aggregator))
 (common-lisp:defun |make-ops-aggregator-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-aggregator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ops-aggregator-type () 'common-lisp:string)
(common-lisp:deftype ops-aggregator-value () 'common-lisp:string)
(common-lisp:deftype ops-aggregator-value-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-aggregator-value-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-ops-aggregator-value-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype ops-data-attribute-name () 'common-lisp:string)
(common-lisp:deftype ops-data-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ops-entity common-lisp:nil
                       ((data :initarg :data :type
                         (common-lisp:or ops-entity-item-map common-lisp:null)
                         :accessor %ops-entity-data :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or ops-entity-id common-lisp:null)
                         :accessor %ops-entity-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ops-entity 'make-ops-entity))
 (common-lisp:defun make-ops-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data id)
   (common-lisp:apply #'common-lisp:make-instance 'ops-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-entity))
   common-lisp:nil))
(common-lisp:deftype ops-entity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ops-entity-item common-lisp:nil
                       ((content :initarg :content :type
                         (common-lisp:or ops-entity-item-entry-list
                                         common-lisp:null)
                         :accessor %ops-entity-item-content :initform
                         common-lisp:nil)
                        (capture-time :initarg :capture-time :type
                         (common-lisp:or ops-entity-item-capture-time
                                         common-lisp:null)
                         :accessor %ops-entity-item-capture-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ops-entity-item 'make-ops-entity-item))
 (common-lisp:defun make-ops-entity-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key content capture-time)
   (common-lisp:apply #'common-lisp:make-instance 'ops-entity-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-entity-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-entity-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-time))
      (common-lisp:list
       (common-lisp:cons "CaptureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-entity-item))
   common-lisp:nil))
(common-lisp:deftype ops-entity-item-capture-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-entity-item-entry () 'common-lisp:hash-table)
 (common-lisp:defun |make-ops-entity-item-entry|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype ops-entity-item-entry-list ()
   '(trivial-types:proper-list ops-entity-item-entry))
 (common-lisp:defun |make-ops-entity-item-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-entity-item-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ops-entity-item-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-entity-item-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-ops-entity-item-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype ops-entity-list ()
   '(trivial-types:proper-list ops-entity))
 (common-lisp:defun |make-ops-entity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-entity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ops-filter common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or ops-filter-operator-type
                                         common-lisp:null)
                         :accessor %ops-filter-type :initform common-lisp:nil)
                        (values :initarg :values :type
                         (common-lisp:or ops-filter-value-list
                                         common-lisp:null)
                         :accessor %ops-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or ops-filter-key common-lisp:null)
                         :accessor %ops-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'ops-filter 'make-ops-filter))
 (common-lisp:defun make-ops-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type values key)
   (common-lisp:apply #'common-lisp:make-instance 'ops-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-filter))
   common-lisp:nil))
(common-lisp:deftype ops-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-filter-list ()
   '(trivial-types:proper-list ops-filter))
 (common-lisp:defun |make-ops-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ops-filter-operator-type () 'common-lisp:string)
(common-lisp:deftype ops-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-filter-value-list ()
   '(trivial-types:proper-list ops-filter-value))
 (common-lisp:defun |make-ops-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ops-item common-lisp:nil
                       ((ops-item-arn :initarg :ops-item-arn :type
                         (common-lisp:or ops-item-arn common-lisp:null)
                         :accessor %ops-item-ops-item-arn :initform
                         common-lisp:nil)
                        (planned-end-time :initarg :planned-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-planned-end-time :initform common-lisp:nil)
                        (planned-start-time :initarg :planned-start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-planned-start-time :initform
                         common-lisp:nil)
                        (actual-end-time :initarg :actual-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-actual-end-time :initform common-lisp:nil)
                        (actual-start-time :initarg :actual-start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-actual-start-time :initform common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or ops-item-severity common-lisp:null)
                         :accessor %ops-item-severity :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or ops-item-category common-lisp:null)
                         :accessor %ops-item-category :initform
                         common-lisp:nil)
                        (operational-data :initarg :operational-data :type
                         (common-lisp:or ops-item-operational-data
                                         common-lisp:null)
                         :accessor %ops-item-operational-data :initform
                         common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or ops-item-source common-lisp:null)
                         :accessor %ops-item-source :initform common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or ops-item-title common-lisp:null)
                         :accessor %ops-item-title :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-version :initform common-lisp:nil)
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or ops-item-id common-lisp:null)
                         :accessor %ops-item-ops-item-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or ops-item-status common-lisp:null)
                         :accessor %ops-item-status :initform common-lisp:nil)
                        (related-ops-items :initarg :related-ops-items :type
                         (common-lisp:or related-ops-items common-lisp:null)
                         :accessor %ops-item-related-ops-items :initform
                         common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or ops-item-priority common-lisp:null)
                         :accessor %ops-item-priority :initform
                         common-lisp:nil)
                        (notifications :initarg :notifications :type
                         (common-lisp:or ops-item-notifications
                                         common-lisp:null)
                         :accessor %ops-item-notifications :initform
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-last-modified-time :initform
                         common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-last-modified-by :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or ops-item-description common-lisp:null)
                         :accessor %ops-item-description :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-created-time :initform common-lisp:nil)
                        (ops-item-type :initarg :ops-item-type :type
                         (common-lisp:or ops-item-type common-lisp:null)
                         :accessor %ops-item-ops-item-type :initform
                         common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-created-by :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ops-item 'make-ops-item))
 (common-lisp:defun make-ops-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ops-item-arn planned-end-time
                     planned-start-time actual-end-time actual-start-time
                     severity category operational-data source title version
                     ops-item-id status related-ops-items priority
                     notifications last-modified-time last-modified-by
                     description created-time ops-item-type created-by)
   (common-lisp:apply #'common-lisp:make-instance 'ops-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-type))
      (common-lisp:list
       (common-lisp:cons "OpsItemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "Notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-ops-items))
      (common-lisp:list
       (common-lisp:cons "RelatedOpsItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-data))
      (common-lisp:list
       (common-lisp:cons "OperationalData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-start-time))
      (common-lisp:list
       (common-lisp:cons "ActualStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-end-time))
      (common-lisp:list
       (common-lisp:cons "ActualEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'planned-start-time))
      (common-lisp:list
       (common-lisp:cons "PlannedStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'planned-end-time))
      (common-lisp:list
       (common-lisp:cons "PlannedEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-arn))
      (common-lisp:list
       (common-lisp:cons "OpsItemArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition ops-item-access-denied-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ops-item-access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-item-access-denied-exception
                    'ops-item-access-denied-exception-message)))
(common-lisp:deftype ops-item-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition ops-item-already-exists-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ops-item-already-exists-exception-message)
      (ops-item-id :initarg :ops-item-id :initform common-lisp:nil :reader
       ops-item-already-exists-exception-ops-item-id)))
 (common-lisp:export
  (common-lisp:list 'ops-item-already-exists-exception
                    'ops-item-already-exists-exception-message
                    'ops-item-already-exists-exception-ops-item-id)))
(common-lisp:deftype ops-item-arn () 'common-lisp:string)
(common-lisp:deftype ops-item-category () 'common-lisp:string)
(common-lisp:deftype ops-item-data-key () 'common-lisp:string)
(common-lisp:deftype ops-item-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ops-item-data-value common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or ops-item-data-type common-lisp:null)
                         :accessor %ops-item-data-value-type :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or ops-item-data-value-string
                                         common-lisp:null)
                         :accessor %ops-item-data-value-value :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ops-item-data-value 'make-ops-item-data-value))
 (common-lisp:defun make-ops-item-data-value
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type value)
   (common-lisp:apply #'common-lisp:make-instance 'ops-item-data-value
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-item-data-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-item-data-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-item-data-value))
   common-lisp:nil))
(common-lisp:deftype ops-item-data-value-string () 'common-lisp:string)
(common-lisp:deftype ops-item-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ops-item-event-filter common-lisp:nil
                       ((operator :initarg :operator :type
                         (common-lisp:or ops-item-event-filter-operator
                                         common-lisp:null)
                         :accessor %ops-item-event-filter-operator :initform
                         (common-lisp:error ":operator is required"))
                        (values :initarg :values :type
                         (common-lisp:or ops-item-event-filter-values
                                         common-lisp:null)
                         :accessor %ops-item-event-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or ops-item-event-filter-key
                                         common-lisp:null)
                         :accessor %ops-item-event-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'ops-item-event-filter 'make-ops-item-event-filter))
 (common-lisp:defun make-ops-item-event-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values key)
   (common-lisp:apply #'common-lisp:make-instance 'ops-item-event-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-event-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-event-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-event-filter))
   common-lisp:nil))
(common-lisp:deftype ops-item-event-filter-key () 'common-lisp:string)
(common-lisp:deftype ops-item-event-filter-operator () 'common-lisp:string)
(common-lisp:deftype ops-item-event-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-item-event-filter-values ()
   '(trivial-types:proper-list ops-item-event-filter-value))
 (common-lisp:defun |make-ops-item-event-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ops-item-event-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ops-item-event-filters ()
   '(trivial-types:proper-list ops-item-event-filter))
 (common-lisp:defun |make-ops-item-event-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-item-event-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ops-item-event-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype ops-item-event-summaries ()
   '(trivial-types:proper-list ops-item-event-summary))
 (common-lisp:defun |make-ops-item-event-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-item-event-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ops-item-event-summary common-lisp:nil
                       ((created-time :initarg :created-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-event-summary-created-time :initform
                         common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or ops-item-identity common-lisp:null)
                         :accessor %ops-item-event-summary-created-by :initform
                         common-lisp:nil)
                        (detail :initarg :detail :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-event-summary-detail :initform
                         common-lisp:nil)
                        (detail-type :initarg :detail-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-event-summary-detail-type :initform
                         common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-event-summary-source :initform
                         common-lisp:nil)
                        (event-id :initarg :event-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-event-summary-event-id :initform
                         common-lisp:nil)
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-event-summary-ops-item-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ops-item-event-summary 'make-ops-item-event-summary))
 (common-lisp:defun make-ops-item-event-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-time created-by detail
                     detail-type source event-id ops-item-id)
   (common-lisp:apply #'common-lisp:make-instance 'ops-item-event-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-event-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-event-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail-type))
      (common-lisp:list
       (common-lisp:cons "DetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "Detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-event-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ops-item-filter common-lisp:nil
                       ((operator :initarg :operator :type
                         (common-lisp:or ops-item-filter-operator
                                         common-lisp:null)
                         :accessor %ops-item-filter-operator :initform
                         (common-lisp:error ":operator is required"))
                        (values :initarg :values :type
                         (common-lisp:or ops-item-filter-values
                                         common-lisp:null)
                         :accessor %ops-item-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or ops-item-filter-key common-lisp:null)
                         :accessor %ops-item-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'ops-item-filter 'make-ops-item-filter))
 (common-lisp:defun make-ops-item-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values key)
   (common-lisp:apply #'common-lisp:make-instance 'ops-item-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-item-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-item-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-item-filter))
   common-lisp:nil))
(common-lisp:deftype ops-item-filter-key () 'common-lisp:string)
(common-lisp:deftype ops-item-filter-operator () 'common-lisp:string)
(common-lisp:deftype ops-item-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-item-filter-values ()
   '(trivial-types:proper-list ops-item-filter-value))
 (common-lisp:defun |make-ops-item-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-item-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ops-item-filters ()
   '(trivial-types:proper-list ops-item-filter))
 (common-lisp:defun |make-ops-item-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-item-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ops-item-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ops-item-identity common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-identity-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ops-item-identity 'make-ops-item-identity))
 (common-lisp:defun make-ops-item-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'ops-item-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-item-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-item-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-item-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition ops-item-invalid-parameter-exception
     (ssm-error)
     ((parameter-names :initarg :parameter-names :initform common-lisp:nil
       :reader ops-item-invalid-parameter-exception-parameter-names)
      (message :initarg :message :initform common-lisp:nil :reader
       ops-item-invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-item-invalid-parameter-exception
                    'ops-item-invalid-parameter-exception-parameter-names
                    'ops-item-invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition ops-item-limit-exceeded-exception
     (ssm-error)
     ((resource-types :initarg :resource-types :initform common-lisp:nil
       :reader ops-item-limit-exceeded-exception-resource-types)
      (limit :initarg :limit :initform common-lisp:nil :reader
       ops-item-limit-exceeded-exception-limit)
      (limit-type :initarg :limit-type :initform common-lisp:nil :reader
       ops-item-limit-exceeded-exception-limit-type)
      (message :initarg :message :initform common-lisp:nil :reader
       ops-item-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-item-limit-exceeded-exception
                    'ops-item-limit-exceeded-exception-resource-types
                    'ops-item-limit-exceeded-exception-limit
                    'ops-item-limit-exceeded-exception-limit-type
                    'ops-item-limit-exceeded-exception-message)))
(common-lisp:deftype ops-item-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition ops-item-not-found-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ops-item-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-item-not-found-exception
                    'ops-item-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass ops-item-notification common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-notification-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ops-item-notification 'make-ops-item-notification))
 (common-lisp:defun make-ops-item-notification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'ops-item-notification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-notification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ops-item-notifications ()
   '(trivial-types:proper-list ops-item-notification))
 (common-lisp:defun |make-ops-item-notifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-item-notification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ops-item-operational-data () 'common-lisp:hash-table)
 (common-lisp:defun |make-ops-item-operational-data|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype ops-item-ops-data-keys-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-ops-item-ops-data-keys-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ops-item-parameter-names-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-ops-item-parameter-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ops-item-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition ops-item-related-item-already-exists-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ops-item-related-item-already-exists-exception-message)
      (resource-uri :initarg :resource-uri :initform common-lisp:nil :reader
       ops-item-related-item-already-exists-exception-resource-uri)
      (ops-item-id :initarg :ops-item-id :initform common-lisp:nil :reader
       ops-item-related-item-already-exists-exception-ops-item-id)))
 (common-lisp:export
  (common-lisp:list 'ops-item-related-item-already-exists-exception
                    'ops-item-related-item-already-exists-exception-message
                    'ops-item-related-item-already-exists-exception-resource-uri
                    'ops-item-related-item-already-exists-exception-ops-item-id)))
(common-lisp:deftype ops-item-related-item-association-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition ops-item-related-item-association-not-found-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       ops-item-related-item-association-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-item-related-item-association-not-found-exception
                    'ops-item-related-item-association-not-found-exception-message)))
(common-lisp:deftype ops-item-related-item-association-resource-type ()
  'common-lisp:string)
(common-lisp:deftype ops-item-related-item-association-resource-uri ()
  'common-lisp:string)
(common-lisp:deftype ops-item-related-item-association-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-item-related-item-summaries ()
   '(trivial-types:proper-list ops-item-related-item-summary))
 (common-lisp:defun |make-ops-item-related-item-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ops-item-related-item-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ops-item-related-item-summary common-lisp:nil
                       ((last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-related-item-summary-last-modified-time
                         :initform common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :type
                         (common-lisp:or ops-item-identity common-lisp:null)
                         :accessor
                         %ops-item-related-item-summary-last-modified-by
                         :initform common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-related-item-summary-created-time :initform
                         common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or ops-item-identity common-lisp:null)
                         :accessor %ops-item-related-item-summary-created-by
                         :initform common-lisp:nil)
                        (resource-uri :initarg :resource-uri :type
                         (common-lisp:or
                          ops-item-related-item-association-resource-uri
                          common-lisp:null)
                         :accessor %ops-item-related-item-summary-resource-uri
                         :initform common-lisp:nil)
                        (association-type :initarg :association-type :type
                         (common-lisp:or ops-item-related-item-association-type
                                         common-lisp:null)
                         :accessor
                         %ops-item-related-item-summary-association-type
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or
                          ops-item-related-item-association-resource-type
                          common-lisp:null)
                         :accessor %ops-item-related-item-summary-resource-type
                         :initform common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or ops-item-related-item-association-id
                                         common-lisp:null)
                         :accessor
                         %ops-item-related-item-summary-association-id
                         :initform common-lisp:nil)
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or ops-item-id common-lisp:null)
                         :accessor %ops-item-related-item-summary-ops-item-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ops-item-related-item-summary
                    'make-ops-item-related-item-summary))
 (common-lisp:defun make-ops-item-related-item-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-time last-modified-by
                     created-time created-by resource-uri association-type
                     resource-type association-id ops-item-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'ops-item-related-item-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-related-item-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-related-item-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "AssociationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-uri))
      (common-lisp:list
       (common-lisp:cons "ResourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-related-item-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ops-item-related-items-filter common-lisp:nil
                       ((operator :initarg :operator :type
                         (common-lisp:or ops-item-related-items-filter-operator
                                         common-lisp:null)
                         :accessor %ops-item-related-items-filter-operator
                         :initform (common-lisp:error ":operator is required"))
                        (values :initarg :values :type
                         (common-lisp:or ops-item-related-items-filter-values
                                         common-lisp:null)
                         :accessor %ops-item-related-items-filter-values
                         :initform (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or ops-item-related-items-filter-key
                                         common-lisp:null)
                         :accessor %ops-item-related-items-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'ops-item-related-items-filter
                    'make-ops-item-related-items-filter))
 (common-lisp:defun make-ops-item-related-items-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operator values key)
   (common-lisp:apply #'common-lisp:make-instance
                      'ops-item-related-items-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-related-items-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-related-items-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ops-item-related-items-filter))
   common-lisp:nil))
(common-lisp:deftype ops-item-related-items-filter-key () 'common-lisp:string)
(common-lisp:deftype ops-item-related-items-filter-operator ()
  'common-lisp:string)
(common-lisp:deftype ops-item-related-items-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-item-related-items-filter-values ()
   '(trivial-types:proper-list ops-item-related-items-filter-value))
 (common-lisp:defun |make-ops-item-related-items-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ops-item-related-items-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ops-item-related-items-filters ()
   '(trivial-types:proper-list ops-item-related-items-filter))
 (common-lisp:defun |make-ops-item-related-items-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ops-item-related-items-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ops-item-related-items-max-results () 'common-lisp:integer)
(common-lisp:deftype ops-item-severity () 'common-lisp:string)
(common-lisp:deftype ops-item-source () 'common-lisp:string)
(common-lisp:deftype ops-item-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-item-summaries ()
   '(trivial-types:proper-list ops-item-summary))
 (common-lisp:defun |make-ops-item-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-item-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ops-item-summary common-lisp:nil
                       ((planned-end-time :initarg :planned-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-summary-planned-end-time :initform
                         common-lisp:nil)
                        (planned-start-time :initarg :planned-start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-summary-planned-start-time :initform
                         common-lisp:nil)
                        (actual-end-time :initarg :actual-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-summary-actual-end-time :initform
                         common-lisp:nil)
                        (actual-start-time :initarg :actual-start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-summary-actual-start-time :initform
                         common-lisp:nil)
                        (ops-item-type :initarg :ops-item-type :type
                         (common-lisp:or ops-item-type common-lisp:null)
                         :accessor %ops-item-summary-ops-item-type :initform
                         common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or ops-item-severity common-lisp:null)
                         :accessor %ops-item-summary-severity :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or ops-item-category common-lisp:null)
                         :accessor %ops-item-summary-category :initform
                         common-lisp:nil)
                        (operational-data :initarg :operational-data :type
                         (common-lisp:or ops-item-operational-data
                                         common-lisp:null)
                         :accessor %ops-item-summary-operational-data :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or ops-item-title common-lisp:null)
                         :accessor %ops-item-summary-title :initform
                         common-lisp:nil)
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or ops-item-id common-lisp:null)
                         :accessor %ops-item-summary-ops-item-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or ops-item-status common-lisp:null)
                         :accessor %ops-item-summary-status :initform
                         common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or ops-item-source common-lisp:null)
                         :accessor %ops-item-summary-source :initform
                         common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or ops-item-priority common-lisp:null)
                         :accessor %ops-item-summary-priority :initform
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-summary-last-modified-time :initform
                         common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-summary-last-modified-by :initform
                         common-lisp:nil)
                        (created-time :initarg :created-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-item-summary-created-time :initform
                         common-lisp:nil)
                        (created-by :initarg :created-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-item-summary-created-by :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ops-item-summary 'make-ops-item-summary))
 (common-lisp:defun make-ops-item-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key planned-end-time planned-start-time
                     actual-end-time actual-start-time ops-item-type severity
                     category operational-data title ops-item-id status source
                     priority last-modified-time last-modified-by created-time
                     created-by)
   (common-lisp:apply #'common-lisp:make-instance 'ops-item-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-item-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-item-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-data))
      (common-lisp:list
       (common-lisp:cons "OperationalData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-type))
      (common-lisp:list
       (common-lisp:cons "OpsItemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-start-time))
      (common-lisp:list
       (common-lisp:cons "ActualStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-end-time))
      (common-lisp:list
       (common-lisp:cons "ActualEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'planned-start-time))
      (common-lisp:list
       (common-lisp:cons "PlannedStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'planned-end-time))
      (common-lisp:list
       (common-lisp:cons "PlannedEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-item-summary))
   common-lisp:nil))
(common-lisp:deftype ops-item-title () 'common-lisp:string)
(common-lisp:deftype ops-item-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ops-metadata common-lisp:nil
                       ((creation-date :initarg :creation-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-metadata-creation-date :initform common-lisp:nil)
                        (last-modified-user :initarg :last-modified-user :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ops-metadata-last-modified-user :initform
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %ops-metadata-last-modified-date :initform
                         common-lisp:nil)
                        (ops-metadata-arn :initarg :ops-metadata-arn :type
                         (common-lisp:or ops-metadata-arn common-lisp:null)
                         :accessor %ops-metadata-ops-metadata-arn :initform
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or ops-metadata-resource-id
                                         common-lisp:null)
                         :accessor %ops-metadata-resource-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ops-metadata 'make-ops-metadata))
 (common-lisp:defun make-ops-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-date last-modified-user
                     last-modified-date ops-metadata-arn resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'ops-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-metadata-arn))
      (common-lisp:list
       (common-lisp:cons "OpsMetadataArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-user))
      (common-lisp:list
       (common-lisp:cons "LastModifiedUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition ops-metadata-already-exists-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       ops-metadata-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-metadata-already-exists-exception
                    'ops-metadata-already-exists-exception-message)))
(common-lisp:deftype ops-metadata-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ops-metadata-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or ops-metadata-filter-value-list
                                         common-lisp:null)
                         :accessor %ops-metadata-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or ops-metadata-filter-key
                                         common-lisp:null)
                         :accessor %ops-metadata-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'ops-metadata-filter 'make-ops-metadata-filter))
 (common-lisp:defun make-ops-metadata-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'ops-metadata-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-metadata-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-metadata-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-metadata-filter))
   common-lisp:nil))
(common-lisp:deftype ops-metadata-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-metadata-filter-list ()
   '(trivial-types:proper-list ops-metadata-filter))
 (common-lisp:defun |make-ops-metadata-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-metadata-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ops-metadata-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ops-metadata-filter-value-list ()
   '(trivial-types:proper-list ops-metadata-filter-value))
 (common-lisp:defun |make-ops-metadata-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ops-metadata-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ops-metadata-invalid-argument-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       ops-metadata-invalid-argument-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-metadata-invalid-argument-exception
                    'ops-metadata-invalid-argument-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition ops-metadata-key-limit-exceeded-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       ops-metadata-key-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-metadata-key-limit-exceeded-exception
                    'ops-metadata-key-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition ops-metadata-limit-exceeded-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       ops-metadata-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-metadata-limit-exceeded-exception
                    'ops-metadata-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:deftype ops-metadata-list ()
   '(trivial-types:proper-list ops-metadata))
 (common-lisp:defun |make-ops-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition ops-metadata-not-found-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       ops-metadata-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-metadata-not-found-exception
                    'ops-metadata-not-found-exception-message)))
(common-lisp:deftype ops-metadata-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition ops-metadata-too-many-updates-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       ops-metadata-too-many-updates-exception-message)))
 (common-lisp:export
  (common-lisp:list 'ops-metadata-too-many-updates-exception
                    'ops-metadata-too-many-updates-exception-message)))
(common-lisp:progn
 (common-lisp:defclass ops-result-attribute common-lisp:nil
                       ((type-name :initarg :type-name :type
                         (common-lisp:or ops-data-type-name common-lisp:null)
                         :accessor %ops-result-attribute-type-name :initform
                         (common-lisp:error ":type-name is required"))))
 (common-lisp:export
  (common-lisp:list 'ops-result-attribute 'make-ops-result-attribute))
 (common-lisp:defun make-ops-result-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-name)
   (common-lisp:apply #'common-lisp:make-instance 'ops-result-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ops-result-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ops-result-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ops-result-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ops-result-attribute-list ()
   '(trivial-types:proper-list ops-result-attribute))
 (common-lisp:defun |make-ops-result-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ops-result-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass output-source common-lisp:nil
                       ((output-source-type :initarg :output-source-type :type
                         (common-lisp:or output-source-type common-lisp:null)
                         :accessor %output-source-output-source-type :initform
                         common-lisp:nil)
                        (output-source-id :initarg :output-source-id :type
                         (common-lisp:or output-source-id common-lisp:null)
                         :accessor %output-source-output-source-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output-source 'make-output-source))
 (common-lisp:defun make-output-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-source-type output-source-id)
   (common-lisp:apply #'common-lisp:make-instance 'output-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-source-id))
      (common-lisp:list
       (common-lisp:cons "OutputSourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-source-type))
      (common-lisp:list
       (common-lisp:cons "OutputSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-source))
   common-lisp:nil))
(common-lisp:deftype output-source-id () 'common-lisp:string)
(common-lisp:deftype output-source-type () 'common-lisp:string)
(common-lisp:deftype owner-information () 'common-lisp:string)
(common-lisp:deftype psparameter-name () 'common-lisp:string)
(common-lisp:deftype psparameter-selector () 'common-lisp:string)
(common-lisp:deftype psparameter-value () 'common-lisp:string)
(common-lisp:deftype psparameter-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass parameter common-lisp:nil
                       ((data-type :initarg :data-type :type
                         (common-lisp:or parameter-data-type common-lisp:null)
                         :accessor %parameter-data-type :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-arn :initform common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %parameter-last-modified-date :initform
                         common-lisp:nil)
                        (source-result :initarg :source-result :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-source-result :initform common-lisp:nil)
                        (selector :initarg :selector :type
                         (common-lisp:or psparameter-selector common-lisp:null)
                         :accessor %parameter-selector :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or psparameter-version common-lisp:null)
                         :accessor %parameter-version :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or psparameter-value common-lisp:null)
                         :accessor %parameter-value :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or parameter-type common-lisp:null)
                         :accessor %parameter-type :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or psparameter-name common-lisp:null)
                         :accessor %parameter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defun make-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-type arn last-modified-date
                     source-result selector version value type name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector))
      (common-lisp:list
       (common-lisp:cons "Selector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-result))
      (common-lisp:list
       (common-lisp:cons "SourceResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition parameter-already-exists
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       parameter-already-exists-message)))
 (common-lisp:export
  (common-lisp:list 'parameter-already-exists
                    'parameter-already-exists-message)))
(common-lisp:deftype parameter-data-type () 'common-lisp:string)
(common-lisp:deftype parameter-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass parameter-history common-lisp:nil
                       ((data-type :initarg :data-type :type
                         (common-lisp:or parameter-data-type common-lisp:null)
                         :accessor %parameter-history-data-type :initform
                         common-lisp:nil)
                        (policies :initarg :policies :type
                         (common-lisp:or parameter-policy-list
                                         common-lisp:null)
                         :accessor %parameter-history-policies :initform
                         common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or parameter-tier common-lisp:null)
                         :accessor %parameter-history-tier :initform
                         common-lisp:nil)
                        (labels :initarg :labels :type
                         (common-lisp:or parameter-label-list common-lisp:null)
                         :accessor %parameter-history-labels :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or psparameter-version common-lisp:null)
                         :accessor %parameter-history-version :initform
                         common-lisp:nil)
                        (allowed-pattern :initarg :allowed-pattern :type
                         (common-lisp:or allowed-pattern common-lisp:null)
                         :accessor %parameter-history-allowed-pattern :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or psparameter-value common-lisp:null)
                         :accessor %parameter-history-value :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or parameter-description
                                         common-lisp:null)
                         :accessor %parameter-history-description :initform
                         common-lisp:nil)
                        (last-modified-user :initarg :last-modified-user :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-history-last-modified-user :initform
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %parameter-history-last-modified-date :initform
                         common-lisp:nil)
                        (key-id :initarg :key-id :type
                         (common-lisp:or parameter-key-id common-lisp:null)
                         :accessor %parameter-history-key-id :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or parameter-type common-lisp:null)
                         :accessor %parameter-history-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or psparameter-name common-lisp:null)
                         :accessor %parameter-history-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-history 'make-parameter-history))
 (common-lisp:defun make-parameter-history
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-type policies tier labels version
                     allowed-pattern value description last-modified-user
                     last-modified-date key-id type name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-history
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-user))
      (common-lisp:list
       (common-lisp:cons "LastModifiedUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-pattern))
      (common-lisp:list
       (common-lisp:cons "AllowedPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-history-list ()
   '(trivial-types:proper-list parameter-history))
 (common-lisp:defun |make-parameter-history-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-history))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter-inline-policy common-lisp:nil
                       ((policy-status :initarg :policy-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-inline-policy-policy-status :initform
                         common-lisp:nil)
                        (policy-type :initarg :policy-type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-inline-policy-policy-type :initform
                         common-lisp:nil)
                        (policy-text :initarg :policy-text :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-inline-policy-policy-text :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-inline-policy 'make-parameter-inline-policy))
 (common-lisp:defun make-parameter-inline-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-status policy-type policy-text)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-inline-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-inline-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-inline-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "PolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-status))
      (common-lisp:list
       (common-lisp:cons "PolicyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-inline-policy))
   common-lisp:nil))
(common-lisp:deftype parameter-key-id () 'common-lisp:string)
(common-lisp:deftype parameter-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-label-list ()
   '(trivial-types:proper-list parameter-label))
 (common-lisp:defun |make-parameter-label-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition parameter-limit-exceeded
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       parameter-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'parameter-limit-exceeded
                    'parameter-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype parameter-list () '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition parameter-max-version-limit-exceeded
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       parameter-max-version-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'parameter-max-version-limit-exceeded
                    'parameter-max-version-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:defclass parameter-metadata common-lisp:nil
                       ((data-type :initarg :data-type :type
                         (common-lisp:or parameter-data-type common-lisp:null)
                         :accessor %parameter-metadata-data-type :initform
                         common-lisp:nil)
                        (policies :initarg :policies :type
                         (common-lisp:or parameter-policy-list
                                         common-lisp:null)
                         :accessor %parameter-metadata-policies :initform
                         common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or parameter-tier common-lisp:null)
                         :accessor %parameter-metadata-tier :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or psparameter-version common-lisp:null)
                         :accessor %parameter-metadata-version :initform
                         common-lisp:nil)
                        (allowed-pattern :initarg :allowed-pattern :type
                         (common-lisp:or allowed-pattern common-lisp:null)
                         :accessor %parameter-metadata-allowed-pattern
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or parameter-description
                                         common-lisp:null)
                         :accessor %parameter-metadata-description :initform
                         common-lisp:nil)
                        (last-modified-user :initarg :last-modified-user :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %parameter-metadata-last-modified-user :initform
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %parameter-metadata-last-modified-date :initform
                         common-lisp:nil)
                        (key-id :initarg :key-id :type
                         (common-lisp:or parameter-key-id common-lisp:null)
                         :accessor %parameter-metadata-key-id :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or parameter-type common-lisp:null)
                         :accessor %parameter-metadata-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or psparameter-name common-lisp:null)
                         :accessor %parameter-metadata-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-metadata 'make-parameter-metadata))
 (common-lisp:defun make-parameter-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-type policies tier version
                     allowed-pattern description last-modified-user
                     last-modified-date key-id type name)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-user))
      (common-lisp:list
       (common-lisp:cons "LastModifiedUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-pattern))
      (common-lisp:list
       (common-lisp:cons "AllowedPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-metadata-list ()
   '(trivial-types:proper-list parameter-metadata))
 (common-lisp:defun |make-parameter-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-name-list ()
   '(trivial-types:proper-list psparameter-name))
 (common-lisp:defun |make-parameter-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list psparameter-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition parameter-not-found
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       parameter-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'parameter-not-found 'parameter-not-found-message)))
(common-lisp:progn
 (common-lisp:define-condition parameter-pattern-mismatch-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       parameter-pattern-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'parameter-pattern-mismatch-exception
                    'parameter-pattern-mismatch-exception-message)))
(common-lisp:deftype parameter-policies () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-policy-list ()
   '(trivial-types:proper-list parameter-inline-policy))
 (common-lisp:defun |make-parameter-policy-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-inline-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter-string-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or parameter-string-filter-value-list
                                         common-lisp:null)
                         :accessor %parameter-string-filter-values :initform
                         common-lisp:nil)
                        (option :initarg :option :type
                         (common-lisp:or parameter-string-query-option
                                         common-lisp:null)
                         :accessor %parameter-string-filter-option :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or parameter-string-filter-key
                                         common-lisp:null)
                         :accessor %parameter-string-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'parameter-string-filter 'make-parameter-string-filter))
 (common-lisp:defun make-parameter-string-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values option key)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-string-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-string-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-string-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option))
      (common-lisp:list
       (common-lisp:cons "Option"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-string-filter))
   common-lisp:nil))
(common-lisp:deftype parameter-string-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-string-filter-list ()
   '(trivial-types:proper-list parameter-string-filter))
 (common-lisp:defun |make-parameter-string-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-string-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parameter-string-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-string-filter-value-list ()
   '(trivial-types:proper-list parameter-string-filter-value))
 (common-lisp:defun |make-parameter-string-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            parameter-string-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parameter-string-query-option () 'common-lisp:string)
(common-lisp:deftype parameter-tier () 'common-lisp:string)
(common-lisp:deftype parameter-type () 'common-lisp:string)
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-value-list ()
   '(trivial-types:proper-list parameter-value))
 (common-lisp:defun |make-parameter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition parameter-version-label-limit-exceeded
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       parameter-version-label-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'parameter-version-label-limit-exceeded
                    'parameter-version-label-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:define-condition parameter-version-not-found
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       parameter-version-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'parameter-version-not-found
                    'parameter-version-not-found-message)))
(common-lisp:progn
 (common-lisp:deftype parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-parameters| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass parameters-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or parameters-filter-value-list
                                         common-lisp:null)
                         :accessor %parameters-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or parameters-filter-key
                                         common-lisp:null)
                         :accessor %parameters-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'parameters-filter 'make-parameters-filter))
 (common-lisp:defun make-parameters-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'parameters-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameters-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameters-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameters-filter))
   common-lisp:nil))
(common-lisp:deftype parameters-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameters-filter-list ()
   '(trivial-types:proper-list parameters-filter))
 (common-lisp:defun |make-parameters-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameters-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parameters-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameters-filter-value-list ()
   '(trivial-types:proper-list parameters-filter-value))
 (common-lisp:defun |make-parameters-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameters-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass patch common-lisp:nil
                       ((repository :initarg :repository :type
                         (common-lisp:or patch-repository common-lisp:null)
                         :accessor %patch-repository :initform common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or patch-severity common-lisp:null)
                         :accessor %patch-severity :initform common-lisp:nil)
                        (arch :initarg :arch :type
                         (common-lisp:or patch-arch common-lisp:null) :accessor
                         %patch-arch :initform common-lisp:nil)
                        (release :initarg :release :type
                         (common-lisp:or patch-release common-lisp:null)
                         :accessor %patch-release :initform common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or patch-version common-lisp:null)
                         :accessor %patch-version :initform common-lisp:nil)
                        (epoch :initarg :epoch :type
                         (common-lisp:or patch-epoch common-lisp:null)
                         :accessor %patch-epoch :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or patch-name common-lisp:null) :accessor
                         %patch-name :initform common-lisp:nil)
                        (cveids :initarg :cveids :type
                         (common-lisp:or patch-cveid-list common-lisp:null)
                         :accessor %patch-cveids :initform common-lisp:nil)
                        (bugzilla-ids :initarg :bugzilla-ids :type
                         (common-lisp:or patch-bugzilla-id-list
                                         common-lisp:null)
                         :accessor %patch-bugzilla-ids :initform
                         common-lisp:nil)
                        (advisory-ids :initarg :advisory-ids :type
                         (common-lisp:or patch-advisory-id-list
                                         common-lisp:null)
                         :accessor %patch-advisory-ids :initform
                         common-lisp:nil)
                        (language :initarg :language :type
                         (common-lisp:or patch-language common-lisp:null)
                         :accessor %patch-language :initform common-lisp:nil)
                        (msrc-number :initarg :msrc-number :type
                         (common-lisp:or patch-msrc-number common-lisp:null)
                         :accessor %patch-msrc-number :initform
                         common-lisp:nil)
                        (kb-number :initarg :kb-number :type
                         (common-lisp:or patch-kb-number common-lisp:null)
                         :accessor %patch-kb-number :initform common-lisp:nil)
                        (msrc-severity :initarg :msrc-severity :type
                         (common-lisp:or patch-msrc-severity common-lisp:null)
                         :accessor %patch-msrc-severity :initform
                         common-lisp:nil)
                        (classification :initarg :classification :type
                         (common-lisp:or patch-classification common-lisp:null)
                         :accessor %patch-classification :initform
                         common-lisp:nil)
                        (product :initarg :product :type
                         (common-lisp:or patch-product common-lisp:null)
                         :accessor %patch-product :initform common-lisp:nil)
                        (product-family :initarg :product-family :type
                         (common-lisp:or patch-product-family common-lisp:null)
                         :accessor %patch-product-family :initform
                         common-lisp:nil)
                        (vendor :initarg :vendor :type
                         (common-lisp:or patch-vendor common-lisp:null)
                         :accessor %patch-vendor :initform common-lisp:nil)
                        (content-url :initarg :content-url :type
                         (common-lisp:or patch-content-url common-lisp:null)
                         :accessor %patch-content-url :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or patch-description common-lisp:null)
                         :accessor %patch-description :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or patch-title common-lisp:null)
                         :accessor %patch-title :initform common-lisp:nil)
                        (release-date :initarg :release-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %patch-release-date :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or patch-id common-lisp:null) :accessor
                         %patch-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'patch 'make-patch))
 (common-lisp:defun make-patch
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository severity arch release version
                     epoch name cveids bugzilla-ids advisory-ids language
                     msrc-number kb-number msrc-severity classification product
                     product-family vendor content-url description title
                     release-date id)
   (common-lisp:apply #'common-lisp:make-instance 'patch
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input patch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input patch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-date))
      (common-lisp:list
       (common-lisp:cons "ReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-url))
      (common-lisp:list
       (common-lisp:cons "ContentUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "Vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-family))
      (common-lisp:list
       (common-lisp:cons "ProductFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product))
      (common-lisp:list
       (common-lisp:cons "Product"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'msrc-severity))
      (common-lisp:list
       (common-lisp:cons "MsrcSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kb-number))
      (common-lisp:list
       (common-lisp:cons "KbNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'msrc-number))
      (common-lisp:list
       (common-lisp:cons "MsrcNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advisory-ids))
      (common-lisp:list
       (common-lisp:cons "AdvisoryIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bugzilla-ids))
      (common-lisp:list
       (common-lisp:cons "BugzillaIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cveids))
      (common-lisp:list
       (common-lisp:cons "CVEIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'epoch))
      (common-lisp:list
       (common-lisp:cons "Epoch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release))
      (common-lisp:list
       (common-lisp:cons "Release"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arch))
      (common-lisp:list
       (common-lisp:cons "Arch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "Repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input patch))
   common-lisp:nil))
(common-lisp:deftype patch-action () 'common-lisp:string)
(common-lisp:deftype patch-advisory-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-advisory-id-list ()
   '(trivial-types:proper-list patch-advisory-id))
 (common-lisp:defun |make-patch-advisory-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-advisory-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-arch () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass patch-baseline-identity common-lisp:nil
                       ((default-baseline :initarg :default-baseline :type
                         (common-lisp:or default-baseline common-lisp:null)
                         :accessor %patch-baseline-identity-default-baseline
                         :initform common-lisp:nil)
                        (baseline-description :initarg :baseline-description
                         :type
                         (common-lisp:or baseline-description common-lisp:null)
                         :accessor
                         %patch-baseline-identity-baseline-description
                         :initform common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %patch-baseline-identity-operating-system
                         :initform common-lisp:nil)
                        (baseline-name :initarg :baseline-name :type
                         (common-lisp:or baseline-name common-lisp:null)
                         :accessor %patch-baseline-identity-baseline-name
                         :initform common-lisp:nil)
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor %patch-baseline-identity-baseline-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'patch-baseline-identity 'make-patch-baseline-identity))
 (common-lisp:defun make-patch-baseline-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key default-baseline baseline-description
                     operating-system baseline-name baseline-id)
   (common-lisp:apply #'common-lisp:make-instance 'patch-baseline-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          patch-baseline-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          patch-baseline-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-name))
      (common-lisp:list
       (common-lisp:cons "BaselineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baseline-description))
      (common-lisp:list
       (common-lisp:cons "BaselineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-baseline))
      (common-lisp:list
       (common-lisp:cons "DefaultBaseline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          patch-baseline-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype patch-baseline-identity-list ()
   '(trivial-types:proper-list patch-baseline-identity))
 (common-lisp:defun |make-patch-baseline-identity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-baseline-identity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-baseline-max-results () 'common-lisp:integer)
(common-lisp:deftype patch-bugzilla-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-bugzilla-id-list ()
   '(trivial-types:proper-list patch-bugzilla-id))
 (common-lisp:defun |make-patch-bugzilla-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-bugzilla-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-cveid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-cveid-list ()
   '(trivial-types:proper-list patch-cveid))
 (common-lisp:defun |make-patch-cveid-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-cveid))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-cveids () 'common-lisp:string)
(common-lisp:deftype patch-classification () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass patch-compliance-data common-lisp:nil
                       ((cveids :initarg :cveids :type
                         (common-lisp:or patch-cveids common-lisp:null)
                         :accessor %patch-compliance-data-cveids :initform
                         common-lisp:nil)
                        (installed-time :initarg :installed-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %patch-compliance-data-installed-time :initform
                         (common-lisp:error ":installed-time is required"))
                        (state :initarg :state :type
                         (common-lisp:or patch-compliance-data-state
                                         common-lisp:null)
                         :accessor %patch-compliance-data-state :initform
                         (common-lisp:error ":state is required"))
                        (severity :initarg :severity :type
                         (common-lisp:or patch-severity common-lisp:null)
                         :accessor %patch-compliance-data-severity :initform
                         (common-lisp:error ":severity is required"))
                        (classification :initarg :classification :type
                         (common-lisp:or patch-classification common-lisp:null)
                         :accessor %patch-compliance-data-classification
                         :initform
                         (common-lisp:error ":classification is required"))
                        (kbid :initarg :kbid :type
                         (common-lisp:or patch-kb-number common-lisp:null)
                         :accessor %patch-compliance-data-kbid :initform
                         (common-lisp:error ":kbid is required"))
                        (title :initarg :title :type
                         (common-lisp:or patch-title common-lisp:null)
                         :accessor %patch-compliance-data-title :initform
                         (common-lisp:error ":title is required"))))
 (common-lisp:export
  (common-lisp:list 'patch-compliance-data 'make-patch-compliance-data))
 (common-lisp:defun make-patch-compliance-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cveids installed-time state severity
                     classification kbid title)
   (common-lisp:apply #'common-lisp:make-instance 'patch-compliance-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          patch-compliance-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          patch-compliance-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kbid))
      (common-lisp:list
       (common-lisp:cons "KBId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'installed-time))
      (common-lisp:list
       (common-lisp:cons "InstalledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cveids))
      (common-lisp:list
       (common-lisp:cons "CVEIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          patch-compliance-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype patch-compliance-data-list ()
   '(trivial-types:proper-list patch-compliance-data))
 (common-lisp:defun |make-patch-compliance-data-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-compliance-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-compliance-data-state () 'common-lisp:string)
(common-lisp:deftype patch-compliance-level () 'common-lisp:string)
(common-lisp:deftype patch-compliance-max-results () 'common-lisp:integer)
(common-lisp:deftype patch-content-url () 'common-lisp:string)
(common-lisp:deftype patch-critical-non-compliant-count () 'common-lisp:integer)
(common-lisp:deftype patch-deployment-status () 'common-lisp:string)
(common-lisp:deftype patch-description () 'common-lisp:string)
(common-lisp:deftype patch-epoch () 'common-lisp:integer)
(common-lisp:deftype patch-failed-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass patch-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or patch-filter-value-list
                                         common-lisp:null)
                         :accessor %patch-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or patch-filter-key common-lisp:null)
                         :accessor %patch-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'patch-filter 'make-patch-filter))
 (common-lisp:defun make-patch-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'patch-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input patch-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input patch-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input patch-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass patch-filter-group common-lisp:nil
                       ((patch-filters :initarg :patch-filters :type
                         (common-lisp:or patch-filter-list common-lisp:null)
                         :accessor %patch-filter-group-patch-filters :initform
                         (common-lisp:error ":patch-filters is required"))))
 (common-lisp:export
  (common-lisp:list 'patch-filter-group 'make-patch-filter-group))
 (common-lisp:defun make-patch-filter-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-filters)
   (common-lisp:apply #'common-lisp:make-instance 'patch-filter-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input patch-filter-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input patch-filter-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-filters))
      (common-lisp:list
       (common-lisp:cons "PatchFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input patch-filter-group))
   common-lisp:nil))
(common-lisp:deftype patch-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-filter-list ()
   '(trivial-types:proper-list patch-filter))
 (common-lisp:defun |make-patch-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-filter-value-list ()
   '(trivial-types:proper-list patch-filter-value))
 (common-lisp:defun |make-patch-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-group-list ()
   '(trivial-types:proper-list patch-group))
 (common-lisp:defun |make-patch-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass patch-group-patch-baseline-mapping common-lisp:nil
                       ((baseline-identity :initarg :baseline-identity :type
                         (common-lisp:or patch-baseline-identity
                                         common-lisp:null)
                         :accessor
                         %patch-group-patch-baseline-mapping-baseline-identity
                         :initform common-lisp:nil)
                        (patch-group :initarg :patch-group :type
                         (common-lisp:or patch-group common-lisp:null)
                         :accessor
                         %patch-group-patch-baseline-mapping-patch-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'patch-group-patch-baseline-mapping
                    'make-patch-group-patch-baseline-mapping))
 (common-lisp:defun make-patch-group-patch-baseline-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key baseline-identity patch-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'patch-group-patch-baseline-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          patch-group-patch-baseline-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          patch-group-patch-baseline-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-identity))
      (common-lisp:list
       (common-lisp:cons "BaselineIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          patch-group-patch-baseline-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype patch-group-patch-baseline-mapping-list ()
   '(trivial-types:proper-list patch-group-patch-baseline-mapping))
 (common-lisp:defun |make-patch-group-patch-baseline-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            patch-group-patch-baseline-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-id-list () '(trivial-types:proper-list patch-id))
 (common-lisp:defun |make-patch-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-installed-count () 'common-lisp:integer)
(common-lisp:deftype patch-installed-other-count () 'common-lisp:integer)
(common-lisp:deftype patch-installed-pending-reboot-count ()
  'common-lisp:integer)
(common-lisp:deftype patch-installed-rejected-count () 'common-lisp:integer)
(common-lisp:deftype patch-kb-number () 'common-lisp:string)
(common-lisp:deftype patch-language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-list () '(trivial-types:proper-list patch))
 (common-lisp:defun |make-patch-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-missing-count () 'common-lisp:integer)
(common-lisp:deftype patch-msrc-number () 'common-lisp:string)
(common-lisp:deftype patch-msrc-severity () 'common-lisp:string)
(common-lisp:deftype patch-name () 'common-lisp:string)
(common-lisp:deftype patch-not-applicable-count () 'common-lisp:integer)
(common-lisp:deftype patch-operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass patch-orchestrator-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or patch-orchestrator-filter-values
                                         common-lisp:null)
                         :accessor %patch-orchestrator-filter-values :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or patch-orchestrator-filter-key
                                         common-lisp:null)
                         :accessor %patch-orchestrator-filter-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'patch-orchestrator-filter
                    'make-patch-orchestrator-filter))
 (common-lisp:defun make-patch-orchestrator-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'patch-orchestrator-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          patch-orchestrator-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          patch-orchestrator-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          patch-orchestrator-filter))
   common-lisp:nil))
(common-lisp:deftype patch-orchestrator-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-orchestrator-filter-list ()
   '(trivial-types:proper-list patch-orchestrator-filter))
 (common-lisp:defun |make-patch-orchestrator-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            patch-orchestrator-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-orchestrator-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-orchestrator-filter-values ()
   '(trivial-types:proper-list patch-orchestrator-filter-value))
 (common-lisp:defun |make-patch-orchestrator-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            patch-orchestrator-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-other-non-compliant-count () 'common-lisp:integer)
(common-lisp:deftype patch-product () 'common-lisp:string)
(common-lisp:deftype patch-product-family () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-properties-list ()
   '(trivial-types:proper-list patch-property-entry))
 (common-lisp:defun |make-patch-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-property-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-property () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-property-entry () 'common-lisp:hash-table)
 (common-lisp:defun |make-patch-property-entry|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype patch-release () 'common-lisp:string)
(common-lisp:deftype patch-repository () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass patch-rule common-lisp:nil
                       ((enable-non-security :initarg :enable-non-security
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %patch-rule-enable-non-security :initform
                         common-lisp:nil)
                        (approve-until-date :initarg :approve-until-date :type
                         (common-lisp:or patch-string-date-time
                                         common-lisp:null)
                         :accessor %patch-rule-approve-until-date :initform
                         common-lisp:nil)
                        (approve-after-days :initarg :approve-after-days :type
                         (common-lisp:or approve-after-days common-lisp:null)
                         :accessor %patch-rule-approve-after-days :initform
                         common-lisp:nil)
                        (compliance-level :initarg :compliance-level :type
                         (common-lisp:or patch-compliance-level
                                         common-lisp:null)
                         :accessor %patch-rule-compliance-level :initform
                         common-lisp:nil)
                        (patch-filter-group :initarg :patch-filter-group :type
                         (common-lisp:or patch-filter-group common-lisp:null)
                         :accessor %patch-rule-patch-filter-group :initform
                         (common-lisp:error
                          ":patch-filter-group is required"))))
 (common-lisp:export (common-lisp:list 'patch-rule 'make-patch-rule))
 (common-lisp:defun make-patch-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-non-security approve-until-date
                     approve-after-days compliance-level patch-filter-group)
   (common-lisp:apply #'common-lisp:make-instance 'patch-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input patch-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input patch-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-filter-group))
      (common-lisp:list
       (common-lisp:cons "PatchFilterGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-level))
      (common-lisp:list
       (common-lisp:cons "ComplianceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approve-after-days))
      (common-lisp:list
       (common-lisp:cons "ApproveAfterDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approve-until-date))
      (common-lisp:list
       (common-lisp:cons "ApproveUntilDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-non-security))
      (common-lisp:list
       (common-lisp:cons "EnableNonSecurity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input patch-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass patch-rule-group common-lisp:nil
                       ((patch-rules :initarg :patch-rules :type
                         (common-lisp:or patch-rule-list common-lisp:null)
                         :accessor %patch-rule-group-patch-rules :initform
                         (common-lisp:error ":patch-rules is required"))))
 (common-lisp:export
  (common-lisp:list 'patch-rule-group 'make-patch-rule-group))
 (common-lisp:defun make-patch-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-rules)
   (common-lisp:apply #'common-lisp:make-instance 'patch-rule-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input patch-rule-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input patch-rule-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-rules))
      (common-lisp:list
       (common-lisp:cons "PatchRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input patch-rule-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype patch-rule-list ()
   '(trivial-types:proper-list patch-rule))
 (common-lisp:defun |make-patch-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-security-non-compliant-count () 'common-lisp:integer)
(common-lisp:deftype patch-set () 'common-lisp:string)
(common-lisp:deftype patch-severity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass patch-source common-lisp:nil
                       ((configuration :initarg :configuration :type
                         (common-lisp:or patch-source-configuration
                                         common-lisp:null)
                         :accessor %patch-source-configuration :initform
                         (common-lisp:error ":configuration is required"))
                        (products :initarg :products :type
                         (common-lisp:or patch-source-product-list
                                         common-lisp:null)
                         :accessor %patch-source-products :initform
                         (common-lisp:error ":products is required"))
                        (name :initarg :name :type
                         (common-lisp:or patch-source-name common-lisp:null)
                         :accessor %patch-source-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'patch-source 'make-patch-source))
 (common-lisp:defun make-patch-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration products name)
   (common-lisp:apply #'common-lisp:make-instance 'patch-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input patch-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input patch-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'products))
      (common-lisp:list
       (common-lisp:cons "Products"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input patch-source))
   common-lisp:nil))
(common-lisp:deftype patch-source-configuration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-source-list ()
   '(trivial-types:proper-list patch-source))
 (common-lisp:defun |make-patch-source-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype patch-source-name () 'common-lisp:string)
(common-lisp:deftype patch-source-product () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype patch-source-product-list ()
   '(trivial-types:proper-list patch-source-product))
 (common-lisp:defun |make-patch-source-product-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list patch-source-product))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass patch-status common-lisp:nil
                       ((approval-date :initarg :approval-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %patch-status-approval-date :initform common-lisp:nil)
                        (compliance-level :initarg :compliance-level :type
                         (common-lisp:or patch-compliance-level
                                         common-lisp:null)
                         :accessor %patch-status-compliance-level :initform
                         common-lisp:nil)
                        (deployment-status :initarg :deployment-status :type
                         (common-lisp:or patch-deployment-status
                                         common-lisp:null)
                         :accessor %patch-status-deployment-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'patch-status 'make-patch-status))
 (common-lisp:defun make-patch-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key approval-date compliance-level
                     deployment-status)
   (common-lisp:apply #'common-lisp:make-instance 'patch-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input patch-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input patch-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "DeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-level))
      (common-lisp:list
       (common-lisp:cons "ComplianceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approval-date))
      (common-lisp:list
       (common-lisp:cons "ApprovalDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input patch-status))
   common-lisp:nil))
(common-lisp:deftype patch-string-date-time () 'common-lisp:string)
(common-lisp:deftype patch-title () 'common-lisp:string)
(common-lisp:deftype patch-unreported-not-applicable-count ()
  'common-lisp:integer)
(common-lisp:deftype patch-vendor () 'common-lisp:string)
(common-lisp:deftype patch-version () 'common-lisp:string)
(common-lisp:deftype ping-status () 'common-lisp:string)
(common-lisp:deftype platform-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype platform-type-list ()
   '(trivial-types:proper-list platform-type))
 (common-lisp:defun |make-platform-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition policies-limit-exceeded-exception
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       policies-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policies-limit-exceeded-exception
                    'policies-limit-exceeded-exception-message)))
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:deftype policy-hash () 'common-lisp:string)
(common-lisp:deftype policy-id () 'common-lisp:string)
(common-lisp:deftype product () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass progress-counters common-lisp:nil
                       ((timed-out-steps :initarg :timed-out-steps :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %progress-counters-timed-out-steps :initform
                         common-lisp:nil)
                        (cancelled-steps :initarg :cancelled-steps :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %progress-counters-cancelled-steps :initform
                         common-lisp:nil)
                        (failed-steps :initarg :failed-steps :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %progress-counters-failed-steps :initform
                         common-lisp:nil)
                        (success-steps :initarg :success-steps :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %progress-counters-success-steps :initform
                         common-lisp:nil)
                        (total-steps :initarg :total-steps :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %progress-counters-total-steps :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'progress-counters 'make-progress-counters))
 (common-lisp:defun make-progress-counters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timed-out-steps cancelled-steps
                     failed-steps success-steps total-steps)
   (common-lisp:apply #'common-lisp:make-instance 'progress-counters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input progress-counters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input progress-counters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-steps))
      (common-lisp:list
       (common-lisp:cons "TotalSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-steps))
      (common-lisp:list
       (common-lisp:cons "SuccessSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-steps))
      (common-lisp:list
       (common-lisp:cons "FailedSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancelled-steps))
      (common-lisp:list
       (common-lisp:cons "CancelledSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-out-steps))
      (common-lisp:list
       (common-lisp:cons "TimedOutSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input progress-counters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-compliance-items-request common-lisp:nil
                       ((upload-type :initarg :upload-type :type
                         (common-lisp:or compliance-upload-type
                                         common-lisp:null)
                         :accessor %put-compliance-items-request-upload-type
                         :initform common-lisp:nil)
                        (item-content-hash :initarg :item-content-hash :type
                         (common-lisp:or compliance-item-content-hash
                                         common-lisp:null)
                         :accessor
                         %put-compliance-items-request-item-content-hash
                         :initform common-lisp:nil)
                        (items :initarg :items :type
                         (common-lisp:or compliance-item-entry-list
                                         common-lisp:null)
                         :accessor %put-compliance-items-request-items
                         :initform (common-lisp:error ":items is required"))
                        (execution-summary :initarg :execution-summary :type
                         (common-lisp:or compliance-execution-summary
                                         common-lisp:null)
                         :accessor
                         %put-compliance-items-request-execution-summary
                         :initform
                         (common-lisp:error ":execution-summary is required"))
                        (compliance-type :initarg :compliance-type :type
                         (common-lisp:or compliance-type-name common-lisp:null)
                         :accessor
                         %put-compliance-items-request-compliance-type
                         :initform
                         (common-lisp:error ":compliance-type is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or compliance-resource-type
                                         common-lisp:null)
                         :accessor %put-compliance-items-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or compliance-resource-id
                                         common-lisp:null)
                         :accessor %put-compliance-items-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-compliance-items-request
                    'make-put-compliance-items-request))
 (common-lisp:defun make-put-compliance-items-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upload-type item-content-hash items
                     execution-summary compliance-type resource-type
                     resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-compliance-items-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-compliance-items-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-compliance-items-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-summary))
      (common-lisp:list
       (common-lisp:cons "ExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-content-hash))
      (common-lisp:list
       (common-lisp:cons "ItemContentHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-type))
      (common-lisp:list
       (common-lisp:cons "UploadType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-compliance-items-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-compliance-items-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-compliance-items-result
                    'make-put-compliance-items-result))
 (common-lisp:defun make-put-compliance-items-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-compliance-items-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-compliance-items-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-compliance-items-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-compliance-items-result))
   common-lisp:nil))
(common-lisp:deftype put-inventory-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-inventory-request common-lisp:nil
                       ((items :initarg :items :type
                         (common-lisp:or inventory-item-list common-lisp:null)
                         :accessor %put-inventory-request-items :initform
                         (common-lisp:error ":items is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor %put-inventory-request-instance-id :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-inventory-request 'make-put-inventory-request))
 (common-lisp:defun make-put-inventory-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key items instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-inventory-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-inventory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-inventory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "Items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-inventory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-inventory-result common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or put-inventory-message
                                         common-lisp:null)
                         :accessor %put-inventory-result-message :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-inventory-result 'make-put-inventory-result))
 (common-lisp:defun make-put-inventory-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'put-inventory-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-inventory-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-inventory-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-inventory-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-parameter-request common-lisp:nil
                       ((data-type :initarg :data-type :type
                         (common-lisp:or parameter-data-type common-lisp:null)
                         :accessor %put-parameter-request-data-type :initform
                         common-lisp:nil)
                        (policies :initarg :policies :type
                         (common-lisp:or parameter-policies common-lisp:null)
                         :accessor %put-parameter-request-policies :initform
                         common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or parameter-tier common-lisp:null)
                         :accessor %put-parameter-request-tier :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %put-parameter-request-tags :initform common-lisp:nil)
                        (allowed-pattern :initarg :allowed-pattern :type
                         (common-lisp:or allowed-pattern common-lisp:null)
                         :accessor %put-parameter-request-allowed-pattern
                         :initform common-lisp:nil)
                        (overwrite :initarg :overwrite :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %put-parameter-request-overwrite :initform
                         common-lisp:nil)
                        (key-id :initarg :key-id :type
                         (common-lisp:or parameter-key-id common-lisp:null)
                         :accessor %put-parameter-request-key-id :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or parameter-type common-lisp:null)
                         :accessor %put-parameter-request-type :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or psparameter-value common-lisp:null)
                         :accessor %put-parameter-request-value :initform
                         (common-lisp:error ":value is required"))
                        (description :initarg :description :type
                         (common-lisp:or parameter-description
                                         common-lisp:null)
                         :accessor %put-parameter-request-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or psparameter-name common-lisp:null)
                         :accessor %put-parameter-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-parameter-request 'make-put-parameter-request))
 (common-lisp:defun make-put-parameter-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-type policies tier tags
                     allowed-pattern overwrite key-id type value description
                     name)
   (common-lisp:apply #'common-lisp:make-instance 'put-parameter-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-parameter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-parameter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overwrite))
      (common-lisp:list
       (common-lisp:cons "Overwrite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-pattern))
      (common-lisp:list
       (common-lisp:cons "AllowedPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-parameter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-parameter-result common-lisp:nil
                       ((tier :initarg :tier :type
                         (common-lisp:or parameter-tier common-lisp:null)
                         :accessor %put-parameter-result-tier :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or psparameter-version common-lisp:null)
                         :accessor %put-parameter-result-version :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-parameter-result 'make-put-parameter-result))
 (common-lisp:defun make-put-parameter-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tier version)
   (common-lisp:apply #'common-lisp:make-instance 'put-parameter-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-parameter-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-parameter-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-parameter-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-request common-lisp:nil
                       ((policy-hash :initarg :policy-hash :type
                         (common-lisp:or policy-hash common-lisp:null)
                         :accessor %put-resource-policy-request-policy-hash
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %put-resource-policy-request-policy-id :initform
                         common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %put-resource-policy-request-policy :initform
                         (common-lisp:error ":policy is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn-string common-lisp:null)
                         :accessor %put-resource-policy-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defun make-put-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-hash policy-id policy
                     resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-hash))
      (common-lisp:list
       (common-lisp:cons "PolicyHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-response common-lisp:nil
                       ((policy-hash :initarg :policy-hash :type
                         (common-lisp:or policy-hash common-lisp:null)
                         :accessor %put-resource-policy-response-policy-hash
                         :initform common-lisp:nil)
                        (policy-id :initarg :policy-id :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         %put-resource-policy-response-policy-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defun make-put-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-hash policy-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-hash))
      (common-lisp:list
       (common-lisp:cons "PolicyHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:deftype reboot-option () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype regions () '(trivial-types:proper-list region))
 (common-lisp:defun |make-regions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass register-default-patch-baseline-request common-lisp:nil
                       ((baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor
                         %register-default-patch-baseline-request-baseline-id
                         :initform
                         (common-lisp:error ":baseline-id is required"))))
 (common-lisp:export
  (common-lisp:list 'register-default-patch-baseline-request
                    'make-register-default-patch-baseline-request))
 (common-lisp:defun make-register-default-patch-baseline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-default-patch-baseline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-default-patch-baseline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-default-patch-baseline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-default-patch-baseline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-default-patch-baseline-result common-lisp:nil
                       ((baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor
                         %register-default-patch-baseline-result-baseline-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-default-patch-baseline-result
                    'make-register-default-patch-baseline-result))
 (common-lisp:defun make-register-default-patch-baseline-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-default-patch-baseline-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-default-patch-baseline-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-default-patch-baseline-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-default-patch-baseline-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-patch-baseline-for-patch-group-request
                       common-lisp:nil
                       ((patch-group :initarg :patch-group :type
                         (common-lisp:or patch-group common-lisp:null)
                         :accessor
                         %register-patch-baseline-for-patch-group-request-patch-group
                         :initform
                         (common-lisp:error ":patch-group is required"))
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor
                         %register-patch-baseline-for-patch-group-request-baseline-id
                         :initform
                         (common-lisp:error ":baseline-id is required"))))
 (common-lisp:export
  (common-lisp:list 'register-patch-baseline-for-patch-group-request
                    'make-register-patch-baseline-for-patch-group-request))
 (common-lisp:defun make-register-patch-baseline-for-patch-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-group baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-patch-baseline-for-patch-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-patch-baseline-for-patch-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-patch-baseline-for-patch-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-patch-baseline-for-patch-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-patch-baseline-for-patch-group-result
                       common-lisp:nil
                       ((patch-group :initarg :patch-group :type
                         (common-lisp:or patch-group common-lisp:null)
                         :accessor
                         %register-patch-baseline-for-patch-group-result-patch-group
                         :initform common-lisp:nil)
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor
                         %register-patch-baseline-for-patch-group-result-baseline-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-patch-baseline-for-patch-group-result
                    'make-register-patch-baseline-for-patch-group-result))
 (common-lisp:defun make-register-patch-baseline-for-patch-group-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key patch-group baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-patch-baseline-for-patch-group-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-patch-baseline-for-patch-group-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-patch-baseline-for-patch-group-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'patch-group))
      (common-lisp:list
       (common-lisp:cons "PatchGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-patch-baseline-for-patch-group-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-target-with-maintenance-window-request
                       common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %register-target-with-maintenance-window-request-client-token
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor
                         %register-target-with-maintenance-window-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor
                         %register-target-with-maintenance-window-request-name
                         :initform common-lisp:nil)
                        (owner-information :initarg :owner-information :type
                         (common-lisp:or owner-information common-lisp:null)
                         :accessor
                         %register-target-with-maintenance-window-request-owner-information
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %register-target-with-maintenance-window-request-targets
                         :initform (common-lisp:error ":targets is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or maintenance-window-resource-type
                                         common-lisp:null)
                         :accessor
                         %register-target-with-maintenance-window-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %register-target-with-maintenance-window-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'register-target-with-maintenance-window-request
                    'make-register-target-with-maintenance-window-request))
 (common-lisp:defun make-register-target-with-maintenance-window-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token description name
                     owner-information targets resource-type window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-target-with-maintenance-window-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-target-with-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-target-with-maintenance-window-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-information))
      (common-lisp:list
       (common-lisp:cons "OwnerInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-target-with-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-target-with-maintenance-window-result
                       common-lisp:nil
                       ((window-target-id :initarg :window-target-id :type
                         (common-lisp:or maintenance-window-target-id
                                         common-lisp:null)
                         :accessor
                         %register-target-with-maintenance-window-result-window-target-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-target-with-maintenance-window-result
                    'make-register-target-with-maintenance-window-result))
 (common-lisp:defun make-register-target-with-maintenance-window-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-target-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-target-with-maintenance-window-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-target-with-maintenance-window-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-target-with-maintenance-window-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-target-id))
      (common-lisp:list
       (common-lisp:cons "WindowTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-target-with-maintenance-window-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-task-with-maintenance-window-request
                       common-lisp:nil
                       ((alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-alarm-configuration
                         :initform common-lisp:nil)
                        (cutoff-behavior :initarg :cutoff-behavior :type
                         (common-lisp:or
                          maintenance-window-task-cutoff-behavior
                          common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-cutoff-behavior
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-client-token
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-name
                         :initform common-lisp:nil)
                        (logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-logging-info
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %register-task-with-maintenance-window-request-max-errors
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-max-concurrency
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or maintenance-window-task-priority
                                         common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-priority
                         :initform common-lisp:nil)
                        (task-invocation-parameters :initarg
                         :task-invocation-parameters :type
                         (common-lisp:or
                          maintenance-window-task-invocation-parameters
                          common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-task-invocation-parameters
                         :initform common-lisp:nil)
                        (task-parameters :initarg :task-parameters :type
                         (common-lisp:or maintenance-window-task-parameters
                                         common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-task-parameters
                         :initform common-lisp:nil)
                        (task-type :initarg :task-type :type
                         (common-lisp:or maintenance-window-task-type
                                         common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-task-type
                         :initform
                         (common-lisp:error ":task-type is required"))
                        (service-role-arn :initarg :service-role-arn :type
                         (common-lisp:or service-role common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-service-role-arn
                         :initform common-lisp:nil)
                        (task-arn :initarg :task-arn :type
                         (common-lisp:or maintenance-window-task-arn
                                         common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-task-arn
                         :initform (common-lisp:error ":task-arn is required"))
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %register-task-with-maintenance-window-request-targets
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'register-task-with-maintenance-window-request
                    'make-register-task-with-maintenance-window-request))
 (common-lisp:defun make-register-task-with-maintenance-window-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-configuration cutoff-behavior
                     client-token description name logging-info max-errors
                     max-concurrency priority task-invocation-parameters
                     task-parameters task-type service-role-arn task-arn
                     targets window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-task-with-maintenance-window-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-task-with-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-task-with-maintenance-window-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "TaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "TaskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-parameters))
      (common-lisp:list
       (common-lisp:cons "TaskParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-invocation-parameters))
      (common-lisp:list
       (common-lisp:cons "TaskInvocationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cutoff-behavior))
      (common-lisp:list
       (common-lisp:cons "CutoffBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-task-with-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-task-with-maintenance-window-result
                       common-lisp:nil
                       ((window-task-id :initarg :window-task-id :type
                         (common-lisp:or maintenance-window-task-id
                                         common-lisp:null)
                         :accessor
                         %register-task-with-maintenance-window-result-window-task-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-task-with-maintenance-window-result
                    'make-register-task-with-maintenance-window-result))
 (common-lisp:defun make-register-task-with-maintenance-window-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-task-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-task-with-maintenance-window-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-task-with-maintenance-window-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-task-with-maintenance-window-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-task-id))
      (common-lisp:list
       (common-lisp:cons "WindowTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-task-with-maintenance-window-result))
   common-lisp:nil))
(common-lisp:deftype registration-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass registration-metadata-item common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or registration-metadata-value
                                         common-lisp:null)
                         :accessor %registration-metadata-item-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or registration-metadata-key
                                         common-lisp:null)
                         :accessor %registration-metadata-item-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'registration-metadata-item
                    'make-registration-metadata-item))
 (common-lisp:defun make-registration-metadata-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'registration-metadata-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registration-metadata-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registration-metadata-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registration-metadata-item))
   common-lisp:nil))
(common-lisp:deftype registration-metadata-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype registration-metadata-list ()
   '(trivial-types:proper-list registration-metadata-item))
 (common-lisp:defun |make-registration-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            registration-metadata-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registration-metadata-value () 'common-lisp:string)
(common-lisp:deftype registrations-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass related-ops-item common-lisp:nil
                       ((ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %related-ops-item-ops-item-id :initform
                         (common-lisp:error ":ops-item-id is required"))))
 (common-lisp:export
  (common-lisp:list 'related-ops-item 'make-related-ops-item))
 (common-lisp:defun make-related-ops-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ops-item-id)
   (common-lisp:apply #'common-lisp:make-instance 'related-ops-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-ops-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-ops-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-ops-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype related-ops-items ()
   '(trivial-types:proper-list related-ops-item))
 (common-lisp:defun |make-related-ops-items|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list related-ops-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype remaining-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or key-list common-lisp:null) :accessor
                         %remove-tags-from-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         %remove-tags-from-resource-request-resource-id
                         :initform
                         (common-lisp:error ":resource-id is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type-for-tagging
                                         common-lisp:null)
                         :accessor
                         %remove-tags-from-resource-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-request
                    'make-remove-tags-from-resource-request))
 (common-lisp:defun make-remove-tags-from-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-id resource-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-from-resource-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-resource-result
                    'make-remove-tags-from-resource-result))
 (common-lisp:defun make-remove-tags-from-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-tags-from-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-tags-from-resource-result))
   common-lisp:nil))
(common-lisp:deftype require-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reset-service-setting-request common-lisp:nil
                       ((setting-id :initarg :setting-id :type
                         (common-lisp:or service-setting-id common-lisp:null)
                         :accessor %reset-service-setting-request-setting-id
                         :initform
                         (common-lisp:error ":setting-id is required"))))
 (common-lisp:export
  (common-lisp:list 'reset-service-setting-request
                    'make-reset-service-setting-request))
 (common-lisp:defun make-reset-service-setting-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key setting-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-service-setting-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-setting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-setting-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-id))
      (common-lisp:list
       (common-lisp:cons "SettingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-setting-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-service-setting-result common-lisp:nil
                       ((service-setting :initarg :service-setting :type
                         (common-lisp:or service-setting common-lisp:null)
                         :accessor
                         %reset-service-setting-result-service-setting
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reset-service-setting-result
                    'make-reset-service-setting-result))
 (common-lisp:defun make-reset-service-setting-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-setting)
   (common-lisp:apply #'common-lisp:make-instance 'reset-service-setting-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-setting-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-setting-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-setting))
      (common-lisp:list
       (common-lisp:cons "ServiceSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-setting-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolved-targets common-lisp:nil
                       ((truncated :initarg :truncated :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %resolved-targets-truncated :initform common-lisp:nil)
                        (parameter-values :initarg :parameter-values :type
                         (common-lisp:or target-parameter-list
                                         common-lisp:null)
                         :accessor %resolved-targets-parameter-values :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resolved-targets 'make-resolved-targets))
 (common-lisp:defun make-resolved-targets
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key truncated parameter-values)
   (common-lisp:apply #'common-lisp:make-instance 'resolved-targets
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolved-targets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolved-targets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-values))
      (common-lisp:list
       (common-lisp:cons "ParameterValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'truncated))
      (common-lisp:list
       (common-lisp:cons "Truncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolved-targets))
   common-lisp:nil))
(common-lisp:deftype resource-arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-compliance-summary-item common-lisp:nil
                       ((non-compliant-summary :initarg :non-compliant-summary
                         :type
                         (common-lisp:or non-compliant-summary
                                         common-lisp:null)
                         :accessor
                         %resource-compliance-summary-item-non-compliant-summary
                         :initform common-lisp:nil)
                        (compliant-summary :initarg :compliant-summary :type
                         (common-lisp:or compliant-summary common-lisp:null)
                         :accessor
                         %resource-compliance-summary-item-compliant-summary
                         :initform common-lisp:nil)
                        (execution-summary :initarg :execution-summary :type
                         (common-lisp:or compliance-execution-summary
                                         common-lisp:null)
                         :accessor
                         %resource-compliance-summary-item-execution-summary
                         :initform common-lisp:nil)
                        (overall-severity :initarg :overall-severity :type
                         (common-lisp:or compliance-severity common-lisp:null)
                         :accessor
                         %resource-compliance-summary-item-overall-severity
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or compliance-status common-lisp:null)
                         :accessor %resource-compliance-summary-item-status
                         :initform common-lisp:nil)
                        (resource-id :initarg :resource-id :type
                         (common-lisp:or compliance-resource-id
                                         common-lisp:null)
                         :accessor
                         %resource-compliance-summary-item-resource-id
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or compliance-resource-type
                                         common-lisp:null)
                         :accessor
                         %resource-compliance-summary-item-resource-type
                         :initform common-lisp:nil)
                        (compliance-type :initarg :compliance-type :type
                         (common-lisp:or compliance-type-name common-lisp:null)
                         :accessor
                         %resource-compliance-summary-item-compliance-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-compliance-summary-item
                    'make-resource-compliance-summary-item))
 (common-lisp:defun make-resource-compliance-summary-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key non-compliant-summary compliant-summary
                     execution-summary overall-severity status resource-id
                     resource-type compliance-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-compliance-summary-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-compliance-summary-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-compliance-summary-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overall-severity))
      (common-lisp:list
       (common-lisp:cons "OverallSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-summary))
      (common-lisp:list
       (common-lisp:cons "ExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliant-summary))
      (common-lisp:list
       (common-lisp:cons "CompliantSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-summary))
      (common-lisp:list
       (common-lisp:cons "NonCompliantSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-compliance-summary-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-compliance-summary-item-list ()
   '(trivial-types:proper-list resource-compliance-summary-item))
 (common-lisp:defun |make-resource-compliance-summary-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-compliance-summary-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-count () 'common-lisp:integer)
(common-lisp:deftype resource-count-by-status () 'common-lisp:string)
(common-lisp:deftype resource-data-sync-awskmskey-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-data-sync-already-exists-exception
     (ssm-error)
     ((sync-name :initarg :sync-name :initform common-lisp:nil :reader
       resource-data-sync-already-exists-exception-sync-name)))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-already-exists-exception
                    'resource-data-sync-already-exists-exception-sync-name)))
(common-lisp:progn
 (common-lisp:defclass resource-data-sync-aws-organizations-source
                       common-lisp:nil
                       ((organizational-units :initarg :organizational-units
                         :type
                         (common-lisp:or
                          resource-data-sync-organizational-unit-list
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-aws-organizations-source-organizational-units
                         :initform common-lisp:nil)
                        (organization-source-type :initarg
                         :organization-source-type :type
                         (common-lisp:or
                          resource-data-sync-organization-source-type
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-aws-organizations-source-organization-source-type
                         :initform
                         (common-lisp:error
                          ":organization-source-type is required"))))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-aws-organizations-source
                    'make-resource-data-sync-aws-organizations-source))
 (common-lisp:defun make-resource-data-sync-aws-organizations-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-units
                     organization-source-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-data-sync-aws-organizations-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-aws-organizations-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-aws-organizations-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-source-type))
      (common-lisp:list
       (common-lisp:cons "OrganizationSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-units))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-aws-organizations-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-data-sync-conflict-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-data-sync-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-conflict-exception
                    'resource-data-sync-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-data-sync-count-exceeded-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-data-sync-count-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-count-exceeded-exception
                    'resource-data-sync-count-exceeded-exception-message)))
(common-lisp:deftype resource-data-sync-created-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-data-sync-destination-data-sharing
                       common-lisp:nil
                       ((destination-data-sharing-type :initarg
                         :destination-data-sharing-type :type
                         (common-lisp:or
                          resource-data-sync-destination-data-sharing-type
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-destination-data-sharing-destination-data-sharing-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-destination-data-sharing
                    'make-resource-data-sync-destination-data-sharing))
 (common-lisp:defun make-resource-data-sync-destination-data-sharing
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-data-sharing-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-data-sync-destination-data-sharing
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-destination-data-sharing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-destination-data-sharing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-data-sharing-type))
      (common-lisp:list
       (common-lisp:cons "DestinationDataSharingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-destination-data-sharing))
   common-lisp:nil))
(common-lisp:deftype resource-data-sync-destination-data-sharing-type ()
  'common-lisp:string)
(common-lisp:deftype resource-data-sync-enable-all-ops-data-sources ()
  'common-lisp:boolean)
(common-lisp:deftype resource-data-sync-include-future-regions ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition resource-data-sync-invalid-configuration-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-data-sync-invalid-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-invalid-configuration-exception
                    'resource-data-sync-invalid-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resource-data-sync-item common-lisp:nil
                       ((last-sync-status-message :initarg
                         :last-sync-status-message :type
                         (common-lisp:or last-resource-data-sync-message
                                         common-lisp:null)
                         :accessor
                         %resource-data-sync-item-last-sync-status-message
                         :initform common-lisp:nil)
                        (sync-created-time :initarg :sync-created-time :type
                         (common-lisp:or resource-data-sync-created-time
                                         common-lisp:null)
                         :accessor %resource-data-sync-item-sync-created-time
                         :initform common-lisp:nil)
                        (last-status :initarg :last-status :type
                         (common-lisp:or last-resource-data-sync-status
                                         common-lisp:null)
                         :accessor %resource-data-sync-item-last-status
                         :initform common-lisp:nil)
                        (sync-last-modified-time :initarg
                         :sync-last-modified-time :type
                         (common-lisp:or resource-data-sync-last-modified-time
                                         common-lisp:null)
                         :accessor
                         %resource-data-sync-item-sync-last-modified-time
                         :initform common-lisp:nil)
                        (last-successful-sync-time :initarg
                         :last-successful-sync-time :type
                         (common-lisp:or
                          last-successful-resource-data-sync-time
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-item-last-successful-sync-time
                         :initform common-lisp:nil)
                        (last-sync-time :initarg :last-sync-time :type
                         (common-lisp:or last-resource-data-sync-time
                                         common-lisp:null)
                         :accessor %resource-data-sync-item-last-sync-time
                         :initform common-lisp:nil)
                        (s3destination :initarg :s3destination :type
                         (common-lisp:or resource-data-sync-s3destination
                                         common-lisp:null)
                         :accessor %resource-data-sync-item-s3destination
                         :initform common-lisp:nil)
                        (sync-source :initarg :sync-source :type
                         (common-lisp:or resource-data-sync-source-with-state
                                         common-lisp:null)
                         :accessor %resource-data-sync-item-sync-source
                         :initform common-lisp:nil)
                        (sync-type :initarg :sync-type :type
                         (common-lisp:or resource-data-sync-type
                                         common-lisp:null)
                         :accessor %resource-data-sync-item-sync-type :initform
                         common-lisp:nil)
                        (sync-name :initarg :sync-name :type
                         (common-lisp:or resource-data-sync-name
                                         common-lisp:null)
                         :accessor %resource-data-sync-item-sync-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-item 'make-resource-data-sync-item))
 (common-lisp:defun make-resource-data-sync-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-sync-status-message
                     sync-created-time last-status sync-last-modified-time
                     last-successful-sync-time last-sync-time s3destination
                     sync-source sync-type sync-name)
   (common-lisp:apply #'common-lisp:make-instance 'resource-data-sync-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-name))
      (common-lisp:list
       (common-lisp:cons "SyncName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "SyncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3destination))
      (common-lisp:list
       (common-lisp:cons "S3Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-sync-time))
      (common-lisp:list
       (common-lisp:cons "LastSyncTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-sync-time))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulSyncTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sync-last-modified-time))
      (common-lisp:list
       (common-lisp:cons "SyncLastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "LastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-created-time))
      (common-lisp:list
       (common-lisp:cons "SyncCreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-sync-status-message))
      (common-lisp:list
       (common-lisp:cons "LastSyncStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-data-sync-item-list ()
   '(trivial-types:proper-list resource-data-sync-item))
 (common-lisp:defun |make-resource-data-sync-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-data-sync-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-data-sync-last-modified-time ()
  'common-lisp:string)
(common-lisp:deftype resource-data-sync-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-data-sync-not-found-exception
     (ssm-error)
     ((sync-name :initarg :sync-name :initform common-lisp:nil :reader
       resource-data-sync-not-found-exception-sync-name)
      (sync-type :initarg :sync-type :initform common-lisp:nil :reader
       resource-data-sync-not-found-exception-sync-type)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-data-sync-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-not-found-exception
                    'resource-data-sync-not-found-exception-sync-name
                    'resource-data-sync-not-found-exception-sync-type
                    'resource-data-sync-not-found-exception-message)))
(common-lisp:deftype resource-data-sync-organization-source-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-data-sync-organizational-unit common-lisp:nil
                       ((organizational-unit-id :initarg
                         :organizational-unit-id :type
                         (common-lisp:or
                          resource-data-sync-organizational-unit-id
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-organizational-unit-organizational-unit-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-organizational-unit
                    'make-resource-data-sync-organizational-unit))
 (common-lisp:defun make-resource-data-sync-organizational-unit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-unit-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-data-sync-organizational-unit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-organizational-unit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-organizational-unit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-organizational-unit))
   common-lisp:nil))
(common-lisp:deftype resource-data-sync-organizational-unit-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-data-sync-organizational-unit-list ()
   '(trivial-types:proper-list resource-data-sync-organizational-unit))
 (common-lisp:defun |make-resource-data-sync-organizational-unit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-data-sync-organizational-unit))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-data-sync-s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-data-sync-s3destination common-lisp:nil
                       ((destination-data-sharing :initarg
                         :destination-data-sharing :type
                         (common-lisp:or
                          resource-data-sync-destination-data-sharing
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-s3destination-destination-data-sharing
                         :initform common-lisp:nil)
                        (awskmskey-arn :initarg :awskmskey-arn :type
                         (common-lisp:or resource-data-sync-awskmskey-arn
                                         common-lisp:null)
                         :accessor
                         %resource-data-sync-s3destination-awskmskey-arn
                         :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or resource-data-sync-s3region
                                         common-lisp:null)
                         :accessor %resource-data-sync-s3destination-region
                         :initform (common-lisp:error ":region is required"))
                        (sync-format :initarg :sync-format :type
                         (common-lisp:or resource-data-sync-s3format
                                         common-lisp:null)
                         :accessor
                         %resource-data-sync-s3destination-sync-format
                         :initform
                         (common-lisp:error ":sync-format is required"))
                        (prefix :initarg :prefix :type
                         (common-lisp:or resource-data-sync-s3prefix
                                         common-lisp:null)
                         :accessor %resource-data-sync-s3destination-prefix
                         :initform common-lisp:nil)
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or resource-data-sync-s3bucket-name
                                         common-lisp:null)
                         :accessor
                         %resource-data-sync-s3destination-bucket-name
                         :initform
                         (common-lisp:error ":bucket-name is required"))))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-s3destination
                    'make-resource-data-sync-s3destination))
 (common-lisp:defun make-resource-data-sync-s3destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-data-sharing awskmskey-arn
                     region sync-format prefix bucket-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-data-sync-s3destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-s3destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-s3destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-format))
      (common-lisp:list
       (common-lisp:cons "SyncFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awskmskey-arn))
      (common-lisp:list
       (common-lisp:cons "AWSKMSKeyARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-data-sharing))
      (common-lisp:list
       (common-lisp:cons "DestinationDataSharing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-s3destination))
   common-lisp:nil))
(common-lisp:deftype resource-data-sync-s3format () 'common-lisp:string)
(common-lisp:deftype resource-data-sync-s3prefix () 'common-lisp:string)
(common-lisp:deftype resource-data-sync-s3region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-data-sync-source common-lisp:nil
                       ((enable-all-ops-data-sources :initarg
                         :enable-all-ops-data-sources :type
                         (common-lisp:or
                          resource-data-sync-enable-all-ops-data-sources
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-source-enable-all-ops-data-sources
                         :initform common-lisp:nil)
                        (include-future-regions :initarg
                         :include-future-regions :type
                         (common-lisp:or
                          resource-data-sync-include-future-regions
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-source-include-future-regions
                         :initform common-lisp:nil)
                        (source-regions :initarg :source-regions :type
                         (common-lisp:or resource-data-sync-source-region-list
                                         common-lisp:null)
                         :accessor %resource-data-sync-source-source-regions
                         :initform
                         (common-lisp:error ":source-regions is required"))
                        (aws-organizations-source :initarg
                         :aws-organizations-source :type
                         (common-lisp:or
                          resource-data-sync-aws-organizations-source
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-source-aws-organizations-source
                         :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or resource-data-sync-source-type
                                         common-lisp:null)
                         :accessor %resource-data-sync-source-source-type
                         :initform
                         (common-lisp:error ":source-type is required"))))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-source
                    'make-resource-data-sync-source))
 (common-lisp:defun make-resource-data-sync-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-all-ops-data-sources
                     include-future-regions source-regions
                     aws-organizations-source source-type)
   (common-lisp:apply #'common-lisp:make-instance 'resource-data-sync-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-organizations-source))
      (common-lisp:list
       (common-lisp:cons "AwsOrganizationsSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-regions))
      (common-lisp:list
       (common-lisp:cons "SourceRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-future-regions))
      (common-lisp:list
       (common-lisp:cons "IncludeFutureRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-all-ops-data-sources))
      (common-lisp:list
       (common-lisp:cons "EnableAllOpsDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-source))
   common-lisp:nil))
(common-lisp:deftype resource-data-sync-source-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-data-sync-source-region-list ()
   '(trivial-types:proper-list resource-data-sync-source-region))
 (common-lisp:defun |make-resource-data-sync-source-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-data-sync-source-region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-data-sync-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-data-sync-source-with-state common-lisp:nil
                       ((enable-all-ops-data-sources :initarg
                         :enable-all-ops-data-sources :type
                         (common-lisp:or
                          resource-data-sync-enable-all-ops-data-sources
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-source-with-state-enable-all-ops-data-sources
                         :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or resource-data-sync-state
                                         common-lisp:null)
                         :accessor %resource-data-sync-source-with-state-state
                         :initform common-lisp:nil)
                        (include-future-regions :initarg
                         :include-future-regions :type
                         (common-lisp:or
                          resource-data-sync-include-future-regions
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-source-with-state-include-future-regions
                         :initform common-lisp:nil)
                        (source-regions :initarg :source-regions :type
                         (common-lisp:or resource-data-sync-source-region-list
                                         common-lisp:null)
                         :accessor
                         %resource-data-sync-source-with-state-source-regions
                         :initform common-lisp:nil)
                        (aws-organizations-source :initarg
                         :aws-organizations-source :type
                         (common-lisp:or
                          resource-data-sync-aws-organizations-source
                          common-lisp:null)
                         :accessor
                         %resource-data-sync-source-with-state-aws-organizations-source
                         :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or resource-data-sync-source-type
                                         common-lisp:null)
                         :accessor
                         %resource-data-sync-source-with-state-source-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-data-sync-source-with-state
                    'make-resource-data-sync-source-with-state))
 (common-lisp:defun make-resource-data-sync-source-with-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-all-ops-data-sources state
                     include-future-regions source-regions
                     aws-organizations-source source-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'resource-data-sync-source-with-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-source-with-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-source-with-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-organizations-source))
      (common-lisp:list
       (common-lisp:cons "AwsOrganizationsSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-regions))
      (common-lisp:list
       (common-lisp:cons "SourceRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-future-regions))
      (common-lisp:list
       (common-lisp:cons "IncludeFutureRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-all-ops-data-sources))
      (common-lisp:list
       (common-lisp:cons "EnableAllOpsDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-data-sync-source-with-state))
   common-lisp:nil))
(common-lisp:deftype resource-data-sync-state () 'common-lisp:string)
(common-lisp:deftype resource-data-sync-type () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded-exception
                    'resource-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-policy-conflict-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-policy-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-policy-conflict-exception
                    'resource-policy-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-policy-invalid-parameter-exception
     (ssm-error)
     ((parameter-names :initarg :parameter-names :initform common-lisp:nil
       :reader resource-policy-invalid-parameter-exception-parameter-names)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-policy-invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-policy-invalid-parameter-exception
                    'resource-policy-invalid-parameter-exception-parameter-names
                    'resource-policy-invalid-parameter-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-policy-limit-exceeded-exception
     (ssm-error)
     ((limit :initarg :limit :initform common-lisp:nil :reader
       resource-policy-limit-exceeded-exception-limit)
      (limit-type :initarg :limit-type :initform common-lisp:nil :reader
       resource-policy-limit-exceeded-exception-limit-type)
      (message :initarg :message :initform common-lisp:nil :reader
       resource-policy-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-policy-limit-exceeded-exception
                    'resource-policy-limit-exceeded-exception-limit
                    'resource-policy-limit-exceeded-exception-limit-type
                    'resource-policy-limit-exceeded-exception-message)))
(common-lisp:deftype resource-policy-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype resource-policy-parameter-names-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-resource-policy-parameter-names-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype resource-type-for-tagging () 'common-lisp:string)
(common-lisp:deftype response-code () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass result-attribute common-lisp:nil
                       ((type-name :initarg :type-name :type
                         (common-lisp:or inventory-item-type-name
                                         common-lisp:null)
                         :accessor %result-attribute-type-name :initform
                         (common-lisp:error ":type-name is required"))))
 (common-lisp:export
  (common-lisp:list 'result-attribute 'make-result-attribute))
 (common-lisp:defun make-result-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-name)
   (common-lisp:apply #'common-lisp:make-instance 'result-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype result-attribute-list ()
   '(trivial-types:proper-list result-attribute))
 (common-lisp:defun |make-result-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resume-session-request common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %resume-session-request-session-id :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'resume-session-request 'make-resume-session-request))
 (common-lisp:defun make-resume-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id)
   (common-lisp:apply #'common-lisp:make-instance 'resume-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resume-session-response common-lisp:nil
                       ((stream-url :initarg :stream-url :type
                         (common-lisp:or stream-url common-lisp:null) :accessor
                         %resume-session-response-stream-url :initform
                         common-lisp:nil)
                        (token-value :initarg :token-value :type
                         (common-lisp:or token-value common-lisp:null)
                         :accessor %resume-session-response-token-value
                         :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %resume-session-response-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resume-session-response 'make-resume-session-response))
 (common-lisp:defun make-resume-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream-url token-value session-id)
   (common-lisp:apply #'common-lisp:make-instance 'resume-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-value))
      (common-lisp:list
       (common-lisp:cons "TokenValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-url))
      (common-lisp:list
       (common-lisp:cons "StreamUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass review-information common-lisp:nil
                       ((reviewer :initarg :reviewer :type
                         (common-lisp:or reviewer common-lisp:null) :accessor
                         %review-information-reviewer :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or review-status common-lisp:null)
                         :accessor %review-information-status :initform
                         common-lisp:nil)
                        (reviewed-time :initarg :reviewed-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %review-information-reviewed-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'review-information 'make-review-information))
 (common-lisp:defun make-review-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reviewer status reviewed-time)
   (common-lisp:apply #'common-lisp:make-instance 'review-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input review-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input review-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewed-time))
      (common-lisp:list
       (common-lisp:cons "ReviewedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reviewer))
      (common-lisp:list
       (common-lisp:cons "Reviewer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input review-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype review-information-list ()
   '(trivial-types:proper-list review-information))
 (common-lisp:defun |make-review-information-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list review-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype review-status () 'common-lisp:string)
(common-lisp:deftype reviewer () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass runbook common-lisp:nil
                       ((target-locations :initarg :target-locations :type
                         (common-lisp:or target-locations common-lisp:null)
                         :accessor %runbook-target-locations :initform
                         common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %runbook-max-errors :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor %runbook-max-concurrency :initform
                         common-lisp:nil)
                        (target-maps :initarg :target-maps :type
                         (common-lisp:or target-maps common-lisp:null)
                         :accessor %runbook-target-maps :initform
                         common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %runbook-targets :initform common-lisp:nil)
                        (target-parameter-name :initarg :target-parameter-name
                         :type
                         (common-lisp:or automation-parameter-key
                                         common-lisp:null)
                         :accessor %runbook-target-parameter-name :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor %runbook-parameters :initform
                         common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %runbook-document-version :initform
                         common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %runbook-document-name :initform
                         (common-lisp:error ":document-name is required"))))
 (common-lisp:export (common-lisp:list 'runbook 'make-runbook))
 (common-lisp:defun make-runbook
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-locations max-errors
                     max-concurrency target-maps targets target-parameter-name
                     parameters document-version document-name)
   (common-lisp:apply #'common-lisp:make-instance 'runbook
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runbook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runbook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-parameter-name))
      (common-lisp:list
       (common-lisp:cons "TargetParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-maps))
      (common-lisp:list
       (common-lisp:cons "TargetMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-locations))
      (common-lisp:list
       (common-lisp:cons "TargetLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runbook))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype runbooks () '(trivial-types:proper-list runbook))
 (common-lisp:defun |make-runbooks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list runbook))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3output-location common-lisp:nil
                       ((output-s3key-prefix :initarg :output-s3key-prefix
                         :type (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor %s3output-location-output-s3key-prefix
                         :initform common-lisp:nil)
                        (output-s3bucket-name :initarg :output-s3bucket-name
                         :type (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %s3output-location-output-s3bucket-name
                         :initform common-lisp:nil)
                        (output-s3region :initarg :output-s3region :type
                         (common-lisp:or s3region common-lisp:null) :accessor
                         %s3output-location-output-s3region :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3output-location 'make-s3output-location))
 (common-lisp:defun make-s3output-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-s3key-prefix output-s3bucket-name
                     output-s3region)
   (common-lisp:apply #'common-lisp:make-instance 's3output-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3output-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3output-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3region))
      (common-lisp:list
       (common-lisp:cons "OutputS3Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "OutputS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3output-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3output-url common-lisp:nil
                       ((output-url :initarg :output-url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %s3output-url-output-url :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3output-url 'make-s3output-url))
 (common-lisp:defun make-s3output-url
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-url)
   (common-lisp:apply #'common-lisp:make-instance 's3output-url
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3output-url))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3output-url))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-url))
      (common-lisp:list
       (common-lisp:cons "OutputUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3output-url))
   common-lisp:nil))
(common-lisp:deftype s3region () 'common-lisp:string)
(common-lisp:deftype schedule-expression () 'common-lisp:string)
(common-lisp:deftype schedule-offset () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass scheduled-window-execution common-lisp:nil
                       ((execution-time :initarg :execution-time :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor %scheduled-window-execution-execution-time
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %scheduled-window-execution-name :initform
                         common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %scheduled-window-execution-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scheduled-window-execution
                    'make-scheduled-window-execution))
 (common-lisp:defun make-scheduled-window-execution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key execution-time name window-id)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-window-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-window-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-window-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-window-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-window-execution-list ()
   '(trivial-types:proper-list scheduled-window-execution))
 (common-lisp:defun |make-scheduled-window-execution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            scheduled-window-execution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass send-automation-signal-request common-lisp:nil
                       ((payload :initarg :payload :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor %send-automation-signal-request-payload
                         :initform common-lisp:nil)
                        (signal-type :initarg :signal-type :type
                         (common-lisp:or signal-type common-lisp:null)
                         :accessor %send-automation-signal-request-signal-type
                         :initform
                         (common-lisp:error ":signal-type is required"))
                        (automation-execution-id :initarg
                         :automation-execution-id :type
                         (common-lisp:or automation-execution-id
                                         common-lisp:null)
                         :accessor
                         %send-automation-signal-request-automation-execution-id
                         :initform
                         (common-lisp:error
                          ":automation-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'send-automation-signal-request
                    'make-send-automation-signal-request))
 (common-lisp:defun make-send-automation-signal-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key payload signal-type
                     automation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-automation-signal-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-automation-signal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-automation-signal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-id))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signal-type))
      (common-lisp:list
       (common-lisp:cons "SignalType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-automation-signal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-automation-signal-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'send-automation-signal-result
                    'make-send-automation-signal-result))
 (common-lisp:defun make-send-automation-signal-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-automation-signal-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-automation-signal-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-automation-signal-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-automation-signal-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-command-request common-lisp:nil
                       ((alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor %send-command-request-alarm-configuration
                         :initform common-lisp:nil)
                        (cloud-watch-output-config :initarg
                         :cloud-watch-output-config :type
                         (common-lisp:or cloud-watch-output-config
                                         common-lisp:null)
                         :accessor
                         %send-command-request-cloud-watch-output-config
                         :initform common-lisp:nil)
                        (notification-config :initarg :notification-config
                         :type
                         (common-lisp:or notification-config common-lisp:null)
                         :accessor %send-command-request-notification-config
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :type
                         (common-lisp:or service-role common-lisp:null)
                         :accessor %send-command-request-service-role-arn
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %send-command-request-max-errors :initform
                         common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor %send-command-request-max-concurrency
                         :initform common-lisp:nil)
                        (output-s3key-prefix :initarg :output-s3key-prefix
                         :type (common-lisp:or s3key-prefix common-lisp:null)
                         :accessor %send-command-request-output-s3key-prefix
                         :initform common-lisp:nil)
                        (output-s3bucket-name :initarg :output-s3bucket-name
                         :type (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %send-command-request-output-s3bucket-name
                         :initform common-lisp:nil)
                        (output-s3region :initarg :output-s3region :type
                         (common-lisp:or s3region common-lisp:null) :accessor
                         %send-command-request-output-s3region :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %send-command-request-parameters :initform
                         common-lisp:nil)
                        (comment :initarg :comment :type
                         (common-lisp:or comment common-lisp:null) :accessor
                         %send-command-request-comment :initform
                         common-lisp:nil)
                        (timeout-seconds :initarg :timeout-seconds :type
                         (common-lisp:or timeout-seconds common-lisp:null)
                         :accessor %send-command-request-timeout-seconds
                         :initform common-lisp:nil)
                        (document-hash-type :initarg :document-hash-type :type
                         (common-lisp:or document-hash-type common-lisp:null)
                         :accessor %send-command-request-document-hash-type
                         :initform common-lisp:nil)
                        (document-hash :initarg :document-hash :type
                         (common-lisp:or document-hash common-lisp:null)
                         :accessor %send-command-request-document-hash
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %send-command-request-document-version
                         :initform common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %send-command-request-document-name
                         :initform
                         (common-lisp:error ":document-name is required"))
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %send-command-request-targets :initform
                         common-lisp:nil)
                        (instance-ids :initarg :instance-ids :type
                         (common-lisp:or instance-id-list common-lisp:null)
                         :accessor %send-command-request-instance-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-command-request 'make-send-command-request))
 (common-lisp:defun make-send-command-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-configuration
                     cloud-watch-output-config notification-config
                     service-role-arn max-errors max-concurrency
                     output-s3key-prefix output-s3bucket-name output-s3region
                     parameters comment timeout-seconds document-hash-type
                     document-hash document-version document-name targets
                     instance-ids)
   (common-lisp:apply #'common-lisp:make-instance 'send-command-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-command-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-command-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-ids))
      (common-lisp:list
       (common-lisp:cons "InstanceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-hash))
      (common-lisp:list
       (common-lisp:cons "DocumentHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-hash-type))
      (common-lisp:list
       (common-lisp:cons "DocumentHashType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3region))
      (common-lisp:list
       (common-lisp:cons "OutputS3Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-s3bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputS3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "OutputS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-config))
      (common-lisp:list
       (common-lisp:cons "NotificationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-output-config))
      (common-lisp:list
       (common-lisp:cons "CloudWatchOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-command-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-command-result common-lisp:nil
                       ((command :initarg :command :type
                         (common-lisp:or command common-lisp:null) :accessor
                         %send-command-result-command :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-command-result 'make-send-command-result))
 (common-lisp:defun make-send-command-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key command)
   (common-lisp:apply #'common-lisp:make-instance 'send-command-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input send-command-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input send-command-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input send-command-result))
   common-lisp:nil))
(common-lisp:deftype service-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-setting common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-setting-status :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-setting-arn :initform common-lisp:nil)
                        (last-modified-user :initarg :last-modified-user :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-setting-last-modified-user :initform
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %service-setting-last-modified-date :initform
                         common-lisp:nil)
                        (setting-value :initarg :setting-value :type
                         (common-lisp:or service-setting-value
                                         common-lisp:null)
                         :accessor %service-setting-setting-value :initform
                         common-lisp:nil)
                        (setting-id :initarg :setting-id :type
                         (common-lisp:or service-setting-id common-lisp:null)
                         :accessor %service-setting-setting-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'service-setting 'make-service-setting))
 (common-lisp:defun make-service-setting
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status arn last-modified-user
                     last-modified-date setting-value setting-id)
   (common-lisp:apply #'common-lisp:make-instance 'service-setting
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-id))
      (common-lisp:list
       (common-lisp:cons "SettingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-value))
      (common-lisp:list
       (common-lisp:cons "SettingValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-user))
      (common-lisp:list
       (common-lisp:cons "LastModifiedUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-setting))
   common-lisp:nil))
(common-lisp:deftype service-setting-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-setting-not-found
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-setting-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'service-setting-not-found
                    'service-setting-not-found-message)))
(common-lisp:deftype service-setting-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass session common-lisp:nil
                       ((max-session-duration :initarg :max-session-duration
                         :type
                         (common-lisp:or max-session-duration common-lisp:null)
                         :accessor %session-max-session-duration :initform
                         common-lisp:nil)
                        (output-url :initarg :output-url :type
                         (common-lisp:or session-manager-output-url
                                         common-lisp:null)
                         :accessor %session-output-url :initform
                         common-lisp:nil)
                        (details :initarg :details :type
                         (common-lisp:or session-details common-lisp:null)
                         :accessor %session-details :initform common-lisp:nil)
                        (reason :initarg :reason :type
                         (common-lisp:or session-reason common-lisp:null)
                         :accessor %session-reason :initform common-lisp:nil)
                        (owner :initarg :owner :type
                         (common-lisp:or session-owner common-lisp:null)
                         :accessor %session-owner :initform common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %session-document-name :initform
                         common-lisp:nil)
                        (end-date :initarg :end-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %session-end-date :initform common-lisp:nil)
                        (start-date :initarg :start-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %session-start-date :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or session-status common-lisp:null)
                         :accessor %session-status :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or session-target common-lisp:null)
                         :accessor %session-target :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %session-session-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'session 'make-session))
 (common-lisp:defun make-session
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-session-duration output-url details
                     reason owner document-name end-date start-date status
                     target session-id)
   (common-lisp:apply #'common-lisp:make-instance 'session
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-url))
      (common-lisp:list
       (common-lisp:cons "OutputUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-duration))
      (common-lisp:list
       (common-lisp:cons "MaxSessionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session))
   common-lisp:nil))
(common-lisp:deftype session-details () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass session-filter common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or session-filter-value common-lisp:null)
                         :accessor %session-filter-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or session-filter-key common-lisp:null)
                         :accessor %session-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'session-filter 'make-session-filter))
 (common-lisp:defun make-session-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'session-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-filter))
   common-lisp:nil))
(common-lisp:deftype session-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype session-filter-list ()
   '(trivial-types:proper-list session-filter))
 (common-lisp:defun |make-session-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype session-filter-value () 'common-lisp:string)
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype session-list () '(trivial-types:proper-list session))
 (common-lisp:defun |make-session-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype session-manager-cloud-watch-output-url ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass session-manager-output-url common-lisp:nil
                       ((cloud-watch-output-url :initarg
                         :cloud-watch-output-url :type
                         (common-lisp:or session-manager-cloud-watch-output-url
                                         common-lisp:null)
                         :accessor
                         %session-manager-output-url-cloud-watch-output-url
                         :initform common-lisp:nil)
                        (s3output-url :initarg :s3output-url :type
                         (common-lisp:or session-manager-s3output-url
                                         common-lisp:null)
                         :accessor %session-manager-output-url-s3output-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'session-manager-output-url
                    'make-session-manager-output-url))
 (common-lisp:defun make-session-manager-output-url
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-output-url s3output-url)
   (common-lisp:apply #'common-lisp:make-instance 'session-manager-output-url
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-manager-output-url))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-manager-output-url))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-url))
      (common-lisp:list
       (common-lisp:cons "S3OutputUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-output-url))
      (common-lisp:list
       (common-lisp:cons "CloudWatchOutputUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-manager-output-url))
   common-lisp:nil))
(common-lisp:deftype session-manager-parameter-name () 'common-lisp:string)
(common-lisp:deftype session-manager-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype session-manager-parameter-value-list ()
   '(trivial-types:proper-list session-manager-parameter-value))
 (common-lisp:defun |make-session-manager-parameter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            session-manager-parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype session-manager-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-session-manager-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype session-manager-s3output-url () 'common-lisp:string)
(common-lisp:deftype session-max-results () 'common-lisp:integer)
(common-lisp:deftype session-owner () 'common-lisp:string)
(common-lisp:deftype session-reason () 'common-lisp:string)
(common-lisp:deftype session-state () 'common-lisp:string)
(common-lisp:deftype session-status () 'common-lisp:string)
(common-lisp:deftype session-target () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass severity-summary common-lisp:nil
                       ((unspecified-count :initarg :unspecified-count :type
                         (common-lisp:or compliance-summary-count
                                         common-lisp:null)
                         :accessor %severity-summary-unspecified-count
                         :initform common-lisp:nil)
                        (informational-count :initarg :informational-count
                         :type
                         (common-lisp:or compliance-summary-count
                                         common-lisp:null)
                         :accessor %severity-summary-informational-count
                         :initform common-lisp:nil)
                        (low-count :initarg :low-count :type
                         (common-lisp:or compliance-summary-count
                                         common-lisp:null)
                         :accessor %severity-summary-low-count :initform
                         common-lisp:nil)
                        (medium-count :initarg :medium-count :type
                         (common-lisp:or compliance-summary-count
                                         common-lisp:null)
                         :accessor %severity-summary-medium-count :initform
                         common-lisp:nil)
                        (high-count :initarg :high-count :type
                         (common-lisp:or compliance-summary-count
                                         common-lisp:null)
                         :accessor %severity-summary-high-count :initform
                         common-lisp:nil)
                        (critical-count :initarg :critical-count :type
                         (common-lisp:or compliance-summary-count
                                         common-lisp:null)
                         :accessor %severity-summary-critical-count :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'severity-summary 'make-severity-summary))
 (common-lisp:defun make-severity-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unspecified-count informational-count
                     low-count medium-count high-count critical-count)
   (common-lisp:apply #'common-lisp:make-instance 'severity-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'critical-count))
      (common-lisp:list
       (common-lisp:cons "CriticalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'high-count))
      (common-lisp:list
       (common-lisp:cons "HighCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'medium-count))
      (common-lisp:list
       (common-lisp:cons "MediumCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'low-count))
      (common-lisp:list
       (common-lisp:cons "LowCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'informational-count))
      (common-lisp:list
       (common-lisp:cons "InformationalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unspecified-count))
      (common-lisp:list
       (common-lisp:cons "UnspecifiedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity-summary))
   common-lisp:nil))
(common-lisp:deftype shared-document-version () 'common-lisp:string)
(common-lisp:deftype signal-type () 'common-lisp:string)
(common-lisp:deftype snapshot-download-url () 'common-lisp:string)
(common-lisp:deftype snapshot-id () 'common-lisp:string)
(common-lisp:deftype source-id () 'common-lisp:string)
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype standard-error-content () 'common-lisp:string)
(common-lisp:deftype standard-output-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-associations-once-request common-lisp:nil
                       ((association-ids :initarg :association-ids :type
                         (common-lisp:or association-id-list common-lisp:null)
                         :accessor
                         %start-associations-once-request-association-ids
                         :initform
                         (common-lisp:error ":association-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'start-associations-once-request
                    'make-start-associations-once-request))
 (common-lisp:defun make-start-associations-once-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-associations-once-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-associations-once-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-associations-once-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-ids))
      (common-lisp:list
       (common-lisp:cons "AssociationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-associations-once-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-associations-once-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-associations-once-result
                    'make-start-associations-once-result))
 (common-lisp:defun make-start-associations-once-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-associations-once-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-associations-once-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-associations-once-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-associations-once-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-automation-execution-request common-lisp:nil
                       ((alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %start-automation-execution-request-alarm-configuration
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %start-automation-execution-request-tags :initform
                         common-lisp:nil)
                        (target-locations :initarg :target-locations :type
                         (common-lisp:or target-locations common-lisp:null)
                         :accessor
                         %start-automation-execution-request-target-locations
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %start-automation-execution-request-max-errors
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         %start-automation-execution-request-max-concurrency
                         :initform common-lisp:nil)
                        (target-maps :initarg :target-maps :type
                         (common-lisp:or target-maps common-lisp:null)
                         :accessor
                         %start-automation-execution-request-target-maps
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %start-automation-execution-request-targets :initform
                         common-lisp:nil)
                        (target-parameter-name :initarg :target-parameter-name
                         :type
                         (common-lisp:or automation-parameter-key
                                         common-lisp:null)
                         :accessor
                         %start-automation-execution-request-target-parameter-name
                         :initform common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or execution-mode common-lisp:null)
                         :accessor %start-automation-execution-request-mode
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %start-automation-execution-request-client-token
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor
                         %start-automation-execution-request-parameters
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %start-automation-execution-request-document-version
                         :initform common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor
                         %start-automation-execution-request-document-name
                         :initform
                         (common-lisp:error ":document-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-automation-execution-request
                    'make-start-automation-execution-request))
 (common-lisp:defun make-start-automation-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-configuration tags target-locations
                     max-errors max-concurrency target-maps targets
                     target-parameter-name mode client-token parameters
                     document-version document-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-automation-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-automation-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-automation-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-parameter-name))
      (common-lisp:list
       (common-lisp:cons "TargetParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-maps))
      (common-lisp:list
       (common-lisp:cons "TargetMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-locations))
      (common-lisp:list
       (common-lisp:cons "TargetLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-automation-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-automation-execution-result common-lisp:nil
                       ((automation-execution-id :initarg
                         :automation-execution-id :type
                         (common-lisp:or automation-execution-id
                                         common-lisp:null)
                         :accessor
                         %start-automation-execution-result-automation-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-automation-execution-result
                    'make-start-automation-execution-result))
 (common-lisp:defun make-start-automation-execution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key automation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-automation-execution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-automation-execution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-automation-execution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-id))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-automation-execution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-change-request-execution-request common-lisp:nil
                       ((change-details :initarg :change-details :type
                         (common-lisp:or change-details-value common-lisp:null)
                         :accessor
                         %start-change-request-execution-request-change-details
                         :initform common-lisp:nil)
                        (scheduled-end-time :initarg :scheduled-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %start-change-request-execution-request-scheduled-end-time
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %start-change-request-execution-request-tags :initform
                         common-lisp:nil)
                        (runbooks :initarg :runbooks :type
                         (common-lisp:or runbooks common-lisp:null) :accessor
                         %start-change-request-execution-request-runbooks
                         :initform (common-lisp:error ":runbooks is required"))
                        (auto-approve :initarg :auto-approve :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %start-change-request-execution-request-auto-approve
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         %start-change-request-execution-request-client-token
                         :initform common-lisp:nil)
                        (change-request-name :initarg :change-request-name
                         :type
                         (common-lisp:or change-request-name common-lisp:null)
                         :accessor
                         %start-change-request-execution-request-change-request-name
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor
                         %start-change-request-execution-request-parameters
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %start-change-request-execution-request-document-version
                         :initform common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor
                         %start-change-request-execution-request-document-name
                         :initform
                         (common-lisp:error ":document-name is required"))
                        (scheduled-time :initarg :scheduled-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %start-change-request-execution-request-scheduled-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-change-request-execution-request
                    'make-start-change-request-execution-request))
 (common-lisp:defun make-start-change-request-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-details scheduled-end-time tags
                     runbooks auto-approve client-token change-request-name
                     parameters document-version document-name scheduled-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-change-request-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-change-request-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-change-request-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-time))
      (common-lisp:list
       (common-lisp:cons "ScheduledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-request-name))
      (common-lisp:list
       (common-lisp:cons "ChangeRequestName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-approve))
      (common-lisp:list
       (common-lisp:cons "AutoApprove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runbooks))
      (common-lisp:list
       (common-lisp:cons "Runbooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-end-time))
      (common-lisp:list
       (common-lisp:cons "ScheduledEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-details))
      (common-lisp:list
       (common-lisp:cons "ChangeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-change-request-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-change-request-execution-result common-lisp:nil
                       ((automation-execution-id :initarg
                         :automation-execution-id :type
                         (common-lisp:or automation-execution-id
                                         common-lisp:null)
                         :accessor
                         %start-change-request-execution-result-automation-execution-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-change-request-execution-result
                    'make-start-change-request-execution-result))
 (common-lisp:defun make-start-change-request-execution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key automation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-change-request-execution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-change-request-execution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-change-request-execution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-id))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-change-request-execution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-session-request common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or session-manager-parameters
                                         common-lisp:null)
                         :accessor %start-session-request-parameters :initform
                         common-lisp:nil)
                        (reason :initarg :reason :type
                         (common-lisp:or session-reason common-lisp:null)
                         :accessor %start-session-request-reason :initform
                         common-lisp:nil)
                        (document-name :initarg :document-name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %start-session-request-document-name
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or session-target common-lisp:null)
                         :accessor %start-session-request-target :initform
                         (common-lisp:error ":target is required"))))
 (common-lisp:export
  (common-lisp:list 'start-session-request 'make-start-session-request))
 (common-lisp:defun make-start-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters reason document-name target)
   (common-lisp:apply #'common-lisp:make-instance 'start-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-session-response common-lisp:nil
                       ((stream-url :initarg :stream-url :type
                         (common-lisp:or stream-url common-lisp:null) :accessor
                         %start-session-response-stream-url :initform
                         common-lisp:nil)
                        (token-value :initarg :token-value :type
                         (common-lisp:or token-value common-lisp:null)
                         :accessor %start-session-response-token-value
                         :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %start-session-response-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-session-response 'make-start-session-response))
 (common-lisp:defun make-start-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream-url token-value session-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-value))
      (common-lisp:list
       (common-lisp:cons "TokenValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-url))
      (common-lisp:list
       (common-lisp:cons "StreamUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-session-response))
   common-lisp:nil))
(common-lisp:deftype status-additional-info () 'common-lisp:string)
(common-lisp:deftype status-details () 'common-lisp:string)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype status-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition status-unchanged
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'status-unchanged)))
(common-lisp:progn
 (common-lisp:defclass step-execution common-lisp:nil
                       ((triggered-alarms :initarg :triggered-alarms :type
                         (common-lisp:or alarm-state-information-list
                                         common-lisp:null)
                         :accessor %step-execution-triggered-alarms :initform
                         common-lisp:nil)
                        (target-location :initarg :target-location :type
                         (common-lisp:or target-location common-lisp:null)
                         :accessor %step-execution-target-location :initform
                         common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %step-execution-targets :initform common-lisp:nil)
                        (valid-next-steps :initarg :valid-next-steps :type
                         (common-lisp:or valid-next-step-list common-lisp:null)
                         :accessor %step-execution-valid-next-steps :initform
                         common-lisp:nil)
                        (is-critical :initarg :is-critical :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %step-execution-is-critical :initform common-lisp:nil)
                        (next-step :initarg :next-step :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %step-execution-next-step :initform common-lisp:nil)
                        (is-end :initarg :is-end :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %step-execution-is-end :initform common-lisp:nil)
                        (overridden-parameters :initarg :overridden-parameters
                         :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor %step-execution-overridden-parameters
                         :initform common-lisp:nil)
                        (step-execution-id :initarg :step-execution-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %step-execution-step-execution-id :initform
                         common-lisp:nil)
                        (failure-details :initarg :failure-details :type
                         (common-lisp:or failure-details common-lisp:null)
                         :accessor %step-execution-failure-details :initform
                         common-lisp:nil)
                        (failure-message :initarg :failure-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %step-execution-failure-message :initform
                         common-lisp:nil)
                        (response :initarg :response :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %step-execution-response :initform common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or automation-parameter-map
                                         common-lisp:null)
                         :accessor %step-execution-outputs :initform
                         common-lisp:nil)
                        (inputs :initarg :inputs :type
                         (common-lisp:or normal-string-map common-lisp:null)
                         :accessor %step-execution-inputs :initform
                         common-lisp:nil)
                        (response-code :initarg :response-code :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %step-execution-response-code :initform
                         common-lisp:nil)
                        (step-status :initarg :step-status :type
                         (common-lisp:or automation-execution-status
                                         common-lisp:null)
                         :accessor %step-execution-step-status :initform
                         common-lisp:nil)
                        (execution-end-time :initarg :execution-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %step-execution-execution-end-time :initform
                         common-lisp:nil)
                        (execution-start-time :initarg :execution-start-time
                         :type (common-lisp:or date-time common-lisp:null)
                         :accessor %step-execution-execution-start-time
                         :initform common-lisp:nil)
                        (max-attempts :initarg :max-attempts :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %step-execution-max-attempts :initform
                         common-lisp:nil)
                        (on-failure :initarg :on-failure :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %step-execution-on-failure :initform common-lisp:nil)
                        (timeout-seconds :initarg :timeout-seconds :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %step-execution-timeout-seconds :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or automation-action-name
                                         common-lisp:null)
                         :accessor %step-execution-action :initform
                         common-lisp:nil)
                        (step-name :initarg :step-name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %step-execution-step-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'step-execution 'make-step-execution))
 (common-lisp:defun make-step-execution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key triggered-alarms target-location targets
                     valid-next-steps is-critical next-step is-end
                     overridden-parameters step-execution-id failure-details
                     failure-message response outputs inputs response-code
                     step-status execution-end-time execution-start-time
                     max-attempts on-failure timeout-seconds action step-name)
   (common-lisp:apply #'common-lisp:make-instance 'step-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input step-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input step-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-name))
      (common-lisp:list
       (common-lisp:cons "StepName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-failure))
      (common-lisp:list
       (common-lisp:cons "OnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-attempts))
      (common-lisp:list
       (common-lisp:cons "MaxAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-start-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-end-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-status))
      (common-lisp:list
       (common-lisp:cons "StepStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-code))
      (common-lisp:list
       (common-lisp:cons "ResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response))
      (common-lisp:list
       (common-lisp:cons "Response"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "FailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-details))
      (common-lisp:list
       (common-lisp:cons "FailureDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-execution-id))
      (common-lisp:list
       (common-lisp:cons "StepExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'overridden-parameters))
      (common-lisp:list
       (common-lisp:cons "OverriddenParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-end))
      (common-lisp:list
       (common-lisp:cons "IsEnd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-step))
      (common-lisp:list
       (common-lisp:cons "NextStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-critical))
      (common-lisp:list
       (common-lisp:cons "IsCritical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-next-steps))
      (common-lisp:list
       (common-lisp:cons "ValidNextSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-location))
      (common-lisp:list
       (common-lisp:cons "TargetLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggered-alarms))
      (common-lisp:list
       (common-lisp:cons "TriggeredAlarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input step-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass step-execution-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or step-execution-filter-value-list
                                         common-lisp:null)
                         :accessor %step-execution-filter-values :initform
                         (common-lisp:error ":values is required"))
                        (key :initarg :key :type
                         (common-lisp:or step-execution-filter-key
                                         common-lisp:null)
                         :accessor %step-execution-filter-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'step-execution-filter 'make-step-execution-filter))
 (common-lisp:defun make-step-execution-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'step-execution-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          step-execution-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          step-execution-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          step-execution-filter))
   common-lisp:nil))
(common-lisp:deftype step-execution-filter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype step-execution-filter-list ()
   '(trivial-types:proper-list step-execution-filter))
 (common-lisp:defun |make-step-execution-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step-execution-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype step-execution-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype step-execution-filter-value-list ()
   '(trivial-types:proper-list step-execution-filter-value))
 (common-lisp:defun |make-step-execution-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            step-execution-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype step-execution-list ()
   '(trivial-types:proper-list step-execution))
 (common-lisp:defun |make-step-execution-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list step-execution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stop-automation-execution-request common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or stop-type common-lisp:null) :accessor
                         %stop-automation-execution-request-type :initform
                         common-lisp:nil)
                        (automation-execution-id :initarg
                         :automation-execution-id :type
                         (common-lisp:or automation-execution-id
                                         common-lisp:null)
                         :accessor
                         %stop-automation-execution-request-automation-execution-id
                         :initform
                         (common-lisp:error
                          ":automation-execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-automation-execution-request
                    'make-stop-automation-execution-request))
 (common-lisp:defun make-stop-automation-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type automation-execution-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-automation-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-automation-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-automation-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-execution-id))
      (common-lisp:list
       (common-lisp:cons "AutomationExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-automation-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-automation-execution-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-automation-execution-result
                    'make-stop-automation-execution-result))
 (common-lisp:defun make-stop-automation-execution-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-automation-execution-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-automation-execution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-automation-execution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-automation-execution-result))
   common-lisp:nil))
(common-lisp:deftype stop-type () 'common-lisp:string)
(common-lisp:deftype stream-url () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition sub-type-count-limit-exceeded-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       sub-type-count-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'sub-type-count-limit-exceeded-exception
                    'sub-type-count-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or target-values common-lisp:null)
                         :accessor %target-values :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or target-key common-lisp:null) :accessor
                         %target-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'target 'make-target))
 (common-lisp:defun make-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values key)
   (common-lisp:apply #'common-lisp:make-instance 'target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target))
   common-lisp:nil))
(common-lisp:deftype target-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition target-in-use-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       target-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'target-in-use-exception 'target-in-use-exception-message)))
(common-lisp:deftype target-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass target-location common-lisp:nil
                       ((target-location-alarm-configuration :initarg
                         :target-location-alarm-configuration :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %target-location-target-location-alarm-configuration
                         :initform common-lisp:nil)
                        (execution-role-name :initarg :execution-role-name
                         :type
                         (common-lisp:or execution-role-name common-lisp:null)
                         :accessor %target-location-execution-role-name
                         :initform common-lisp:nil)
                        (target-location-max-errors :initarg
                         :target-location-max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %target-location-target-location-max-errors :initform
                         common-lisp:nil)
                        (target-location-max-concurrency :initarg
                         :target-location-max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         %target-location-target-location-max-concurrency
                         :initform common-lisp:nil)
                        (regions :initarg :regions :type
                         (common-lisp:or regions common-lisp:null) :accessor
                         %target-location-regions :initform common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or accounts common-lisp:null) :accessor
                         %target-location-accounts :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'target-location 'make-target-location))
 (common-lisp:defun make-target-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-location-alarm-configuration
                     execution-role-name target-location-max-errors
                     target-location-max-concurrency regions accounts)
   (common-lisp:apply #'common-lisp:make-instance 'target-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-location-max-concurrency))
      (common-lisp:list
       (common-lisp:cons "TargetLocationMaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-location-max-errors))
      (common-lisp:list
       (common-lisp:cons "TargetLocationMaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-name))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-location-alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetLocationAlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-locations ()
   '(trivial-types:proper-list target-location))
 (common-lisp:defun |make-target-locations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-location))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype target-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-target-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-map-key () 'common-lisp:string)
(common-lisp:deftype target-map-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-map-value-list ()
   '(trivial-types:proper-list target-map-value))
 (common-lisp:defun |make-target-map-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-map-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype target-maps () '(trivial-types:proper-list target-map))
 (common-lisp:defun |make-target-maps|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition target-not-connected
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       target-not-connected-message)))
 (common-lisp:export
  (common-lisp:list 'target-not-connected 'target-not-connected-message)))
(common-lisp:progn
 (common-lisp:deftype target-parameter-list ()
   '(trivial-types:proper-list parameter-value))
 (common-lisp:defun |make-target-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target-type () 'common-lisp:string)
(common-lisp:deftype target-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-values ()
   '(trivial-types:proper-list target-value))
 (common-lisp:defun |make-target-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype targets () '(trivial-types:proper-list target))
 (common-lisp:defun |make-targets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass terminate-session-request common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %terminate-session-request-session-id :initform
                         (common-lisp:error ":session-id is required"))))
 (common-lisp:export
  (common-lisp:list 'terminate-session-request
                    'make-terminate-session-request))
 (common-lisp:defun make-terminate-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass terminate-session-response common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %terminate-session-response-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'terminate-session-response
                    'make-terminate-session-response))
 (common-lisp:defun make-terminate-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id)
   (common-lisp:apply #'common-lisp:make-instance 'terminate-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          terminate-session-response))
   common-lisp:nil))
(common-lisp:deftype timeout-seconds () 'common-lisp:integer)
(common-lisp:deftype token-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-error
     (ssm-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-tags-error)))
(common-lisp:progn
 (common-lisp:define-condition too-many-updates
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-updates-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-updates 'too-many-updates-message)))
(common-lisp:deftype total-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition total-size-limit-exceeded-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       total-size-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'total-size-limit-exceeded-exception
                    'total-size-limit-exceeded-exception-message)))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unlabel-parameter-version-request common-lisp:nil
                       ((labels :initarg :labels :type
                         (common-lisp:or parameter-label-list common-lisp:null)
                         :accessor %unlabel-parameter-version-request-labels
                         :initform (common-lisp:error ":labels is required"))
                        (parameter-version :initarg :parameter-version :type
                         (common-lisp:or psparameter-version common-lisp:null)
                         :accessor
                         %unlabel-parameter-version-request-parameter-version
                         :initform
                         (common-lisp:error ":parameter-version is required"))
                        (name :initarg :name :type
                         (common-lisp:or psparameter-name common-lisp:null)
                         :accessor %unlabel-parameter-version-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'unlabel-parameter-version-request
                    'make-unlabel-parameter-version-request))
 (common-lisp:defun make-unlabel-parameter-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key labels parameter-version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'unlabel-parameter-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unlabel-parameter-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unlabel-parameter-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-version))
      (common-lisp:list
       (common-lisp:cons "ParameterVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labels))
      (common-lisp:list
       (common-lisp:cons "Labels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unlabel-parameter-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unlabel-parameter-version-result common-lisp:nil
                       ((invalid-labels :initarg :invalid-labels :type
                         (common-lisp:or parameter-label-list common-lisp:null)
                         :accessor
                         %unlabel-parameter-version-result-invalid-labels
                         :initform common-lisp:nil)
                        (removed-labels :initarg :removed-labels :type
                         (common-lisp:or parameter-label-list common-lisp:null)
                         :accessor
                         %unlabel-parameter-version-result-removed-labels
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'unlabel-parameter-version-result
                    'make-unlabel-parameter-version-result))
 (common-lisp:defun make-unlabel-parameter-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key invalid-labels removed-labels)
   (common-lisp:apply #'common-lisp:make-instance
                      'unlabel-parameter-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unlabel-parameter-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unlabel-parameter-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'removed-labels))
      (common-lisp:list
       (common-lisp:cons "RemovedLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-labels))
      (common-lisp:list
       (common-lisp:cons "InvalidLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unlabel-parameter-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unsupported-calendar-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-calendar-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-calendar-exception
                    'unsupported-calendar-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-feature-required-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-feature-required-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-feature-required-exception
                    'unsupported-feature-required-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-inventory-item-context-exception
     (ssm-error)
     ((type-name :initarg :type-name :initform common-lisp:nil :reader
       unsupported-inventory-item-context-exception-type-name)
      (message :initarg :message :initform common-lisp:nil :reader
       unsupported-inventory-item-context-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-inventory-item-context-exception
                    'unsupported-inventory-item-context-exception-type-name
                    'unsupported-inventory-item-context-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-inventory-schema-version-exception
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-inventory-schema-version-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-inventory-schema-version-exception
                    'unsupported-inventory-schema-version-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-operating-system
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-operating-system-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-operating-system
                    'unsupported-operating-system-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-parameter-type
     (ssm-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unsupported-parameter-type-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-parameter-type
                    'unsupported-parameter-type-message)))
(common-lisp:progn
 (common-lisp:define-condition unsupported-platform-type
     (ssm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-platform-type-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-platform-type
                    'unsupported-platform-type-message)))
(common-lisp:progn
 (common-lisp:defclass update-association-request common-lisp:nil
                       ((alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %update-association-request-alarm-configuration
                         :initform common-lisp:nil)
                        (target-maps :initarg :target-maps :type
                         (common-lisp:or target-maps common-lisp:null)
                         :accessor %update-association-request-target-maps
                         :initform common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or schedule-offset common-lisp:null)
                         :accessor %update-association-request-schedule-offset
                         :initform common-lisp:nil)
                        (target-locations :initarg :target-locations :type
                         (common-lisp:or target-locations common-lisp:null)
                         :accessor %update-association-request-target-locations
                         :initform common-lisp:nil)
                        (calendar-names :initarg :calendar-names :type
                         (common-lisp:or calendar-name-or-arnlist
                                         common-lisp:null)
                         :accessor %update-association-request-calendar-names
                         :initform common-lisp:nil)
                        (apply-only-at-cron-interval :initarg
                         :apply-only-at-cron-interval :type
                         (common-lisp:or apply-only-at-cron-interval
                                         common-lisp:null)
                         :accessor
                         %update-association-request-apply-only-at-cron-interval
                         :initform common-lisp:nil)
                        (sync-compliance :initarg :sync-compliance :type
                         (common-lisp:or association-sync-compliance
                                         common-lisp:null)
                         :accessor %update-association-request-sync-compliance
                         :initform common-lisp:nil)
                        (compliance-severity :initarg :compliance-severity
                         :type
                         (common-lisp:or association-compliance-severity
                                         common-lisp:null)
                         :accessor
                         %update-association-request-compliance-severity
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor %update-association-request-max-concurrency
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %update-association-request-max-errors :initform
                         common-lisp:nil)
                        (automation-target-parameter-name :initarg
                         :automation-target-parameter-name :type
                         (common-lisp:or automation-target-parameter-name
                                         common-lisp:null)
                         :accessor
                         %update-association-request-automation-target-parameter-name
                         :initform common-lisp:nil)
                        (association-version :initarg :association-version
                         :type
                         (common-lisp:or association-version common-lisp:null)
                         :accessor
                         %update-association-request-association-version
                         :initform common-lisp:nil)
                        (association-name :initarg :association-name :type
                         (common-lisp:or association-name common-lisp:null)
                         :accessor %update-association-request-association-name
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %update-association-request-targets :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %update-association-request-name :initform
                         common-lisp:nil)
                        (output-location :initarg :output-location :type
                         (common-lisp:or instance-association-output-location
                                         common-lisp:null)
                         :accessor %update-association-request-output-location
                         :initform common-lisp:nil)
                        (schedule-expression :initarg :schedule-expression
                         :type
                         (common-lisp:or schedule-expression common-lisp:null)
                         :accessor
                         %update-association-request-schedule-expression
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %update-association-request-document-version
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %update-association-request-parameters :initform
                         common-lisp:nil)
                        (association-id :initarg :association-id :type
                         (common-lisp:or association-id common-lisp:null)
                         :accessor %update-association-request-association-id
                         :initform
                         (common-lisp:error ":association-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-association-request
                    'make-update-association-request))
 (common-lisp:defun make-update-association-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-configuration target-maps
                     schedule-offset target-locations calendar-names
                     apply-only-at-cron-interval sync-compliance
                     compliance-severity max-concurrency max-errors
                     automation-target-parameter-name association-version
                     association-name targets name output-location
                     schedule-expression document-version parameters
                     association-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-association-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-id))
      (common-lisp:list
       (common-lisp:cons "AssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-name))
      (common-lisp:list
       (common-lisp:cons "AssociationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-version))
      (common-lisp:list
       (common-lisp:cons "AssociationVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-target-parameter-name))
      (common-lisp:list
       (common-lisp:cons "AutomationTargetParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-severity))
      (common-lisp:list
       (common-lisp:cons "ComplianceSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-compliance))
      (common-lisp:list
       (common-lisp:cons "SyncCompliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-only-at-cron-interval))
      (common-lisp:list
       (common-lisp:cons "ApplyOnlyAtCronInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'calendar-names))
      (common-lisp:list
       (common-lisp:cons "CalendarNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-locations))
      (common-lisp:list
       (common-lisp:cons "TargetLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-maps))
      (common-lisp:list
       (common-lisp:cons "TargetMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-association-result common-lisp:nil
                       ((association-description :initarg
                         :association-description :type
                         (common-lisp:or association-description
                                         common-lisp:null)
                         :accessor
                         %update-association-result-association-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-association-result
                    'make-update-association-result))
 (common-lisp:defun make-update-association-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-description)
   (common-lisp:apply #'common-lisp:make-instance 'update-association-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-association-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-association-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-description))
      (common-lisp:list
       (common-lisp:cons "AssociationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-association-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-association-status-request common-lisp:nil
                       ((association-status :initarg :association-status :type
                         (common-lisp:or association-status common-lisp:null)
                         :accessor
                         %update-association-status-request-association-status
                         :initform
                         (common-lisp:error ":association-status is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or instance-id common-lisp:null)
                         :accessor
                         %update-association-status-request-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or document-arn common-lisp:null)
                         :accessor %update-association-status-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-association-status-request
                    'make-update-association-status-request))
 (common-lisp:defun make-update-association-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-status instance-id name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-association-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-association-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-association-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-status))
      (common-lisp:list
       (common-lisp:cons "AssociationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-association-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-association-status-result common-lisp:nil
                       ((association-description :initarg
                         :association-description :type
                         (common-lisp:or association-description
                                         common-lisp:null)
                         :accessor
                         %update-association-status-result-association-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-association-status-result
                    'make-update-association-status-result))
 (common-lisp:defun make-update-association-status-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key association-description)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-association-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-association-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-association-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-description))
      (common-lisp:list
       (common-lisp:cons "AssociationDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-association-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-document-default-version-request common-lisp:nil
                       ((document-version :initarg :document-version :type
                         (common-lisp:or document-version-number
                                         common-lisp:null)
                         :accessor
                         %update-document-default-version-request-document-version
                         :initform
                         (common-lisp:error ":document-version is required"))
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor
                         %update-document-default-version-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-document-default-version-request
                    'make-update-document-default-version-request))
 (common-lisp:defun make-update-document-default-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key document-version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-document-default-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-document-default-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-document-default-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-document-default-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-document-default-version-result common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or document-default-version-description
                                         common-lisp:null)
                         :accessor
                         %update-document-default-version-result-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-document-default-version-result
                    'make-update-document-default-version-result))
 (common-lisp:defun make-update-document-default-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-document-default-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-document-default-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-document-default-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-document-default-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-document-metadata-request common-lisp:nil
                       ((document-reviews :initarg :document-reviews :type
                         (common-lisp:or document-reviews common-lisp:null)
                         :accessor
                         %update-document-metadata-request-document-reviews
                         :initform
                         (common-lisp:error ":document-reviews is required"))
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor
                         %update-document-metadata-request-document-version
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %update-document-metadata-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-document-metadata-request
                    'make-update-document-metadata-request))
 (common-lisp:defun make-update-document-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key document-reviews document-version name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-document-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-document-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-document-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-reviews))
      (common-lisp:list
       (common-lisp:cons "DocumentReviews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-document-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-document-metadata-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-document-metadata-response
                    'make-update-document-metadata-response))
 (common-lisp:defun make-update-document-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-document-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-document-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-document-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-document-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-document-request common-lisp:nil
                       ((target-type :initarg :target-type :type
                         (common-lisp:or target-type common-lisp:null)
                         :accessor %update-document-request-target-type
                         :initform common-lisp:nil)
                        (document-format :initarg :document-format :type
                         (common-lisp:or document-format common-lisp:null)
                         :accessor %update-document-request-document-format
                         :initform common-lisp:nil)
                        (document-version :initarg :document-version :type
                         (common-lisp:or document-version common-lisp:null)
                         :accessor %update-document-request-document-version
                         :initform common-lisp:nil)
                        (version-name :initarg :version-name :type
                         (common-lisp:or document-version-name
                                         common-lisp:null)
                         :accessor %update-document-request-version-name
                         :initform common-lisp:nil)
                        (display-name :initarg :display-name :type
                         (common-lisp:or document-display-name
                                         common-lisp:null)
                         :accessor %update-document-request-display-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or document-name common-lisp:null)
                         :accessor %update-document-request-name :initform
                         (common-lisp:error ":name is required"))
                        (attachments :initarg :attachments :type
                         (common-lisp:or attachments-source-list
                                         common-lisp:null)
                         :accessor %update-document-request-attachments
                         :initform common-lisp:nil)
                        (content :initarg :content :type
                         (common-lisp:or document-content common-lisp:null)
                         :accessor %update-document-request-content :initform
                         (common-lisp:error ":content is required"))))
 (common-lisp:export
  (common-lisp:list 'update-document-request 'make-update-document-request))
 (common-lisp:defun make-update-document-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-type document-format
                     document-version version-name display-name name
                     attachments content)
   (common-lisp:apply #'common-lisp:make-instance 'update-document-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-document-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-document-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "Attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-name))
      (common-lisp:list
       (common-lisp:cons "VersionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-format))
      (common-lisp:list
       (common-lisp:cons "DocumentFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-document-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-document-result common-lisp:nil
                       ((document-description :initarg :document-description
                         :type
                         (common-lisp:or document-description common-lisp:null)
                         :accessor %update-document-result-document-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-document-result 'make-update-document-result))
 (common-lisp:defun make-update-document-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key document-description)
   (common-lisp:apply #'common-lisp:make-instance 'update-document-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-document-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-document-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-description))
      (common-lisp:list
       (common-lisp:cons "DocumentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-document-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-maintenance-window-request common-lisp:nil
                       ((replace :initarg :replace :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-maintenance-window-request-replace :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or maintenance-window-enabled
                                         common-lisp:null)
                         :accessor %update-maintenance-window-request-enabled
                         :initform common-lisp:nil)
                        (allow-unassociated-targets :initarg
                         :allow-unassociated-targets :type
                         (common-lisp:or
                          maintenance-window-allow-unassociated-targets
                          common-lisp:null)
                         :accessor
                         %update-maintenance-window-request-allow-unassociated-targets
                         :initform common-lisp:nil)
                        (cutoff :initarg :cutoff :type
                         (common-lisp:or maintenance-window-cutoff
                                         common-lisp:null)
                         :accessor %update-maintenance-window-request-cutoff
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or maintenance-window-duration-hours
                                         common-lisp:null)
                         :accessor %update-maintenance-window-request-duration
                         :initform common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or maintenance-window-offset
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-request-schedule-offset
                         :initform common-lisp:nil)
                        (schedule-timezone :initarg :schedule-timezone :type
                         (common-lisp:or maintenance-window-timezone
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-request-schedule-timezone
                         :initform common-lisp:nil)
                        (schedule :initarg :schedule :type
                         (common-lisp:or maintenance-window-schedule
                                         common-lisp:null)
                         :accessor %update-maintenance-window-request-schedule
                         :initform common-lisp:nil)
                        (end-date :initarg :end-date :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor %update-maintenance-window-request-end-date
                         :initform common-lisp:nil)
                        (start-date :initarg :start-date :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-request-start-date
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %update-maintenance-window-request-name
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %update-maintenance-window-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-maintenance-window-request
                    'make-update-maintenance-window-request))
 (common-lisp:defun make-update-maintenance-window-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replace enabled
                     allow-unassociated-targets cutoff duration schedule-offset
                     schedule-timezone schedule end-date start-date description
                     name window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-maintenance-window-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-timezone))
      (common-lisp:list
       (common-lisp:cons "ScheduleTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cutoff))
      (common-lisp:list
       (common-lisp:cons "Cutoff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-unassociated-targets))
      (common-lisp:list
       (common-lisp:cons "AllowUnassociatedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace))
      (common-lisp:list
       (common-lisp:cons "Replace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-maintenance-window-result common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or maintenance-window-enabled
                                         common-lisp:null)
                         :accessor %update-maintenance-window-result-enabled
                         :initform common-lisp:nil)
                        (allow-unassociated-targets :initarg
                         :allow-unassociated-targets :type
                         (common-lisp:or
                          maintenance-window-allow-unassociated-targets
                          common-lisp:null)
                         :accessor
                         %update-maintenance-window-result-allow-unassociated-targets
                         :initform common-lisp:nil)
                        (cutoff :initarg :cutoff :type
                         (common-lisp:or maintenance-window-cutoff
                                         common-lisp:null)
                         :accessor %update-maintenance-window-result-cutoff
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or maintenance-window-duration-hours
                                         common-lisp:null)
                         :accessor %update-maintenance-window-result-duration
                         :initform common-lisp:nil)
                        (schedule-offset :initarg :schedule-offset :type
                         (common-lisp:or maintenance-window-offset
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-result-schedule-offset
                         :initform common-lisp:nil)
                        (schedule-timezone :initarg :schedule-timezone :type
                         (common-lisp:or maintenance-window-timezone
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-result-schedule-timezone
                         :initform common-lisp:nil)
                        (schedule :initarg :schedule :type
                         (common-lisp:or maintenance-window-schedule
                                         common-lisp:null)
                         :accessor %update-maintenance-window-result-schedule
                         :initform common-lisp:nil)
                        (end-date :initarg :end-date :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor %update-maintenance-window-result-end-date
                         :initform common-lisp:nil)
                        (start-date :initarg :start-date :type
                         (common-lisp:or maintenance-window-string-date-time
                                         common-lisp:null)
                         :accessor %update-maintenance-window-result-start-date
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-result-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %update-maintenance-window-result-name
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor %update-maintenance-window-result-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-maintenance-window-result
                    'make-update-maintenance-window-result))
 (common-lisp:defun make-update-maintenance-window-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled allow-unassociated-targets cutoff
                     duration schedule-offset schedule-timezone schedule
                     end-date start-date description name window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-maintenance-window-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "StartDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "EndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-timezone))
      (common-lisp:list
       (common-lisp:cons "ScheduleTimezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-offset))
      (common-lisp:list
       (common-lisp:cons "ScheduleOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cutoff))
      (common-lisp:list
       (common-lisp:cons "Cutoff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-unassociated-targets))
      (common-lisp:list
       (common-lisp:cons "AllowUnassociatedTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-maintenance-window-target-request common-lisp:nil
                       ((replace :initarg :replace :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-maintenance-window-target-request-replace
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-target-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-target-request-name
                         :initform common-lisp:nil)
                        (owner-information :initarg :owner-information :type
                         (common-lisp:or owner-information common-lisp:null)
                         :accessor
                         %update-maintenance-window-target-request-owner-information
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %update-maintenance-window-target-request-targets
                         :initform common-lisp:nil)
                        (window-target-id :initarg :window-target-id :type
                         (common-lisp:or maintenance-window-target-id
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-target-request-window-target-id
                         :initform
                         (common-lisp:error ":window-target-id is required"))
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-target-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-maintenance-window-target-request
                    'make-update-maintenance-window-target-request))
 (common-lisp:defun make-update-maintenance-window-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replace description name
                     owner-information targets window-target-id window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-maintenance-window-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-target-id))
      (common-lisp:list
       (common-lisp:cons "WindowTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-information))
      (common-lisp:list
       (common-lisp:cons "OwnerInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace))
      (common-lisp:list
       (common-lisp:cons "Replace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-maintenance-window-target-result common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-target-result-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-target-result-name
                         :initform common-lisp:nil)
                        (owner-information :initarg :owner-information :type
                         (common-lisp:or owner-information common-lisp:null)
                         :accessor
                         %update-maintenance-window-target-result-owner-information
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %update-maintenance-window-target-result-targets
                         :initform common-lisp:nil)
                        (window-target-id :initarg :window-target-id :type
                         (common-lisp:or maintenance-window-target-id
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-target-result-window-target-id
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-target-result-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-maintenance-window-target-result
                    'make-update-maintenance-window-target-result))
 (common-lisp:defun make-update-maintenance-window-target-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description name owner-information
                     targets window-target-id window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-maintenance-window-target-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-target-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-target-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-target-id))
      (common-lisp:list
       (common-lisp:cons "WindowTargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-information))
      (common-lisp:list
       (common-lisp:cons "OwnerInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-target-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-maintenance-window-task-request common-lisp:nil
                       ((alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-alarm-configuration
                         :initform common-lisp:nil)
                        (cutoff-behavior :initarg :cutoff-behavior :type
                         (common-lisp:or
                          maintenance-window-task-cutoff-behavior
                          common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-cutoff-behavior
                         :initform common-lisp:nil)
                        (replace :initarg :replace :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-maintenance-window-task-request-replace
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %update-maintenance-window-task-request-name
                         :initform common-lisp:nil)
                        (logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-logging-info
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %update-maintenance-window-task-request-max-errors
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-max-concurrency
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or maintenance-window-task-priority
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-priority
                         :initform common-lisp:nil)
                        (task-invocation-parameters :initarg
                         :task-invocation-parameters :type
                         (common-lisp:or
                          maintenance-window-task-invocation-parameters
                          common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-task-invocation-parameters
                         :initform common-lisp:nil)
                        (task-parameters :initarg :task-parameters :type
                         (common-lisp:or maintenance-window-task-parameters
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-task-parameters
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :type
                         (common-lisp:or service-role common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-service-role-arn
                         :initform common-lisp:nil)
                        (task-arn :initarg :task-arn :type
                         (common-lisp:or maintenance-window-task-arn
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-task-arn
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %update-maintenance-window-task-request-targets
                         :initform common-lisp:nil)
                        (window-task-id :initarg :window-task-id :type
                         (common-lisp:or maintenance-window-task-id
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-window-task-id
                         :initform
                         (common-lisp:error ":window-task-id is required"))
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-request-window-id
                         :initform
                         (common-lisp:error ":window-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-maintenance-window-task-request
                    'make-update-maintenance-window-task-request))
 (common-lisp:defun make-update-maintenance-window-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-configuration cutoff-behavior
                     replace description name logging-info max-errors
                     max-concurrency priority task-invocation-parameters
                     task-parameters service-role-arn task-arn targets
                     window-task-id window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-maintenance-window-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-task-id))
      (common-lisp:list
       (common-lisp:cons "WindowTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "TaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-parameters))
      (common-lisp:list
       (common-lisp:cons "TaskParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-invocation-parameters))
      (common-lisp:list
       (common-lisp:cons "TaskInvocationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace))
      (common-lisp:list
       (common-lisp:cons "Replace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cutoff-behavior))
      (common-lisp:list
       (common-lisp:cons "CutoffBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-maintenance-window-task-result common-lisp:nil
                       ((alarm-configuration :initarg :alarm-configuration
                         :type
                         (common-lisp:or alarm-configuration common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-alarm-configuration
                         :initform common-lisp:nil)
                        (cutoff-behavior :initarg :cutoff-behavior :type
                         (common-lisp:or
                          maintenance-window-task-cutoff-behavior
                          common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-cutoff-behavior
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or maintenance-window-description
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or maintenance-window-name
                                         common-lisp:null)
                         :accessor %update-maintenance-window-task-result-name
                         :initform common-lisp:nil)
                        (logging-info :initarg :logging-info :type
                         (common-lisp:or logging-info common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-logging-info
                         :initform common-lisp:nil)
                        (max-errors :initarg :max-errors :type
                         (common-lisp:or max-errors common-lisp:null) :accessor
                         %update-maintenance-window-task-result-max-errors
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or max-concurrency common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-max-concurrency
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or maintenance-window-task-priority
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-priority
                         :initform common-lisp:nil)
                        (task-invocation-parameters :initarg
                         :task-invocation-parameters :type
                         (common-lisp:or
                          maintenance-window-task-invocation-parameters
                          common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-task-invocation-parameters
                         :initform common-lisp:nil)
                        (task-parameters :initarg :task-parameters :type
                         (common-lisp:or maintenance-window-task-parameters
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-task-parameters
                         :initform common-lisp:nil)
                        (service-role-arn :initarg :service-role-arn :type
                         (common-lisp:or service-role common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-service-role-arn
                         :initform common-lisp:nil)
                        (task-arn :initarg :task-arn :type
                         (common-lisp:or maintenance-window-task-arn
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-task-arn
                         :initform common-lisp:nil)
                        (targets :initarg :targets :type
                         (common-lisp:or targets common-lisp:null) :accessor
                         %update-maintenance-window-task-result-targets
                         :initform common-lisp:nil)
                        (window-task-id :initarg :window-task-id :type
                         (common-lisp:or maintenance-window-task-id
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-window-task-id
                         :initform common-lisp:nil)
                        (window-id :initarg :window-id :type
                         (common-lisp:or maintenance-window-id
                                         common-lisp:null)
                         :accessor
                         %update-maintenance-window-task-result-window-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-maintenance-window-task-result
                    'make-update-maintenance-window-task-result))
 (common-lisp:defun make-update-maintenance-window-task-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key alarm-configuration cutoff-behavior
                     description name logging-info max-errors max-concurrency
                     priority task-invocation-parameters task-parameters
                     service-role-arn task-arn targets window-task-id
                     window-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-maintenance-window-task-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-task-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-task-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-id))
      (common-lisp:list
       (common-lisp:cons "WindowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-task-id))
      (common-lisp:list
       (common-lisp:cons "WindowTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-arn))
      (common-lisp:list
       (common-lisp:cons "TaskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-role-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-parameters))
      (common-lisp:list
       (common-lisp:cons "TaskParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-invocation-parameters))
      (common-lisp:list
       (common-lisp:cons "TaskInvocationParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-errors))
      (common-lisp:list
       (common-lisp:cons "MaxErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-info))
      (common-lisp:list
       (common-lisp:cons "LoggingInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cutoff-behavior))
      (common-lisp:list
       (common-lisp:cons "CutoffBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-configuration))
      (common-lisp:list
       (common-lisp:cons "AlarmConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-maintenance-window-task-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-managed-instance-role-request common-lisp:nil
                       ((iam-role :initarg :iam-role :type
                         (common-lisp:or iam-role common-lisp:null) :accessor
                         %update-managed-instance-role-request-iam-role
                         :initform (common-lisp:error ":iam-role is required"))
                        (instance-id :initarg :instance-id :type
                         (common-lisp:or managed-instance-id common-lisp:null)
                         :accessor
                         %update-managed-instance-role-request-instance-id
                         :initform
                         (common-lisp:error ":instance-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-managed-instance-role-request
                    'make-update-managed-instance-role-request))
 (common-lisp:defun make-update-managed-instance-role-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-role instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-managed-instance-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-instance-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-instance-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-id))
      (common-lisp:list
       (common-lisp:cons "InstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "IamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-instance-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-managed-instance-role-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-managed-instance-role-result
                    'make-update-managed-instance-role-result))
 (common-lisp:defun make-update-managed-instance-role-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-managed-instance-role-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-instance-role-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-instance-role-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-managed-instance-role-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ops-item-request common-lisp:nil
                       ((ops-item-arn :initarg :ops-item-arn :type
                         (common-lisp:or ops-item-arn common-lisp:null)
                         :accessor %update-ops-item-request-ops-item-arn
                         :initform common-lisp:nil)
                        (planned-end-time :initarg :planned-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %update-ops-item-request-planned-end-time :initform
                         common-lisp:nil)
                        (planned-start-time :initarg :planned-start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %update-ops-item-request-planned-start-time :initform
                         common-lisp:nil)
                        (actual-end-time :initarg :actual-end-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %update-ops-item-request-actual-end-time :initform
                         common-lisp:nil)
                        (actual-start-time :initarg :actual-start-time :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %update-ops-item-request-actual-start-time :initform
                         common-lisp:nil)
                        (severity :initarg :severity :type
                         (common-lisp:or ops-item-severity common-lisp:null)
                         :accessor %update-ops-item-request-severity :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or ops-item-category common-lisp:null)
                         :accessor %update-ops-item-request-category :initform
                         common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or ops-item-title common-lisp:null)
                         :accessor %update-ops-item-request-title :initform
                         common-lisp:nil)
                        (ops-item-id :initarg :ops-item-id :type
                         (common-lisp:or ops-item-id common-lisp:null)
                         :accessor %update-ops-item-request-ops-item-id
                         :initform
                         (common-lisp:error ":ops-item-id is required"))
                        (status :initarg :status :type
                         (common-lisp:or ops-item-status common-lisp:null)
                         :accessor %update-ops-item-request-status :initform
                         common-lisp:nil)
                        (related-ops-items :initarg :related-ops-items :type
                         (common-lisp:or related-ops-items common-lisp:null)
                         :accessor %update-ops-item-request-related-ops-items
                         :initform common-lisp:nil)
                        (priority :initarg :priority :type
                         (common-lisp:or ops-item-priority common-lisp:null)
                         :accessor %update-ops-item-request-priority :initform
                         common-lisp:nil)
                        (notifications :initarg :notifications :type
                         (common-lisp:or ops-item-notifications
                                         common-lisp:null)
                         :accessor %update-ops-item-request-notifications
                         :initform common-lisp:nil)
                        (operational-data-to-delete :initarg
                         :operational-data-to-delete :type
                         (common-lisp:or ops-item-ops-data-keys-list
                                         common-lisp:null)
                         :accessor
                         %update-ops-item-request-operational-data-to-delete
                         :initform common-lisp:nil)
                        (operational-data :initarg :operational-data :type
                         (common-lisp:or ops-item-operational-data
                                         common-lisp:null)
                         :accessor %update-ops-item-request-operational-data
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or ops-item-description common-lisp:null)
                         :accessor %update-ops-item-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-ops-item-request 'make-update-ops-item-request))
 (common-lisp:defun make-update-ops-item-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ops-item-arn planned-end-time
                     planned-start-time actual-end-time actual-start-time
                     severity category title ops-item-id status
                     related-ops-items priority notifications
                     operational-data-to-delete operational-data description)
   (common-lisp:apply #'common-lisp:make-instance 'update-ops-item-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-item-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-item-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operational-data))
      (common-lisp:list
       (common-lisp:cons "OperationalData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operational-data-to-delete))
      (common-lisp:list
       (common-lisp:cons "OperationalDataToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "Notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-ops-items))
      (common-lisp:list
       (common-lisp:cons "RelatedOpsItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-id))
      (common-lisp:list
       (common-lisp:cons "OpsItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-start-time))
      (common-lisp:list
       (common-lisp:cons "ActualStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-end-time))
      (common-lisp:list
       (common-lisp:cons "ActualEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'planned-start-time))
      (common-lisp:list
       (common-lisp:cons "PlannedStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'planned-end-time))
      (common-lisp:list
       (common-lisp:cons "PlannedEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-item-arn))
      (common-lisp:list
       (common-lisp:cons "OpsItemArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-item-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ops-item-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-ops-item-response 'make-update-ops-item-response))
 (common-lisp:defun make-update-ops-item-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-ops-item-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-item-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-item-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ops-metadata-request common-lisp:nil
                       ((keys-to-delete :initarg :keys-to-delete :type
                         (common-lisp:or metadata-keys-to-delete-list
                                         common-lisp:null)
                         :accessor %update-ops-metadata-request-keys-to-delete
                         :initform common-lisp:nil)
                        (metadata-to-update :initarg :metadata-to-update :type
                         (common-lisp:or metadata-map common-lisp:null)
                         :accessor
                         %update-ops-metadata-request-metadata-to-update
                         :initform common-lisp:nil)
                        (ops-metadata-arn :initarg :ops-metadata-arn :type
                         (common-lisp:or ops-metadata-arn common-lisp:null)
                         :accessor
                         %update-ops-metadata-request-ops-metadata-arn
                         :initform
                         (common-lisp:error ":ops-metadata-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-ops-metadata-request
                    'make-update-ops-metadata-request))
 (common-lisp:defun make-update-ops-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key keys-to-delete metadata-to-update
                     ops-metadata-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-ops-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-metadata-arn))
      (common-lisp:list
       (common-lisp:cons "OpsMetadataArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-to-update))
      (common-lisp:list
       (common-lisp:cons "MetadataToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys-to-delete))
      (common-lisp:list
       (common-lisp:cons "KeysToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ops-metadata-result common-lisp:nil
                       ((ops-metadata-arn :initarg :ops-metadata-arn :type
                         (common-lisp:or ops-metadata-arn common-lisp:null)
                         :accessor %update-ops-metadata-result-ops-metadata-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-ops-metadata-result
                    'make-update-ops-metadata-result))
 (common-lisp:defun make-update-ops-metadata-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ops-metadata-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-ops-metadata-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-metadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-metadata-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-metadata-arn))
      (common-lisp:list
       (common-lisp:cons "OpsMetadataArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ops-metadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-patch-baseline-request common-lisp:nil
                       ((replace :initarg :replace :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-patch-baseline-request-replace :initform
                         common-lisp:nil)
                        (sources :initarg :sources :type
                         (common-lisp:or patch-source-list common-lisp:null)
                         :accessor %update-patch-baseline-request-sources
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or baseline-description common-lisp:null)
                         :accessor %update-patch-baseline-request-description
                         :initform common-lisp:nil)
                        (rejected-patches-action :initarg
                         :rejected-patches-action :type
                         (common-lisp:or patch-action common-lisp:null)
                         :accessor
                         %update-patch-baseline-request-rejected-patches-action
                         :initform common-lisp:nil)
                        (rejected-patches :initarg :rejected-patches :type
                         (common-lisp:or patch-id-list common-lisp:null)
                         :accessor
                         %update-patch-baseline-request-rejected-patches
                         :initform common-lisp:nil)
                        (approved-patches-enable-non-security :initarg
                         :approved-patches-enable-non-security :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-patch-baseline-request-approved-patches-enable-non-security
                         :initform common-lisp:nil)
                        (approved-patches-compliance-level :initarg
                         :approved-patches-compliance-level :type
                         (common-lisp:or patch-compliance-level
                                         common-lisp:null)
                         :accessor
                         %update-patch-baseline-request-approved-patches-compliance-level
                         :initform common-lisp:nil)
                        (approved-patches :initarg :approved-patches :type
                         (common-lisp:or patch-id-list common-lisp:null)
                         :accessor
                         %update-patch-baseline-request-approved-patches
                         :initform common-lisp:nil)
                        (approval-rules :initarg :approval-rules :type
                         (common-lisp:or patch-rule-group common-lisp:null)
                         :accessor
                         %update-patch-baseline-request-approval-rules
                         :initform common-lisp:nil)
                        (global-filters :initarg :global-filters :type
                         (common-lisp:or patch-filter-group common-lisp:null)
                         :accessor
                         %update-patch-baseline-request-global-filters
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or baseline-name common-lisp:null)
                         :accessor %update-patch-baseline-request-name
                         :initform common-lisp:nil)
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor %update-patch-baseline-request-baseline-id
                         :initform
                         (common-lisp:error ":baseline-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-patch-baseline-request
                    'make-update-patch-baseline-request))
 (common-lisp:defun make-update-patch-baseline-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key replace sources description
                     rejected-patches-action rejected-patches
                     approved-patches-enable-non-security
                     approved-patches-compliance-level approved-patches
                     approval-rules global-filters name baseline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-patch-baseline-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-patch-baseline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-patch-baseline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-filters))
      (common-lisp:list
       (common-lisp:cons "GlobalFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approval-rules))
      (common-lisp:list
       (common-lisp:cons "ApprovalRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approved-patches))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-patches-compliance-level))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatchesComplianceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-patches-enable-non-security))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatchesEnableNonSecurity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejected-patches))
      (common-lisp:list
       (common-lisp:cons "RejectedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rejected-patches-action))
      (common-lisp:list
       (common-lisp:cons "RejectedPatchesAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace))
      (common-lisp:list
       (common-lisp:cons "Replace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-patch-baseline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-patch-baseline-result common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or patch-source-list common-lisp:null)
                         :accessor %update-patch-baseline-result-sources
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or baseline-description common-lisp:null)
                         :accessor %update-patch-baseline-result-description
                         :initform common-lisp:nil)
                        (modified-date :initarg :modified-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %update-patch-baseline-result-modified-date :initform
                         common-lisp:nil)
                        (created-date :initarg :created-date :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         %update-patch-baseline-result-created-date :initform
                         common-lisp:nil)
                        (rejected-patches-action :initarg
                         :rejected-patches-action :type
                         (common-lisp:or patch-action common-lisp:null)
                         :accessor
                         %update-patch-baseline-result-rejected-patches-action
                         :initform common-lisp:nil)
                        (rejected-patches :initarg :rejected-patches :type
                         (common-lisp:or patch-id-list common-lisp:null)
                         :accessor
                         %update-patch-baseline-result-rejected-patches
                         :initform common-lisp:nil)
                        (approved-patches-enable-non-security :initarg
                         :approved-patches-enable-non-security :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-patch-baseline-result-approved-patches-enable-non-security
                         :initform common-lisp:nil)
                        (approved-patches-compliance-level :initarg
                         :approved-patches-compliance-level :type
                         (common-lisp:or patch-compliance-level
                                         common-lisp:null)
                         :accessor
                         %update-patch-baseline-result-approved-patches-compliance-level
                         :initform common-lisp:nil)
                        (approved-patches :initarg :approved-patches :type
                         (common-lisp:or patch-id-list common-lisp:null)
                         :accessor
                         %update-patch-baseline-result-approved-patches
                         :initform common-lisp:nil)
                        (approval-rules :initarg :approval-rules :type
                         (common-lisp:or patch-rule-group common-lisp:null)
                         :accessor %update-patch-baseline-result-approval-rules
                         :initform common-lisp:nil)
                        (global-filters :initarg :global-filters :type
                         (common-lisp:or patch-filter-group common-lisp:null)
                         :accessor %update-patch-baseline-result-global-filters
                         :initform common-lisp:nil)
                        (operating-system :initarg :operating-system :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor
                         %update-patch-baseline-result-operating-system
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or baseline-name common-lisp:null)
                         :accessor %update-patch-baseline-result-name :initform
                         common-lisp:nil)
                        (baseline-id :initarg :baseline-id :type
                         (common-lisp:or baseline-id common-lisp:null)
                         :accessor %update-patch-baseline-result-baseline-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-patch-baseline-result
                    'make-update-patch-baseline-result))
 (common-lisp:defun make-update-patch-baseline-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources description modified-date
                     created-date rejected-patches-action rejected-patches
                     approved-patches-enable-non-security
                     approved-patches-compliance-level approved-patches
                     approval-rules global-filters operating-system name
                     baseline-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-patch-baseline-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-patch-baseline-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-patch-baseline-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-id))
      (common-lisp:list
       (common-lisp:cons "BaselineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "OperatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-filters))
      (common-lisp:list
       (common-lisp:cons "GlobalFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approval-rules))
      (common-lisp:list
       (common-lisp:cons "ApprovalRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'approved-patches))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-patches-compliance-level))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatchesComplianceLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approved-patches-enable-non-security))
      (common-lisp:list
       (common-lisp:cons "ApprovedPatchesEnableNonSecurity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rejected-patches))
      (common-lisp:list
       (common-lisp:cons "RejectedPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rejected-patches-action))
      (common-lisp:list
       (common-lisp:cons "RejectedPatchesAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-date))
      (common-lisp:list
       (common-lisp:cons "ModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-patch-baseline-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-data-sync-request common-lisp:nil
                       ((sync-source :initarg :sync-source :type
                         (common-lisp:or resource-data-sync-source
                                         common-lisp:null)
                         :accessor
                         %update-resource-data-sync-request-sync-source
                         :initform
                         (common-lisp:error ":sync-source is required"))
                        (sync-type :initarg :sync-type :type
                         (common-lisp:or resource-data-sync-type
                                         common-lisp:null)
                         :accessor %update-resource-data-sync-request-sync-type
                         :initform
                         (common-lisp:error ":sync-type is required"))
                        (sync-name :initarg :sync-name :type
                         (common-lisp:or resource-data-sync-name
                                         common-lisp:null)
                         :accessor %update-resource-data-sync-request-sync-name
                         :initform
                         (common-lisp:error ":sync-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-resource-data-sync-request
                    'make-update-resource-data-sync-request))
 (common-lisp:defun make-update-resource-data-sync-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sync-source sync-type sync-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-data-sync-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-data-sync-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-data-sync-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-name))
      (common-lisp:list
       (common-lisp:cons "SyncName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-type))
      (common-lisp:list
       (common-lisp:cons "SyncType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-source))
      (common-lisp:list
       (common-lisp:cons "SyncSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-data-sync-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-data-sync-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-resource-data-sync-result
                    'make-update-resource-data-sync-result))
 (common-lisp:defun make-update-resource-data-sync-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-data-sync-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-data-sync-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-data-sync-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-data-sync-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-setting-request common-lisp:nil
                       ((setting-value :initarg :setting-value :type
                         (common-lisp:or service-setting-value
                                         common-lisp:null)
                         :accessor
                         %update-service-setting-request-setting-value
                         :initform
                         (common-lisp:error ":setting-value is required"))
                        (setting-id :initarg :setting-id :type
                         (common-lisp:or service-setting-id common-lisp:null)
                         :accessor %update-service-setting-request-setting-id
                         :initform
                         (common-lisp:error ":setting-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-service-setting-request
                    'make-update-service-setting-request))
 (common-lisp:defun make-update-service-setting-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key setting-value setting-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-setting-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-setting-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-setting-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-id))
      (common-lisp:list
       (common-lisp:cons "SettingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setting-value))
      (common-lisp:list
       (common-lisp:cons "SettingValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-setting-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-setting-result common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-service-setting-result
                    'make-update-service-setting-result))
 (common-lisp:defun make-update-service-setting-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-service-setting-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-setting-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-setting-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-setting-result))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype valid-next-step () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype valid-next-step-list ()
   '(trivial-types:proper-list valid-next-step))
 (common-lisp:defun |make-valid-next-step-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list valid-next-step))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-tags-to-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id tags)
   (common-lisp:declare (common-lisp:ignorable resource-type resource-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AddTagsToResource"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags-to-resource))
(common-lisp:progn
 (common-lisp:defun associate-ops-item-related-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ops-item-id association-type
                     resource-type resource-uri)
   (common-lisp:declare
    (common-lisp:ignorable ops-item-id association-type resource-type
     resource-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-ops-item-related-item-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateOpsItemRelatedItem"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-ops-item-related-item))
(common-lisp:progn
 (common-lisp:defun cancel-command
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key command-id instance-ids)
   (common-lisp:declare (common-lisp:ignorable command-id instance-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-command-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CancelCommand"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-command))
(common-lisp:progn
 (common-lisp:defun cancel-maintenance-window-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-execution-id)
   (common-lisp:declare (common-lisp:ignorable window-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-maintenance-window-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CancelMaintenanceWindowExecution"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-maintenance-window-execution))
(common-lisp:progn
 (common-lisp:defun create-activation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description default-instance-name
                     iam-role registration-limit expiration-date tags
                     registration-metadata)
   (common-lisp:declare
    (common-lisp:ignorable description default-instance-name iam-role
     registration-limit expiration-date tags registration-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-activation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateActivation"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-activation))
(common-lisp:progn
 (common-lisp:defun create-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name document-version instance-id
                     parameters targets schedule-expression output-location
                     association-name automation-target-parameter-name
                     max-errors max-concurrency compliance-severity
                     sync-compliance apply-only-at-cron-interval calendar-names
                     target-locations schedule-offset target-maps tags
                     alarm-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name document-version instance-id parameters targets
     schedule-expression output-location association-name
     automation-target-parameter-name max-errors max-concurrency
     compliance-severity sync-compliance apply-only-at-cron-interval
     calendar-names target-locations schedule-offset target-maps tags
     alarm-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-association-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAssociation"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-association))
(common-lisp:progn
 (common-lisp:defun create-association-batch
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries)
   (common-lisp:declare (common-lisp:ignorable entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-association-batch-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAssociationBatch"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-association-batch))
(common-lisp:progn
 (common-lisp:defun create-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content requires attachments name
                     display-name version-name document-type document-format
                     target-type tags)
   (common-lisp:declare
    (common-lisp:ignorable content requires attachments name display-name
     version-name document-type document-format target-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateDocument"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-document))
(common-lisp:progn
 (common-lisp:defun create-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description start-date end-date
                     schedule schedule-timezone schedule-offset duration cutoff
                     allow-unassociated-targets client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name description start-date end-date schedule
     schedule-timezone schedule-offset duration cutoff
     allow-unassociated-targets client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-maintenance-window-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateMaintenanceWindow"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-maintenance-window))
(common-lisp:progn
 (common-lisp:defun create-ops-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description ops-item-type
                     operational-data notifications priority related-ops-items
                     source title tags category severity actual-start-time
                     actual-end-time planned-start-time planned-end-time
                     account-id)
   (common-lisp:declare
    (common-lisp:ignorable description ops-item-type operational-data
     notifications priority related-ops-items source title tags category
     severity actual-start-time actual-end-time planned-start-time
     planned-end-time account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ops-item-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateOpsItem"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-ops-item))
(common-lisp:progn
 (common-lisp:defun create-ops-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id metadata tags)
   (common-lisp:declare (common-lisp:ignorable resource-id metadata tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ops-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateOpsMetadata"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-ops-metadata))
(common-lisp:progn
 (common-lisp:defun create-patch-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operating-system name global-filters
                     approval-rules approved-patches
                     approved-patches-compliance-level
                     approved-patches-enable-non-security rejected-patches
                     rejected-patches-action description sources client-token
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable operating-system name global-filters approval-rules
     approved-patches approved-patches-compliance-level
     approved-patches-enable-non-security rejected-patches
     rejected-patches-action description sources client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-patch-baseline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreatePatchBaseline"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-patch-baseline))
(common-lisp:progn
 (common-lisp:defun create-resource-data-sync
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-name s3destination sync-type
                     sync-source)
   (common-lisp:declare
    (common-lisp:ignorable sync-name s3destination sync-type sync-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-resource-data-sync-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateResourceDataSync"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resource-data-sync))
(common-lisp:progn
 (common-lisp:defun delete-activation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key activation-id)
   (common-lisp:declare (common-lisp:ignorable activation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-activation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteActivation"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-activation))
(common-lisp:progn
 (common-lisp:defun delete-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name instance-id association-id)
   (common-lisp:declare
    (common-lisp:ignorable name instance-id association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-association-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAssociation"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-association))
(common-lisp:progn
 (common-lisp:defun delete-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name document-version version-name force)
   (common-lisp:declare
    (common-lisp:ignorable name document-version version-name force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteDocument"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-document))
(common-lisp:progn
 (common-lisp:defun delete-inventory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type-name schema-delete-option dry-run
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable type-name schema-delete-option dry-run
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-inventory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteInventory"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-inventory))
(common-lisp:progn
 (common-lisp:defun delete-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id)
   (common-lisp:declare (common-lisp:ignorable window-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-maintenance-window-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteMaintenanceWindow"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-maintenance-window))
(common-lisp:progn
 (common-lisp:defun delete-ops-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ops-metadata-arn)
   (common-lisp:declare (common-lisp:ignorable ops-metadata-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ops-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteOpsMetadata"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-ops-metadata))
(common-lisp:progn
 (common-lisp:defun delete-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-parameter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteParameter"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-parameter))
(common-lisp:progn
 (common-lisp:defun delete-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names)
   (common-lisp:declare (common-lisp:ignorable names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-parameters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteParameters"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-parameters))
(common-lisp:progn
 (common-lisp:defun delete-patch-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key baseline-id)
   (common-lisp:declare (common-lisp:ignorable baseline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-patch-baseline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeletePatchBaseline"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-patch-baseline))
(common-lisp:progn
 (common-lisp:defun delete-resource-data-sync
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-name sync-type)
   (common-lisp:declare (common-lisp:ignorable sync-name sync-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-resource-data-sync-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteResourceDataSync"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-data-sync))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy-id policy-hash)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn policy-id policy-hash))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteResourcePolicy"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun deregister-managed-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id)
   (common-lisp:declare (common-lisp:ignorable instance-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-managed-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterManagedInstance"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-managed-instance))
(common-lisp:progn
 (common-lisp:defun deregister-patch-baseline-for-patch-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key baseline-id patch-group)
   (common-lisp:declare (common-lisp:ignorable baseline-id patch-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-patch-baseline-for-patch-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterPatchBaselineForPatchGroup"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-patch-baseline-for-patch-group))
(common-lisp:progn
 (common-lisp:defun deregister-target-from-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id window-target-id safe)
   (common-lisp:declare
    (common-lisp:ignorable window-id window-target-id safe))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-target-from-maintenance-window-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterTargetFromMaintenanceWindow"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-target-from-maintenance-window))
(common-lisp:progn
 (common-lisp:defun deregister-task-from-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id window-task-id)
   (common-lisp:declare (common-lisp:ignorable window-id window-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-task-from-maintenance-window-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeregisterTaskFromMaintenanceWindow"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-task-from-maintenance-window))
(common-lisp:progn
 (common-lisp:defun describe-activations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-activations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeActivations"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-activations))
(common-lisp:progn
 (common-lisp:defun describe-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name instance-id association-id
                     association-version)
   (common-lisp:declare
    (common-lisp:ignorable name instance-id association-id
     association-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-association-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAssociation"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-association))
(common-lisp:progn
 (common-lisp:defun describe-association-execution-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id execution-id filters
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable association-id execution-id filters max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-association-execution-targets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAssociationExecutionTargets"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-association-execution-targets))
(common-lisp:progn
 (common-lisp:defun describe-association-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable association-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-association-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAssociationExecutions"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-association-executions))
(common-lisp:progn
 (common-lisp:defun describe-automation-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-automation-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAutomationExecutions"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-automation-executions))
(common-lisp:progn
 (common-lisp:defun describe-automation-step-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key automation-execution-id filters
                     next-token max-results reverse-order)
   (common-lisp:declare
    (common-lisp:ignorable automation-execution-id filters next-token
     max-results reverse-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-automation-step-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAutomationStepExecutions"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-automation-step-executions))
(common-lisp:progn
 (common-lisp:defun describe-available-patches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-available-patches-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAvailablePatches"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-available-patches))
(common-lisp:progn
 (common-lisp:defun describe-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name document-version version-name)
   (common-lisp:declare
    (common-lisp:ignorable name document-version version-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDocument"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-document))
(common-lisp:progn
 (common-lisp:defun describe-document-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name permission-type max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable name permission-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-document-permission-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeDocumentPermission"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-document-permission))
(common-lisp:progn
 (common-lisp:defun describe-effective-instance-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-effective-instance-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEffectiveInstanceAssociations"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-effective-instance-associations))
(common-lisp:progn
 (common-lisp:defun describe-effective-patches-for-patch-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key baseline-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable baseline-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-effective-patches-for-patch-baseline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeEffectivePatchesForPatchBaseline"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-effective-patches-for-patch-baseline))
(common-lisp:progn
 (common-lisp:defun describe-instance-associations-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instance-associations-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeInstanceAssociationsStatus"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-instance-associations-status))
(common-lisp:progn
 (common-lisp:defun describe-instance-information
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-information-filter-list filters
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable instance-information-filter-list filters max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instance-information-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeInstanceInformation"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-instance-information))
(common-lisp:progn
 (common-lisp:defun describe-instance-patch-states
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instance-patch-states-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeInstancePatchStates"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-instance-patch-states))
(common-lisp:progn
 (common-lisp:defun describe-instance-patch-states-for-patch-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key patch-group filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable patch-group filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instance-patch-states-for-patch-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeInstancePatchStatesForPatchGroup"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-instance-patch-states-for-patch-group))
(common-lisp:progn
 (common-lisp:defun describe-instance-patches
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instance-patches-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeInstancePatches"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-instance-patches))
(common-lisp:progn
 (common-lisp:defun describe-inventory-deletions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deletion-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable deletion-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-inventory-deletions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeInventoryDeletions"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-inventory-deletions))
(common-lisp:progn
 (common-lisp:defun describe-maintenance-window-execution-task-invocations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-execution-id task-id filters
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable window-execution-id task-id filters max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-maintenance-window-execution-task-invocations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMaintenanceWindowExecutionTaskInvocations"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-maintenance-window-execution-task-invocations))
(common-lisp:progn
 (common-lisp:defun describe-maintenance-window-execution-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-execution-id filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable window-execution-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-maintenance-window-execution-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMaintenanceWindowExecutionTasks"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-maintenance-window-execution-tasks))
(common-lisp:progn
 (common-lisp:defun describe-maintenance-window-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable window-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-maintenance-window-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMaintenanceWindowExecutions"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-maintenance-window-executions))
(common-lisp:progn
 (common-lisp:defun describe-maintenance-window-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id targets resource-type filters
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable window-id targets resource-type filters max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-maintenance-window-schedule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMaintenanceWindowSchedule"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-maintenance-window-schedule))
(common-lisp:progn
 (common-lisp:defun describe-maintenance-window-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable window-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-maintenance-window-targets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMaintenanceWindowTargets"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-maintenance-window-targets))
(common-lisp:progn
 (common-lisp:defun describe-maintenance-window-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable window-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-maintenance-window-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMaintenanceWindowTasks"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-maintenance-window-tasks))
(common-lisp:progn
 (common-lisp:defun describe-maintenance-windows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-maintenance-windows-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMaintenanceWindows"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-maintenance-windows))
(common-lisp:progn
 (common-lisp:defun describe-maintenance-windows-for-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key targets resource-type max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable targets resource-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-maintenance-windows-for-target-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeMaintenanceWindowsForTarget"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-maintenance-windows-for-target))
(common-lisp:progn
 (common-lisp:defun describe-ops-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ops-item-filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable ops-item-filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ops-items-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeOpsItems"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ops-items))
(common-lisp:progn
 (common-lisp:defun describe-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters parameter-filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable filters parameter-filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-parameters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeParameters"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-parameters))
(common-lisp:progn
 (common-lisp:defun describe-patch-baselines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-patch-baselines-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePatchBaselines"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-patch-baselines))
(common-lisp:progn
 (common-lisp:defun describe-patch-group-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key patch-group)
   (common-lisp:declare (common-lisp:ignorable patch-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-patch-group-state-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePatchGroupState"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-patch-group-state))
(common-lisp:progn
 (common-lisp:defun describe-patch-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results filters next-token)
   (common-lisp:declare (common-lisp:ignorable max-results filters next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-patch-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePatchGroups"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-patch-groups))
(common-lisp:progn
 (common-lisp:defun describe-patch-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operating-system property patch-set
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable operating-system property patch-set max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-patch-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribePatchProperties"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-patch-properties))
(common-lisp:progn
 (common-lisp:defun describe-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key state max-results next-token filters)
   (common-lisp:declare
    (common-lisp:ignorable state max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSessions"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-sessions))
(common-lisp:progn
 (common-lisp:defun disassociate-ops-item-related-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ops-item-id association-id)
   (common-lisp:declare (common-lisp:ignorable ops-item-id association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-ops-item-related-item-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateOpsItemRelatedItem"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-ops-item-related-item))
(common-lisp:progn
 (common-lisp:defun get-automation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key automation-execution-id)
   (common-lisp:declare (common-lisp:ignorable automation-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-automation-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetAutomationExecution"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-automation-execution))
(common-lisp:progn
 (common-lisp:defun get-calendar-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key calendar-names at-time)
   (common-lisp:declare (common-lisp:ignorable calendar-names at-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-calendar-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetCalendarState"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-calendar-state))
(common-lisp:progn
 (common-lisp:defun get-command-invocation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key command-id instance-id plugin-name)
   (common-lisp:declare
    (common-lisp:ignorable command-id instance-id plugin-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-command-invocation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetCommandInvocation"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-command-invocation))
(common-lisp:progn
 (common-lisp:defun get-connection-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target)
   (common-lisp:declare (common-lisp:ignorable target))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connection-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetConnectionStatus"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-connection-status))
(common-lisp:progn
 (common-lisp:defun get-default-patch-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operating-system)
   (common-lisp:declare (common-lisp:ignorable operating-system))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-default-patch-baseline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDefaultPatchBaseline"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-default-patch-baseline))
(common-lisp:progn
 (common-lisp:defun get-deployable-patch-snapshot-for-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id snapshot-id
                     baseline-override)
   (common-lisp:declare
    (common-lisp:ignorable instance-id snapshot-id baseline-override))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-deployable-patch-snapshot-for-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDeployablePatchSnapshotForInstance"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-deployable-patch-snapshot-for-instance))
(common-lisp:progn
 (common-lisp:defun get-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version-name document-version
                     document-format)
   (common-lisp:declare
    (common-lisp:ignorable name version-name document-version document-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetDocument"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-document))
(common-lisp:progn
 (common-lisp:defun get-inventory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters aggregators result-attributes
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable filters aggregators result-attributes next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-inventory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetInventory"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-inventory))
(common-lisp:progn
 (common-lisp:defun get-inventory-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type-name next-token max-results
                     aggregator sub-type)
   (common-lisp:declare
    (common-lisp:ignorable type-name next-token max-results aggregator
     sub-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-inventory-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetInventorySchema"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-inventory-schema))
(common-lisp:progn
 (common-lisp:defun get-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id)
   (common-lisp:declare (common-lisp:ignorable window-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-maintenance-window-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetMaintenanceWindow"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-maintenance-window))
(common-lisp:progn
 (common-lisp:defun get-maintenance-window-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-execution-id)
   (common-lisp:declare (common-lisp:ignorable window-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-maintenance-window-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetMaintenanceWindowExecution"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-maintenance-window-execution))
(common-lisp:progn
 (common-lisp:defun get-maintenance-window-execution-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-execution-id task-id)
   (common-lisp:declare (common-lisp:ignorable window-execution-id task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-maintenance-window-execution-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetMaintenanceWindowExecutionTask"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-maintenance-window-execution-task))
(common-lisp:progn
 (common-lisp:defun get-maintenance-window-execution-task-invocation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-execution-id task-id
                     invocation-id)
   (common-lisp:declare
    (common-lisp:ignorable window-execution-id task-id invocation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-maintenance-window-execution-task-invocation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetMaintenanceWindowExecutionTaskInvocation"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-maintenance-window-execution-task-invocation))
(common-lisp:progn
 (common-lisp:defun get-maintenance-window-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id window-task-id)
   (common-lisp:declare (common-lisp:ignorable window-id window-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-maintenance-window-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetMaintenanceWindowTask"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-maintenance-window-task))
(common-lisp:progn
 (common-lisp:defun get-ops-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ops-item-id ops-item-arn)
   (common-lisp:declare (common-lisp:ignorable ops-item-id ops-item-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-ops-item-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetOpsItem"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-ops-item))
(common-lisp:progn
 (common-lisp:defun get-ops-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ops-metadata-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable ops-metadata-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-ops-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetOpsMetadata"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-ops-metadata))
(common-lisp:progn
 (common-lisp:defun get-ops-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-name filters aggregators
                     result-attributes next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable sync-name filters aggregators result-attributes
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-ops-summary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetOpsSummary"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-ops-summary))
(common-lisp:progn
 (common-lisp:defun get-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name with-decryption)
   (common-lisp:declare (common-lisp:ignorable name with-decryption))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-parameter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetParameter"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-parameter))
(common-lisp:progn
 (common-lisp:defun get-parameter-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name with-decryption max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable name with-decryption max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-parameter-history-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetParameterHistory"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-parameter-history))
(common-lisp:progn
 (common-lisp:defun get-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names with-decryption)
   (common-lisp:declare (common-lisp:ignorable names with-decryption))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-parameters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetParameters"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-parameters))
(common-lisp:progn
 (common-lisp:defun get-parameters-by-path
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path recursive parameter-filters
                     with-decryption max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable path recursive parameter-filters with-decryption
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-parameters-by-path-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetParametersByPath"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-parameters-by-path))
(common-lisp:progn
 (common-lisp:defun get-patch-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key baseline-id)
   (common-lisp:declare (common-lisp:ignorable baseline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-patch-baseline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetPatchBaseline"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-patch-baseline))
(common-lisp:progn
 (common-lisp:defun get-patch-baseline-for-patch-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key patch-group operating-system)
   (common-lisp:declare (common-lisp:ignorable patch-group operating-system))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-patch-baseline-for-patch-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetPatchBaselineForPatchGroup"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-patch-baseline-for-patch-group))
(common-lisp:progn
 (common-lisp:defun get-resource-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetResourcePolicies"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-policies))
(common-lisp:progn
 (common-lisp:defun get-service-setting
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key setting-id)
   (common-lisp:declare (common-lisp:ignorable setting-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-setting-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetServiceSetting"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service-setting))
(common-lisp:progn
 (common-lisp:defun label-parameter-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name parameter-version labels)
   (common-lisp:declare (common-lisp:ignorable name parameter-version labels))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-label-parameter-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "LabelParameterVersion"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'label-parameter-version))
(common-lisp:progn
 (common-lisp:defun list-association-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable association-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-association-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAssociationVersions"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-association-versions))
(common-lisp:progn
 (common-lisp:defun list-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-filter-list max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable association-filter-list max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-associations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAssociations"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-associations))
(common-lisp:progn
 (common-lisp:defun list-command-invocations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key command-id instance-id max-results
                     next-token filters details)
   (common-lisp:declare
    (common-lisp:ignorable command-id instance-id max-results next-token
     filters details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-command-invocations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListCommandInvocations"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-command-invocations))
(common-lisp:progn
 (common-lisp:defun list-commands
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key command-id instance-id max-results
                     next-token filters)
   (common-lisp:declare
    (common-lisp:ignorable command-id instance-id max-results next-token
     filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-commands-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListCommands"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-commands))
(common-lisp:progn
 (common-lisp:defun list-compliance-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters resource-ids resource-types
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable filters resource-ids resource-types next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-compliance-items-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListComplianceItems"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-compliance-items))
(common-lisp:progn
 (common-lisp:defun list-compliance-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-compliance-summaries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListComplianceSummaries"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-compliance-summaries))
(common-lisp:progn
 (common-lisp:defun list-document-metadata-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name document-version metadata next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable name document-version metadata next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-document-metadata-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDocumentMetadataHistory"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-document-metadata-history))
(common-lisp:progn
 (common-lisp:defun list-document-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name max-results next-token)
   (common-lisp:declare (common-lisp:ignorable name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-document-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDocumentVersions"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-document-versions))
(common-lisp:progn
 (common-lisp:defun list-documents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key document-filter-list filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable document-filter-list filters max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-documents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListDocuments"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-documents))
(common-lisp:progn
 (common-lisp:defun list-inventory-entries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id type-name filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable instance-id type-name filters next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-inventory-entries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListInventoryEntries"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-inventory-entries))
(common-lisp:progn
 (common-lisp:defun list-ops-item-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ops-item-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListOpsItemEvents"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ops-item-events))
(common-lisp:progn
 (common-lisp:defun list-ops-item-related-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ops-item-id filters max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable ops-item-id filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-ops-item-related-items-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListOpsItemRelatedItems"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ops-item-related-items))
(common-lisp:progn
 (common-lisp:defun list-ops-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ops-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListOpsMetadata"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ops-metadata))
(common-lisp:progn
 (common-lisp:defun list-resource-compliance-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filters next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resource-compliance-summaries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListResourceComplianceSummaries"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-compliance-summaries))
(common-lisp:progn
 (common-lisp:defun list-resource-data-sync
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-type next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable sync-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resource-data-sync-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListResourceDataSync"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resource-data-sync))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-type resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun modify-document-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name permission-type account-ids-to-add
                     account-ids-to-remove shared-document-version)
   (common-lisp:declare
    (common-lisp:ignorable name permission-type account-ids-to-add
     account-ids-to-remove shared-document-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-modify-document-permission-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ModifyDocumentPermission"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'modify-document-permission))
(common-lisp:progn
 (common-lisp:defun put-compliance-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id resource-type compliance-type
                     execution-summary items item-content-hash upload-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-id resource-type compliance-type
     execution-summary items item-content-hash upload-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-compliance-items-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutComplianceItems"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-compliance-items))
(common-lisp:progn
 (common-lisp:defun put-inventory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id items)
   (common-lisp:declare (common-lisp:ignorable instance-id items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-inventory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutInventory"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-inventory))
(common-lisp:progn
 (common-lisp:defun put-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description value type key-id
                     overwrite allowed-pattern tags tier policies data-type)
   (common-lisp:declare
    (common-lisp:ignorable name description value type key-id overwrite
     allowed-pattern tags tier policies data-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-parameter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutParameter"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-parameter))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy policy-id
                     policy-hash)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn policy policy-id policy-hash))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PutResourcePolicy"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun register-default-patch-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key baseline-id)
   (common-lisp:declare (common-lisp:ignorable baseline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-default-patch-baseline-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterDefaultPatchBaseline"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-default-patch-baseline))
(common-lisp:progn
 (common-lisp:defun register-patch-baseline-for-patch-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key baseline-id patch-group)
   (common-lisp:declare (common-lisp:ignorable baseline-id patch-group))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-patch-baseline-for-patch-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterPatchBaselineForPatchGroup"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-patch-baseline-for-patch-group))
(common-lisp:progn
 (common-lisp:defun register-target-with-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id resource-type targets
                     owner-information name description client-token)
   (common-lisp:declare
    (common-lisp:ignorable window-id resource-type targets owner-information
     name description client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-target-with-maintenance-window-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterTargetWithMaintenanceWindow"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-target-with-maintenance-window))
(common-lisp:progn
 (common-lisp:defun register-task-with-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id targets task-arn
                     service-role-arn task-type task-parameters
                     task-invocation-parameters priority max-concurrency
                     max-errors logging-info name description client-token
                     cutoff-behavior alarm-configuration)
   (common-lisp:declare
    (common-lisp:ignorable window-id targets task-arn service-role-arn
     task-type task-parameters task-invocation-parameters priority
     max-concurrency max-errors logging-info name description client-token
     cutoff-behavior alarm-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-task-with-maintenance-window-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterTaskWithMaintenanceWindow"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-task-with-maintenance-window))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id tag-keys)
   (common-lisp:declare
    (common-lisp:ignorable resource-type resource-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-tags-from-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveTagsFromResource"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags-from-resource))
(common-lisp:progn
 (common-lisp:defun reset-service-setting
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key setting-id)
   (common-lisp:declare (common-lisp:ignorable setting-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-service-setting-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ResetServiceSetting"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reset-service-setting))
(common-lisp:progn
 (common-lisp:defun resume-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ResumeSession"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resume-session))
(common-lisp:progn
 (common-lisp:defun send-automation-signal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key automation-execution-id signal-type
                     payload)
   (common-lisp:declare
    (common-lisp:ignorable automation-execution-id signal-type payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-automation-signal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SendAutomationSignal"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-automation-signal))
(common-lisp:progn
 (common-lisp:defun send-command
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-ids targets document-name
                     document-version document-hash document-hash-type
                     timeout-seconds comment parameters output-s3region
                     output-s3bucket-name output-s3key-prefix max-concurrency
                     max-errors service-role-arn notification-config
                     cloud-watch-output-config alarm-configuration)
   (common-lisp:declare
    (common-lisp:ignorable instance-ids targets document-name document-version
     document-hash document-hash-type timeout-seconds comment parameters
     output-s3region output-s3bucket-name output-s3key-prefix max-concurrency
     max-errors service-role-arn notification-config cloud-watch-output-config
     alarm-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-command-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SendCommand"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-command))
(common-lisp:progn
 (common-lisp:defun start-associations-once
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-ids)
   (common-lisp:declare (common-lisp:ignorable association-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-associations-once-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartAssociationsOnce"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-associations-once))
(common-lisp:progn
 (common-lisp:defun start-automation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key document-name document-version parameters
                     client-token mode target-parameter-name targets
                     target-maps max-concurrency max-errors target-locations
                     tags alarm-configuration)
   (common-lisp:declare
    (common-lisp:ignorable document-name document-version parameters
     client-token mode target-parameter-name targets target-maps
     max-concurrency max-errors target-locations tags alarm-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-automation-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartAutomationExecution"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-automation-execution))
(common-lisp:progn
 (common-lisp:defun start-change-request-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scheduled-time document-name
                     document-version parameters change-request-name
                     client-token auto-approve runbooks tags scheduled-end-time
                     change-details)
   (common-lisp:declare
    (common-lisp:ignorable scheduled-time document-name document-version
     parameters change-request-name client-token auto-approve runbooks tags
     scheduled-end-time change-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-change-request-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartChangeRequestExecution"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-change-request-execution))
(common-lisp:progn
 (common-lisp:defun start-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key target document-name reason parameters)
   (common-lisp:declare
    (common-lisp:ignorable target document-name reason parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartSession"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-session))
(common-lisp:progn
 (common-lisp:defun stop-automation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key automation-execution-id type)
   (common-lisp:declare (common-lisp:ignorable automation-execution-id type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-automation-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopAutomationExecution"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-automation-execution))
(common-lisp:progn
 (common-lisp:defun terminate-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id)
   (common-lisp:declare (common-lisp:ignorable session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-terminate-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TerminateSession"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'terminate-session))
(common-lisp:progn
 (common-lisp:defun unlabel-parameter-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name parameter-version labels)
   (common-lisp:declare (common-lisp:ignorable name parameter-version labels))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-unlabel-parameter-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UnlabelParameterVersion"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'unlabel-parameter-version))
(common-lisp:progn
 (common-lisp:defun update-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key association-id parameters
                     document-version schedule-expression output-location name
                     targets association-name association-version
                     automation-target-parameter-name max-errors
                     max-concurrency compliance-severity sync-compliance
                     apply-only-at-cron-interval calendar-names
                     target-locations schedule-offset target-maps
                     alarm-configuration)
   (common-lisp:declare
    (common-lisp:ignorable association-id parameters document-version
     schedule-expression output-location name targets association-name
     association-version automation-target-parameter-name max-errors
     max-concurrency compliance-severity sync-compliance
     apply-only-at-cron-interval calendar-names target-locations
     schedule-offset target-maps alarm-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-association-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateAssociation"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-association))
(common-lisp:progn
 (common-lisp:defun update-association-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name instance-id association-status)
   (common-lisp:declare
    (common-lisp:ignorable name instance-id association-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-association-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateAssociationStatus"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-association-status))
(common-lisp:progn
 (common-lisp:defun update-document
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key content attachments name display-name
                     version-name document-version document-format target-type)
   (common-lisp:declare
    (common-lisp:ignorable content attachments name display-name version-name
     document-version document-format target-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-document-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDocument"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-document))
(common-lisp:progn
 (common-lisp:defun update-document-default-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name document-version)
   (common-lisp:declare (common-lisp:ignorable name document-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-document-default-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDocumentDefaultVersion"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-document-default-version))
(common-lisp:progn
 (common-lisp:defun update-document-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name document-version document-reviews)
   (common-lisp:declare
    (common-lisp:ignorable name document-version document-reviews))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-document-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateDocumentMetadata"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-document-metadata))
(common-lisp:progn
 (common-lisp:defun update-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id name description start-date
                     end-date schedule schedule-timezone schedule-offset
                     duration cutoff allow-unassociated-targets enabled
                     replace)
   (common-lisp:declare
    (common-lisp:ignorable window-id name description start-date end-date
     schedule schedule-timezone schedule-offset duration cutoff
     allow-unassociated-targets enabled replace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-maintenance-window-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateMaintenanceWindow"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-maintenance-window))
(common-lisp:progn
 (common-lisp:defun update-maintenance-window-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id window-target-id targets
                     owner-information name description replace)
   (common-lisp:declare
    (common-lisp:ignorable window-id window-target-id targets owner-information
     name description replace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-maintenance-window-target-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateMaintenanceWindowTarget"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-maintenance-window-target))
(common-lisp:progn
 (common-lisp:defun update-maintenance-window-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key window-id window-task-id targets task-arn
                     service-role-arn task-parameters
                     task-invocation-parameters priority max-concurrency
                     max-errors logging-info name description replace
                     cutoff-behavior alarm-configuration)
   (common-lisp:declare
    (common-lisp:ignorable window-id window-task-id targets task-arn
     service-role-arn task-parameters task-invocation-parameters priority
     max-concurrency max-errors logging-info name description replace
     cutoff-behavior alarm-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-maintenance-window-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateMaintenanceWindowTask"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-maintenance-window-task))
(common-lisp:progn
 (common-lisp:defun update-managed-instance-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-id iam-role)
   (common-lisp:declare (common-lisp:ignorable instance-id iam-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-managed-instance-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateManagedInstanceRole"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-managed-instance-role))
(common-lisp:progn
 (common-lisp:defun update-ops-item
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description operational-data
                     operational-data-to-delete notifications priority
                     related-ops-items status ops-item-id title category
                     severity actual-start-time actual-end-time
                     planned-start-time planned-end-time ops-item-arn)
   (common-lisp:declare
    (common-lisp:ignorable description operational-data
     operational-data-to-delete notifications priority related-ops-items status
     ops-item-id title category severity actual-start-time actual-end-time
     planned-start-time planned-end-time ops-item-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ops-item-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateOpsItem"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ops-item))
(common-lisp:progn
 (common-lisp:defun update-ops-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ops-metadata-arn metadata-to-update
                     keys-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable ops-metadata-arn metadata-to-update keys-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ops-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateOpsMetadata"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ops-metadata))
(common-lisp:progn
 (common-lisp:defun update-patch-baseline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key baseline-id name global-filters
                     approval-rules approved-patches
                     approved-patches-compliance-level
                     approved-patches-enable-non-security rejected-patches
                     rejected-patches-action description sources replace)
   (common-lisp:declare
    (common-lisp:ignorable baseline-id name global-filters approval-rules
     approved-patches approved-patches-compliance-level
     approved-patches-enable-non-security rejected-patches
     rejected-patches-action description sources replace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-patch-baseline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdatePatchBaseline"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-patch-baseline))
(common-lisp:progn
 (common-lisp:defun update-resource-data-sync
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sync-name sync-type sync-source)
   (common-lisp:declare
    (common-lisp:ignorable sync-name sync-type sync-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-resource-data-sync-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateResourceDataSync"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource-data-sync))
(common-lisp:progn
 (common-lisp:defun update-service-setting
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key setting-id setting-value)
   (common-lisp:declare (common-lisp:ignorable setting-id setting-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-setting-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateServiceSetting"
                                                        "2014-11-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-setting))
