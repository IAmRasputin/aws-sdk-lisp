;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/medialive/api
  (:use)
  (:nicknames #:aws/medialive)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/medialive/api)
(common-lisp:progn
 (common-lisp:defclass medialive-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "medialive" :protocol
                        :rest-json))
 (common-lisp:export 'medialive-request))
(common-lisp:progn
 (common-lisp:define-condition medialive-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'medialive-error))
(common-lisp:defvar *error-map*
  '(("BadGatewayException" . bad-gateway-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("GatewayTimeoutException" . gateway-timeout-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnprocessableEntityException" . unprocessable-entity-exception)))
(common-lisp:deftype aac-coding-mode () 'common-lisp:string)
(common-lisp:deftype aac-input-type () 'common-lisp:string)
(common-lisp:deftype aac-profile () 'common-lisp:string)
(common-lisp:deftype aac-rate-control-mode () 'common-lisp:string)
(common-lisp:deftype aac-raw-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aac-settings common-lisp:nil
                       ((vbr-quality :initarg :vbr-quality :type
                         (common-lisp:or aac-vbr-quality common-lisp:null)
                         :accessor %aac-settings-vbr-quality :initform
                         common-lisp:nil)
                        (spec :initarg :spec :type
                         (common-lisp:or aac-spec common-lisp:null) :accessor
                         %aac-settings-spec :initform common-lisp:nil)
                        (sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %aac-settings-sample-rate :initform common-lisp:nil)
                        (raw-format :initarg :raw-format :type
                         (common-lisp:or aac-raw-format common-lisp:null)
                         :accessor %aac-settings-raw-format :initform
                         common-lisp:nil)
                        (rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or aac-rate-control-mode
                                         common-lisp:null)
                         :accessor %aac-settings-rate-control-mode :initform
                         common-lisp:nil)
                        (profile :initarg :profile :type
                         (common-lisp:or aac-profile common-lisp:null)
                         :accessor %aac-settings-profile :initform
                         common-lisp:nil)
                        (input-type :initarg :input-type :type
                         (common-lisp:or aac-input-type common-lisp:null)
                         :accessor %aac-settings-input-type :initform
                         common-lisp:nil)
                        (coding-mode :initarg :coding-mode :type
                         (common-lisp:or aac-coding-mode common-lisp:null)
                         :accessor %aac-settings-coding-mode :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %aac-settings-bitrate :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'aac-settings 'make-aac-settings))
 (common-lisp:defun make-aac-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vbr-quality spec sample-rate raw-format
                     rate-control-mode profile input-type coding-mode bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'aac-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aac-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aac-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "InputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-format))
      (common-lisp:list
       (common-lisp:cons "RawFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "Spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vbr-quality))
      (common-lisp:list
       (common-lisp:cons "VbrQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aac-settings))
   common-lisp:nil))
(common-lisp:deftype aac-spec () 'common-lisp:string)
(common-lisp:deftype aac-vbr-quality () 'common-lisp:string)
(common-lisp:deftype ac3bitstream-mode () 'common-lisp:string)
(common-lisp:deftype ac3coding-mode () 'common-lisp:string)
(common-lisp:deftype ac3drc-profile () 'common-lisp:string)
(common-lisp:deftype ac3lfe-filter () 'common-lisp:string)
(common-lisp:deftype ac3metadata-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ac3settings common-lisp:nil
                       ((metadata-control :initarg :metadata-control :type
                         (common-lisp:or ac3metadata-control common-lisp:null)
                         :accessor %ac3settings-metadata-control :initform
                         common-lisp:nil)
                        (lfe-filter :initarg :lfe-filter :type
                         (common-lisp:or ac3lfe-filter common-lisp:null)
                         :accessor %ac3settings-lfe-filter :initform
                         common-lisp:nil)
                        (drc-profile :initarg :drc-profile :type
                         (common-lisp:or ac3drc-profile common-lisp:null)
                         :accessor %ac3settings-drc-profile :initform
                         common-lisp:nil)
                        (dialnorm :initarg :dialnorm :type
                         (common-lisp:or |__integerMin1Max31| common-lisp:null)
                         :accessor %ac3settings-dialnorm :initform
                         common-lisp:nil)
                        (coding-mode :initarg :coding-mode :type
                         (common-lisp:or ac3coding-mode common-lisp:null)
                         :accessor %ac3settings-coding-mode :initform
                         common-lisp:nil)
                        (bitstream-mode :initarg :bitstream-mode :type
                         (common-lisp:or ac3bitstream-mode common-lisp:null)
                         :accessor %ac3settings-bitstream-mode :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %ac3settings-bitrate :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ac3settings 'make-ac3settings))
 (common-lisp:defun make-ac3settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata-control lfe-filter drc-profile
                     dialnorm coding-mode bitstream-mode bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'ac3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ac3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ac3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitstream-mode))
      (common-lisp:list
       (common-lisp:cons "BitstreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-profile))
      (common-lisp:list
       (common-lisp:cons "DrcProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-filter))
      (common-lisp:list
       (common-lisp:cons "LfeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-control))
      (common-lisp:list
       (common-lisp:cons "MetadataControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ac3settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-input-device-transfer-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %accept-input-device-transfer-request-input-device-id
                         :initform
                         (common-lisp:error ":input-device-id is required"))))
 (common-lisp:export
  (common-lisp:list 'accept-input-device-transfer-request
                    'make-accept-input-device-transfer-request))
 (common-lisp:defun make-accept-input-device-transfer-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-input-device-transfer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-input-device-transfer-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'accept-input-device-transfer-response
                    'make-accept-input-device-transfer-response))
 (common-lisp:defun make-accept-input-device-transfer-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-input-device-transfer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-denied common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %access-denied-message :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'access-denied 'make-access-denied))
 (common-lisp:defun make-access-denied
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'access-denied
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-denied))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-denied))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-denied))
   common-lisp:nil))
(common-lisp:deftype accessibility-type () 'common-lisp:string)
(common-lisp:deftype afd-signaling () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ancillary-source-settings common-lisp:nil
                       ((source-ancillary-channel-number :initarg
                         :source-ancillary-channel-number :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor
                         %ancillary-source-settings-source-ancillary-channel-number
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ancillary-source-settings
                    'make-ancillary-source-settings))
 (common-lisp:defun make-ancillary-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-ancillary-channel-number)
   (common-lisp:apply #'common-lisp:make-instance 'ancillary-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-ancillary-channel-number))
      (common-lisp:list
       (common-lisp:cons "SourceAncillaryChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-cdn-settings common-lisp:nil
                       ((archive-s3settings :initarg :archive-s3settings :type
                         (common-lisp:or archive-s3settings common-lisp:null)
                         :accessor %archive-cdn-settings-archive-s3settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'archive-cdn-settings 'make-archive-cdn-settings))
 (common-lisp:defun make-archive-cdn-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key archive-s3settings)
   (common-lisp:apply #'common-lisp:make-instance 'archive-cdn-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-cdn-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-cdn-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-s3settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveS3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-cdn-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-container-settings common-lisp:nil
                       ((raw-settings :initarg :raw-settings :type
                         (common-lisp:or raw-settings common-lisp:null)
                         :accessor %archive-container-settings-raw-settings
                         :initform common-lisp:nil)
                        (m2ts-settings :initarg :m2ts-settings :type
                         (common-lisp:or m2ts-settings common-lisp:null)
                         :accessor %archive-container-settings-m2ts-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'archive-container-settings
                    'make-archive-container-settings))
 (common-lisp:defun make-archive-container-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key raw-settings m2ts-settings)
   (common-lisp:apply #'common-lisp:make-instance 'archive-container-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-container-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-container-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm2ts-settings))
      (common-lisp:list
       (common-lisp:cons "M2tsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-settings))
      (common-lisp:list
       (common-lisp:cons "RawSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-container-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-group-settings common-lisp:nil
                       ((rollover-interval :initarg :rollover-interval :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %archive-group-settings-rollover-interval
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor %archive-group-settings-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (archive-cdn-settings :initarg :archive-cdn-settings
                         :type
                         (common-lisp:or archive-cdn-settings common-lisp:null)
                         :accessor %archive-group-settings-archive-cdn-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'archive-group-settings 'make-archive-group-settings))
 (common-lisp:defun make-archive-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rollover-interval destination
                     archive-cdn-settings)
   (common-lisp:apply #'common-lisp:make-instance 'archive-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-cdn-settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveCdnSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollover-interval))
      (common-lisp:list
       (common-lisp:cons "RolloverInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-output-settings common-lisp:nil
                       ((name-modifier :initarg :name-modifier :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %archive-output-settings-name-modifier :initform
                         common-lisp:nil)
                        (extension :initarg :extension :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %archive-output-settings-extension :initform
                         common-lisp:nil)
                        (container-settings :initarg :container-settings :type
                         (common-lisp:or archive-container-settings
                                         common-lisp:null)
                         :accessor %archive-output-settings-container-settings
                         :initform
                         (common-lisp:error
                          ":container-settings is required"))))
 (common-lisp:export
  (common-lisp:list 'archive-output-settings 'make-archive-output-settings))
 (common-lisp:defun make-archive-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name-modifier extension
                     container-settings)
   (common-lisp:apply #'common-lisp:make-instance 'archive-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-settings))
      (common-lisp:list
       (common-lisp:cons "ContainerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension))
      (common-lisp:list
       (common-lisp:cons "Extension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-output-settings))
   common-lisp:nil))
(common-lisp:deftype archive-s3log-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass archive-s3settings common-lisp:nil
                       ((canned-acl :initarg :canned-acl :type
                         (common-lisp:or s3canned-acl common-lisp:null)
                         :accessor %archive-s3settings-canned-acl :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'archive-s3settings 'make-archive-s3settings))
 (common-lisp:defun make-archive-s3settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canned-acl)
   (common-lisp:apply #'common-lisp:make-instance 'archive-s3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-s3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-s3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-s3settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass arib-destination-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'arib-destination-settings
                    'make-arib-destination-settings))
 (common-lisp:defun make-arib-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'arib-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          arib-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          arib-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          arib-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass arib-source-settings common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'arib-source-settings 'make-arib-source-settings))
 (common-lisp:defun make-arib-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'arib-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input arib-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input arib-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input arib-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-channel-mapping common-lisp:nil
                       ((output-channel :initarg :output-channel :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor %audio-channel-mapping-output-channel
                         :initform
                         (common-lisp:error ":output-channel is required"))
                        (input-channel-levels :initarg :input-channel-levels
                         :type
                         (common-lisp:or |__listOfInputChannelLevel|
                                         common-lisp:null)
                         :accessor %audio-channel-mapping-input-channel-levels
                         :initform
                         (common-lisp:error
                          ":input-channel-levels is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-channel-mapping 'make-audio-channel-mapping))
 (common-lisp:defun make-audio-channel-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key output-channel input-channel-levels)
   (common-lisp:apply #'common-lisp:make-instance 'audio-channel-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-channel-levels))
      (common-lisp:list
       (common-lisp:cons "InputChannelLevels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-channel))
      (common-lisp:list
       (common-lisp:cons "OutputChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-codec-settings common-lisp:nil
                       ((wav-settings :initarg :wav-settings :type
                         (common-lisp:or wav-settings common-lisp:null)
                         :accessor %audio-codec-settings-wav-settings :initform
                         common-lisp:nil)
                        (pass-through-settings :initarg :pass-through-settings
                         :type
                         (common-lisp:or pass-through-settings
                                         common-lisp:null)
                         :accessor %audio-codec-settings-pass-through-settings
                         :initform common-lisp:nil)
                        (mp2settings :initarg :mp2settings :type
                         (common-lisp:or mp2settings common-lisp:null)
                         :accessor %audio-codec-settings-mp2settings :initform
                         common-lisp:nil)
                        (eac3settings :initarg :eac3settings :type
                         (common-lisp:or eac3settings common-lisp:null)
                         :accessor %audio-codec-settings-eac3settings :initform
                         common-lisp:nil)
                        (eac3atmos-settings :initarg :eac3atmos-settings :type
                         (common-lisp:or eac3atmos-settings common-lisp:null)
                         :accessor %audio-codec-settings-eac3atmos-settings
                         :initform common-lisp:nil)
                        (ac3settings :initarg :ac3settings :type
                         (common-lisp:or ac3settings common-lisp:null)
                         :accessor %audio-codec-settings-ac3settings :initform
                         common-lisp:nil)
                        (aac-settings :initarg :aac-settings :type
                         (common-lisp:or aac-settings common-lisp:null)
                         :accessor %audio-codec-settings-aac-settings :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-codec-settings 'make-audio-codec-settings))
 (common-lisp:defun make-audio-codec-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wav-settings pass-through-settings
                     mp2settings eac3settings eac3atmos-settings ac3settings
                     aac-settings)
   (common-lisp:apply #'common-lisp:make-instance 'audio-codec-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aac-settings))
      (common-lisp:list
       (common-lisp:cons "AacSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ac3settings))
      (common-lisp:list
       (common-lisp:cons "Ac3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eac3atmos-settings))
      (common-lisp:list
       (common-lisp:cons "Eac3AtmosSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eac3settings))
      (common-lisp:list
       (common-lisp:cons "Eac3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mp2settings))
      (common-lisp:list
       (common-lisp:cons "Mp2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pass-through-settings))
      (common-lisp:list
       (common-lisp:cons "PassThroughSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wav-settings))
      (common-lisp:list
       (common-lisp:cons "WavSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-description common-lisp:nil
                       ((stream-name :initarg :stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %audio-description-stream-name :initform
                         common-lisp:nil)
                        (remix-settings :initarg :remix-settings :type
                         (common-lisp:or remix-settings common-lisp:null)
                         :accessor %audio-description-remix-settings :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__stringMax255| common-lisp:null)
                         :accessor %audio-description-name :initform
                         (common-lisp:error ":name is required"))
                        (language-code-control :initarg :language-code-control
                         :type
                         (common-lisp:or
                          audio-description-language-code-control
                          common-lisp:null)
                         :accessor %audio-description-language-code-control
                         :initform common-lisp:nil)
                        (language-code :initarg :language-code :type
                         (common-lisp:or |__stringMin1Max35| common-lisp:null)
                         :accessor %audio-description-language-code :initform
                         common-lisp:nil)
                        (codec-settings :initarg :codec-settings :type
                         (common-lisp:or audio-codec-settings common-lisp:null)
                         :accessor %audio-description-codec-settings :initform
                         common-lisp:nil)
                        (audio-watermarking-settings :initarg
                         :audio-watermarking-settings :type
                         (common-lisp:or audio-watermark-settings
                                         common-lisp:null)
                         :accessor
                         %audio-description-audio-watermarking-settings
                         :initform common-lisp:nil)
                        (audio-type-control :initarg :audio-type-control :type
                         (common-lisp:or audio-description-audio-type-control
                                         common-lisp:null)
                         :accessor %audio-description-audio-type-control
                         :initform common-lisp:nil)
                        (audio-type :initarg :audio-type :type
                         (common-lisp:or audio-type common-lisp:null) :accessor
                         %audio-description-audio-type :initform
                         common-lisp:nil)
                        (audio-selector-name :initarg :audio-selector-name
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %audio-description-audio-selector-name
                         :initform
                         (common-lisp:error
                          ":audio-selector-name is required"))
                        (audio-normalization-settings :initarg
                         :audio-normalization-settings :type
                         (common-lisp:or audio-normalization-settings
                                         common-lisp:null)
                         :accessor
                         %audio-description-audio-normalization-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-description 'make-audio-description))
 (common-lisp:defun make-audio-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream-name remix-settings name
                     language-code-control language-code codec-settings
                     audio-watermarking-settings audio-type-control audio-type
                     audio-selector-name audio-normalization-settings)
   (common-lisp:apply #'common-lisp:make-instance 'audio-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-normalization-settings))
      (common-lisp:list
       (common-lisp:cons "AudioNormalizationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selector-name))
      (common-lisp:list
       (common-lisp:cons "AudioSelectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-type))
      (common-lisp:list
       (common-lisp:cons "AudioType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-type-control))
      (common-lisp:list
       (common-lisp:cons "AudioTypeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-watermarking-settings))
      (common-lisp:list
       (common-lisp:cons "AudioWatermarkingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-settings))
      (common-lisp:list
       (common-lisp:cons "CodecSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-code-control))
      (common-lisp:list
       (common-lisp:cons "LanguageCodeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remix-settings))
      (common-lisp:list
       (common-lisp:cons "RemixSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-description))
   common-lisp:nil))
(common-lisp:deftype audio-description-audio-type-control ()
  'common-lisp:string)
(common-lisp:deftype audio-description-language-code-control ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-dolby-edecode common-lisp:nil
                       ((program-selection :initarg :program-selection :type
                         (common-lisp:or dolby-eprogram-selection
                                         common-lisp:null)
                         :accessor %audio-dolby-edecode-program-selection
                         :initform
                         (common-lisp:error
                          ":program-selection is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-dolby-edecode 'make-audio-dolby-edecode))
 (common-lisp:defun make-audio-dolby-edecode
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key program-selection)
   (common-lisp:apply #'common-lisp:make-instance 'audio-dolby-edecode
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-dolby-edecode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-dolby-edecode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-selection))
      (common-lisp:list
       (common-lisp:cons "ProgramSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-dolby-edecode))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-hls-rendition-selection common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor %audio-hls-rendition-selection-name
                         :initform (common-lisp:error ":name is required"))
                        (group-id :initarg :group-id :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor %audio-hls-rendition-selection-group-id
                         :initform
                         (common-lisp:error ":group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-hls-rendition-selection
                    'make-audio-hls-rendition-selection))
 (common-lisp:defun make-audio-hls-rendition-selection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'audio-hls-rendition-selection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-hls-rendition-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-hls-rendition-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-hls-rendition-selection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-language-selection common-lisp:nil
                       ((language-selection-policy :initarg
                         :language-selection-policy :type
                         (common-lisp:or audio-language-selection-policy
                                         common-lisp:null)
                         :accessor
                         %audio-language-selection-language-selection-policy
                         :initform common-lisp:nil)
                        (language-code :initarg :language-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %audio-language-selection-language-code :initform
                         (common-lisp:error ":language-code is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-language-selection 'make-audio-language-selection))
 (common-lisp:defun make-audio-language-selection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language-selection-policy language-code)
   (common-lisp:apply #'common-lisp:make-instance 'audio-language-selection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-language-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-language-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-selection-policy))
      (common-lisp:list
       (common-lisp:cons "LanguageSelectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-language-selection))
   common-lisp:nil))
(common-lisp:deftype audio-language-selection-policy () 'common-lisp:string)
(common-lisp:deftype audio-normalization-algorithm () 'common-lisp:string)
(common-lisp:deftype audio-normalization-algorithm-control ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-normalization-settings common-lisp:nil
                       ((target-lkfs :initarg :target-lkfs :type
                         (common-lisp:or |__doubleMinNegative59Max0|
                                         common-lisp:null)
                         :accessor %audio-normalization-settings-target-lkfs
                         :initform common-lisp:nil)
                        (algorithm-control :initarg :algorithm-control :type
                         (common-lisp:or audio-normalization-algorithm-control
                                         common-lisp:null)
                         :accessor
                         %audio-normalization-settings-algorithm-control
                         :initform common-lisp:nil)
                        (algorithm :initarg :algorithm :type
                         (common-lisp:or audio-normalization-algorithm
                                         common-lisp:null)
                         :accessor %audio-normalization-settings-algorithm
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-normalization-settings
                    'make-audio-normalization-settings))
 (common-lisp:defun make-audio-normalization-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-lkfs algorithm-control algorithm)
   (common-lisp:apply #'common-lisp:make-instance 'audio-normalization-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-control))
      (common-lisp:list
       (common-lisp:cons "AlgorithmControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-lkfs))
      (common-lisp:list
       (common-lisp:cons "TargetLkfs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   common-lisp:nil))
(common-lisp:deftype audio-only-hls-segment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-only-hls-settings common-lisp:nil
                       ((segment-type :initarg :segment-type :type
                         (common-lisp:or audio-only-hls-segment-type
                                         common-lisp:null)
                         :accessor %audio-only-hls-settings-segment-type
                         :initform common-lisp:nil)
                        (audio-track-type :initarg :audio-track-type :type
                         (common-lisp:or audio-only-hls-track-type
                                         common-lisp:null)
                         :accessor %audio-only-hls-settings-audio-track-type
                         :initform common-lisp:nil)
                        (audio-only-image :initarg :audio-only-image :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor %audio-only-hls-settings-audio-only-image
                         :initform common-lisp:nil)
                        (audio-group-id :initarg :audio-group-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %audio-only-hls-settings-audio-group-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-only-hls-settings 'make-audio-only-hls-settings))
 (common-lisp:defun make-audio-only-hls-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key segment-type audio-track-type
                     audio-only-image audio-group-id)
   (common-lisp:apply #'common-lisp:make-instance 'audio-only-hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-only-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-only-hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-group-id))
      (common-lisp:list
       (common-lisp:cons "AudioGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-only-image))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-track-type))
      (common-lisp:list
       (common-lisp:cons "AudioTrackType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-type))
      (common-lisp:list
       (common-lisp:cons "SegmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-only-hls-settings))
   common-lisp:nil))
(common-lisp:deftype audio-only-hls-track-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-pid-selection common-lisp:nil
                       ((pid :initarg :pid :type
                         (common-lisp:or |__integerMin0Max8191|
                                         common-lisp:null)
                         :accessor %audio-pid-selection-pid :initform
                         (common-lisp:error ":pid is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-pid-selection 'make-audio-pid-selection))
 (common-lisp:defun make-audio-pid-selection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pid)
   (common-lisp:apply #'common-lisp:make-instance 'audio-pid-selection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-pid-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-pid-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-pid-selection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-selector common-lisp:nil
                       ((selector-settings :initarg :selector-settings :type
                         (common-lisp:or audio-selector-settings
                                         common-lisp:null)
                         :accessor %audio-selector-selector-settings :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor %audio-selector-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'audio-selector 'make-audio-selector))
 (common-lisp:defun make-audio-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selector-settings name)
   (common-lisp:apply #'common-lisp:make-instance 'audio-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-settings))
      (common-lisp:list
       (common-lisp:cons "SelectorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-selector-settings common-lisp:nil
                       ((audio-track-selection :initarg :audio-track-selection
                         :type
                         (common-lisp:or audio-track-selection
                                         common-lisp:null)
                         :accessor
                         %audio-selector-settings-audio-track-selection
                         :initform common-lisp:nil)
                        (audio-pid-selection :initarg :audio-pid-selection
                         :type
                         (common-lisp:or audio-pid-selection common-lisp:null)
                         :accessor %audio-selector-settings-audio-pid-selection
                         :initform common-lisp:nil)
                        (audio-language-selection :initarg
                         :audio-language-selection :type
                         (common-lisp:or audio-language-selection
                                         common-lisp:null)
                         :accessor
                         %audio-selector-settings-audio-language-selection
                         :initform common-lisp:nil)
                        (audio-hls-rendition-selection :initarg
                         :audio-hls-rendition-selection :type
                         (common-lisp:or audio-hls-rendition-selection
                                         common-lisp:null)
                         :accessor
                         %audio-selector-settings-audio-hls-rendition-selection
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-selector-settings 'make-audio-selector-settings))
 (common-lisp:defun make-audio-selector-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audio-track-selection audio-pid-selection
                     audio-language-selection audio-hls-rendition-selection)
   (common-lisp:apply #'common-lisp:make-instance 'audio-selector-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-selector-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-selector-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-hls-rendition-selection))
      (common-lisp:list
       (common-lisp:cons "AudioHlsRenditionSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-language-selection))
      (common-lisp:list
       (common-lisp:cons "AudioLanguageSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pid-selection))
      (common-lisp:list
       (common-lisp:cons "AudioPidSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-track-selection))
      (common-lisp:list
       (common-lisp:cons "AudioTrackSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-selector-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-silence-failover-settings common-lisp:nil
                       ((audio-silence-threshold-msec :initarg
                         :audio-silence-threshold-msec :type
                         (common-lisp:or |__integerMin1000| common-lisp:null)
                         :accessor
                         %audio-silence-failover-settings-audio-silence-threshold-msec
                         :initform common-lisp:nil)
                        (audio-selector-name :initarg :audio-selector-name
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %audio-silence-failover-settings-audio-selector-name
                         :initform
                         (common-lisp:error
                          ":audio-selector-name is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-silence-failover-settings
                    'make-audio-silence-failover-settings))
 (common-lisp:defun make-audio-silence-failover-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key audio-silence-threshold-msec
                     audio-selector-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'audio-silence-failover-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-silence-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-silence-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selector-name))
      (common-lisp:list
       (common-lisp:cons "AudioSelectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-silence-threshold-msec))
      (common-lisp:list
       (common-lisp:cons "AudioSilenceThresholdMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-silence-failover-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-track common-lisp:nil
                       ((track :initarg :track :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %audio-track-track :initform
                         (common-lisp:error ":track is required"))))
 (common-lisp:export (common-lisp:list 'audio-track 'make-audio-track))
 (common-lisp:defun make-audio-track
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key track)
   (common-lisp:apply #'common-lisp:make-instance 'audio-track
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-track))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-track))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'track))
      (common-lisp:list
       (common-lisp:cons "Track"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-track))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass audio-track-selection common-lisp:nil
                       ((dolby-edecode :initarg :dolby-edecode :type
                         (common-lisp:or audio-dolby-edecode common-lisp:null)
                         :accessor %audio-track-selection-dolby-edecode
                         :initform common-lisp:nil)
                        (tracks :initarg :tracks :type
                         (common-lisp:or |__listOfAudioTrack| common-lisp:null)
                         :accessor %audio-track-selection-tracks :initform
                         (common-lisp:error ":tracks is required"))))
 (common-lisp:export
  (common-lisp:list 'audio-track-selection 'make-audio-track-selection))
 (common-lisp:defun make-audio-track-selection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dolby-edecode tracks)
   (common-lisp:apply #'common-lisp:make-instance 'audio-track-selection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-track-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-track-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracks))
      (common-lisp:list
       (common-lisp:cons "Tracks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dolby-edecode))
      (common-lisp:list
       (common-lisp:cons "DolbyEDecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-track-selection))
   common-lisp:nil))
(common-lisp:deftype audio-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass audio-watermark-settings common-lisp:nil
                       ((nielsen-watermarks-settings :initarg
                         :nielsen-watermarks-settings :type
                         (common-lisp:or nielsen-watermarks-settings
                                         common-lisp:null)
                         :accessor
                         %audio-watermark-settings-nielsen-watermarks-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'audio-watermark-settings 'make-audio-watermark-settings))
 (common-lisp:defun make-audio-watermark-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nielsen-watermarks-settings)
   (common-lisp:apply #'common-lisp:make-instance 'audio-watermark-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-watermark-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-watermark-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-watermarks-settings))
      (common-lisp:list
       (common-lisp:cons "NielsenWatermarksSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-watermark-settings))
   common-lisp:nil))
(common-lisp:deftype authentication-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass automatic-input-failover-settings common-lisp:nil
                       ((secondary-input-id :initarg :secondary-input-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %automatic-input-failover-settings-secondary-input-id
                         :initform
                         (common-lisp:error ":secondary-input-id is required"))
                        (input-preference :initarg :input-preference :type
                         (common-lisp:or input-preference common-lisp:null)
                         :accessor
                         %automatic-input-failover-settings-input-preference
                         :initform common-lisp:nil)
                        (failover-conditions :initarg :failover-conditions
                         :type
                         (common-lisp:or |__listOfFailoverCondition|
                                         common-lisp:null)
                         :accessor
                         %automatic-input-failover-settings-failover-conditions
                         :initform common-lisp:nil)
                        (error-clear-time-msec :initarg :error-clear-time-msec
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         %automatic-input-failover-settings-error-clear-time-msec
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'automatic-input-failover-settings
                    'make-automatic-input-failover-settings))
 (common-lisp:defun make-automatic-input-failover-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secondary-input-id input-preference
                     failover-conditions error-clear-time-msec)
   (common-lisp:apply #'common-lisp:make-instance
                      'automatic-input-failover-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          automatic-input-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          automatic-input-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-clear-time-msec))
      (common-lisp:list
       (common-lisp:cons "ErrorClearTimeMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-conditions))
      (common-lisp:list
       (common-lisp:cons "FailoverConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-preference))
      (common-lisp:list
       (common-lisp:cons "InputPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-input-id))
      (common-lisp:list
       (common-lisp:cons "SecondaryInputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          automatic-input-failover-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass avail-blanking common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or avail-blanking-state common-lisp:null)
                         :accessor %avail-blanking-state :initform
                         common-lisp:nil)
                        (avail-blanking-image :initarg :avail-blanking-image
                         :type (common-lisp:or input-location common-lisp:null)
                         :accessor %avail-blanking-avail-blanking-image
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'avail-blanking 'make-avail-blanking))
 (common-lisp:defun make-avail-blanking
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state avail-blanking-image)
   (common-lisp:apply #'common-lisp:make-instance 'avail-blanking
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avail-blanking))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avail-blanking))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'avail-blanking-image))
      (common-lisp:list
       (common-lisp:cons "AvailBlankingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avail-blanking))
   common-lisp:nil))
(common-lisp:deftype avail-blanking-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass avail-configuration common-lisp:nil
                       ((avail-settings :initarg :avail-settings :type
                         (common-lisp:or avail-settings common-lisp:null)
                         :accessor %avail-configuration-avail-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'avail-configuration 'make-avail-configuration))
 (common-lisp:defun make-avail-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key avail-settings)
   (common-lisp:apply #'common-lisp:make-instance 'avail-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avail-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avail-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-settings))
      (common-lisp:list
       (common-lisp:cons "AvailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avail-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass avail-settings common-lisp:nil
                       ((scte35time-signal-apos :initarg
                         :scte35time-signal-apos :type
                         (common-lisp:or scte35time-signal-apos
                                         common-lisp:null)
                         :accessor %avail-settings-scte35time-signal-apos
                         :initform common-lisp:nil)
                        (scte35splice-insert :initarg :scte35splice-insert
                         :type
                         (common-lisp:or scte35splice-insert common-lisp:null)
                         :accessor %avail-settings-scte35splice-insert
                         :initform common-lisp:nil)
                        (esam :initarg :esam :type
                         (common-lisp:or esam common-lisp:null) :accessor
                         %avail-settings-esam :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'avail-settings 'make-avail-settings))
 (common-lisp:defun make-avail-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scte35time-signal-apos
                     scte35splice-insert esam)
   (common-lisp:apply #'common-lisp:make-instance 'avail-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avail-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avail-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'esam))
      (common-lisp:list
       (common-lisp:cons "Esam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35splice-insert))
      (common-lisp:list
       (common-lisp:cons "Scte35SpliceInsert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35time-signal-apos))
      (common-lisp:list
       (common-lisp:cons "Scte35TimeSignalApos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avail-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-gateway-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-gateway-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-gateway-exception 'bad-gateway-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass batch-delete common-lisp:nil
                       ((multiplex-ids :initarg :multiplex-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-delete-multiplex-ids :initform
                         common-lisp:nil)
                        (input-security-group-ids :initarg
                         :input-security-group-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-delete-input-security-group-ids
                         :initform common-lisp:nil)
                        (input-ids :initarg :input-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-delete-input-ids :initform
                         common-lisp:nil)
                        (channel-ids :initarg :channel-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-delete-channel-ids :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'batch-delete 'make-batch-delete))
 (common-lisp:defun make-batch-delete
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-ids input-security-group-ids
                     input-ids channel-ids)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-delete))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-delete))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-ids))
      (common-lisp:list
       (common-lisp:cons "InputIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-delete))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-request common-lisp:nil
                       ((multiplex-ids :initarg :multiplex-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-delete-request-multiplex-ids
                         :initform common-lisp:nil)
                        (input-security-group-ids :initarg
                         :input-security-group-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %batch-delete-request-input-security-group-ids
                         :initform common-lisp:nil)
                        (input-ids :initarg :input-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-delete-request-input-ids :initform
                         common-lisp:nil)
                        (channel-ids :initarg :channel-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-delete-request-channel-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-request 'make-batch-delete-request))
 (common-lisp:defun make-batch-delete-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-ids input-security-group-ids
                     input-ids channel-ids)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-delete-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-delete-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-ids))
      (common-lisp:list
       (common-lisp:cons "InputIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-delete-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-response common-lisp:nil
                       ((successful :initarg :successful :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor %batch-delete-response-successful :initform
                         common-lisp:nil)
                        (failed :initarg :failed :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor %batch-delete-response-failed :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-response 'make-batch-delete-response))
 (common-lisp:defun make-batch-delete-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key successful failed)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-result-model common-lisp:nil
                       ((successful :initarg :successful :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor %batch-delete-result-model-successful
                         :initform common-lisp:nil)
                        (failed :initarg :failed :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor %batch-delete-result-model-failed :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-result-model
                    'make-batch-delete-result-model))
 (common-lisp:defun make-batch-delete-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key successful failed)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-failed-result-model common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-failed-result-model-message :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-failed-result-model-id :initform
                         common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-failed-result-model-code :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-failed-result-model-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-failed-result-model
                    'make-batch-failed-result-model))
 (common-lisp:defun make-batch-failed-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message id code arn)
   (common-lisp:apply #'common-lisp:make-instance 'batch-failed-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-failed-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-failed-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-failed-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-schedule-action-create-request common-lisp:nil
                       ((schedule-actions :initarg :schedule-actions :type
                         (common-lisp:or |__listOfScheduleAction|
                                         common-lisp:null)
                         :accessor
                         %batch-schedule-action-create-request-schedule-actions
                         :initform
                         (common-lisp:error ":schedule-actions is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-create-request
                    'make-batch-schedule-action-create-request))
 (common-lisp:defun make-batch-schedule-action-create-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule-actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-schedule-action-create-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-schedule-action-create-result common-lisp:nil
                       ((schedule-actions :initarg :schedule-actions :type
                         (common-lisp:or |__listOfScheduleAction|
                                         common-lisp:null)
                         :accessor
                         %batch-schedule-action-create-result-schedule-actions
                         :initform
                         (common-lisp:error ":schedule-actions is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-create-result
                    'make-batch-schedule-action-create-result))
 (common-lisp:defun make-batch-schedule-action-create-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule-actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-schedule-action-create-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-schedule-action-delete-request common-lisp:nil
                       ((action-names :initarg :action-names :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %batch-schedule-action-delete-request-action-names
                         :initform
                         (common-lisp:error ":action-names is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-delete-request
                    'make-batch-schedule-action-delete-request))
 (common-lisp:defun make-batch-schedule-action-delete-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key action-names)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-schedule-action-delete-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-names))
      (common-lisp:list
       (common-lisp:cons "ActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-schedule-action-delete-result common-lisp:nil
                       ((schedule-actions :initarg :schedule-actions :type
                         (common-lisp:or |__listOfScheduleAction|
                                         common-lisp:null)
                         :accessor
                         %batch-schedule-action-delete-result-schedule-actions
                         :initform
                         (common-lisp:error ":schedule-actions is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-delete-result
                    'make-batch-schedule-action-delete-result))
 (common-lisp:defun make-batch-schedule-action-delete-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule-actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-schedule-action-delete-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-start common-lisp:nil
                       ((multiplex-ids :initarg :multiplex-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-start-multiplex-ids :initform
                         common-lisp:nil)
                        (channel-ids :initarg :channel-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-start-channel-ids :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'batch-start 'make-batch-start))
 (common-lisp:defun make-batch-start
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-ids channel-ids)
   (common-lisp:apply #'common-lisp:make-instance 'batch-start
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-start))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-start))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-start))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-start-request common-lisp:nil
                       ((multiplex-ids :initarg :multiplex-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-start-request-multiplex-ids :initform
                         common-lisp:nil)
                        (channel-ids :initarg :channel-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-start-request-channel-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-start-request 'make-batch-start-request))
 (common-lisp:defun make-batch-start-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-ids channel-ids)
   (common-lisp:apply #'common-lisp:make-instance 'batch-start-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-start-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-start-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-start-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-start-response common-lisp:nil
                       ((successful :initarg :successful :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor %batch-start-response-successful :initform
                         common-lisp:nil)
                        (failed :initarg :failed :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor %batch-start-response-failed :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-start-response 'make-batch-start-response))
 (common-lisp:defun make-batch-start-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key successful failed)
   (common-lisp:apply #'common-lisp:make-instance 'batch-start-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-start-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-start-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-start-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-start-result-model common-lisp:nil
                       ((successful :initarg :successful :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor %batch-start-result-model-successful
                         :initform common-lisp:nil)
                        (failed :initarg :failed :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor %batch-start-result-model-failed :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-start-result-model 'make-batch-start-result-model))
 (common-lisp:defun make-batch-start-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key successful failed)
   (common-lisp:apply #'common-lisp:make-instance 'batch-start-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop common-lisp:nil
                       ((multiplex-ids :initarg :multiplex-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-stop-multiplex-ids :initform
                         common-lisp:nil)
                        (channel-ids :initarg :channel-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-stop-channel-ids :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'batch-stop 'make-batch-stop))
 (common-lisp:defun make-batch-stop
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-ids channel-ids)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-stop))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-stop))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-stop))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop-request common-lisp:nil
                       ((multiplex-ids :initarg :multiplex-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-stop-request-multiplex-ids :initform
                         common-lisp:nil)
                        (channel-ids :initarg :channel-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %batch-stop-request-channel-ids :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-request 'make-batch-stop-request))
 (common-lisp:defun make-batch-stop-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-ids channel-ids)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-stop-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-stop-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-stop-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop-response common-lisp:nil
                       ((successful :initarg :successful :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor %batch-stop-response-successful :initform
                         common-lisp:nil)
                        (failed :initarg :failed :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor %batch-stop-response-failed :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-response 'make-batch-stop-response))
 (common-lisp:defun make-batch-stop-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key successful failed)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-stop-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-stop-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-stop-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop-result-model common-lisp:nil
                       ((successful :initarg :successful :type
                         (common-lisp:or |__listOfBatchSuccessfulResultModel|
                                         common-lisp:null)
                         :accessor %batch-stop-result-model-successful
                         :initform common-lisp:nil)
                        (failed :initarg :failed :type
                         (common-lisp:or |__listOfBatchFailedResultModel|
                                         common-lisp:null)
                         :accessor %batch-stop-result-model-failed :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-result-model 'make-batch-stop-result-model))
 (common-lisp:defun make-batch-stop-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key successful failed)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-successful-result-model common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-successful-result-model-state :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-successful-result-model-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-successful-result-model-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-successful-result-model
                    'make-batch-successful-result-model))
 (common-lisp:defun make-batch-successful-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-successful-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-successful-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-successful-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-successful-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-schedule-request common-lisp:nil
                       ((deletes :initarg :deletes :type
                         (common-lisp:or batch-schedule-action-delete-request
                                         common-lisp:null)
                         :accessor %batch-update-schedule-request-deletes
                         :initform common-lisp:nil)
                        (creates :initarg :creates :type
                         (common-lisp:or batch-schedule-action-create-request
                                         common-lisp:null)
                         :accessor %batch-update-schedule-request-creates
                         :initform common-lisp:nil)
                        (channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %batch-update-schedule-request-channel-id :initform
                         (common-lisp:error ":channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-update-schedule-request
                    'make-batch-update-schedule-request))
 (common-lisp:defun make-batch-update-schedule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletes creates channel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creates))
      (common-lisp:list
       (common-lisp:cons "Creates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "Deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-schedule-response common-lisp:nil
                       ((deletes :initarg :deletes :type
                         (common-lisp:or batch-schedule-action-delete-result
                                         common-lisp:null)
                         :accessor %batch-update-schedule-response-deletes
                         :initform common-lisp:nil)
                        (creates :initarg :creates :type
                         (common-lisp:or batch-schedule-action-create-result
                                         common-lisp:null)
                         :accessor %batch-update-schedule-response-creates
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-update-schedule-response
                    'make-batch-update-schedule-response))
 (common-lisp:defun make-batch-update-schedule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletes creates)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creates))
      (common-lisp:list
       (common-lisp:cons "Creates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "Deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-schedule-result common-lisp:nil
                       ((deletes :initarg :deletes :type
                         (common-lisp:or batch-schedule-action-delete-result
                                         common-lisp:null)
                         :accessor %batch-update-schedule-result-deletes
                         :initform common-lisp:nil)
                        (creates :initarg :creates :type
                         (common-lisp:or batch-schedule-action-create-result
                                         common-lisp:null)
                         :accessor %batch-update-schedule-result-creates
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-update-schedule-result
                    'make-batch-update-schedule-result))
 (common-lisp:defun make-batch-update-schedule-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deletes creates)
   (common-lisp:apply #'common-lisp:make-instance 'batch-update-schedule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creates))
      (common-lisp:list
       (common-lisp:cons "Creates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "Deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass blackout-slate common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or blackout-slate-state common-lisp:null)
                         :accessor %blackout-slate-state :initform
                         common-lisp:nil)
                        (network-id :initarg :network-id :type
                         (common-lisp:or |__stringMin34Max34| common-lisp:null)
                         :accessor %blackout-slate-network-id :initform
                         common-lisp:nil)
                        (network-end-blackout-image :initarg
                         :network-end-blackout-image :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor %blackout-slate-network-end-blackout-image
                         :initform common-lisp:nil)
                        (network-end-blackout :initarg :network-end-blackout
                         :type
                         (common-lisp:or blackout-slate-network-end-blackout
                                         common-lisp:null)
                         :accessor %blackout-slate-network-end-blackout
                         :initform common-lisp:nil)
                        (blackout-slate-image :initarg :blackout-slate-image
                         :type (common-lisp:or input-location common-lisp:null)
                         :accessor %blackout-slate-blackout-slate-image
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'blackout-slate 'make-blackout-slate))
 (common-lisp:defun make-blackout-slate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state network-id
                     network-end-blackout-image network-end-blackout
                     blackout-slate-image)
   (common-lisp:apply #'common-lisp:make-instance 'blackout-slate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blackout-slate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blackout-slate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blackout-slate-image))
      (common-lisp:list
       (common-lisp:cons "BlackoutSlateImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-end-blackout))
      (common-lisp:list
       (common-lisp:cons "NetworkEndBlackout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-end-blackout-image))
      (common-lisp:list
       (common-lisp:cons "NetworkEndBlackoutImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blackout-slate))
   common-lisp:nil))
(common-lisp:deftype blackout-slate-network-end-blackout () 'common-lisp:string)
(common-lisp:deftype blackout-slate-state () 'common-lisp:string)
(common-lisp:deftype burn-in-alignment () 'common-lisp:string)
(common-lisp:deftype burn-in-background-color () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass burn-in-destination-settings common-lisp:nil
                       ((yposition :initarg :yposition :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %burn-in-destination-settings-yposition
                         :initform common-lisp:nil)
                        (xposition :initarg :xposition :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %burn-in-destination-settings-xposition
                         :initform common-lisp:nil)
                        (teletext-grid-control :initarg :teletext-grid-control
                         :type
                         (common-lisp:or burn-in-teletext-grid-control
                                         common-lisp:null)
                         :accessor
                         %burn-in-destination-settings-teletext-grid-control
                         :initform common-lisp:nil)
                        (shadow-yoffset :initarg :shadow-yoffset :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %burn-in-destination-settings-shadow-yoffset
                         :initform common-lisp:nil)
                        (shadow-xoffset :initarg :shadow-xoffset :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %burn-in-destination-settings-shadow-xoffset
                         :initform common-lisp:nil)
                        (shadow-opacity :initarg :shadow-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor %burn-in-destination-settings-shadow-opacity
                         :initform common-lisp:nil)
                        (shadow-color :initarg :shadow-color :type
                         (common-lisp:or burn-in-shadow-color common-lisp:null)
                         :accessor %burn-in-destination-settings-shadow-color
                         :initform common-lisp:nil)
                        (outline-size :initarg :outline-size :type
                         (common-lisp:or |__integerMin0Max10| common-lisp:null)
                         :accessor %burn-in-destination-settings-outline-size
                         :initform common-lisp:nil)
                        (outline-color :initarg :outline-color :type
                         (common-lisp:or burn-in-outline-color
                                         common-lisp:null)
                         :accessor %burn-in-destination-settings-outline-color
                         :initform common-lisp:nil)
                        (font-size :initarg :font-size :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %burn-in-destination-settings-font-size :initform
                         common-lisp:nil)
                        (font-resolution :initarg :font-resolution :type
                         (common-lisp:or |__integerMin96Max600|
                                         common-lisp:null)
                         :accessor
                         %burn-in-destination-settings-font-resolution
                         :initform common-lisp:nil)
                        (font-opacity :initarg :font-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor %burn-in-destination-settings-font-opacity
                         :initform common-lisp:nil)
                        (font-color :initarg :font-color :type
                         (common-lisp:or burn-in-font-color common-lisp:null)
                         :accessor %burn-in-destination-settings-font-color
                         :initform common-lisp:nil)
                        (font :initarg :font :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor %burn-in-destination-settings-font :initform
                         common-lisp:nil)
                        (background-opacity :initarg :background-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         %burn-in-destination-settings-background-opacity
                         :initform common-lisp:nil)
                        (background-color :initarg :background-color :type
                         (common-lisp:or burn-in-background-color
                                         common-lisp:null)
                         :accessor
                         %burn-in-destination-settings-background-color
                         :initform common-lisp:nil)
                        (alignment :initarg :alignment :type
                         (common-lisp:or burn-in-alignment common-lisp:null)
                         :accessor %burn-in-destination-settings-alignment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'burn-in-destination-settings
                    'make-burn-in-destination-settings))
 (common-lisp:defun make-burn-in-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key yposition xposition teletext-grid-control
                     shadow-yoffset shadow-xoffset shadow-opacity shadow-color
                     outline-size outline-color font-size font-resolution
                     font-opacity font-color font background-opacity
                     background-color alignment)
   (common-lisp:apply #'common-lisp:make-instance 'burn-in-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          burn-in-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          burn-in-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "Alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-opacity))
      (common-lisp:list
       (common-lisp:cons "BackgroundOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font))
      (common-lisp:list
       (common-lisp:cons "Font"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-opacity))
      (common-lisp:list
       (common-lisp:cons "FontOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-resolution))
      (common-lisp:list
       (common-lisp:cons "FontResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-color))
      (common-lisp:list
       (common-lisp:cons "OutlineColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-size))
      (common-lisp:list
       (common-lisp:cons "OutlineSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-color))
      (common-lisp:list
       (common-lisp:cons "ShadowColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-opacity))
      (common-lisp:list
       (common-lisp:cons "ShadowOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-xoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowXOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-yoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowYOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-grid-control))
      (common-lisp:list
       (common-lisp:cons "TeletextGridControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xposition))
      (common-lisp:list
       (common-lisp:cons "XPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yposition))
      (common-lisp:list
       (common-lisp:cons "YPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          burn-in-destination-settings))
   common-lisp:nil))
(common-lisp:deftype burn-in-font-color () 'common-lisp:string)
(common-lisp:deftype burn-in-outline-color () 'common-lisp:string)
(common-lisp:deftype burn-in-shadow-color () 'common-lisp:string)
(common-lisp:deftype burn-in-teletext-grid-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-input-device-transfer-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %cancel-input-device-transfer-request-input-device-id
                         :initform
                         (common-lisp:error ":input-device-id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-input-device-transfer-request
                    'make-cancel-input-device-transfer-request))
 (common-lisp:defun make-cancel-input-device-transfer-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-input-device-transfer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-input-device-transfer-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-input-device-transfer-response
                    'make-cancel-input-device-transfer-response))
 (common-lisp:defun make-cancel-input-device-transfer-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-input-device-transfer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-description common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %caption-description-name :initform
                         (common-lisp:error ":name is required"))
                        (language-description :initarg :language-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %caption-description-language-description
                         :initform common-lisp:nil)
                        (language-code :initarg :language-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %caption-description-language-code :initform
                         common-lisp:nil)
                        (destination-settings :initarg :destination-settings
                         :type
                         (common-lisp:or caption-destination-settings
                                         common-lisp:null)
                         :accessor %caption-description-destination-settings
                         :initform common-lisp:nil)
                        (caption-selector-name :initarg :caption-selector-name
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %caption-description-caption-selector-name
                         :initform
                         (common-lisp:error
                          ":caption-selector-name is required"))
                        (accessibility :initarg :accessibility :type
                         (common-lisp:or accessibility-type common-lisp:null)
                         :accessor %caption-description-accessibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'caption-description 'make-caption-description))
 (common-lisp:defun make-caption-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name language-description language-code
                     destination-settings caption-selector-name accessibility)
   (common-lisp:apply #'common-lisp:make-instance 'caption-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessibility))
      (common-lisp:list
       (common-lisp:cons "Accessibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-selector-name))
      (common-lisp:list
       (common-lisp:cons "CaptionSelectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-settings))
      (common-lisp:list
       (common-lisp:cons "DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-description))
      (common-lisp:list
       (common-lisp:cons "LanguageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-destination-settings common-lisp:nil
                       ((webvtt-destination-settings :initarg
                         :webvtt-destination-settings :type
                         (common-lisp:or webvtt-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-webvtt-destination-settings
                         :initform common-lisp:nil)
                        (ttml-destination-settings :initarg
                         :ttml-destination-settings :type
                         (common-lisp:or ttml-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-ttml-destination-settings
                         :initform common-lisp:nil)
                        (teletext-destination-settings :initarg
                         :teletext-destination-settings :type
                         (common-lisp:or teletext-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-teletext-destination-settings
                         :initform common-lisp:nil)
                        (smpte-tt-destination-settings :initarg
                         :smpte-tt-destination-settings :type
                         (common-lisp:or smpte-tt-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-smpte-tt-destination-settings
                         :initform common-lisp:nil)
                        (scte27destination-settings :initarg
                         :scte27destination-settings :type
                         (common-lisp:or scte27destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-scte27destination-settings
                         :initform common-lisp:nil)
                        (scte20plus-embedded-destination-settings :initarg
                         :scte20plus-embedded-destination-settings :type
                         (common-lisp:or
                          scte20plus-embedded-destination-settings
                          common-lisp:null)
                         :accessor
                         %caption-destination-settings-scte20plus-embedded-destination-settings
                         :initform common-lisp:nil)
                        (rtmp-caption-info-destination-settings :initarg
                         :rtmp-caption-info-destination-settings :type
                         (common-lisp:or rtmp-caption-info-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-rtmp-caption-info-destination-settings
                         :initform common-lisp:nil)
                        (embedded-plus-scte20destination-settings :initarg
                         :embedded-plus-scte20destination-settings :type
                         (common-lisp:or
                          embedded-plus-scte20destination-settings
                          common-lisp:null)
                         :accessor
                         %caption-destination-settings-embedded-plus-scte20destination-settings
                         :initform common-lisp:nil)
                        (embedded-destination-settings :initarg
                         :embedded-destination-settings :type
                         (common-lisp:or embedded-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-embedded-destination-settings
                         :initform common-lisp:nil)
                        (ebu-tt-ddestination-settings :initarg
                         :ebu-tt-ddestination-settings :type
                         (common-lisp:or ebu-tt-ddestination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-ebu-tt-ddestination-settings
                         :initform common-lisp:nil)
                        (dvb-sub-destination-settings :initarg
                         :dvb-sub-destination-settings :type
                         (common-lisp:or dvb-sub-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-dvb-sub-destination-settings
                         :initform common-lisp:nil)
                        (burn-in-destination-settings :initarg
                         :burn-in-destination-settings :type
                         (common-lisp:or burn-in-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-burn-in-destination-settings
                         :initform common-lisp:nil)
                        (arib-destination-settings :initarg
                         :arib-destination-settings :type
                         (common-lisp:or arib-destination-settings
                                         common-lisp:null)
                         :accessor
                         %caption-destination-settings-arib-destination-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'caption-destination-settings
                    'make-caption-destination-settings))
 (common-lisp:defun make-caption-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key webvtt-destination-settings
                     ttml-destination-settings teletext-destination-settings
                     smpte-tt-destination-settings scte27destination-settings
                     scte20plus-embedded-destination-settings
                     rtmp-caption-info-destination-settings
                     embedded-plus-scte20destination-settings
                     embedded-destination-settings ebu-tt-ddestination-settings
                     dvb-sub-destination-settings burn-in-destination-settings
                     arib-destination-settings)
   (common-lisp:apply #'common-lisp:make-instance 'caption-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'arib-destination-settings))
      (common-lisp:list
       (common-lisp:cons "AribDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'burn-in-destination-settings))
      (common-lisp:list
       (common-lisp:cons "BurnInDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dvb-sub-destination-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSubDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebu-tt-ddestination-settings))
      (common-lisp:list
       (common-lisp:cons "EbuTtDDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-destination-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-plus-scte20destination-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedPlusScte20DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rtmp-caption-info-destination-settings))
      (common-lisp:list
       (common-lisp:cons "RtmpCaptionInfoDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte20plus-embedded-destination-settings))
      (common-lisp:list
       (common-lisp:cons "Scte20PlusEmbeddedDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte27destination-settings))
      (common-lisp:list
       (common-lisp:cons "Scte27DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'smpte-tt-destination-settings))
      (common-lisp:list
       (common-lisp:cons "SmpteTtDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-destination-settings))
      (common-lisp:list
       (common-lisp:cons "TeletextDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ttml-destination-settings))
      (common-lisp:list
       (common-lisp:cons "TtmlDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'webvtt-destination-settings))
      (common-lisp:list
       (common-lisp:cons "WebvttDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-language-mapping common-lisp:nil
                       ((language-description :initarg :language-description
                         :type (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         %caption-language-mapping-language-description
                         :initform
                         (common-lisp:error
                          ":language-description is required"))
                        (language-code :initarg :language-code :type
                         (common-lisp:or |__stringMin3Max3| common-lisp:null)
                         :accessor %caption-language-mapping-language-code
                         :initform
                         (common-lisp:error ":language-code is required"))
                        (caption-channel :initarg :caption-channel :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor %caption-language-mapping-caption-channel
                         :initform
                         (common-lisp:error ":caption-channel is required"))))
 (common-lisp:export
  (common-lisp:list 'caption-language-mapping 'make-caption-language-mapping))
 (common-lisp:defun make-caption-language-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language-description language-code
                     caption-channel)
   (common-lisp:apply #'common-lisp:make-instance 'caption-language-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-language-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-language-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-channel))
      (common-lisp:list
       (common-lisp:cons "CaptionChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-description))
      (common-lisp:list
       (common-lisp:cons "LanguageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-language-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-rectangle common-lisp:nil
                       ((width :initarg :width :type
                         (common-lisp:or |__doubleMin0Max100| common-lisp:null)
                         :accessor %caption-rectangle-width :initform
                         (common-lisp:error ":width is required"))
                        (top-offset :initarg :top-offset :type
                         (common-lisp:or |__doubleMin0Max100| common-lisp:null)
                         :accessor %caption-rectangle-top-offset :initform
                         (common-lisp:error ":top-offset is required"))
                        (left-offset :initarg :left-offset :type
                         (common-lisp:or |__doubleMin0Max100| common-lisp:null)
                         :accessor %caption-rectangle-left-offset :initform
                         (common-lisp:error ":left-offset is required"))
                        (height :initarg :height :type
                         (common-lisp:or |__doubleMin0Max100| common-lisp:null)
                         :accessor %caption-rectangle-height :initform
                         (common-lisp:error ":height is required"))))
 (common-lisp:export
  (common-lisp:list 'caption-rectangle 'make-caption-rectangle))
 (common-lisp:defun make-caption-rectangle
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width top-offset left-offset height)
   (common-lisp:apply #'common-lisp:make-instance 'caption-rectangle
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-rectangle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-rectangle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left-offset))
      (common-lisp:list
       (common-lisp:cons "LeftOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-offset))
      (common-lisp:list
       (common-lisp:cons "TopOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-rectangle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-selector common-lisp:nil
                       ((selector-settings :initarg :selector-settings :type
                         (common-lisp:or caption-selector-settings
                                         common-lisp:null)
                         :accessor %caption-selector-selector-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor %caption-selector-name :initform
                         (common-lisp:error ":name is required"))
                        (language-code :initarg :language-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %caption-selector-language-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'caption-selector 'make-caption-selector))
 (common-lisp:defun make-caption-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selector-settings name language-code)
   (common-lisp:apply #'common-lisp:make-instance 'caption-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-settings))
      (common-lisp:list
       (common-lisp:cons "SelectorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass caption-selector-settings common-lisp:nil
                       ((teletext-source-settings :initarg
                         :teletext-source-settings :type
                         (common-lisp:or teletext-source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-selector-settings-teletext-source-settings
                         :initform common-lisp:nil)
                        (scte27source-settings :initarg :scte27source-settings
                         :type
                         (common-lisp:or scte27source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-selector-settings-scte27source-settings
                         :initform common-lisp:nil)
                        (scte20source-settings :initarg :scte20source-settings
                         :type
                         (common-lisp:or scte20source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-selector-settings-scte20source-settings
                         :initform common-lisp:nil)
                        (embedded-source-settings :initarg
                         :embedded-source-settings :type
                         (common-lisp:or embedded-source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-selector-settings-embedded-source-settings
                         :initform common-lisp:nil)
                        (dvb-sub-source-settings :initarg
                         :dvb-sub-source-settings :type
                         (common-lisp:or dvb-sub-source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-selector-settings-dvb-sub-source-settings
                         :initform common-lisp:nil)
                        (arib-source-settings :initarg :arib-source-settings
                         :type
                         (common-lisp:or arib-source-settings common-lisp:null)
                         :accessor
                         %caption-selector-settings-arib-source-settings
                         :initform common-lisp:nil)
                        (ancillary-source-settings :initarg
                         :ancillary-source-settings :type
                         (common-lisp:or ancillary-source-settings
                                         common-lisp:null)
                         :accessor
                         %caption-selector-settings-ancillary-source-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'caption-selector-settings
                    'make-caption-selector-settings))
 (common-lisp:defun make-caption-selector-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key teletext-source-settings
                     scte27source-settings scte20source-settings
                     embedded-source-settings dvb-sub-source-settings
                     arib-source-settings ancillary-source-settings)
   (common-lisp:apply #'common-lisp:make-instance 'caption-selector-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-selector-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-selector-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ancillary-source-settings))
      (common-lisp:list
       (common-lisp:cons "AncillarySourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'arib-source-settings))
      (common-lisp:list
       (common-lisp:cons "AribSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dvb-sub-source-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSubSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-source-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte20source-settings))
      (common-lisp:list
       (common-lisp:cons "Scte20SourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte27source-settings))
      (common-lisp:list
       (common-lisp:cons "Scte27SourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-source-settings))
      (common-lisp:list
       (common-lisp:cons "TeletextSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-selector-settings))
   common-lisp:nil))
(common-lisp:deftype cdi-input-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cdi-input-specification common-lisp:nil
                       ((resolution :initarg :resolution :type
                         (common-lisp:or cdi-input-resolution common-lisp:null)
                         :accessor %cdi-input-specification-resolution
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cdi-input-specification 'make-cdi-input-specification))
 (common-lisp:defun make-cdi-input-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resolution)
   (common-lisp:apply #'common-lisp:make-instance 'cdi-input-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cdi-input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cdi-input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cdi-input-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass channel common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor %channel-vpc :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %channel-tags :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor %channel-state :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %channel-role-arn :initform common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %channel-pipelines-running-count :initform
                         common-lisp:nil)
                        (pipeline-details :initarg :pipeline-details :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor %channel-pipeline-details :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %channel-name :initform common-lisp:nil)
                        (maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor %channel-maintenance :initform
                         common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %channel-log-level :initform common-lisp:nil)
                        (input-specification :initarg :input-specification
                         :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor %channel-input-specification :initform
                         common-lisp:nil)
                        (input-attachments :initarg :input-attachments :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor %channel-input-attachments :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %channel-id :initform common-lisp:nil)
                        (encoder-settings :initarg :encoder-settings :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor %channel-encoder-settings :initform
                         common-lisp:nil)
                        (egress-endpoints :initarg :egress-endpoints :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor %channel-egress-endpoints :initform
                         common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %channel-destinations :initform
                         common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor %channel-channel-class :initform
                         common-lisp:nil)
                        (cdi-input-specification :initarg
                         :cdi-input-specification :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor %channel-cdi-input-specification :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %channel-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'channel 'make-channel))
 (common-lisp:defun make-channel
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc tags state role-arn
                     pipelines-running-count pipeline-details name maintenance
                     log-level input-specification input-attachments id
                     encoder-settings egress-endpoints destinations
                     channel-class cdi-input-specification arn)
   (common-lisp:apply #'common-lisp:make-instance 'channel
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel))
   common-lisp:nil))
(common-lisp:deftype channel-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass channel-configuration-validation-error common-lisp:nil
                       ((validation-errors :initarg :validation-errors :type
                         (common-lisp:or |__listOfValidationError|
                                         common-lisp:null)
                         :accessor
                         %channel-configuration-validation-error-validation-errors
                         :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %channel-configuration-validation-error-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'channel-configuration-validation-error
                    'make-channel-configuration-validation-error))
 (common-lisp:defun make-channel-configuration-validation-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation-errors message)
   (common-lisp:apply #'common-lisp:make-instance
                      'channel-configuration-validation-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-configuration-validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-configuration-validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "ValidationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-configuration-validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass channel-egress-endpoint common-lisp:nil
                       ((source-ip :initarg :source-ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %channel-egress-endpoint-source-ip :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'channel-egress-endpoint 'make-channel-egress-endpoint))
 (common-lisp:defun make-channel-egress-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-ip)
   (common-lisp:apply #'common-lisp:make-instance 'channel-egress-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-egress-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-egress-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip))
      (common-lisp:list
       (common-lisp:cons "SourceIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-egress-endpoint))
   common-lisp:nil))
(common-lisp:deftype channel-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass channel-summary common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor %channel-summary-vpc :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %channel-summary-tags :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor %channel-summary-state :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %channel-summary-role-arn :initform common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %channel-summary-pipelines-running-count
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %channel-summary-name :initform common-lisp:nil)
                        (maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor %channel-summary-maintenance :initform
                         common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %channel-summary-log-level :initform common-lisp:nil)
                        (input-specification :initarg :input-specification
                         :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor %channel-summary-input-specification
                         :initform common-lisp:nil)
                        (input-attachments :initarg :input-attachments :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor %channel-summary-input-attachments :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %channel-summary-id :initform common-lisp:nil)
                        (egress-endpoints :initarg :egress-endpoints :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor %channel-summary-egress-endpoints :initform
                         common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %channel-summary-destinations :initform
                         common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor %channel-summary-channel-class :initform
                         common-lisp:nil)
                        (cdi-input-specification :initarg
                         :cdi-input-specification :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor %channel-summary-cdi-input-specification
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %channel-summary-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'channel-summary 'make-channel-summary))
 (common-lisp:defun make-channel-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc tags state role-arn
                     pipelines-running-count name maintenance log-level
                     input-specification input-attachments id egress-endpoints
                     destinations channel-class cdi-input-specification arn)
   (common-lisp:apply #'common-lisp:make-instance 'channel-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass claim-device-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %claim-device-request-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'claim-device-request 'make-claim-device-request))
 (common-lisp:defun make-claim-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'claim-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input claim-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input claim-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input claim-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass claim-device-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'claim-device-response 'make-claim-device-response))
 (common-lisp:defun make-claim-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'claim-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          claim-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          claim-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          claim-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass color-space-passthrough-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'color-space-passthrough-settings
                    'make-color-space-passthrough-settings))
 (common-lisp:defun make-color-space-passthrough-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'color-space-passthrough-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          color-space-passthrough-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          color-space-passthrough-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          color-space-passthrough-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-channel common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or vpc-output-settings common-lisp:null)
                         :accessor %create-channel-vpc :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-channel-tags :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-channel-role-arn :initform common-lisp:nil)
                        (reserved :initarg :reserved :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-channel-reserved :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-channel-request-id :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-channel-name :initform common-lisp:nil)
                        (maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance-create-settings
                                         common-lisp:null)
                         :accessor %create-channel-maintenance :initform
                         common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %create-channel-log-level :initform common-lisp:nil)
                        (input-specification :initarg :input-specification
                         :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor %create-channel-input-specification
                         :initform common-lisp:nil)
                        (input-attachments :initarg :input-attachments :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor %create-channel-input-attachments :initform
                         common-lisp:nil)
                        (encoder-settings :initarg :encoder-settings :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor %create-channel-encoder-settings :initform
                         common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %create-channel-destinations :initform
                         common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor %create-channel-channel-class :initform
                         common-lisp:nil)
                        (cdi-input-specification :initarg
                         :cdi-input-specification :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor %create-channel-cdi-input-specification
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'create-channel 'make-create-channel))
 (common-lisp:defun make-create-channel
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc tags role-arn reserved request-id
                     name maintenance log-level input-specification
                     input-attachments encoder-settings destinations
                     channel-class cdi-input-specification)
   (common-lisp:apply #'common-lisp:make-instance 'create-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved))
      (common-lisp:list
       (common-lisp:cons "Reserved"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-channel-request common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or vpc-output-settings common-lisp:null)
                         :accessor %create-channel-request-vpc :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-channel-request-tags :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-channel-request-role-arn :initform
                         common-lisp:nil)
                        (reserved :initarg :reserved :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-channel-request-reserved :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-channel-request-request-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-channel-request-name :initform
                         common-lisp:nil)
                        (maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance-create-settings
                                         common-lisp:null)
                         :accessor %create-channel-request-maintenance
                         :initform common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %create-channel-request-log-level :initform
                         common-lisp:nil)
                        (input-specification :initarg :input-specification
                         :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor %create-channel-request-input-specification
                         :initform common-lisp:nil)
                        (input-attachments :initarg :input-attachments :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor %create-channel-request-input-attachments
                         :initform common-lisp:nil)
                        (encoder-settings :initarg :encoder-settings :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor %create-channel-request-encoder-settings
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %create-channel-request-destinations
                         :initform common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor %create-channel-request-channel-class
                         :initform common-lisp:nil)
                        (cdi-input-specification :initarg
                         :cdi-input-specification :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         %create-channel-request-cdi-input-specification
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-channel-request 'make-create-channel-request))
 (common-lisp:defun make-create-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc tags role-arn reserved request-id
                     name maintenance log-level input-specification
                     input-attachments encoder-settings destinations
                     channel-class cdi-input-specification)
   (common-lisp:apply #'common-lisp:make-instance 'create-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved))
      (common-lisp:list
       (common-lisp:cons "Reserved"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-channel-response common-lisp:nil
                       ((channel :initarg :channel :type
                         (common-lisp:or channel common-lisp:null) :accessor
                         %create-channel-response-channel :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-channel-response 'make-create-channel-response))
 (common-lisp:defun make-create-channel-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel)
   (common-lisp:apply #'common-lisp:make-instance 'create-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-channel-result-model common-lisp:nil
                       ((channel :initarg :channel :type
                         (common-lisp:or channel common-lisp:null) :accessor
                         %create-channel-result-model-channel :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-channel-result-model
                    'make-create-channel-result-model))
 (common-lisp:defun make-create-channel-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel)
   (common-lisp:apply #'common-lisp:make-instance 'create-channel-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or input-vpc-request common-lisp:null)
                         :accessor %create-input-vpc :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         %create-input-type :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-input-tags :initform common-lisp:nil)
                        (sources :initarg :sources :type
                         (common-lisp:or |__listOfInputSourceRequest|
                                         common-lisp:null)
                         :accessor %create-input-sources :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-input-role-arn :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-input-request-id :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-input-name :initform common-lisp:nil)
                        (media-connect-flows :initarg :media-connect-flows
                         :type
                         (common-lisp:or |__listOfMediaConnectFlowRequest|
                                         common-lisp:null)
                         :accessor %create-input-media-connect-flows :initform
                         common-lisp:nil)
                        (input-security-groups :initarg :input-security-groups
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %create-input-input-security-groups
                         :initform common-lisp:nil)
                        (input-devices :initarg :input-devices :type
                         (common-lisp:or |__listOfInputDeviceSettings|
                                         common-lisp:null)
                         :accessor %create-input-input-devices :initform
                         common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfInputDestinationRequest|
                                         common-lisp:null)
                         :accessor %create-input-destinations :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'create-input 'make-create-input))
 (common-lisp:defun make-create-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc type tags sources role-arn request-id
                     name media-connect-flows input-security-groups
                     input-devices destinations)
   (common-lisp:apply #'common-lisp:make-instance 'create-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-request common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or input-vpc-request common-lisp:null)
                         :accessor %create-input-request-vpc :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         %create-input-request-type :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-input-request-tags :initform common-lisp:nil)
                        (sources :initarg :sources :type
                         (common-lisp:or |__listOfInputSourceRequest|
                                         common-lisp:null)
                         :accessor %create-input-request-sources :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-input-request-role-arn :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-input-request-request-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-input-request-name :initform common-lisp:nil)
                        (media-connect-flows :initarg :media-connect-flows
                         :type
                         (common-lisp:or |__listOfMediaConnectFlowRequest|
                                         common-lisp:null)
                         :accessor %create-input-request-media-connect-flows
                         :initform common-lisp:nil)
                        (input-security-groups :initarg :input-security-groups
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %create-input-request-input-security-groups
                         :initform common-lisp:nil)
                        (input-devices :initarg :input-devices :type
                         (common-lisp:or |__listOfInputDeviceSettings|
                                         common-lisp:null)
                         :accessor %create-input-request-input-devices
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfInputDestinationRequest|
                                         common-lisp:null)
                         :accessor %create-input-request-destinations :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-input-request 'make-create-input-request))
 (common-lisp:defun make-create-input-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc type tags sources role-arn request-id
                     name media-connect-flows input-security-groups
                     input-devices destinations)
   (common-lisp:apply #'common-lisp:make-instance 'create-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-response common-lisp:nil
                       ((input :initarg :input :type
                         (common-lisp:or input common-lisp:null) :accessor
                         %create-input-response-input :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-input-response 'make-create-input-response))
 (common-lisp:defun make-create-input-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input)
   (common-lisp:apply #'common-lisp:make-instance 'create-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-result-model common-lisp:nil
                       ((input :initarg :input :type
                         (common-lisp:or input common-lisp:null) :accessor
                         %create-input-result-model-input :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-input-result-model
                    'make-create-input-result-model))
 (common-lisp:defun make-create-input-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input)
   (common-lisp:apply #'common-lisp:make-instance 'create-input-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-security-group-request common-lisp:nil
                       ((whitelist-rules :initarg :whitelist-rules :type
                         (common-lisp:or |__listOfInputWhitelistRuleCidr|
                                         common-lisp:null)
                         :accessor
                         %create-input-security-group-request-whitelist-rules
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-input-security-group-request-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-input-security-group-request
                    'make-create-input-security-group-request))
 (common-lisp:defun make-create-input-security-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key whitelist-rules tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-input-security-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-security-group-response common-lisp:nil
                       ((security-group :initarg :security-group :type
                         (common-lisp:or input-security-group common-lisp:null)
                         :accessor
                         %create-input-security-group-response-security-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-input-security-group-response
                    'make-create-input-security-group-response))
 (common-lisp:defun make-create-input-security-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-input-security-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-input-security-group-result-model common-lisp:nil
                       ((security-group :initarg :security-group :type
                         (common-lisp:or input-security-group common-lisp:null)
                         :accessor
                         %create-input-security-group-result-model-security-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-input-security-group-result-model
                    'make-create-input-security-group-result-model))
 (common-lisp:defun make-create-input-security-group-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-input-security-group-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-multiplex-tags :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-multiplex-request-id :initform
                         (common-lisp:error ":request-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-multiplex-name :initform
                         (common-lisp:error ":name is required"))
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor %create-multiplex-multiplex-settings
                         :initform
                         (common-lisp:error ":multiplex-settings is required"))
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %create-multiplex-availability-zones
                         :initform
                         (common-lisp:error
                          ":availability-zones is required"))))
 (common-lisp:export
  (common-lisp:list 'create-multiplex 'make-create-multiplex))
 (common-lisp:defun make-create-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags request-id name multiplex-settings
                     availability-zones)
   (common-lisp:apply #'common-lisp:make-instance 'create-multiplex
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-multiplex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-multiplex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-multiplex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-program common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-multiplex-program-request-id :initform
                         (common-lisp:error ":request-id is required"))
                        (program-name :initarg :program-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-multiplex-program-program-name :initform
                         (common-lisp:error ":program-name is required"))
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         %create-multiplex-program-multiplex-program-settings
                         :initform
                         (common-lisp:error
                          ":multiplex-program-settings is required"))))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program 'make-create-multiplex-program))
 (common-lisp:defun make-create-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id program-name
                     multiplex-program-settings)
   (common-lisp:apply #'common-lisp:make-instance 'create-multiplex-program
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-program-request common-lisp:nil
                       ((request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-multiplex-program-request-request-id :initform
                         (common-lisp:error ":request-id is required"))
                        (program-name :initarg :program-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-multiplex-program-request-program-name
                         :initform
                         (common-lisp:error ":program-name is required"))
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         %create-multiplex-program-request-multiplex-program-settings
                         :initform
                         (common-lisp:error
                          ":multiplex-program-settings is required"))
                        (multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-multiplex-program-request-multiplex-id
                         :initform
                         (common-lisp:error ":multiplex-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program-request
                    'make-create-multiplex-program-request))
 (common-lisp:defun make-create-multiplex-program-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key request-id program-name
                     multiplex-program-settings multiplex-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multiplex-program-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-program-response common-lisp:nil
                       ((multiplex-program :initarg :multiplex-program :type
                         (common-lisp:or multiplex-program common-lisp:null)
                         :accessor
                         %create-multiplex-program-response-multiplex-program
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program-response
                    'make-create-multiplex-program-response))
 (common-lisp:defun make-create-multiplex-program-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-program)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multiplex-program-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-program-result-model common-lisp:nil
                       ((multiplex-program :initarg :multiplex-program :type
                         (common-lisp:or multiplex-program common-lisp:null)
                         :accessor
                         %create-multiplex-program-result-model-multiplex-program
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program-result-model
                    'make-create-multiplex-program-result-model))
 (common-lisp:defun make-create-multiplex-program-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-program)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multiplex-program-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-multiplex-request-tags :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-multiplex-request-request-id :initform
                         (common-lisp:error ":request-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-multiplex-request-name :initform
                         (common-lisp:error ":name is required"))
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor %create-multiplex-request-multiplex-settings
                         :initform
                         (common-lisp:error ":multiplex-settings is required"))
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %create-multiplex-request-availability-zones
                         :initform
                         (common-lisp:error
                          ":availability-zones is required"))))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-request 'make-create-multiplex-request))
 (common-lisp:defun make-create-multiplex-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags request-id name multiplex-settings
                     availability-zones)
   (common-lisp:apply #'common-lisp:make-instance 'create-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-response common-lisp:nil
                       ((multiplex :initarg :multiplex :type
                         (common-lisp:or multiplex common-lisp:null) :accessor
                         %create-multiplex-response-multiplex :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-response
                    'make-create-multiplex-response))
 (common-lisp:defun make-create-multiplex-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex)
   (common-lisp:apply #'common-lisp:make-instance 'create-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multiplex-result-model common-lisp:nil
                       ((multiplex :initarg :multiplex :type
                         (common-lisp:or multiplex common-lisp:null) :accessor
                         %create-multiplex-result-model-multiplex :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-result-model
                    'make-create-multiplex-result-model))
 (common-lisp:defun make-create-multiplex-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multiplex-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partner-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-partner-input-tags :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-partner-input-request-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-partner-input 'make-create-partner-input))
 (common-lisp:defun make-create-partner-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags request-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-partner-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-partner-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-partner-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-partner-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partner-input-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-partner-input-request-tags :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-partner-input-request-request-id :initform
                         common-lisp:nil)
                        (input-id :initarg :input-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-partner-input-request-input-id :initform
                         (common-lisp:error ":input-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-partner-input-request
                    'make-create-partner-input-request))
 (common-lisp:defun make-create-partner-input-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags request-id input-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-partner-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partner-input-response common-lisp:nil
                       ((input :initarg :input :type
                         (common-lisp:or input common-lisp:null) :accessor
                         %create-partner-input-response-input :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-partner-input-response
                    'make-create-partner-input-response))
 (common-lisp:defun make-create-partner-input-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-partner-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partner-input-result-model common-lisp:nil
                       ((input :initarg :input :type
                         (common-lisp:or input common-lisp:null) :accessor
                         %create-partner-input-result-model-input :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-partner-input-result-model
                    'make-create-partner-input-result-model))
 (common-lisp:defun make-create-partner-input-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-partner-input-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-tags-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-tags-request-tags :initform common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-tags-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-tags-request 'make-create-tags-request))
 (common-lisp:defun make-create-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-channel-request common-lisp:nil
                       ((channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-channel-request-channel-id :initform
                         (common-lisp:error ":channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-channel-request 'make-delete-channel-request))
 (common-lisp:defun make-delete-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-channel-response common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor %delete-channel-response-vpc :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-channel-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor %delete-channel-response-state :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-channel-response-role-arn :initform
                         common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %delete-channel-response-pipelines-running-count
                         :initform common-lisp:nil)
                        (pipeline-details :initarg :pipeline-details :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor %delete-channel-response-pipeline-details
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-channel-response-name :initform
                         common-lisp:nil)
                        (maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor %delete-channel-response-maintenance
                         :initform common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %delete-channel-response-log-level :initform
                         common-lisp:nil)
                        (input-specification :initarg :input-specification
                         :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor %delete-channel-response-input-specification
                         :initform common-lisp:nil)
                        (input-attachments :initarg :input-attachments :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor %delete-channel-response-input-attachments
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-channel-response-id :initform common-lisp:nil)
                        (encoder-settings :initarg :encoder-settings :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor %delete-channel-response-encoder-settings
                         :initform common-lisp:nil)
                        (egress-endpoints :initarg :egress-endpoints :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor %delete-channel-response-egress-endpoints
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %delete-channel-response-destinations
                         :initform common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor %delete-channel-response-channel-class
                         :initform common-lisp:nil)
                        (cdi-input-specification :initarg
                         :cdi-input-specification :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         %delete-channel-response-cdi-input-specification
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-channel-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-channel-response 'make-delete-channel-response))
 (common-lisp:defun make-delete-channel-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc tags state role-arn
                     pipelines-running-count pipeline-details name maintenance
                     log-level input-specification input-attachments id
                     encoder-settings egress-endpoints destinations
                     channel-class cdi-input-specification arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-input-request common-lisp:nil
                       ((input-id :initarg :input-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-input-request-input-id :initform
                         (common-lisp:error ":input-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-input-request 'make-delete-input-request))
 (common-lisp:defun make-delete-input-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-input-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-input-response 'make-delete-input-response))
 (common-lisp:defun make-delete-input-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-input-security-group-request common-lisp:nil
                       ((input-security-group-id :initarg
                         :input-security-group-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-input-security-group-request-input-security-group-id
                         :initform
                         (common-lisp:error
                          ":input-security-group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-input-security-group-request
                    'make-delete-input-security-group-request))
 (common-lisp:defun make-delete-input-security-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-security-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-input-security-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-input-security-group-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-input-security-group-response
                    'make-delete-input-security-group-response))
 (common-lisp:defun make-delete-input-security-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-input-security-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multiplex-program-request common-lisp:nil
                       ((program-name :initarg :program-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-multiplex-program-request-program-name
                         :initform
                         (common-lisp:error ":program-name is required"))
                        (multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-multiplex-program-request-multiplex-id
                         :initform
                         (common-lisp:error ":multiplex-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-program-request
                    'make-delete-multiplex-program-request))
 (common-lisp:defun make-delete-multiplex-program-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key program-name multiplex-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-multiplex-program-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multiplex-program-response common-lisp:nil
                       ((program-name :initarg :program-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-multiplex-program-response-program-name
                         :initform common-lisp:nil)
                        (pipeline-details :initarg :pipeline-details :type
                         (common-lisp:or
                          |__listOfMultiplexProgramPipelineDetail|
                          common-lisp:null)
                         :accessor
                         %delete-multiplex-program-response-pipeline-details
                         :initform common-lisp:nil)
                        (packet-identifiers-map :initarg
                         :packet-identifiers-map :type
                         (common-lisp:or
                          multiplex-program-packet-identifiers-map
                          common-lisp:null)
                         :accessor
                         %delete-multiplex-program-response-packet-identifiers-map
                         :initform common-lisp:nil)
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         %delete-multiplex-program-response-multiplex-program-settings
                         :initform common-lisp:nil)
                        (channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-multiplex-program-response-channel-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-program-response
                    'make-delete-multiplex-program-response))
 (common-lisp:defun make-delete-multiplex-program-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key program-name pipeline-details
                     packet-identifiers-map multiplex-program-settings
                     channel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-multiplex-program-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'packet-identifiers-map))
      (common-lisp:list
       (common-lisp:cons "PacketIdentifiersMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multiplex-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-multiplex-request-multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-request 'make-delete-multiplex-request))
 (common-lisp:defun make-delete-multiplex-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multiplex-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-multiplex-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor %delete-multiplex-response-state :initform
                         common-lisp:nil)
                        (program-count :initarg :program-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %delete-multiplex-response-program-count
                         :initform common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %delete-multiplex-response-pipelines-running-count
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-multiplex-response-name :initform
                         common-lisp:nil)
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor
                         %delete-multiplex-response-multiplex-settings
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-multiplex-response-id :initform
                         common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfMultiplexOutputDestination|
                                         common-lisp:null)
                         :accessor %delete-multiplex-response-destinations
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %delete-multiplex-response-availability-zones
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-multiplex-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-response
                    'make-delete-multiplex-response))
 (common-lisp:defun make-delete-multiplex-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags state program-count
                     pipelines-running-count name multiplex-settings id
                     destinations availability-zones arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-reservation-request common-lisp:nil
                       ((reservation-id :initarg :reservation-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-reservation-request-reservation-id :initform
                         (common-lisp:error ":reservation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-reservation-request
                    'make-delete-reservation-request))
 (common-lisp:defun make-delete-reservation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-reservation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-reservation-response common-lisp:nil
                       ((usage-price :initarg :usage-price :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %delete-reservation-response-usage-price :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %delete-reservation-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or reservation-state common-lisp:null)
                         :accessor %delete-reservation-response-state :initform
                         common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-reservation-response-start :initform
                         common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :type
                         (common-lisp:or reservation-resource-specification
                                         common-lisp:null)
                         :accessor
                         %delete-reservation-response-resource-specification
                         :initform common-lisp:nil)
                        (reservation-id :initarg :reservation-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-reservation-response-reservation-id :initform
                         common-lisp:nil)
                        (renewal-settings :initarg :renewal-settings :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor
                         %delete-reservation-response-renewal-settings
                         :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-reservation-response-region :initform
                         common-lisp:nil)
                        (offering-type :initarg :offering-type :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor %delete-reservation-response-offering-type
                         :initform common-lisp:nil)
                        (offering-id :initarg :offering-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-reservation-response-offering-id :initform
                         common-lisp:nil)
                        (offering-description :initarg :offering-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %delete-reservation-response-offering-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-reservation-response-name :initform
                         common-lisp:nil)
                        (fixed-price :initarg :fixed-price :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %delete-reservation-response-fixed-price :initform
                         common-lisp:nil)
                        (end :initarg :end :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-reservation-response-end :initform
                         common-lisp:nil)
                        (duration-units :initarg :duration-units :type
                         (common-lisp:or offering-duration-units
                                         common-lisp:null)
                         :accessor %delete-reservation-response-duration-units
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %delete-reservation-response-duration
                         :initform common-lisp:nil)
                        (currency-code :initarg :currency-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-reservation-response-currency-code :initform
                         common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %delete-reservation-response-count :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-reservation-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-reservation-response
                    'make-delete-reservation-response))
 (common-lisp:defun make-delete-reservation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key usage-price tags state start
                     resource-specification reservation-id renewal-settings
                     region offering-type offering-id offering-description name
                     fixed-price end duration-units duration currency-code
                     count arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-reservation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schedule-request common-lisp:nil
                       ((channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-schedule-request-channel-id :initform
                         (common-lisp:error ":channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-schedule-request 'make-delete-schedule-request))
 (common-lisp:defun make-delete-schedule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schedule-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-schedule-response 'make-delete-schedule-response))
 (common-lisp:defun make-delete-schedule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-tags-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %delete-tags-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-tags-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-tags-request 'make-delete-tags-request))
 (common-lisp:defun make-delete-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-channel-request common-lisp:nil
                       ((channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-channel-request-channel-id :initform
                         (common-lisp:error ":channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-channel-request 'make-describe-channel-request))
 (common-lisp:defun make-describe-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-channel-response common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor %describe-channel-response-vpc :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-channel-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor %describe-channel-response-state :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-channel-response-role-arn :initform
                         common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %describe-channel-response-pipelines-running-count
                         :initform common-lisp:nil)
                        (pipeline-details :initarg :pipeline-details :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor %describe-channel-response-pipeline-details
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-channel-response-name :initform
                         common-lisp:nil)
                        (maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor %describe-channel-response-maintenance
                         :initform common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %describe-channel-response-log-level :initform
                         common-lisp:nil)
                        (input-specification :initarg :input-specification
                         :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor
                         %describe-channel-response-input-specification
                         :initform common-lisp:nil)
                        (input-attachments :initarg :input-attachments :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor %describe-channel-response-input-attachments
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-channel-response-id :initform
                         common-lisp:nil)
                        (encoder-settings :initarg :encoder-settings :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor %describe-channel-response-encoder-settings
                         :initform common-lisp:nil)
                        (egress-endpoints :initarg :egress-endpoints :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor %describe-channel-response-egress-endpoints
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %describe-channel-response-destinations
                         :initform common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor %describe-channel-response-channel-class
                         :initform common-lisp:nil)
                        (cdi-input-specification :initarg
                         :cdi-input-specification :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         %describe-channel-response-cdi-input-specification
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-channel-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-response
                    'make-describe-channel-response))
 (common-lisp:defun make-describe-channel-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc tags state role-arn
                     pipelines-running-count pipeline-details name maintenance
                     log-level input-specification input-attachments id
                     encoder-settings egress-endpoints destinations
                     channel-class cdi-input-specification arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-device-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-device-request-input-device-id
                         :initform
                         (common-lisp:error ":input-device-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-request
                    'make-describe-input-device-request))
 (common-lisp:defun make-describe-input-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-device-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-input-device-response-tags :initform
                         common-lisp:nil)
                        (uhd-device-settings :initarg :uhd-device-settings
                         :type
                         (common-lisp:or input-device-uhd-settings
                                         common-lisp:null)
                         :accessor
                         %describe-input-device-response-uhd-device-settings
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or input-device-type common-lisp:null)
                         :accessor %describe-input-device-response-type
                         :initform common-lisp:nil)
                        (serial-number :initarg :serial-number :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-device-response-serial-number
                         :initform common-lisp:nil)
                        (network-settings :initarg :network-settings :type
                         (common-lisp:or input-device-network-settings
                                         common-lisp:null)
                         :accessor
                         %describe-input-device-response-network-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-device-response-name :initform
                         common-lisp:nil)
                        (mac-address :initarg :mac-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-device-response-mac-address :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-device-response-id :initform
                         common-lisp:nil)
                        (hd-device-settings :initarg :hd-device-settings :type
                         (common-lisp:or input-device-hd-settings
                                         common-lisp:null)
                         :accessor
                         %describe-input-device-response-hd-device-settings
                         :initform common-lisp:nil)
                        (device-update-status :initarg :device-update-status
                         :type
                         (common-lisp:or device-update-status common-lisp:null)
                         :accessor
                         %describe-input-device-response-device-update-status
                         :initform common-lisp:nil)
                        (device-settings-sync-state :initarg
                         :device-settings-sync-state :type
                         (common-lisp:or device-settings-sync-state
                                         common-lisp:null)
                         :accessor
                         %describe-input-device-response-device-settings-sync-state
                         :initform common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or input-device-connection-state
                                         common-lisp:null)
                         :accessor
                         %describe-input-device-response-connection-state
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-device-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-response
                    'make-describe-input-device-response))
 (common-lisp:defun make-describe-input-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags uhd-device-settings type
                     serial-number network-settings name mac-address id
                     hd-device-settings device-update-status
                     device-settings-sync-state connection-state arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-device-thumbnail-request common-lisp:nil
                       ((accept :initarg :accept :type
                         (common-lisp:or accept-header common-lisp:null)
                         :accessor
                         %describe-input-device-thumbnail-request-accept
                         :initform (common-lisp:error ":accept is required"))
                        (input-device-id :initarg :input-device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-device-thumbnail-request-input-device-id
                         :initform
                         (common-lisp:error ":input-device-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-thumbnail-request
                    'make-describe-input-device-thumbnail-request))
 (common-lisp:defun make-describe-input-device-thumbnail-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accept input-device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-device-thumbnail-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-device-thumbnail-response common-lisp:nil
                       ((last-modified :initarg :last-modified :type
                         (common-lisp:or |__timestamp| common-lisp:null)
                         :accessor
                         %describe-input-device-thumbnail-response-last-modified
                         :initform common-lisp:nil)
                        (etag :initarg :etag :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-device-thumbnail-response-etag
                         :initform common-lisp:nil)
                        (content-length :initarg :content-length :type
                         (common-lisp:or |__long| common-lisp:null) :accessor
                         %describe-input-device-thumbnail-response-content-length
                         :initform common-lisp:nil)
                        (content-type :initarg :content-type :type
                         (common-lisp:or content-type common-lisp:null)
                         :accessor
                         %describe-input-device-thumbnail-response-content-type
                         :initform common-lisp:nil)
                        (body :initarg :body :type
                         (common-lisp:or input-device-thumbnail
                                         common-lisp:null)
                         :accessor
                         %describe-input-device-thumbnail-response-body
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-thumbnail-response
                    'make-describe-input-device-thumbnail-response))
 (common-lisp:defun make-describe-input-device-thumbnail-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified etag content-length
                     content-type body)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-device-thumbnail-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'body))))
(common-lisp:progn
 (common-lisp:defclass describe-input-request common-lisp:nil
                       ((input-id :initarg :input-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-request-input-id :initform
                         (common-lisp:error ":input-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-input-request 'make-describe-input-request))
 (common-lisp:defun make-describe-input-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-response common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         %describe-input-response-type :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-input-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or input-state common-lisp:null)
                         :accessor %describe-input-response-state :initform
                         common-lisp:nil)
                        (sources :initarg :sources :type
                         (common-lisp:or |__listOfInputSource|
                                         common-lisp:null)
                         :accessor %describe-input-response-sources :initform
                         common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %describe-input-response-security-groups
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-response-role-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-response-name :initform
                         common-lisp:nil)
                        (media-connect-flows :initarg :media-connect-flows
                         :type
                         (common-lisp:or |__listOfMediaConnectFlow|
                                         common-lisp:null)
                         :accessor %describe-input-response-media-connect-flows
                         :initform common-lisp:nil)
                        (input-source-type :initarg :input-source-type :type
                         (common-lisp:or input-source-type common-lisp:null)
                         :accessor %describe-input-response-input-source-type
                         :initform common-lisp:nil)
                        (input-partner-ids :initarg :input-partner-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %describe-input-response-input-partner-ids
                         :initform common-lisp:nil)
                        (input-devices :initarg :input-devices :type
                         (common-lisp:or |__listOfInputDeviceSettings|
                                         common-lisp:null)
                         :accessor %describe-input-response-input-devices
                         :initform common-lisp:nil)
                        (input-class :initarg :input-class :type
                         (common-lisp:or input-class common-lisp:null)
                         :accessor %describe-input-response-input-class
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-response-id :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfInputDestination|
                                         common-lisp:null)
                         :accessor %describe-input-response-destinations
                         :initform common-lisp:nil)
                        (attached-channels :initarg :attached-channels :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %describe-input-response-attached-channels
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-input-response 'make-describe-input-response))
 (common-lisp:defun make-describe-input-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type tags state sources security-groups
                     role-arn name media-connect-flows input-source-type
                     input-partner-ids input-devices input-class id
                     destinations attached-channels arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-channels))
      (common-lisp:list
       (common-lisp:cons "AttachedChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-class))
      (common-lisp:list
       (common-lisp:cons "InputClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-partner-ids))
      (common-lisp:list
       (common-lisp:cons "InputPartnerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-type))
      (common-lisp:list
       (common-lisp:cons "InputSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-security-group-request common-lisp:nil
                       ((input-security-group-id :initarg
                         :input-security-group-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-security-group-request-input-security-group-id
                         :initform
                         (common-lisp:error
                          ":input-security-group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-input-security-group-request
                    'make-describe-input-security-group-request))
 (common-lisp:defun make-describe-input-security-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-security-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-security-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-input-security-group-response common-lisp:nil
                       ((whitelist-rules :initarg :whitelist-rules :type
                         (common-lisp:or |__listOfInputWhitelistRule|
                                         common-lisp:null)
                         :accessor
                         %describe-input-security-group-response-whitelist-rules
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-input-security-group-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or input-security-group-state
                                         common-lisp:null)
                         :accessor
                         %describe-input-security-group-response-state
                         :initform common-lisp:nil)
                        (inputs :initarg :inputs :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %describe-input-security-group-response-inputs
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-security-group-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-input-security-group-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-input-security-group-response
                    'make-describe-input-security-group-response))
 (common-lisp:defun make-describe-input-security-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key whitelist-rules tags state inputs id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-input-security-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-multiplex-program-request common-lisp:nil
                       ((program-name :initarg :program-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-multiplex-program-request-program-name
                         :initform
                         (common-lisp:error ":program-name is required"))
                        (multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-multiplex-program-request-multiplex-id
                         :initform
                         (common-lisp:error ":multiplex-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-program-request
                    'make-describe-multiplex-program-request))
 (common-lisp:defun make-describe-multiplex-program-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key program-name multiplex-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-multiplex-program-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-multiplex-program-response common-lisp:nil
                       ((program-name :initarg :program-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-multiplex-program-response-program-name
                         :initform common-lisp:nil)
                        (pipeline-details :initarg :pipeline-details :type
                         (common-lisp:or
                          |__listOfMultiplexProgramPipelineDetail|
                          common-lisp:null)
                         :accessor
                         %describe-multiplex-program-response-pipeline-details
                         :initform common-lisp:nil)
                        (packet-identifiers-map :initarg
                         :packet-identifiers-map :type
                         (common-lisp:or
                          multiplex-program-packet-identifiers-map
                          common-lisp:null)
                         :accessor
                         %describe-multiplex-program-response-packet-identifiers-map
                         :initform common-lisp:nil)
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         %describe-multiplex-program-response-multiplex-program-settings
                         :initform common-lisp:nil)
                        (channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-multiplex-program-response-channel-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-program-response
                    'make-describe-multiplex-program-response))
 (common-lisp:defun make-describe-multiplex-program-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key program-name pipeline-details
                     packet-identifiers-map multiplex-program-settings
                     channel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-multiplex-program-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'packet-identifiers-map))
      (common-lisp:list
       (common-lisp:cons "PacketIdentifiersMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-multiplex-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-multiplex-request-multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-request
                    'make-describe-multiplex-request))
 (common-lisp:defun make-describe-multiplex-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-multiplex-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-multiplex-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor %describe-multiplex-response-state :initform
                         common-lisp:nil)
                        (program-count :initarg :program-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %describe-multiplex-response-program-count
                         :initform common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %describe-multiplex-response-pipelines-running-count
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-multiplex-response-name :initform
                         common-lisp:nil)
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor
                         %describe-multiplex-response-multiplex-settings
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-multiplex-response-id :initform
                         common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfMultiplexOutputDestination|
                                         common-lisp:null)
                         :accessor %describe-multiplex-response-destinations
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %describe-multiplex-response-availability-zones
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-multiplex-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-response
                    'make-describe-multiplex-response))
 (common-lisp:defun make-describe-multiplex-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags state program-count
                     pipelines-running-count name multiplex-settings id
                     destinations availability-zones arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-offering-request common-lisp:nil
                       ((offering-id :initarg :offering-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-offering-request-offering-id :initform
                         (common-lisp:error ":offering-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-offering-request
                    'make-describe-offering-request))
 (common-lisp:defun make-describe-offering-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key offering-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-offering-response common-lisp:nil
                       ((usage-price :initarg :usage-price :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %describe-offering-response-usage-price :initform
                         common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :type
                         (common-lisp:or reservation-resource-specification
                                         common-lisp:null)
                         :accessor
                         %describe-offering-response-resource-specification
                         :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-offering-response-region :initform
                         common-lisp:nil)
                        (offering-type :initarg :offering-type :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor %describe-offering-response-offering-type
                         :initform common-lisp:nil)
                        (offering-id :initarg :offering-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-offering-response-offering-id :initform
                         common-lisp:nil)
                        (offering-description :initarg :offering-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %describe-offering-response-offering-description
                         :initform common-lisp:nil)
                        (fixed-price :initarg :fixed-price :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %describe-offering-response-fixed-price :initform
                         common-lisp:nil)
                        (duration-units :initarg :duration-units :type
                         (common-lisp:or offering-duration-units
                                         common-lisp:null)
                         :accessor %describe-offering-response-duration-units
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %describe-offering-response-duration
                         :initform common-lisp:nil)
                        (currency-code :initarg :currency-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-offering-response-currency-code :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-offering-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-offering-response
                    'make-describe-offering-response))
 (common-lisp:defun make-describe-offering-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key usage-price resource-specification region
                     offering-type offering-id offering-description fixed-price
                     duration-units duration currency-code arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reservation-request common-lisp:nil
                       ((reservation-id :initarg :reservation-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-reservation-request-reservation-id :initform
                         (common-lisp:error ":reservation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-reservation-request
                    'make-describe-reservation-request))
 (common-lisp:defun make-describe-reservation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-reservation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reservation-response common-lisp:nil
                       ((usage-price :initarg :usage-price :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %describe-reservation-response-usage-price :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-reservation-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or reservation-state common-lisp:null)
                         :accessor %describe-reservation-response-state
                         :initform common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-reservation-response-start :initform
                         common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :type
                         (common-lisp:or reservation-resource-specification
                                         common-lisp:null)
                         :accessor
                         %describe-reservation-response-resource-specification
                         :initform common-lisp:nil)
                        (reservation-id :initarg :reservation-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-reservation-response-reservation-id
                         :initform common-lisp:nil)
                        (renewal-settings :initarg :renewal-settings :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor
                         %describe-reservation-response-renewal-settings
                         :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-reservation-response-region :initform
                         common-lisp:nil)
                        (offering-type :initarg :offering-type :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor %describe-reservation-response-offering-type
                         :initform common-lisp:nil)
                        (offering-id :initarg :offering-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-reservation-response-offering-id :initform
                         common-lisp:nil)
                        (offering-description :initarg :offering-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %describe-reservation-response-offering-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-reservation-response-name :initform
                         common-lisp:nil)
                        (fixed-price :initarg :fixed-price :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %describe-reservation-response-fixed-price :initform
                         common-lisp:nil)
                        (end :initarg :end :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-reservation-response-end :initform
                         common-lisp:nil)
                        (duration-units :initarg :duration-units :type
                         (common-lisp:or offering-duration-units
                                         common-lisp:null)
                         :accessor
                         %describe-reservation-response-duration-units
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %describe-reservation-response-duration
                         :initform common-lisp:nil)
                        (currency-code :initarg :currency-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-reservation-response-currency-code :initform
                         common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %describe-reservation-response-count
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-reservation-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-reservation-response
                    'make-describe-reservation-response))
 (common-lisp:defun make-describe-reservation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key usage-price tags state start
                     resource-specification reservation-id renewal-settings
                     region offering-type offering-id offering-description name
                     fixed-price end duration-units duration currency-code
                     count arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reservation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-schedule-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-schedule-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-schedule-request-max-results
                         :initform common-lisp:nil)
                        (channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-schedule-request-channel-id :initform
                         (common-lisp:error ":channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-schedule-request
                    'make-describe-schedule-request))
 (common-lisp:defun make-describe-schedule-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-schedule-response common-lisp:nil
                       ((schedule-actions :initarg :schedule-actions :type
                         (common-lisp:or |__listOfScheduleAction|
                                         common-lisp:null)
                         :accessor %describe-schedule-response-schedule-actions
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %describe-schedule-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-schedule-response
                    'make-describe-schedule-response))
 (common-lisp:defun make-describe-schedule-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule-actions next-token)
   (common-lisp:apply #'common-lisp:make-instance 'describe-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-response))
   common-lisp:nil))
(common-lisp:deftype device-settings-sync-state () 'common-lisp:string)
(common-lisp:deftype device-update-status () 'common-lisp:string)
(common-lisp:deftype dolby-eprogram-selection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dolby-vision81settings common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'dolby-vision81settings 'make-dolby-vision81settings))
 (common-lisp:defun make-dolby-vision81settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'dolby-vision81settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision81settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision81settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision81settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dvb-nit-settings common-lisp:nil
                       ((rep-interval :initarg :rep-interval :type
                         (common-lisp:or |__integerMin25Max10000|
                                         common-lisp:null)
                         :accessor %dvb-nit-settings-rep-interval :initform
                         common-lisp:nil)
                        (network-name :initarg :network-name :type
                         (common-lisp:or |__stringMin1Max256| common-lisp:null)
                         :accessor %dvb-nit-settings-network-name :initform
                         (common-lisp:error ":network-name is required"))
                        (network-id :initarg :network-id :type
                         (common-lisp:or |__integerMin0Max65536|
                                         common-lisp:null)
                         :accessor %dvb-nit-settings-network-id :initform
                         (common-lisp:error ":network-id is required"))))
 (common-lisp:export
  (common-lisp:list 'dvb-nit-settings 'make-dvb-nit-settings))
 (common-lisp:defun make-dvb-nit-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rep-interval network-name network-id)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-nit-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rep-interval))
      (common-lisp:list
       (common-lisp:cons "RepInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   common-lisp:nil))
(common-lisp:deftype dvb-sdt-output-sdt () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dvb-sdt-settings common-lisp:nil
                       ((service-provider-name :initarg :service-provider-name
                         :type
                         (common-lisp:or |__stringMin1Max256| common-lisp:null)
                         :accessor %dvb-sdt-settings-service-provider-name
                         :initform common-lisp:nil)
                        (service-name :initarg :service-name :type
                         (common-lisp:or |__stringMin1Max256| common-lisp:null)
                         :accessor %dvb-sdt-settings-service-name :initform
                         common-lisp:nil)
                        (rep-interval :initarg :rep-interval :type
                         (common-lisp:or |__integerMin25Max2000|
                                         common-lisp:null)
                         :accessor %dvb-sdt-settings-rep-interval :initform
                         common-lisp:nil)
                        (output-sdt :initarg :output-sdt :type
                         (common-lisp:or dvb-sdt-output-sdt common-lisp:null)
                         :accessor %dvb-sdt-settings-output-sdt :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dvb-sdt-settings 'make-dvb-sdt-settings))
 (common-lisp:defun make-dvb-sdt-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-provider-name service-name
                     rep-interval output-sdt)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-sdt-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-sdt))
      (common-lisp:list
       (common-lisp:cons "OutputSdt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rep-interval))
      (common-lisp:list
       (common-lisp:cons "RepInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-provider-name))
      (common-lisp:list
       (common-lisp:cons "ServiceProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   common-lisp:nil))
(common-lisp:deftype dvb-sub-destination-alignment () 'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-background-color ()
  'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-font-color () 'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-outline-color () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dvb-sub-destination-settings common-lisp:nil
                       ((yposition :initarg :yposition :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %dvb-sub-destination-settings-yposition
                         :initform common-lisp:nil)
                        (xposition :initarg :xposition :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %dvb-sub-destination-settings-xposition
                         :initform common-lisp:nil)
                        (teletext-grid-control :initarg :teletext-grid-control
                         :type
                         (common-lisp:or
                          dvb-sub-destination-teletext-grid-control
                          common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-teletext-grid-control
                         :initform common-lisp:nil)
                        (shadow-yoffset :initarg :shadow-yoffset :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %dvb-sub-destination-settings-shadow-yoffset
                         :initform common-lisp:nil)
                        (shadow-xoffset :initarg :shadow-xoffset :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %dvb-sub-destination-settings-shadow-xoffset
                         :initform common-lisp:nil)
                        (shadow-opacity :initarg :shadow-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-shadow-opacity
                         :initform common-lisp:nil)
                        (shadow-color :initarg :shadow-color :type
                         (common-lisp:or dvb-sub-destination-shadow-color
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-shadow-color
                         :initform common-lisp:nil)
                        (outline-size :initarg :outline-size :type
                         (common-lisp:or |__integerMin0Max10| common-lisp:null)
                         :accessor %dvb-sub-destination-settings-outline-size
                         :initform common-lisp:nil)
                        (outline-color :initarg :outline-color :type
                         (common-lisp:or dvb-sub-destination-outline-color
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-outline-color
                         :initform common-lisp:nil)
                        (font-size :initarg :font-size :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %dvb-sub-destination-settings-font-size :initform
                         common-lisp:nil)
                        (font-resolution :initarg :font-resolution :type
                         (common-lisp:or |__integerMin96Max600|
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-font-resolution
                         :initform common-lisp:nil)
                        (font-opacity :initarg :font-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-font-opacity
                         :initform common-lisp:nil)
                        (font-color :initarg :font-color :type
                         (common-lisp:or dvb-sub-destination-font-color
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-font-color
                         :initform common-lisp:nil)
                        (font :initarg :font :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor %dvb-sub-destination-settings-font :initform
                         common-lisp:nil)
                        (background-opacity :initarg :background-opacity :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-background-opacity
                         :initform common-lisp:nil)
                        (background-color :initarg :background-color :type
                         (common-lisp:or dvb-sub-destination-background-color
                                         common-lisp:null)
                         :accessor
                         %dvb-sub-destination-settings-background-color
                         :initform common-lisp:nil)
                        (alignment :initarg :alignment :type
                         (common-lisp:or dvb-sub-destination-alignment
                                         common-lisp:null)
                         :accessor %dvb-sub-destination-settings-alignment
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dvb-sub-destination-settings
                    'make-dvb-sub-destination-settings))
 (common-lisp:defun make-dvb-sub-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key yposition xposition teletext-grid-control
                     shadow-yoffset shadow-xoffset shadow-opacity shadow-color
                     outline-size outline-color font-size font-resolution
                     font-opacity font-color font background-opacity
                     background-color alignment)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-sub-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "Alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-opacity))
      (common-lisp:list
       (common-lisp:cons "BackgroundOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font))
      (common-lisp:list
       (common-lisp:cons "Font"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-opacity))
      (common-lisp:list
       (common-lisp:cons "FontOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-resolution))
      (common-lisp:list
       (common-lisp:cons "FontResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-color))
      (common-lisp:list
       (common-lisp:cons "OutlineColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-size))
      (common-lisp:list
       (common-lisp:cons "OutlineSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-color))
      (common-lisp:list
       (common-lisp:cons "ShadowColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-opacity))
      (common-lisp:list
       (common-lisp:cons "ShadowOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-xoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowXOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-yoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowYOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-grid-control))
      (common-lisp:list
       (common-lisp:cons "TeletextGridControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xposition))
      (common-lisp:list
       (common-lisp:cons "XPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yposition))
      (common-lisp:list
       (common-lisp:cons "YPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   common-lisp:nil))
(common-lisp:deftype dvb-sub-destination-shadow-color () 'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-teletext-grid-control ()
  'common-lisp:string)
(common-lisp:deftype dvb-sub-ocr-language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dvb-sub-source-settings common-lisp:nil
                       ((pid :initarg :pid :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %dvb-sub-source-settings-pid :initform
                         common-lisp:nil)
                        (ocr-language :initarg :ocr-language :type
                         (common-lisp:or dvb-sub-ocr-language common-lisp:null)
                         :accessor %dvb-sub-source-settings-ocr-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dvb-sub-source-settings 'make-dvb-sub-source-settings))
 (common-lisp:defun make-dvb-sub-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pid ocr-language)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-sub-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ocr-language))
      (common-lisp:list
       (common-lisp:cons "OcrLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dvb-tdt-settings common-lisp:nil
                       ((rep-interval :initarg :rep-interval :type
                         (common-lisp:or |__integerMin1000Max30000|
                                         common-lisp:null)
                         :accessor %dvb-tdt-settings-rep-interval :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dvb-tdt-settings 'make-dvb-tdt-settings))
 (common-lisp:defun make-dvb-tdt-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rep-interval)
   (common-lisp:apply #'common-lisp:make-instance 'dvb-tdt-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rep-interval))
      (common-lisp:list
       (common-lisp:cons "RepInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   common-lisp:nil))
(common-lisp:deftype eac3atmos-coding-mode () 'common-lisp:string)
(common-lisp:deftype eac3atmos-drc-line () 'common-lisp:string)
(common-lisp:deftype eac3atmos-drc-rf () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass eac3atmos-settings common-lisp:nil
                       ((surround-trim :initarg :surround-trim :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %eac3atmos-settings-surround-trim :initform
                         common-lisp:nil)
                        (height-trim :initarg :height-trim :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %eac3atmos-settings-height-trim :initform
                         common-lisp:nil)
                        (drc-rf :initarg :drc-rf :type
                         (common-lisp:or eac3atmos-drc-rf common-lisp:null)
                         :accessor %eac3atmos-settings-drc-rf :initform
                         common-lisp:nil)
                        (drc-line :initarg :drc-line :type
                         (common-lisp:or eac3atmos-drc-line common-lisp:null)
                         :accessor %eac3atmos-settings-drc-line :initform
                         common-lisp:nil)
                        (dialnorm :initarg :dialnorm :type
                         (common-lisp:or |__integerMin1Max31| common-lisp:null)
                         :accessor %eac3atmos-settings-dialnorm :initform
                         common-lisp:nil)
                        (coding-mode :initarg :coding-mode :type
                         (common-lisp:or eac3atmos-coding-mode
                                         common-lisp:null)
                         :accessor %eac3atmos-settings-coding-mode :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %eac3atmos-settings-bitrate :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'eac3atmos-settings 'make-eac3atmos-settings))
 (common-lisp:defun make-eac3atmos-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key surround-trim height-trim drc-rf drc-line
                     dialnorm coding-mode bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'eac3atmos-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-line))
      (common-lisp:list
       (common-lisp:cons "DrcLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-rf))
      (common-lisp:list
       (common-lisp:cons "DrcRf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height-trim))
      (common-lisp:list
       (common-lisp:cons "HeightTrim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-trim))
      (common-lisp:list
       (common-lisp:cons "SurroundTrim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   common-lisp:nil))
(common-lisp:deftype eac3attenuation-control () 'common-lisp:string)
(common-lisp:deftype eac3bitstream-mode () 'common-lisp:string)
(common-lisp:deftype eac3coding-mode () 'common-lisp:string)
(common-lisp:deftype eac3dc-filter () 'common-lisp:string)
(common-lisp:deftype eac3drc-line () 'common-lisp:string)
(common-lisp:deftype eac3drc-rf () 'common-lisp:string)
(common-lisp:deftype eac3lfe-control () 'common-lisp:string)
(common-lisp:deftype eac3lfe-filter () 'common-lisp:string)
(common-lisp:deftype eac3metadata-control () 'common-lisp:string)
(common-lisp:deftype eac3passthrough-control () 'common-lisp:string)
(common-lisp:deftype eac3phase-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass eac3settings common-lisp:nil
                       ((surround-mode :initarg :surround-mode :type
                         (common-lisp:or eac3surround-mode common-lisp:null)
                         :accessor %eac3settings-surround-mode :initform
                         common-lisp:nil)
                        (surround-ex-mode :initarg :surround-ex-mode :type
                         (common-lisp:or eac3surround-ex-mode common-lisp:null)
                         :accessor %eac3settings-surround-ex-mode :initform
                         common-lisp:nil)
                        (stereo-downmix :initarg :stereo-downmix :type
                         (common-lisp:or eac3stereo-downmix common-lisp:null)
                         :accessor %eac3settings-stereo-downmix :initform
                         common-lisp:nil)
                        (phase-control :initarg :phase-control :type
                         (common-lisp:or eac3phase-control common-lisp:null)
                         :accessor %eac3settings-phase-control :initform
                         common-lisp:nil)
                        (passthrough-control :initarg :passthrough-control
                         :type
                         (common-lisp:or eac3passthrough-control
                                         common-lisp:null)
                         :accessor %eac3settings-passthrough-control :initform
                         common-lisp:nil)
                        (metadata-control :initarg :metadata-control :type
                         (common-lisp:or eac3metadata-control common-lisp:null)
                         :accessor %eac3settings-metadata-control :initform
                         common-lisp:nil)
                        (lt-rt-surround-mix-level :initarg
                         :lt-rt-surround-mix-level :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %eac3settings-lt-rt-surround-mix-level :initform
                         common-lisp:nil)
                        (lt-rt-center-mix-level :initarg
                         :lt-rt-center-mix-level :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %eac3settings-lt-rt-center-mix-level :initform
                         common-lisp:nil)
                        (lo-ro-surround-mix-level :initarg
                         :lo-ro-surround-mix-level :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %eac3settings-lo-ro-surround-mix-level :initform
                         common-lisp:nil)
                        (lo-ro-center-mix-level :initarg
                         :lo-ro-center-mix-level :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %eac3settings-lo-ro-center-mix-level :initform
                         common-lisp:nil)
                        (lfe-filter :initarg :lfe-filter :type
                         (common-lisp:or eac3lfe-filter common-lisp:null)
                         :accessor %eac3settings-lfe-filter :initform
                         common-lisp:nil)
                        (lfe-control :initarg :lfe-control :type
                         (common-lisp:or eac3lfe-control common-lisp:null)
                         :accessor %eac3settings-lfe-control :initform
                         common-lisp:nil)
                        (drc-rf :initarg :drc-rf :type
                         (common-lisp:or eac3drc-rf common-lisp:null) :accessor
                         %eac3settings-drc-rf :initform common-lisp:nil)
                        (drc-line :initarg :drc-line :type
                         (common-lisp:or eac3drc-line common-lisp:null)
                         :accessor %eac3settings-drc-line :initform
                         common-lisp:nil)
                        (dialnorm :initarg :dialnorm :type
                         (common-lisp:or |__integerMin1Max31| common-lisp:null)
                         :accessor %eac3settings-dialnorm :initform
                         common-lisp:nil)
                        (dc-filter :initarg :dc-filter :type
                         (common-lisp:or eac3dc-filter common-lisp:null)
                         :accessor %eac3settings-dc-filter :initform
                         common-lisp:nil)
                        (coding-mode :initarg :coding-mode :type
                         (common-lisp:or eac3coding-mode common-lisp:null)
                         :accessor %eac3settings-coding-mode :initform
                         common-lisp:nil)
                        (bitstream-mode :initarg :bitstream-mode :type
                         (common-lisp:or eac3bitstream-mode common-lisp:null)
                         :accessor %eac3settings-bitstream-mode :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %eac3settings-bitrate :initform common-lisp:nil)
                        (attenuation-control :initarg :attenuation-control
                         :type
                         (common-lisp:or eac3attenuation-control
                                         common-lisp:null)
                         :accessor %eac3settings-attenuation-control :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'eac3settings 'make-eac3settings))
 (common-lisp:defun make-eac3settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key surround-mode surround-ex-mode
                     stereo-downmix phase-control passthrough-control
                     metadata-control lt-rt-surround-mix-level
                     lt-rt-center-mix-level lo-ro-surround-mix-level
                     lo-ro-center-mix-level lfe-filter lfe-control drc-rf
                     drc-line dialnorm dc-filter coding-mode bitstream-mode
                     bitrate attenuation-control)
   (common-lisp:apply #'common-lisp:make-instance 'eac3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eac3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eac3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attenuation-control))
      (common-lisp:list
       (common-lisp:cons "AttenuationControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitstream-mode))
      (common-lisp:list
       (common-lisp:cons "BitstreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dc-filter))
      (common-lisp:list
       (common-lisp:cons "DcFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-line))
      (common-lisp:list
       (common-lisp:cons "DrcLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-rf))
      (common-lisp:list
       (common-lisp:cons "DrcRf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-control))
      (common-lisp:list
       (common-lisp:cons "LfeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-filter))
      (common-lisp:list
       (common-lisp:cons "LfeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ro-center-mix-level))
      (common-lisp:list
       (common-lisp:cons "LoRoCenterMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ro-surround-mix-level))
      (common-lisp:list
       (common-lisp:cons "LoRoSurroundMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lt-rt-center-mix-level))
      (common-lisp:list
       (common-lisp:cons "LtRtCenterMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lt-rt-surround-mix-level))
      (common-lisp:list
       (common-lisp:cons "LtRtSurroundMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-control))
      (common-lisp:list
       (common-lisp:cons "MetadataControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passthrough-control))
      (common-lisp:list
       (common-lisp:cons "PassthroughControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phase-control))
      (common-lisp:list
       (common-lisp:cons "PhaseControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stereo-downmix))
      (common-lisp:list
       (common-lisp:cons "StereoDownmix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-ex-mode))
      (common-lisp:list
       (common-lisp:cons "SurroundExMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-mode))
      (common-lisp:list
       (common-lisp:cons "SurroundMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eac3settings))
   common-lisp:nil))
(common-lisp:deftype eac3stereo-downmix () 'common-lisp:string)
(common-lisp:deftype eac3surround-ex-mode () 'common-lisp:string)
(common-lisp:deftype eac3surround-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ebu-tt-ddestination-settings common-lisp:nil
                       ((style-control :initarg :style-control :type
                         (common-lisp:or ebu-tt-ddestination-style-control
                                         common-lisp:null)
                         :accessor %ebu-tt-ddestination-settings-style-control
                         :initform common-lisp:nil)
                        (font-family :initarg :font-family :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ebu-tt-ddestination-settings-font-family :initform
                         common-lisp:nil)
                        (fill-line-gap :initarg :fill-line-gap :type
                         (common-lisp:or ebu-tt-dfill-line-gap-control
                                         common-lisp:null)
                         :accessor %ebu-tt-ddestination-settings-fill-line-gap
                         :initform common-lisp:nil)
                        (copyright-holder :initarg :copyright-holder :type
                         (common-lisp:or |__stringMax1000| common-lisp:null)
                         :accessor
                         %ebu-tt-ddestination-settings-copyright-holder
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ebu-tt-ddestination-settings
                    'make-ebu-tt-ddestination-settings))
 (common-lisp:defun make-ebu-tt-ddestination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key style-control font-family fill-line-gap
                     copyright-holder)
   (common-lisp:apply #'common-lisp:make-instance 'ebu-tt-ddestination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebu-tt-ddestination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebu-tt-ddestination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copyright-holder))
      (common-lisp:list
       (common-lisp:cons "CopyrightHolder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fill-line-gap))
      (common-lisp:list
       (common-lisp:cons "FillLineGap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-family))
      (common-lisp:list
       (common-lisp:cons "FontFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-control))
      (common-lisp:list
       (common-lisp:cons "StyleControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebu-tt-ddestination-settings))
   common-lisp:nil))
(common-lisp:deftype ebu-tt-ddestination-style-control () 'common-lisp:string)
(common-lisp:deftype ebu-tt-dfill-line-gap-control () 'common-lisp:string)
(common-lisp:deftype embedded-convert608to708 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass embedded-destination-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'embedded-destination-settings
                    'make-embedded-destination-settings))
 (common-lisp:defun make-embedded-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'embedded-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass embedded-plus-scte20destination-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'embedded-plus-scte20destination-settings
                    'make-embedded-plus-scte20destination-settings))
 (common-lisp:defun make-embedded-plus-scte20destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'embedded-plus-scte20destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-plus-scte20destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-plus-scte20destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-plus-scte20destination-settings))
   common-lisp:nil))
(common-lisp:deftype embedded-scte20detection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass embedded-source-settings common-lisp:nil
                       ((source608track-number :initarg :source608track-number
                         :type
                         (common-lisp:or |__integerMin1Max5| common-lisp:null)
                         :accessor
                         %embedded-source-settings-source608track-number
                         :initform common-lisp:nil)
                        (source608channel-number :initarg
                         :source608channel-number :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor
                         %embedded-source-settings-source608channel-number
                         :initform common-lisp:nil)
                        (scte20detection :initarg :scte20detection :type
                         (common-lisp:or embedded-scte20detection
                                         common-lisp:null)
                         :accessor %embedded-source-settings-scte20detection
                         :initform common-lisp:nil)
                        (convert608to708 :initarg :convert608to708 :type
                         (common-lisp:or embedded-convert608to708
                                         common-lisp:null)
                         :accessor %embedded-source-settings-convert608to708
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'embedded-source-settings 'make-embedded-source-settings))
 (common-lisp:defun make-embedded-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source608track-number
                     source608channel-number scte20detection convert608to708)
   (common-lisp:apply #'common-lisp:make-instance 'embedded-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'convert608to708))
      (common-lisp:list
       (common-lisp:cons "Convert608To708"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte20detection))
      (common-lisp:list
       (common-lisp:cons "Scte20Detection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608channel-number))
      (common-lisp:list
       (common-lisp:cons "Source608ChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608track-number))
      (common-lisp:list
       (common-lisp:cons "Source608TrackNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass empty common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'empty 'make-empty))
 (common-lisp:defun make-empty
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'empty
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input empty))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input empty))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input empty))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encoder-settings common-lisp:nil
                       ((video-descriptions :initarg :video-descriptions :type
                         (common-lisp:or |__listOfVideoDescription|
                                         common-lisp:null)
                         :accessor %encoder-settings-video-descriptions
                         :initform
                         (common-lisp:error ":video-descriptions is required"))
                        (timecode-config :initarg :timecode-config :type
                         (common-lisp:or timecode-config common-lisp:null)
                         :accessor %encoder-settings-timecode-config :initform
                         (common-lisp:error ":timecode-config is required"))
                        (output-groups :initarg :output-groups :type
                         (common-lisp:or |__listOfOutputGroup|
                                         common-lisp:null)
                         :accessor %encoder-settings-output-groups :initform
                         (common-lisp:error ":output-groups is required"))
                        (nielsen-configuration :initarg :nielsen-configuration
                         :type
                         (common-lisp:or nielsen-configuration
                                         common-lisp:null)
                         :accessor %encoder-settings-nielsen-configuration
                         :initform common-lisp:nil)
                        (motion-graphics-configuration :initarg
                         :motion-graphics-configuration :type
                         (common-lisp:or motion-graphics-configuration
                                         common-lisp:null)
                         :accessor
                         %encoder-settings-motion-graphics-configuration
                         :initform common-lisp:nil)
                        (global-configuration :initarg :global-configuration
                         :type
                         (common-lisp:or global-configuration common-lisp:null)
                         :accessor %encoder-settings-global-configuration
                         :initform common-lisp:nil)
                        (feature-activations :initarg :feature-activations
                         :type
                         (common-lisp:or feature-activations common-lisp:null)
                         :accessor %encoder-settings-feature-activations
                         :initform common-lisp:nil)
                        (caption-descriptions :initarg :caption-descriptions
                         :type
                         (common-lisp:or |__listOfCaptionDescription|
                                         common-lisp:null)
                         :accessor %encoder-settings-caption-descriptions
                         :initform common-lisp:nil)
                        (blackout-slate :initarg :blackout-slate :type
                         (common-lisp:or blackout-slate common-lisp:null)
                         :accessor %encoder-settings-blackout-slate :initform
                         common-lisp:nil)
                        (avail-configuration :initarg :avail-configuration
                         :type
                         (common-lisp:or avail-configuration common-lisp:null)
                         :accessor %encoder-settings-avail-configuration
                         :initform common-lisp:nil)
                        (avail-blanking :initarg :avail-blanking :type
                         (common-lisp:or avail-blanking common-lisp:null)
                         :accessor %encoder-settings-avail-blanking :initform
                         common-lisp:nil)
                        (audio-descriptions :initarg :audio-descriptions :type
                         (common-lisp:or |__listOfAudioDescription|
                                         common-lisp:null)
                         :accessor %encoder-settings-audio-descriptions
                         :initform
                         (common-lisp:error
                          ":audio-descriptions is required"))))
 (common-lisp:export
  (common-lisp:list 'encoder-settings 'make-encoder-settings))
 (common-lisp:defun make-encoder-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-descriptions timecode-config
                     output-groups nielsen-configuration
                     motion-graphics-configuration global-configuration
                     feature-activations caption-descriptions blackout-slate
                     avail-configuration avail-blanking audio-descriptions)
   (common-lisp:apply #'common-lisp:make-instance 'encoder-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encoder-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encoder-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-descriptions))
      (common-lisp:list
       (common-lisp:cons "AudioDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-blanking))
      (common-lisp:list
       (common-lisp:cons "AvailBlanking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-configuration))
      (common-lisp:list
       (common-lisp:cons "AvailConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blackout-slate))
      (common-lisp:list
       (common-lisp:cons "BlackoutSlate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-descriptions))
      (common-lisp:list
       (common-lisp:cons "CaptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-activations))
      (common-lisp:list
       (common-lisp:cons "FeatureActivations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-configuration))
      (common-lisp:list
       (common-lisp:cons "GlobalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-configuration))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-configuration))
      (common-lisp:list
       (common-lisp:cons "NielsenConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-groups))
      (common-lisp:list
       (common-lisp:cons "OutputGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-config))
      (common-lisp:list
       (common-lisp:cons "TimecodeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-descriptions))
      (common-lisp:list
       (common-lisp:cons "VideoDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encoder-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass esam common-lisp:nil
                       ((zone-identity :initarg :zone-identity :type
                         (common-lisp:or |__stringMax256| common-lisp:null)
                         :accessor %esam-zone-identity :initform
                         common-lisp:nil)
                        (username :initarg :username :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %esam-username :initform common-lisp:nil)
                        (pois-endpoint :initarg :pois-endpoint :type
                         (common-lisp:or |__stringMax2048| common-lisp:null)
                         :accessor %esam-pois-endpoint :initform
                         (common-lisp:error ":pois-endpoint is required"))
                        (password-param :initarg :password-param :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %esam-password-param :initform common-lisp:nil)
                        (ad-avail-offset :initarg :ad-avail-offset :type
                         (common-lisp:or |__integerMinNegative1000Max1000|
                                         common-lisp:null)
                         :accessor %esam-ad-avail-offset :initform
                         common-lisp:nil)
                        (acquisition-point-id :initarg :acquisition-point-id
                         :type
                         (common-lisp:or |__stringMax256| common-lisp:null)
                         :accessor %esam-acquisition-point-id :initform
                         (common-lisp:error
                          ":acquisition-point-id is required"))))
 (common-lisp:export (common-lisp:list 'esam 'make-esam))
 (common-lisp:defun make-esam
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key zone-identity username pois-endpoint
                     password-param ad-avail-offset acquisition-point-id)
   (common-lisp:apply #'common-lisp:make-instance 'esam
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input esam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input esam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acquisition-point-id))
      (common-lisp:list
       (common-lisp:cons "AcquisitionPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pois-endpoint))
      (common-lisp:list
       (common-lisp:cons "PoisEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-identity))
      (common-lisp:list
       (common-lisp:cons "ZoneIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input esam))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-condition common-lisp:nil
                       ((failover-condition-settings :initarg
                         :failover-condition-settings :type
                         (common-lisp:or failover-condition-settings
                                         common-lisp:null)
                         :accessor
                         %failover-condition-failover-condition-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failover-condition 'make-failover-condition))
 (common-lisp:defun make-failover-condition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failover-condition-settings)
   (common-lisp:apply #'common-lisp:make-instance 'failover-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failover-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failover-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failover-condition-settings))
      (common-lisp:list
       (common-lisp:cons "FailoverConditionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failover-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failover-condition-settings common-lisp:nil
                       ((video-black-settings :initarg :video-black-settings
                         :type
                         (common-lisp:or video-black-failover-settings
                                         common-lisp:null)
                         :accessor
                         %failover-condition-settings-video-black-settings
                         :initform common-lisp:nil)
                        (input-loss-settings :initarg :input-loss-settings
                         :type
                         (common-lisp:or input-loss-failover-settings
                                         common-lisp:null)
                         :accessor
                         %failover-condition-settings-input-loss-settings
                         :initform common-lisp:nil)
                        (audio-silence-settings :initarg
                         :audio-silence-settings :type
                         (common-lisp:or audio-silence-failover-settings
                                         common-lisp:null)
                         :accessor
                         %failover-condition-settings-audio-silence-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'failover-condition-settings
                    'make-failover-condition-settings))
 (common-lisp:defun make-failover-condition-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-black-settings input-loss-settings
                     audio-silence-settings)
   (common-lisp:apply #'common-lisp:make-instance 'failover-condition-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-condition-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-condition-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-silence-settings))
      (common-lisp:list
       (common-lisp:cons "AudioSilenceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-settings))
      (common-lisp:list
       (common-lisp:cons "InputLossSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-black-settings))
      (common-lisp:list
       (common-lisp:cons "VideoBlackSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-condition-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass feature-activations common-lisp:nil
                       ((input-prepare-schedule-actions :initarg
                         :input-prepare-schedule-actions :type
                         (common-lisp:or
                          feature-activations-input-prepare-schedule-actions
                          common-lisp:null)
                         :accessor
                         %feature-activations-input-prepare-schedule-actions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'feature-activations 'make-feature-activations))
 (common-lisp:defun make-feature-activations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-prepare-schedule-actions)
   (common-lisp:apply #'common-lisp:make-instance 'feature-activations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input feature-activations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input feature-activations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-prepare-schedule-actions))
      (common-lisp:list
       (common-lisp:cons "InputPrepareScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input feature-activations))
   common-lisp:nil))
(common-lisp:deftype feature-activations-input-prepare-schedule-actions ()
  'common-lisp:string)
(common-lisp:deftype fec-output-include-fec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fec-output-settings common-lisp:nil
                       ((row-length :initarg :row-length :type
                         (common-lisp:or |__integerMin1Max20| common-lisp:null)
                         :accessor %fec-output-settings-row-length :initform
                         common-lisp:nil)
                        (include-fec :initarg :include-fec :type
                         (common-lisp:or fec-output-include-fec
                                         common-lisp:null)
                         :accessor %fec-output-settings-include-fec :initform
                         common-lisp:nil)
                        (column-depth :initarg :column-depth :type
                         (common-lisp:or |__integerMin4Max20| common-lisp:null)
                         :accessor %fec-output-settings-column-depth :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fec-output-settings 'make-fec-output-settings))
 (common-lisp:defun make-fec-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key row-length include-fec column-depth)
   (common-lisp:apply #'common-lisp:make-instance 'fec-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fec-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fec-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-depth))
      (common-lisp:list
       (common-lisp:cons "ColumnDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-fec))
      (common-lisp:list
       (common-lisp:cons "IncludeFec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-length))
      (common-lisp:list
       (common-lisp:cons "RowLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fec-output-settings))
   common-lisp:nil))
(common-lisp:deftype fixed-afd () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fixed-mode-schedule-action-start-settings
                       common-lisp:nil
                       ((time :initarg :time :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %fixed-mode-schedule-action-start-settings-time
                         :initform (common-lisp:error ":time is required"))))
 (common-lisp:export
  (common-lisp:list 'fixed-mode-schedule-action-start-settings
                    'make-fixed-mode-schedule-action-start-settings))
 (common-lisp:defun make-fixed-mode-schedule-action-start-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time)
   (common-lisp:apply #'common-lisp:make-instance
                      'fixed-mode-schedule-action-start-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fixed-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fixed-mode-schedule-action-start-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fixed-mode-schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass fmp4hls-settings common-lisp:nil
                       ((timed-metadata-behavior :initarg
                         :timed-metadata-behavior :type
                         (common-lisp:or fmp4timed-metadata-behavior
                                         common-lisp:null)
                         :accessor %fmp4hls-settings-timed-metadata-behavior
                         :initform common-lisp:nil)
                        (nielsen-id3behavior :initarg :nielsen-id3behavior
                         :type
                         (common-lisp:or fmp4nielsen-id3behavior
                                         common-lisp:null)
                         :accessor %fmp4hls-settings-nielsen-id3behavior
                         :initform common-lisp:nil)
                        (audio-rendition-sets :initarg :audio-rendition-sets
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %fmp4hls-settings-audio-rendition-sets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'fmp4hls-settings 'make-fmp4hls-settings))
 (common-lisp:defun make-fmp4hls-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timed-metadata-behavior
                     nielsen-id3behavior audio-rendition-sets)
   (common-lisp:apply #'common-lisp:make-instance 'fmp4hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fmp4hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fmp4hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-rendition-sets))
      (common-lisp:list
       (common-lisp:cons "AudioRenditionSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3behavior))
      (common-lisp:list
       (common-lisp:cons "NielsenId3Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-behavior))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fmp4hls-settings))
   common-lisp:nil))
(common-lisp:deftype fmp4nielsen-id3behavior () 'common-lisp:string)
(common-lisp:deftype fmp4timed-metadata-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass follow-mode-schedule-action-start-settings
                       common-lisp:nil
                       ((reference-action-name :initarg :reference-action-name
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %follow-mode-schedule-action-start-settings-reference-action-name
                         :initform
                         (common-lisp:error
                          ":reference-action-name is required"))
                        (follow-point :initarg :follow-point :type
                         (common-lisp:or follow-point common-lisp:null)
                         :accessor
                         %follow-mode-schedule-action-start-settings-follow-point
                         :initform
                         (common-lisp:error ":follow-point is required"))))
 (common-lisp:export
  (common-lisp:list 'follow-mode-schedule-action-start-settings
                    'make-follow-mode-schedule-action-start-settings))
 (common-lisp:defun make-follow-mode-schedule-action-start-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reference-action-name follow-point)
   (common-lisp:apply #'common-lisp:make-instance
                      'follow-mode-schedule-action-start-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          follow-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          follow-mode-schedule-action-start-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'follow-point))
      (common-lisp:list
       (common-lisp:cons "FollowPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-action-name))
      (common-lisp:list
       (common-lisp:cons "ReferenceActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          follow-mode-schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:deftype follow-point () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defclass frame-capture-cdn-settings common-lisp:nil
                       ((frame-capture-s3settings :initarg
                         :frame-capture-s3settings :type
                         (common-lisp:or frame-capture-s3settings
                                         common-lisp:null)
                         :accessor
                         %frame-capture-cdn-settings-frame-capture-s3settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'frame-capture-cdn-settings
                    'make-frame-capture-cdn-settings))
 (common-lisp:defun make-frame-capture-cdn-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key frame-capture-s3settings)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-cdn-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-cdn-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-cdn-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-s3settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureS3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-cdn-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass frame-capture-group-settings common-lisp:nil
                       ((frame-capture-cdn-settings :initarg
                         :frame-capture-cdn-settings :type
                         (common-lisp:or frame-capture-cdn-settings
                                         common-lisp:null)
                         :accessor
                         %frame-capture-group-settings-frame-capture-cdn-settings
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor %frame-capture-group-settings-destination
                         :initform
                         (common-lisp:error ":destination is required"))))
 (common-lisp:export
  (common-lisp:list 'frame-capture-group-settings
                    'make-frame-capture-group-settings))
 (common-lisp:defun make-frame-capture-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key frame-capture-cdn-settings destination)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-cdn-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureCdnSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass frame-capture-hls-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'frame-capture-hls-settings
                    'make-frame-capture-hls-settings))
 (common-lisp:defun make-frame-capture-hls-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-hls-settings))
   common-lisp:nil))
(common-lisp:deftype frame-capture-interval-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass frame-capture-output-settings common-lisp:nil
                       ((name-modifier :initarg :name-modifier :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %frame-capture-output-settings-name-modifier :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'frame-capture-output-settings
                    'make-frame-capture-output-settings))
 (common-lisp:defun make-frame-capture-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name-modifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'frame-capture-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-output-settings))
   common-lisp:nil))
(common-lisp:deftype frame-capture-s3log-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass frame-capture-s3settings common-lisp:nil
                       ((canned-acl :initarg :canned-acl :type
                         (common-lisp:or s3canned-acl common-lisp:null)
                         :accessor %frame-capture-s3settings-canned-acl
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'frame-capture-s3settings 'make-frame-capture-s3settings))
 (common-lisp:defun make-frame-capture-s3settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canned-acl)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-s3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-s3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-s3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-s3settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass frame-capture-settings common-lisp:nil
                       ((timecode-burnin-settings :initarg
                         :timecode-burnin-settings :type
                         (common-lisp:or timecode-burnin-settings
                                         common-lisp:null)
                         :accessor
                         %frame-capture-settings-timecode-burnin-settings
                         :initform common-lisp:nil)
                        (capture-interval-units :initarg
                         :capture-interval-units :type
                         (common-lisp:or frame-capture-interval-unit
                                         common-lisp:null)
                         :accessor
                         %frame-capture-settings-capture-interval-units
                         :initform common-lisp:nil)
                        (capture-interval :initarg :capture-interval :type
                         (common-lisp:or |__integerMin1Max3600000|
                                         common-lisp:null)
                         :accessor %frame-capture-settings-capture-interval
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'frame-capture-settings 'make-frame-capture-settings))
 (common-lisp:defun make-frame-capture-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timecode-burnin-settings
                     capture-interval-units capture-interval)
   (common-lisp:apply #'common-lisp:make-instance 'frame-capture-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-interval))
      (common-lisp:list
       (common-lisp:cons "CaptureInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capture-interval-units))
      (common-lisp:list
       (common-lisp:cons "CaptureIntervalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition gateway-timeout-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       gateway-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'gateway-timeout-exception
                    'gateway-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass global-configuration common-lisp:nil
                       ((support-low-framerate-inputs :initarg
                         :support-low-framerate-inputs :type
                         (common-lisp:or
                          global-configuration-low-framerate-inputs
                          common-lisp:null)
                         :accessor
                         %global-configuration-support-low-framerate-inputs
                         :initform common-lisp:nil)
                        (output-timing-source :initarg :output-timing-source
                         :type
                         (common-lisp:or
                          global-configuration-output-timing-source
                          common-lisp:null)
                         :accessor %global-configuration-output-timing-source
                         :initform common-lisp:nil)
                        (output-locking-mode :initarg :output-locking-mode
                         :type
                         (common-lisp:or
                          global-configuration-output-locking-mode
                          common-lisp:null)
                         :accessor %global-configuration-output-locking-mode
                         :initform common-lisp:nil)
                        (input-loss-behavior :initarg :input-loss-behavior
                         :type
                         (common-lisp:or input-loss-behavior common-lisp:null)
                         :accessor %global-configuration-input-loss-behavior
                         :initform common-lisp:nil)
                        (input-end-action :initarg :input-end-action :type
                         (common-lisp:or global-configuration-input-end-action
                                         common-lisp:null)
                         :accessor %global-configuration-input-end-action
                         :initform common-lisp:nil)
                        (initial-audio-gain :initarg :initial-audio-gain :type
                         (common-lisp:or |__integerMinNegative60Max60|
                                         common-lisp:null)
                         :accessor %global-configuration-initial-audio-gain
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'global-configuration 'make-global-configuration))
 (common-lisp:defun make-global-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key support-low-framerate-inputs
                     output-timing-source output-locking-mode
                     input-loss-behavior input-end-action initial-audio-gain)
   (common-lisp:apply #'common-lisp:make-instance 'global-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-audio-gain))
      (common-lisp:list
       (common-lisp:cons "InitialAudioGain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-end-action))
      (common-lisp:list
       (common-lisp:cons "InputEndAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-behavior))
      (common-lisp:list
       (common-lisp:cons "InputLossBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-locking-mode))
      (common-lisp:list
       (common-lisp:cons "OutputLockingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-timing-source))
      (common-lisp:list
       (common-lisp:cons "OutputTimingSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'support-low-framerate-inputs))
      (common-lisp:list
       (common-lisp:cons "SupportLowFramerateInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-configuration))
   common-lisp:nil))
(common-lisp:deftype global-configuration-input-end-action ()
  'common-lisp:string)
(common-lisp:deftype global-configuration-low-framerate-inputs ()
  'common-lisp:string)
(common-lisp:deftype global-configuration-output-locking-mode ()
  'common-lisp:string)
(common-lisp:deftype global-configuration-output-timing-source ()
  'common-lisp:string)
(common-lisp:deftype h264adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h264color-metadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h264color-space-settings common-lisp:nil
                       ((rec709settings :initarg :rec709settings :type
                         (common-lisp:or rec709settings common-lisp:null)
                         :accessor %h264color-space-settings-rec709settings
                         :initform common-lisp:nil)
                        (rec601settings :initarg :rec601settings :type
                         (common-lisp:or rec601settings common-lisp:null)
                         :accessor %h264color-space-settings-rec601settings
                         :initform common-lisp:nil)
                        (color-space-passthrough-settings :initarg
                         :color-space-passthrough-settings :type
                         (common-lisp:or color-space-passthrough-settings
                                         common-lisp:null)
                         :accessor
                         %h264color-space-settings-color-space-passthrough-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'h264color-space-settings 'make-h264color-space-settings))
 (common-lisp:defun make-h264color-space-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rec709settings rec601settings
                     color-space-passthrough-settings)
   (common-lisp:apply #'common-lisp:make-instance 'h264color-space-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          h264color-space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          h264color-space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-passthrough-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpacePassthroughSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec601settings))
      (common-lisp:list
       (common-lisp:cons "Rec601Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec709settings))
      (common-lisp:list
       (common-lisp:cons "Rec709Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          h264color-space-settings))
   common-lisp:nil))
(common-lisp:deftype h264entropy-encoding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h264filter-settings common-lisp:nil
                       ((temporal-filter-settings :initarg
                         :temporal-filter-settings :type
                         (common-lisp:or temporal-filter-settings
                                         common-lisp:null)
                         :accessor
                         %h264filter-settings-temporal-filter-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'h264filter-settings 'make-h264filter-settings))
 (common-lisp:defun make-h264filter-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key temporal-filter-settings)
   (common-lisp:apply #'common-lisp:make-instance 'h264filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h264filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h264filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-filter-settings))
      (common-lisp:list
       (common-lisp:cons "TemporalFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h264filter-settings))
   common-lisp:nil))
(common-lisp:deftype h264flicker-aq () 'common-lisp:string)
(common-lisp:deftype h264force-field-pictures () 'common-lisp:string)
(common-lisp:deftype h264framerate-control () 'common-lisp:string)
(common-lisp:deftype h264gop-breference () 'common-lisp:string)
(common-lisp:deftype h264gop-size-units () 'common-lisp:string)
(common-lisp:deftype h264level () 'common-lisp:string)
(common-lisp:deftype h264look-ahead-rate-control () 'common-lisp:string)
(common-lisp:deftype h264par-control () 'common-lisp:string)
(common-lisp:deftype h264profile () 'common-lisp:string)
(common-lisp:deftype h264quality-level () 'common-lisp:string)
(common-lisp:deftype h264rate-control-mode () 'common-lisp:string)
(common-lisp:deftype h264scan-type () 'common-lisp:string)
(common-lisp:deftype h264scene-change-detect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h264settings common-lisp:nil
                       ((timecode-burnin-settings :initarg
                         :timecode-burnin-settings :type
                         (common-lisp:or timecode-burnin-settings
                                         common-lisp:null)
                         :accessor %h264settings-timecode-burnin-settings
                         :initform common-lisp:nil)
                        (timecode-insertion :initarg :timecode-insertion :type
                         (common-lisp:or h264timecode-insertion-behavior
                                         common-lisp:null)
                         :accessor %h264settings-timecode-insertion :initform
                         common-lisp:nil)
                        (temporal-aq :initarg :temporal-aq :type
                         (common-lisp:or h264temporal-aq common-lisp:null)
                         :accessor %h264settings-temporal-aq :initform
                         common-lisp:nil)
                        (syntax :initarg :syntax :type
                         (common-lisp:or h264syntax common-lisp:null) :accessor
                         %h264settings-syntax :initform common-lisp:nil)
                        (subgop-length :initarg :subgop-length :type
                         (common-lisp:or h264sub-gop-length common-lisp:null)
                         :accessor %h264settings-subgop-length :initform
                         common-lisp:nil)
                        (spatial-aq :initarg :spatial-aq :type
                         (common-lisp:or h264spatial-aq common-lisp:null)
                         :accessor %h264settings-spatial-aq :initform
                         common-lisp:nil)
                        (softness :initarg :softness :type
                         (common-lisp:or |__integerMin0Max128|
                                         common-lisp:null)
                         :accessor %h264settings-softness :initform
                         common-lisp:nil)
                        (slices :initarg :slices :type
                         (common-lisp:or |__integerMin1Max32| common-lisp:null)
                         :accessor %h264settings-slices :initform
                         common-lisp:nil)
                        (scene-change-detect :initarg :scene-change-detect
                         :type
                         (common-lisp:or h264scene-change-detect
                                         common-lisp:null)
                         :accessor %h264settings-scene-change-detect :initform
                         common-lisp:nil)
                        (scan-type :initarg :scan-type :type
                         (common-lisp:or h264scan-type common-lisp:null)
                         :accessor %h264settings-scan-type :initform
                         common-lisp:nil)
                        (rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or h264rate-control-mode
                                         common-lisp:null)
                         :accessor %h264settings-rate-control-mode :initform
                         common-lisp:nil)
                        (qvbr-quality-level :initarg :qvbr-quality-level :type
                         (common-lisp:or |__integerMin1Max10| common-lisp:null)
                         :accessor %h264settings-qvbr-quality-level :initform
                         common-lisp:nil)
                        (quality-level :initarg :quality-level :type
                         (common-lisp:or h264quality-level common-lisp:null)
                         :accessor %h264settings-quality-level :initform
                         common-lisp:nil)
                        (profile :initarg :profile :type
                         (common-lisp:or h264profile common-lisp:null)
                         :accessor %h264settings-profile :initform
                         common-lisp:nil)
                        (par-numerator :initarg :par-numerator :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %h264settings-par-numerator :initform
                         common-lisp:nil)
                        (par-denominator :initarg :par-denominator :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %h264settings-par-denominator :initform
                         common-lisp:nil)
                        (par-control :initarg :par-control :type
                         (common-lisp:or h264par-control common-lisp:null)
                         :accessor %h264settings-par-control :initform
                         common-lisp:nil)
                        (num-ref-frames :initarg :num-ref-frames :type
                         (common-lisp:or |__integerMin1Max6| common-lisp:null)
                         :accessor %h264settings-num-ref-frames :initform
                         common-lisp:nil)
                        (min-iinterval :initarg :min-iinterval :type
                         (common-lisp:or |__integerMin0Max30| common-lisp:null)
                         :accessor %h264settings-min-iinterval :initform
                         common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integerMin1000| common-lisp:null)
                         :accessor %h264settings-max-bitrate :initform
                         common-lisp:nil)
                        (look-ahead-rate-control :initarg
                         :look-ahead-rate-control :type
                         (common-lisp:or h264look-ahead-rate-control
                                         common-lisp:null)
                         :accessor %h264settings-look-ahead-rate-control
                         :initform common-lisp:nil)
                        (level :initarg :level :type
                         (common-lisp:or h264level common-lisp:null) :accessor
                         %h264settings-level :initform common-lisp:nil)
                        (gop-size-units :initarg :gop-size-units :type
                         (common-lisp:or h264gop-size-units common-lisp:null)
                         :accessor %h264settings-gop-size-units :initform
                         common-lisp:nil)
                        (gop-size :initarg :gop-size :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %h264settings-gop-size :initform common-lisp:nil)
                        (gop-num-bframes :initarg :gop-num-bframes :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor %h264settings-gop-num-bframes :initform
                         common-lisp:nil)
                        (gop-closed-cadence :initarg :gop-closed-cadence :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %h264settings-gop-closed-cadence :initform
                         common-lisp:nil)
                        (gop-breference :initarg :gop-breference :type
                         (common-lisp:or h264gop-breference common-lisp:null)
                         :accessor %h264settings-gop-breference :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %h264settings-framerate-numerator :initform
                         common-lisp:nil)
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %h264settings-framerate-denominator
                         :initform common-lisp:nil)
                        (framerate-control :initarg :framerate-control :type
                         (common-lisp:or h264framerate-control
                                         common-lisp:null)
                         :accessor %h264settings-framerate-control :initform
                         common-lisp:nil)
                        (force-field-pictures :initarg :force-field-pictures
                         :type
                         (common-lisp:or h264force-field-pictures
                                         common-lisp:null)
                         :accessor %h264settings-force-field-pictures :initform
                         common-lisp:nil)
                        (flicker-aq :initarg :flicker-aq :type
                         (common-lisp:or h264flicker-aq common-lisp:null)
                         :accessor %h264settings-flicker-aq :initform
                         common-lisp:nil)
                        (fixed-afd :initarg :fixed-afd :type
                         (common-lisp:or fixed-afd common-lisp:null) :accessor
                         %h264settings-fixed-afd :initform common-lisp:nil)
                        (filter-settings :initarg :filter-settings :type
                         (common-lisp:or h264filter-settings common-lisp:null)
                         :accessor %h264settings-filter-settings :initform
                         common-lisp:nil)
                        (entropy-encoding :initarg :entropy-encoding :type
                         (common-lisp:or h264entropy-encoding common-lisp:null)
                         :accessor %h264settings-entropy-encoding :initform
                         common-lisp:nil)
                        (color-space-settings :initarg :color-space-settings
                         :type
                         (common-lisp:or h264color-space-settings
                                         common-lisp:null)
                         :accessor %h264settings-color-space-settings :initform
                         common-lisp:nil)
                        (color-metadata :initarg :color-metadata :type
                         (common-lisp:or h264color-metadata common-lisp:null)
                         :accessor %h264settings-color-metadata :initform
                         common-lisp:nil)
                        (buf-size :initarg :buf-size :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %h264settings-buf-size :initform
                         common-lisp:nil)
                        (buf-fill-pct :initarg :buf-fill-pct :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor %h264settings-buf-fill-pct :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin1000| common-lisp:null)
                         :accessor %h264settings-bitrate :initform
                         common-lisp:nil)
                        (afd-signaling :initarg :afd-signaling :type
                         (common-lisp:or afd-signaling common-lisp:null)
                         :accessor %h264settings-afd-signaling :initform
                         common-lisp:nil)
                        (adaptive-quantization :initarg :adaptive-quantization
                         :type
                         (common-lisp:or h264adaptive-quantization
                                         common-lisp:null)
                         :accessor %h264settings-adaptive-quantization
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'h264settings 'make-h264settings))
 (common-lisp:defun make-h264settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timecode-burnin-settings
                     timecode-insertion temporal-aq syntax subgop-length
                     spatial-aq softness slices scene-change-detect scan-type
                     rate-control-mode qvbr-quality-level quality-level profile
                     par-numerator par-denominator par-control num-ref-frames
                     min-iinterval max-bitrate look-ahead-rate-control level
                     gop-size-units gop-size gop-num-bframes gop-closed-cadence
                     gop-breference framerate-numerator framerate-denominator
                     framerate-control force-field-pictures flicker-aq
                     fixed-afd filter-settings entropy-encoding
                     color-space-settings color-metadata buf-size buf-fill-pct
                     bitrate afd-signaling adaptive-quantization)
   (common-lisp:apply #'common-lisp:make-instance 'h264settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h264settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h264settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buf-fill-pct))
      (common-lisp:list
       (common-lisp:cons "BufFillPct"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buf-size))
      (common-lisp:list
       (common-lisp:cons "BufSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-metadata))
      (common-lisp:list
       (common-lisp:cons "ColorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entropy-encoding))
      (common-lisp:list
       (common-lisp:cons "EntropyEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-settings))
      (common-lisp:list
       (common-lisp:cons "FilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-afd))
      (common-lisp:list
       (common-lisp:cons "FixedAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flicker-aq))
      (common-lisp:list
       (common-lisp:cons "FlickerAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-field-pictures))
      (common-lisp:list
       (common-lisp:cons "ForceFieldPictures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-breference))
      (common-lisp:list
       (common-lisp:cons "GopBReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-num-bframes))
      (common-lisp:list
       (common-lisp:cons "GopNumBFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "Level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'look-ahead-rate-control))
      (common-lisp:list
       (common-lisp:cons "LookAheadRateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iinterval))
      (common-lisp:list
       (common-lisp:cons "MinIInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-ref-frames))
      (common-lisp:list
       (common-lisp:cons "NumRefFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-control))
      (common-lisp:list
       (common-lisp:cons "ParControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality-level))
      (common-lisp:list
       (common-lisp:cons "QualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-quality-level))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-change-detect))
      (common-lisp:list
       (common-lisp:cons "SceneChangeDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'softness))
      (common-lisp:list
       (common-lisp:cons "Softness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spatial-aq))
      (common-lisp:list
       (common-lisp:cons "SpatialAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subgop-length))
      (common-lisp:list
       (common-lisp:cons "SubgopLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'syntax))
      (common-lisp:list
       (common-lisp:cons "Syntax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temporal-aq))
      (common-lisp:list
       (common-lisp:cons "TemporalAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-insertion))
      (common-lisp:list
       (common-lisp:cons "TimecodeInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h264settings))
   common-lisp:nil))
(common-lisp:deftype h264spatial-aq () 'common-lisp:string)
(common-lisp:deftype h264sub-gop-length () 'common-lisp:string)
(common-lisp:deftype h264syntax () 'common-lisp:string)
(common-lisp:deftype h264temporal-aq () 'common-lisp:string)
(common-lisp:deftype h264timecode-insertion-behavior () 'common-lisp:string)
(common-lisp:deftype h265adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h265alternative-transfer-function () 'common-lisp:string)
(common-lisp:deftype h265color-metadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h265color-space-settings common-lisp:nil
                       ((rec709settings :initarg :rec709settings :type
                         (common-lisp:or rec709settings common-lisp:null)
                         :accessor %h265color-space-settings-rec709settings
                         :initform common-lisp:nil)
                        (rec601settings :initarg :rec601settings :type
                         (common-lisp:or rec601settings common-lisp:null)
                         :accessor %h265color-space-settings-rec601settings
                         :initform common-lisp:nil)
                        (hdr10settings :initarg :hdr10settings :type
                         (common-lisp:or hdr10settings common-lisp:null)
                         :accessor %h265color-space-settings-hdr10settings
                         :initform common-lisp:nil)
                        (dolby-vision81settings :initarg
                         :dolby-vision81settings :type
                         (common-lisp:or dolby-vision81settings
                                         common-lisp:null)
                         :accessor
                         %h265color-space-settings-dolby-vision81settings
                         :initform common-lisp:nil)
                        (color-space-passthrough-settings :initarg
                         :color-space-passthrough-settings :type
                         (common-lisp:or color-space-passthrough-settings
                                         common-lisp:null)
                         :accessor
                         %h265color-space-settings-color-space-passthrough-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'h265color-space-settings 'make-h265color-space-settings))
 (common-lisp:defun make-h265color-space-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rec709settings rec601settings
                     hdr10settings dolby-vision81settings
                     color-space-passthrough-settings)
   (common-lisp:apply #'common-lisp:make-instance 'h265color-space-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          h265color-space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          h265color-space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-passthrough-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpacePassthroughSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dolby-vision81settings))
      (common-lisp:list
       (common-lisp:cons "DolbyVision81Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hdr10settings))
      (common-lisp:list
       (common-lisp:cons "Hdr10Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec601settings))
      (common-lisp:list
       (common-lisp:cons "Rec601Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec709settings))
      (common-lisp:list
       (common-lisp:cons "Rec709Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          h265color-space-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass h265filter-settings common-lisp:nil
                       ((temporal-filter-settings :initarg
                         :temporal-filter-settings :type
                         (common-lisp:or temporal-filter-settings
                                         common-lisp:null)
                         :accessor
                         %h265filter-settings-temporal-filter-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'h265filter-settings 'make-h265filter-settings))
 (common-lisp:defun make-h265filter-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key temporal-filter-settings)
   (common-lisp:apply #'common-lisp:make-instance 'h265filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h265filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h265filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-filter-settings))
      (common-lisp:list
       (common-lisp:cons "TemporalFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h265filter-settings))
   common-lisp:nil))
(common-lisp:deftype h265flicker-aq () 'common-lisp:string)
(common-lisp:deftype h265gop-size-units () 'common-lisp:string)
(common-lisp:deftype h265level () 'common-lisp:string)
(common-lisp:deftype h265look-ahead-rate-control () 'common-lisp:string)
(common-lisp:deftype h265profile () 'common-lisp:string)
(common-lisp:deftype h265rate-control-mode () 'common-lisp:string)
(common-lisp:deftype h265scan-type () 'common-lisp:string)
(common-lisp:deftype h265scene-change-detect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass h265settings common-lisp:nil
                       ((timecode-burnin-settings :initarg
                         :timecode-burnin-settings :type
                         (common-lisp:or timecode-burnin-settings
                                         common-lisp:null)
                         :accessor %h265settings-timecode-burnin-settings
                         :initform common-lisp:nil)
                        (timecode-insertion :initarg :timecode-insertion :type
                         (common-lisp:or h265timecode-insertion-behavior
                                         common-lisp:null)
                         :accessor %h265settings-timecode-insertion :initform
                         common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or h265tier common-lisp:null) :accessor
                         %h265settings-tier :initform common-lisp:nil)
                        (slices :initarg :slices :type
                         (common-lisp:or |__integerMin1Max16| common-lisp:null)
                         :accessor %h265settings-slices :initform
                         common-lisp:nil)
                        (scene-change-detect :initarg :scene-change-detect
                         :type
                         (common-lisp:or h265scene-change-detect
                                         common-lisp:null)
                         :accessor %h265settings-scene-change-detect :initform
                         common-lisp:nil)
                        (scan-type :initarg :scan-type :type
                         (common-lisp:or h265scan-type common-lisp:null)
                         :accessor %h265settings-scan-type :initform
                         common-lisp:nil)
                        (rate-control-mode :initarg :rate-control-mode :type
                         (common-lisp:or h265rate-control-mode
                                         common-lisp:null)
                         :accessor %h265settings-rate-control-mode :initform
                         common-lisp:nil)
                        (qvbr-quality-level :initarg :qvbr-quality-level :type
                         (common-lisp:or |__integerMin1Max10| common-lisp:null)
                         :accessor %h265settings-qvbr-quality-level :initform
                         common-lisp:nil)
                        (profile :initarg :profile :type
                         (common-lisp:or h265profile common-lisp:null)
                         :accessor %h265settings-profile :initform
                         common-lisp:nil)
                        (par-numerator :initarg :par-numerator :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %h265settings-par-numerator :initform
                         common-lisp:nil)
                        (par-denominator :initarg :par-denominator :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %h265settings-par-denominator :initform
                         common-lisp:nil)
                        (min-iinterval :initarg :min-iinterval :type
                         (common-lisp:or |__integerMin0Max30| common-lisp:null)
                         :accessor %h265settings-min-iinterval :initform
                         common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integerMin100000Max40000000|
                                         common-lisp:null)
                         :accessor %h265settings-max-bitrate :initform
                         common-lisp:nil)
                        (look-ahead-rate-control :initarg
                         :look-ahead-rate-control :type
                         (common-lisp:or h265look-ahead-rate-control
                                         common-lisp:null)
                         :accessor %h265settings-look-ahead-rate-control
                         :initform common-lisp:nil)
                        (level :initarg :level :type
                         (common-lisp:or h265level common-lisp:null) :accessor
                         %h265settings-level :initform common-lisp:nil)
                        (gop-size-units :initarg :gop-size-units :type
                         (common-lisp:or h265gop-size-units common-lisp:null)
                         :accessor %h265settings-gop-size-units :initform
                         common-lisp:nil)
                        (gop-size :initarg :gop-size :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %h265settings-gop-size :initform common-lisp:nil)
                        (gop-closed-cadence :initarg :gop-closed-cadence :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %h265settings-gop-closed-cadence :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %h265settings-framerate-numerator :initform
                         (common-lisp:error
                          ":framerate-numerator is required"))
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1Max3003|
                                         common-lisp:null)
                         :accessor %h265settings-framerate-denominator
                         :initform
                         (common-lisp:error
                          ":framerate-denominator is required"))
                        (flicker-aq :initarg :flicker-aq :type
                         (common-lisp:or h265flicker-aq common-lisp:null)
                         :accessor %h265settings-flicker-aq :initform
                         common-lisp:nil)
                        (fixed-afd :initarg :fixed-afd :type
                         (common-lisp:or fixed-afd common-lisp:null) :accessor
                         %h265settings-fixed-afd :initform common-lisp:nil)
                        (filter-settings :initarg :filter-settings :type
                         (common-lisp:or h265filter-settings common-lisp:null)
                         :accessor %h265settings-filter-settings :initform
                         common-lisp:nil)
                        (color-space-settings :initarg :color-space-settings
                         :type
                         (common-lisp:or h265color-space-settings
                                         common-lisp:null)
                         :accessor %h265settings-color-space-settings :initform
                         common-lisp:nil)
                        (color-metadata :initarg :color-metadata :type
                         (common-lisp:or h265color-metadata common-lisp:null)
                         :accessor %h265settings-color-metadata :initform
                         common-lisp:nil)
                        (buf-size :initarg :buf-size :type
                         (common-lisp:or |__integerMin100000Max80000000|
                                         common-lisp:null)
                         :accessor %h265settings-buf-size :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin100000Max40000000|
                                         common-lisp:null)
                         :accessor %h265settings-bitrate :initform
                         common-lisp:nil)
                        (alternative-transfer-function :initarg
                         :alternative-transfer-function :type
                         (common-lisp:or h265alternative-transfer-function
                                         common-lisp:null)
                         :accessor %h265settings-alternative-transfer-function
                         :initform common-lisp:nil)
                        (afd-signaling :initarg :afd-signaling :type
                         (common-lisp:or afd-signaling common-lisp:null)
                         :accessor %h265settings-afd-signaling :initform
                         common-lisp:nil)
                        (adaptive-quantization :initarg :adaptive-quantization
                         :type
                         (common-lisp:or h265adaptive-quantization
                                         common-lisp:null)
                         :accessor %h265settings-adaptive-quantization
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'h265settings 'make-h265settings))
 (common-lisp:defun make-h265settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timecode-burnin-settings
                     timecode-insertion tier slices scene-change-detect
                     scan-type rate-control-mode qvbr-quality-level profile
                     par-numerator par-denominator min-iinterval max-bitrate
                     look-ahead-rate-control level gop-size-units gop-size
                     gop-closed-cadence framerate-numerator
                     framerate-denominator flicker-aq fixed-afd filter-settings
                     color-space-settings color-metadata buf-size bitrate
                     alternative-transfer-function afd-signaling
                     adaptive-quantization)
   (common-lisp:apply #'common-lisp:make-instance 'h265settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h265settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h265settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternative-transfer-function))
      (common-lisp:list
       (common-lisp:cons "AlternativeTransferFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buf-size))
      (common-lisp:list
       (common-lisp:cons "BufSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-metadata))
      (common-lisp:list
       (common-lisp:cons "ColorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-settings))
      (common-lisp:list
       (common-lisp:cons "FilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-afd))
      (common-lisp:list
       (common-lisp:cons "FixedAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flicker-aq))
      (common-lisp:list
       (common-lisp:cons "FlickerAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "Level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'look-ahead-rate-control))
      (common-lisp:list
       (common-lisp:cons "LookAheadRateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iinterval))
      (common-lisp:list
       (common-lisp:cons "MinIInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-quality-level))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-change-detect))
      (common-lisp:list
       (common-lisp:cons "SceneChangeDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-insertion))
      (common-lisp:list
       (common-lisp:cons "TimecodeInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h265settings))
   common-lisp:nil))
(common-lisp:deftype h265tier () 'common-lisp:string)
(common-lisp:deftype h265timecode-insertion-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hdr10settings common-lisp:nil
                       ((max-fall :initarg :max-fall :type
                         (common-lisp:or |__integerMin0Max32768|
                                         common-lisp:null)
                         :accessor %hdr10settings-max-fall :initform
                         common-lisp:nil)
                        (max-cll :initarg :max-cll :type
                         (common-lisp:or |__integerMin0Max32768|
                                         common-lisp:null)
                         :accessor %hdr10settings-max-cll :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'hdr10settings 'make-hdr10settings))
 (common-lisp:defun make-hdr10settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-fall max-cll)
   (common-lisp:apply #'common-lisp:make-instance 'hdr10settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hdr10settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hdr10settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-cll))
      (common-lisp:list
       (common-lisp:cons "MaxCll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-fall))
      (common-lisp:list
       (common-lisp:cons "MaxFall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hdr10settings))
   common-lisp:nil))
(common-lisp:deftype hls-ad-markers () 'common-lisp:string)
(common-lisp:deftype hls-akamai-http-transfer-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-akamai-settings common-lisp:nil
                       ((token :initarg :token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-akamai-settings-token :initform common-lisp:nil)
                        (salt :initarg :salt :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-akamai-settings-salt :initform common-lisp:nil)
                        (restart-delay :initarg :restart-delay :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor %hls-akamai-settings-restart-delay :initform
                         common-lisp:nil)
                        (num-retries :initarg :num-retries :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %hls-akamai-settings-num-retries :initform
                         common-lisp:nil)
                        (http-transfer-mode :initarg :http-transfer-mode :type
                         (common-lisp:or hls-akamai-http-transfer-mode
                                         common-lisp:null)
                         :accessor %hls-akamai-settings-http-transfer-mode
                         :initform common-lisp:nil)
                        (filecache-duration :initarg :filecache-duration :type
                         (common-lisp:or |__integerMin0Max600|
                                         common-lisp:null)
                         :accessor %hls-akamai-settings-filecache-duration
                         :initform common-lisp:nil)
                        (connection-retry-interval :initarg
                         :connection-retry-interval :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %hls-akamai-settings-connection-retry-interval
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-akamai-settings 'make-hls-akamai-settings))
 (common-lisp:defun make-hls-akamai-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key token salt restart-delay num-retries
                     http-transfer-mode filecache-duration
                     connection-retry-interval)
   (common-lisp:apply #'common-lisp:make-instance 'hls-akamai-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-akamai-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-akamai-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-transfer-mode))
      (common-lisp:list
       (common-lisp:cons "HttpTransferMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salt))
      (common-lisp:list
       (common-lisp:cons "Salt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-akamai-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass hls-basic-put-settings common-lisp:nil
                       ((restart-delay :initarg :restart-delay :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor %hls-basic-put-settings-restart-delay
                         :initform common-lisp:nil)
                        (num-retries :initarg :num-retries :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %hls-basic-put-settings-num-retries
                         :initform common-lisp:nil)
                        (filecache-duration :initarg :filecache-duration :type
                         (common-lisp:or |__integerMin0Max600|
                                         common-lisp:null)
                         :accessor %hls-basic-put-settings-filecache-duration
                         :initform common-lisp:nil)
                        (connection-retry-interval :initarg
                         :connection-retry-interval :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %hls-basic-put-settings-connection-retry-interval
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-basic-put-settings 'make-hls-basic-put-settings))
 (common-lisp:defun make-hls-basic-put-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restart-delay num-retries
                     filecache-duration connection-retry-interval)
   (common-lisp:apply #'common-lisp:make-instance 'hls-basic-put-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-basic-put-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-basic-put-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-basic-put-settings))
   common-lisp:nil))
(common-lisp:deftype hls-caption-language-setting () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-cdn-settings common-lisp:nil
                       ((hls-webdav-settings :initarg :hls-webdav-settings
                         :type
                         (common-lisp:or hls-webdav-settings common-lisp:null)
                         :accessor %hls-cdn-settings-hls-webdav-settings
                         :initform common-lisp:nil)
                        (hls-s3settings :initarg :hls-s3settings :type
                         (common-lisp:or hls-s3settings common-lisp:null)
                         :accessor %hls-cdn-settings-hls-s3settings :initform
                         common-lisp:nil)
                        (hls-media-store-settings :initarg
                         :hls-media-store-settings :type
                         (common-lisp:or hls-media-store-settings
                                         common-lisp:null)
                         :accessor %hls-cdn-settings-hls-media-store-settings
                         :initform common-lisp:nil)
                        (hls-basic-put-settings :initarg
                         :hls-basic-put-settings :type
                         (common-lisp:or hls-basic-put-settings
                                         common-lisp:null)
                         :accessor %hls-cdn-settings-hls-basic-put-settings
                         :initform common-lisp:nil)
                        (hls-akamai-settings :initarg :hls-akamai-settings
                         :type
                         (common-lisp:or hls-akamai-settings common-lisp:null)
                         :accessor %hls-cdn-settings-hls-akamai-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-cdn-settings 'make-hls-cdn-settings))
 (common-lisp:defun make-hls-cdn-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hls-webdav-settings hls-s3settings
                     hls-media-store-settings hls-basic-put-settings
                     hls-akamai-settings)
   (common-lisp:apply #'common-lisp:make-instance 'hls-cdn-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-cdn-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-cdn-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-akamai-settings))
      (common-lisp:list
       (common-lisp:cons "HlsAkamaiSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-basic-put-settings))
      (common-lisp:list
       (common-lisp:cons "HlsBasicPutSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-media-store-settings))
      (common-lisp:list
       (common-lisp:cons "HlsMediaStoreSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-s3settings))
      (common-lisp:list
       (common-lisp:cons "HlsS3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-webdav-settings))
      (common-lisp:list
       (common-lisp:cons "HlsWebdavSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-cdn-settings))
   common-lisp:nil))
(common-lisp:deftype hls-client-cache () 'common-lisp:string)
(common-lisp:deftype hls-codec-specification () 'common-lisp:string)
(common-lisp:deftype hls-directory-structure () 'common-lisp:string)
(common-lisp:deftype hls-discontinuity-tags () 'common-lisp:string)
(common-lisp:deftype hls-encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-group-settings common-lisp:nil
                       ((ts-file-mode :initarg :ts-file-mode :type
                         (common-lisp:or hls-ts-file-mode common-lisp:null)
                         :accessor %hls-group-settings-ts-file-mode :initform
                         common-lisp:nil)
                        (timestamp-delta-milliseconds :initarg
                         :timestamp-delta-milliseconds :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %hls-group-settings-timestamp-delta-milliseconds
                         :initform common-lisp:nil)
                        (timed-metadata-id3period :initarg
                         :timed-metadata-id3period :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %hls-group-settings-timed-metadata-id3period
                         :initform common-lisp:nil)
                        (timed-metadata-id3frame :initarg
                         :timed-metadata-id3frame :type
                         (common-lisp:or hls-timed-metadata-id3frame
                                         common-lisp:null)
                         :accessor %hls-group-settings-timed-metadata-id3frame
                         :initform common-lisp:nil)
                        (stream-inf-resolution :initarg :stream-inf-resolution
                         :type
                         (common-lisp:or hls-stream-inf-resolution
                                         common-lisp:null)
                         :accessor %hls-group-settings-stream-inf-resolution
                         :initform common-lisp:nil)
                        (segments-per-subdirectory :initarg
                         :segments-per-subdirectory :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         %hls-group-settings-segments-per-subdirectory
                         :initform common-lisp:nil)
                        (segmentation-mode :initarg :segmentation-mode :type
                         (common-lisp:or hls-segmentation-mode
                                         common-lisp:null)
                         :accessor %hls-group-settings-segmentation-mode
                         :initform common-lisp:nil)
                        (segment-length :initarg :segment-length :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %hls-group-settings-segment-length :initform
                         common-lisp:nil)
                        (redundant-manifest :initarg :redundant-manifest :type
                         (common-lisp:or hls-redundant-manifest
                                         common-lisp:null)
                         :accessor %hls-group-settings-redundant-manifest
                         :initform common-lisp:nil)
                        (program-date-time-period :initarg
                         :program-date-time-period :type
                         (common-lisp:or |__integerMin0Max3600|
                                         common-lisp:null)
                         :accessor %hls-group-settings-program-date-time-period
                         :initform common-lisp:nil)
                        (program-date-time-clock :initarg
                         :program-date-time-clock :type
                         (common-lisp:or hls-program-date-time-clock
                                         common-lisp:null)
                         :accessor %hls-group-settings-program-date-time-clock
                         :initform common-lisp:nil)
                        (program-date-time :initarg :program-date-time :type
                         (common-lisp:or hls-program-date-time
                                         common-lisp:null)
                         :accessor %hls-group-settings-program-date-time
                         :initform common-lisp:nil)
                        (output-selection :initarg :output-selection :type
                         (common-lisp:or hls-output-selection common-lisp:null)
                         :accessor %hls-group-settings-output-selection
                         :initform common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or hls-mode common-lisp:null) :accessor
                         %hls-group-settings-mode :initform common-lisp:nil)
                        (min-segment-length :initarg :min-segment-length :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %hls-group-settings-min-segment-length
                         :initform common-lisp:nil)
                        (manifest-duration-format :initarg
                         :manifest-duration-format :type
                         (common-lisp:or hls-manifest-duration-format
                                         common-lisp:null)
                         :accessor %hls-group-settings-manifest-duration-format
                         :initform common-lisp:nil)
                        (manifest-compression :initarg :manifest-compression
                         :type
                         (common-lisp:or hls-manifest-compression
                                         common-lisp:null)
                         :accessor %hls-group-settings-manifest-compression
                         :initform common-lisp:nil)
                        (key-provider-settings :initarg :key-provider-settings
                         :type
                         (common-lisp:or key-provider-settings
                                         common-lisp:null)
                         :accessor %hls-group-settings-key-provider-settings
                         :initform common-lisp:nil)
                        (key-format-versions :initarg :key-format-versions
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %hls-group-settings-key-format-versions
                         :initform common-lisp:nil)
                        (key-format :initarg :key-format :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-group-settings-key-format :initform
                         common-lisp:nil)
                        (keep-segments :initarg :keep-segments :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %hls-group-settings-keep-segments :initform
                         common-lisp:nil)
                        (iv-source :initarg :iv-source :type
                         (common-lisp:or hls-iv-source common-lisp:null)
                         :accessor %hls-group-settings-iv-source :initform
                         common-lisp:nil)
                        (iv-in-manifest :initarg :iv-in-manifest :type
                         (common-lisp:or hls-iv-in-manifest common-lisp:null)
                         :accessor %hls-group-settings-iv-in-manifest :initform
                         common-lisp:nil)
                        (input-loss-action :initarg :input-loss-action :type
                         (common-lisp:or input-loss-action-for-hls-out
                                         common-lisp:null)
                         :accessor %hls-group-settings-input-loss-action
                         :initform common-lisp:nil)
                        (index-nsegments :initarg :index-nsegments :type
                         (common-lisp:or |__integerMin3| common-lisp:null)
                         :accessor %hls-group-settings-index-nsegments
                         :initform common-lisp:nil)
                        (incomplete-segment-behavior :initarg
                         :incomplete-segment-behavior :type
                         (common-lisp:or hls-incomplete-segment-behavior
                                         common-lisp:null)
                         :accessor
                         %hls-group-settings-incomplete-segment-behavior
                         :initform common-lisp:nil)
                        (iframe-only-playlists :initarg :iframe-only-playlists
                         :type
                         (common-lisp:or iframe-only-playlist-type
                                         common-lisp:null)
                         :accessor %hls-group-settings-iframe-only-playlists
                         :initform common-lisp:nil)
                        (hls-id3segment-tagging :initarg
                         :hls-id3segment-tagging :type
                         (common-lisp:or hls-id3segment-tagging-state
                                         common-lisp:null)
                         :accessor %hls-group-settings-hls-id3segment-tagging
                         :initform common-lisp:nil)
                        (hls-cdn-settings :initarg :hls-cdn-settings :type
                         (common-lisp:or hls-cdn-settings common-lisp:null)
                         :accessor %hls-group-settings-hls-cdn-settings
                         :initform common-lisp:nil)
                        (encryption-type :initarg :encryption-type :type
                         (common-lisp:or hls-encryption-type common-lisp:null)
                         :accessor %hls-group-settings-encryption-type
                         :initform common-lisp:nil)
                        (discontinuity-tags :initarg :discontinuity-tags :type
                         (common-lisp:or hls-discontinuity-tags
                                         common-lisp:null)
                         :accessor %hls-group-settings-discontinuity-tags
                         :initform common-lisp:nil)
                        (directory-structure :initarg :directory-structure
                         :type
                         (common-lisp:or hls-directory-structure
                                         common-lisp:null)
                         :accessor %hls-group-settings-directory-structure
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor %hls-group-settings-destination :initform
                         (common-lisp:error ":destination is required"))
                        (constant-iv :initarg :constant-iv :type
                         (common-lisp:or |__stringMin32Max32| common-lisp:null)
                         :accessor %hls-group-settings-constant-iv :initform
                         common-lisp:nil)
                        (codec-specification :initarg :codec-specification
                         :type
                         (common-lisp:or hls-codec-specification
                                         common-lisp:null)
                         :accessor %hls-group-settings-codec-specification
                         :initform common-lisp:nil)
                        (client-cache :initarg :client-cache :type
                         (common-lisp:or hls-client-cache common-lisp:null)
                         :accessor %hls-group-settings-client-cache :initform
                         common-lisp:nil)
                        (caption-language-setting :initarg
                         :caption-language-setting :type
                         (common-lisp:or hls-caption-language-setting
                                         common-lisp:null)
                         :accessor %hls-group-settings-caption-language-setting
                         :initform common-lisp:nil)
                        (caption-language-mappings :initarg
                         :caption-language-mappings :type
                         (common-lisp:or |__listOfCaptionLanguageMapping|
                                         common-lisp:null)
                         :accessor
                         %hls-group-settings-caption-language-mappings
                         :initform common-lisp:nil)
                        (base-url-manifest1 :initarg :base-url-manifest1 :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-group-settings-base-url-manifest1 :initform
                         common-lisp:nil)
                        (base-url-manifest :initarg :base-url-manifest :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-group-settings-base-url-manifest :initform
                         common-lisp:nil)
                        (base-url-content1 :initarg :base-url-content1 :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-group-settings-base-url-content1 :initform
                         common-lisp:nil)
                        (base-url-content :initarg :base-url-content :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-group-settings-base-url-content :initform
                         common-lisp:nil)
                        (ad-markers :initarg :ad-markers :type
                         (common-lisp:or |__listOfHlsAdMarkers|
                                         common-lisp:null)
                         :accessor %hls-group-settings-ad-markers :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-group-settings 'make-hls-group-settings))
 (common-lisp:defun make-hls-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ts-file-mode timestamp-delta-milliseconds
                     timed-metadata-id3period timed-metadata-id3frame
                     stream-inf-resolution segments-per-subdirectory
                     segmentation-mode segment-length redundant-manifest
                     program-date-time-period program-date-time-clock
                     program-date-time output-selection mode min-segment-length
                     manifest-duration-format manifest-compression
                     key-provider-settings key-format-versions key-format
                     keep-segments iv-source iv-in-manifest input-loss-action
                     index-nsegments incomplete-segment-behavior
                     iframe-only-playlists hls-id3segment-tagging
                     hls-cdn-settings encryption-type discontinuity-tags
                     directory-structure destination constant-iv
                     codec-specification client-cache caption-language-setting
                     caption-language-mappings base-url-manifest1
                     base-url-manifest base-url-content1 base-url-content
                     ad-markers)
   (common-lisp:apply #'common-lisp:make-instance 'hls-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-markers))
      (common-lisp:list
       (common-lisp:cons "AdMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-content))
      (common-lisp:list
       (common-lisp:cons "BaseUrlContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-content1))
      (common-lisp:list
       (common-lisp:cons "BaseUrlContent1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-manifest))
      (common-lisp:list
       (common-lisp:cons "BaseUrlManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-manifest1))
      (common-lisp:list
       (common-lisp:cons "BaseUrlManifest1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-language-mappings))
      (common-lisp:list
       (common-lisp:cons "CaptionLanguageMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-language-setting))
      (common-lisp:list
       (common-lisp:cons "CaptionLanguageSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-cache))
      (common-lisp:list
       (common-lisp:cons "ClientCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-specification))
      (common-lisp:list
       (common-lisp:cons "CodecSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constant-iv))
      (common-lisp:list
       (common-lisp:cons "ConstantIv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-structure))
      (common-lisp:list
       (common-lisp:cons "DirectoryStructure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discontinuity-tags))
      (common-lisp:list
       (common-lisp:cons "DiscontinuityTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-cdn-settings))
      (common-lisp:list
       (common-lisp:cons "HlsCdnSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-id3segment-tagging))
      (common-lisp:list
       (common-lisp:cons "HlsId3SegmentTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iframe-only-playlists))
      (common-lisp:list
       (common-lisp:cons "IFrameOnlyPlaylists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incomplete-segment-behavior))
      (common-lisp:list
       (common-lisp:cons "IncompleteSegmentBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-nsegments))
      (common-lisp:list
       (common-lisp:cons "IndexNSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iv-in-manifest))
      (common-lisp:list
       (common-lisp:cons "IvInManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iv-source))
      (common-lisp:list
       (common-lisp:cons "IvSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keep-segments))
      (common-lisp:list
       (common-lisp:cons "KeepSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-format))
      (common-lisp:list
       (common-lisp:cons "KeyFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-format-versions))
      (common-lisp:list
       (common-lisp:cons "KeyFormatVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'key-provider-settings))
      (common-lisp:list
       (common-lisp:cons "KeyProviderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-compression))
      (common-lisp:list
       (common-lisp:cons "ManifestCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-duration-format))
      (common-lisp:list
       (common-lisp:cons "ManifestDurationFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-segment-length))
      (common-lisp:list
       (common-lisp:cons "MinSegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-selection))
      (common-lisp:list
       (common-lisp:cons "OutputSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-date-time))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'program-date-time-clock))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTimeClock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'program-date-time-period))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redundant-manifest))
      (common-lisp:list
       (common-lisp:cons "RedundantManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-length))
      (common-lisp:list
       (common-lisp:cons "SegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-mode))
      (common-lisp:list
       (common-lisp:cons "SegmentationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segments-per-subdirectory))
      (common-lisp:list
       (common-lisp:cons "SegmentsPerSubdirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-inf-resolution))
      (common-lisp:list
       (common-lisp:cons "StreamInfResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3frame))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Frame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3period))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-delta-milliseconds))
      (common-lisp:list
       (common-lisp:cons "TimestampDeltaMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ts-file-mode))
      (common-lisp:list
       (common-lisp:cons "TsFileMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-group-settings))
   common-lisp:nil))
(common-lisp:deftype hls-h265packaging-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-id3segment-tagging-schedule-action-settings
                       common-lisp:nil
                       ((id3 :initarg :id3 :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-id3segment-tagging-schedule-action-settings-id3
                         :initform common-lisp:nil)
                        (tag :initarg :tag :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-id3segment-tagging-schedule-action-settings-tag
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-id3segment-tagging-schedule-action-settings
                    'make-hls-id3segment-tagging-schedule-action-settings))
 (common-lisp:defun make-hls-id3segment-tagging-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id3 tag)
   (common-lisp:apply #'common-lisp:make-instance
                      'hls-id3segment-tagging-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-id3segment-tagging-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-id3segment-tagging-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id3))
      (common-lisp:list
       (common-lisp:cons "Id3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-id3segment-tagging-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype hls-id3segment-tagging-state () 'common-lisp:string)
(common-lisp:deftype hls-incomplete-segment-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-input-settings common-lisp:nil
                       ((scte35source :initarg :scte35source :type
                         (common-lisp:or hls-scte35source-type
                                         common-lisp:null)
                         :accessor %hls-input-settings-scte35source :initform
                         common-lisp:nil)
                        (retry-interval :initarg :retry-interval :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %hls-input-settings-retry-interval :initform
                         common-lisp:nil)
                        (retries :initarg :retries :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %hls-input-settings-retries :initform
                         common-lisp:nil)
                        (buffer-segments :initarg :buffer-segments :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %hls-input-settings-buffer-segments
                         :initform common-lisp:nil)
                        (bandwidth :initarg :bandwidth :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %hls-input-settings-bandwidth :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-input-settings 'make-hls-input-settings))
 (common-lisp:defun make-hls-input-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scte35source retry-interval retries
                     buffer-segments bandwidth)
   (common-lisp:apply #'common-lisp:make-instance 'hls-input-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-input-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-input-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "Bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-segments))
      (common-lisp:list
       (common-lisp:cons "BufferSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retries))
      (common-lisp:list
       (common-lisp:cons "Retries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-interval))
      (common-lisp:list
       (common-lisp:cons "RetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35source))
      (common-lisp:list
       (common-lisp:cons "Scte35Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-input-settings))
   common-lisp:nil))
(common-lisp:deftype hls-iv-in-manifest () 'common-lisp:string)
(common-lisp:deftype hls-iv-source () 'common-lisp:string)
(common-lisp:deftype hls-manifest-compression () 'common-lisp:string)
(common-lisp:deftype hls-manifest-duration-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-media-store-settings common-lisp:nil
                       ((restart-delay :initarg :restart-delay :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor %hls-media-store-settings-restart-delay
                         :initform common-lisp:nil)
                        (num-retries :initarg :num-retries :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %hls-media-store-settings-num-retries
                         :initform common-lisp:nil)
                        (media-store-storage-class :initarg
                         :media-store-storage-class :type
                         (common-lisp:or hls-media-store-storage-class
                                         common-lisp:null)
                         :accessor
                         %hls-media-store-settings-media-store-storage-class
                         :initform common-lisp:nil)
                        (filecache-duration :initarg :filecache-duration :type
                         (common-lisp:or |__integerMin0Max600|
                                         common-lisp:null)
                         :accessor %hls-media-store-settings-filecache-duration
                         :initform common-lisp:nil)
                        (connection-retry-interval :initarg
                         :connection-retry-interval :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %hls-media-store-settings-connection-retry-interval
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-media-store-settings 'make-hls-media-store-settings))
 (common-lisp:defun make-hls-media-store-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restart-delay num-retries
                     media-store-storage-class filecache-duration
                     connection-retry-interval)
   (common-lisp:apply #'common-lisp:make-instance 'hls-media-store-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-media-store-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-media-store-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-store-storage-class))
      (common-lisp:list
       (common-lisp:cons "MediaStoreStorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-media-store-settings))
   common-lisp:nil))
(common-lisp:deftype hls-media-store-storage-class () 'common-lisp:string)
(common-lisp:deftype hls-mode () 'common-lisp:string)
(common-lisp:deftype hls-output-selection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-output-settings common-lisp:nil
                       ((segment-modifier :initarg :segment-modifier :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-output-settings-segment-modifier :initform
                         common-lisp:nil)
                        (name-modifier :initarg :name-modifier :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor %hls-output-settings-name-modifier :initform
                         common-lisp:nil)
                        (hls-settings :initarg :hls-settings :type
                         (common-lisp:or hls-settings common-lisp:null)
                         :accessor %hls-output-settings-hls-settings :initform
                         (common-lisp:error ":hls-settings is required"))
                        (h265packaging-type :initarg :h265packaging-type :type
                         (common-lisp:or hls-h265packaging-type
                                         common-lisp:null)
                         :accessor %hls-output-settings-h265packaging-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-output-settings 'make-hls-output-settings))
 (common-lisp:defun make-hls-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key segment-modifier name-modifier
                     hls-settings h265packaging-type)
   (common-lisp:apply #'common-lisp:make-instance 'hls-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h265packaging-type))
      (common-lisp:list
       (common-lisp:cons "H265PackagingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-settings))
      (common-lisp:list
       (common-lisp:cons "HlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-modifier))
      (common-lisp:list
       (common-lisp:cons "SegmentModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-output-settings))
   common-lisp:nil))
(common-lisp:deftype hls-program-date-time () 'common-lisp:string)
(common-lisp:deftype hls-program-date-time-clock () 'common-lisp:string)
(common-lisp:deftype hls-redundant-manifest () 'common-lisp:string)
(common-lisp:deftype hls-s3log-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-s3settings common-lisp:nil
                       ((canned-acl :initarg :canned-acl :type
                         (common-lisp:or s3canned-acl common-lisp:null)
                         :accessor %hls-s3settings-canned-acl :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'hls-s3settings 'make-hls-s3settings))
 (common-lisp:defun make-hls-s3settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key canned-acl)
   (common-lisp:apply #'common-lisp:make-instance 'hls-s3settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-s3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-s3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-s3settings))
   common-lisp:nil))
(common-lisp:deftype hls-scte35source-type () 'common-lisp:string)
(common-lisp:deftype hls-segmentation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-settings common-lisp:nil
                       ((standard-hls-settings :initarg :standard-hls-settings
                         :type
                         (common-lisp:or standard-hls-settings
                                         common-lisp:null)
                         :accessor %hls-settings-standard-hls-settings
                         :initform common-lisp:nil)
                        (frame-capture-hls-settings :initarg
                         :frame-capture-hls-settings :type
                         (common-lisp:or frame-capture-hls-settings
                                         common-lisp:null)
                         :accessor %hls-settings-frame-capture-hls-settings
                         :initform common-lisp:nil)
                        (fmp4hls-settings :initarg :fmp4hls-settings :type
                         (common-lisp:or fmp4hls-settings common-lisp:null)
                         :accessor %hls-settings-fmp4hls-settings :initform
                         common-lisp:nil)
                        (audio-only-hls-settings :initarg
                         :audio-only-hls-settings :type
                         (common-lisp:or audio-only-hls-settings
                                         common-lisp:null)
                         :accessor %hls-settings-audio-only-hls-settings
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'hls-settings 'make-hls-settings))
 (common-lisp:defun make-hls-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key standard-hls-settings
                     frame-capture-hls-settings fmp4hls-settings
                     audio-only-hls-settings)
   (common-lisp:apply #'common-lisp:make-instance 'hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-only-hls-settings))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyHlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fmp4hls-settings))
      (common-lisp:list
       (common-lisp:cons "Fmp4HlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-hls-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureHlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-hls-settings))
      (common-lisp:list
       (common-lisp:cons "StandardHlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-settings))
   common-lisp:nil))
(common-lisp:deftype hls-stream-inf-resolution () 'common-lisp:string)
(common-lisp:deftype hls-timed-metadata-id3frame () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-timed-metadata-schedule-action-settings
                       common-lisp:nil
                       ((id3 :initarg :id3 :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %hls-timed-metadata-schedule-action-settings-id3
                         :initform (common-lisp:error ":id3 is required"))))
 (common-lisp:export
  (common-lisp:list 'hls-timed-metadata-schedule-action-settings
                    'make-hls-timed-metadata-schedule-action-settings))
 (common-lisp:defun make-hls-timed-metadata-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id3)
   (common-lisp:apply #'common-lisp:make-instance
                      'hls-timed-metadata-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-timed-metadata-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-timed-metadata-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id3))
      (common-lisp:list
       (common-lisp:cons "Id3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-timed-metadata-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype hls-ts-file-mode () 'common-lisp:string)
(common-lisp:deftype hls-webdav-http-transfer-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hls-webdav-settings common-lisp:nil
                       ((restart-delay :initarg :restart-delay :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor %hls-webdav-settings-restart-delay :initform
                         common-lisp:nil)
                        (num-retries :initarg :num-retries :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %hls-webdav-settings-num-retries :initform
                         common-lisp:nil)
                        (http-transfer-mode :initarg :http-transfer-mode :type
                         (common-lisp:or hls-webdav-http-transfer-mode
                                         common-lisp:null)
                         :accessor %hls-webdav-settings-http-transfer-mode
                         :initform common-lisp:nil)
                        (filecache-duration :initarg :filecache-duration :type
                         (common-lisp:or |__integerMin0Max600|
                                         common-lisp:null)
                         :accessor %hls-webdav-settings-filecache-duration
                         :initform common-lisp:nil)
                        (connection-retry-interval :initarg
                         :connection-retry-interval :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %hls-webdav-settings-connection-retry-interval
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'hls-webdav-settings 'make-hls-webdav-settings))
 (common-lisp:defun make-hls-webdav-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restart-delay num-retries
                     http-transfer-mode filecache-duration
                     connection-retry-interval)
   (common-lisp:apply #'common-lisp:make-instance 'hls-webdav-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-webdav-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-webdav-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-transfer-mode))
      (common-lisp:list
       (common-lisp:cons "HttpTransferMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-webdav-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass html-motion-graphics-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'html-motion-graphics-settings
                    'make-html-motion-graphics-settings))
 (common-lisp:defun make-html-motion-graphics-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'html-motion-graphics-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          html-motion-graphics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          html-motion-graphics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          html-motion-graphics-settings))
   common-lisp:nil))
(common-lisp:deftype iframe-only-playlist-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass immediate-mode-schedule-action-start-settings
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'immediate-mode-schedule-action-start-settings
                    'make-immediate-mode-schedule-action-start-settings))
 (common-lisp:defun make-immediate-mode-schedule-action-start-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'immediate-mode-schedule-action-start-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          immediate-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          immediate-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          immediate-mode-schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or input-type common-lisp:null) :accessor
                         %input-type :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %input-tags :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or input-state common-lisp:null)
                         :accessor %input-state :initform common-lisp:nil)
                        (sources :initarg :sources :type
                         (common-lisp:or |__listOfInputSource|
                                         common-lisp:null)
                         :accessor %input-sources :initform common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %input-security-groups :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-role-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-name :initform common-lisp:nil)
                        (media-connect-flows :initarg :media-connect-flows
                         :type
                         (common-lisp:or |__listOfMediaConnectFlow|
                                         common-lisp:null)
                         :accessor %input-media-connect-flows :initform
                         common-lisp:nil)
                        (input-source-type :initarg :input-source-type :type
                         (common-lisp:or input-source-type common-lisp:null)
                         :accessor %input-input-source-type :initform
                         common-lisp:nil)
                        (input-partner-ids :initarg :input-partner-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %input-input-partner-ids :initform
                         common-lisp:nil)
                        (input-devices :initarg :input-devices :type
                         (common-lisp:or |__listOfInputDeviceSettings|
                                         common-lisp:null)
                         :accessor %input-input-devices :initform
                         common-lisp:nil)
                        (input-class :initarg :input-class :type
                         (common-lisp:or input-class common-lisp:null)
                         :accessor %input-input-class :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-id :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfInputDestination|
                                         common-lisp:null)
                         :accessor %input-destinations :initform
                         common-lisp:nil)
                        (attached-channels :initarg :attached-channels :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %input-attached-channels :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'input 'make-input))
 (common-lisp:defun make-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type tags state sources security-groups
                     role-arn name media-connect-flows input-source-type
                     input-partner-ids input-devices input-class id
                     destinations attached-channels arn)
   (common-lisp:apply #'common-lisp:make-instance 'input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-channels))
      (common-lisp:list
       (common-lisp:cons "AttachedChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-class))
      (common-lisp:list
       (common-lisp:cons "InputClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-partner-ids))
      (common-lisp:list
       (common-lisp:cons "InputPartnerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-type))
      (common-lisp:list
       (common-lisp:cons "InputSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-attachment common-lisp:nil
                       ((input-settings :initarg :input-settings :type
                         (common-lisp:or input-settings common-lisp:null)
                         :accessor %input-attachment-input-settings :initform
                         common-lisp:nil)
                        (input-id :initarg :input-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-attachment-input-id :initform common-lisp:nil)
                        (input-attachment-name :initarg :input-attachment-name
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %input-attachment-input-attachment-name
                         :initform common-lisp:nil)
                        (automatic-input-failover-settings :initarg
                         :automatic-input-failover-settings :type
                         (common-lisp:or automatic-input-failover-settings
                                         common-lisp:null)
                         :accessor
                         %input-attachment-automatic-input-failover-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-attachment 'make-input-attachment))
 (common-lisp:defun make-input-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-settings input-id
                     input-attachment-name automatic-input-failover-settings)
   (common-lisp:apply #'common-lisp:make-instance 'input-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-input-failover-settings))
      (common-lisp:list
       (common-lisp:cons "AutomaticInputFailoverSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-settings))
      (common-lisp:list
       (common-lisp:cons "InputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-channel-level common-lisp:nil
                       ((input-channel :initarg :input-channel :type
                         (common-lisp:or |__integerMin0Max15| common-lisp:null)
                         :accessor %input-channel-level-input-channel :initform
                         (common-lisp:error ":input-channel is required"))
                        (gain :initarg :gain :type
                         (common-lisp:or |__integerMinNegative60Max6|
                                         common-lisp:null)
                         :accessor %input-channel-level-gain :initform
                         (common-lisp:error ":gain is required"))))
 (common-lisp:export
  (common-lisp:list 'input-channel-level 'make-input-channel-level))
 (common-lisp:defun make-input-channel-level
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-channel gain)
   (common-lisp:apply #'common-lisp:make-instance 'input-channel-level
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-channel-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-channel-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gain))
      (common-lisp:list
       (common-lisp:cons "Gain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-channel))
      (common-lisp:list
       (common-lisp:cons "InputChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-channel-level))
   common-lisp:nil))
(common-lisp:deftype input-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-clipping-settings common-lisp:nil
                       ((stop-timecode :initarg :stop-timecode :type
                         (common-lisp:or stop-timecode common-lisp:null)
                         :accessor %input-clipping-settings-stop-timecode
                         :initform common-lisp:nil)
                        (start-timecode :initarg :start-timecode :type
                         (common-lisp:or start-timecode common-lisp:null)
                         :accessor %input-clipping-settings-start-timecode
                         :initform common-lisp:nil)
                        (input-timecode-source :initarg :input-timecode-source
                         :type
                         (common-lisp:or input-timecode-source
                                         common-lisp:null)
                         :accessor
                         %input-clipping-settings-input-timecode-source
                         :initform
                         (common-lisp:error
                          ":input-timecode-source is required"))))
 (common-lisp:export
  (common-lisp:list 'input-clipping-settings 'make-input-clipping-settings))
 (common-lisp:defun make-input-clipping-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stop-timecode start-timecode
                     input-timecode-source)
   (common-lisp:apply #'common-lisp:make-instance 'input-clipping-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-clipping-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-clipping-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-timecode-source))
      (common-lisp:list
       (common-lisp:cons "InputTimecodeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timecode))
      (common-lisp:list
       (common-lisp:cons "StartTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-timecode))
      (common-lisp:list
       (common-lisp:cons "StopTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-clipping-settings))
   common-lisp:nil))
(common-lisp:deftype input-codec () 'common-lisp:string)
(common-lisp:deftype input-deblock-filter () 'common-lisp:string)
(common-lisp:deftype input-denoise-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-destination common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or input-destination-vpc
                                         common-lisp:null)
                         :accessor %input-destination-vpc :initform
                         common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-destination-url :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-destination-port :initform common-lisp:nil)
                        (ip :initarg :ip :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-destination-ip :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-destination 'make-input-destination))
 (common-lisp:defun make-input-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc url port ip)
   (common-lisp:apply #'common-lisp:make-instance 'input-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-destination-request common-lisp:nil
                       ((stream-name :initarg :stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-destination-request-stream-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-destination-request
                    'make-input-destination-request))
 (common-lisp:defun make-input-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stream-name)
   (common-lisp:apply #'common-lisp:make-instance 'input-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-destination-vpc common-lisp:nil
                       ((network-interface-id :initarg :network-interface-id
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %input-destination-vpc-network-interface-id
                         :initform common-lisp:nil)
                        (availability-zone :initarg :availability-zone :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-destination-vpc-availability-zone :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-destination-vpc 'make-input-destination-vpc))
 (common-lisp:defun make-input-destination-vpc
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-interface-id availability-zone)
   (common-lisp:apply #'common-lisp:make-instance 'input-destination-vpc
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-vpc))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-vpc))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-vpc))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-device common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %input-device-tags :initform common-lisp:nil)
                        (uhd-device-settings :initarg :uhd-device-settings
                         :type
                         (common-lisp:or input-device-uhd-settings
                                         common-lisp:null)
                         :accessor %input-device-uhd-device-settings :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or input-device-type common-lisp:null)
                         :accessor %input-device-type :initform
                         common-lisp:nil)
                        (serial-number :initarg :serial-number :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-serial-number :initform common-lisp:nil)
                        (network-settings :initarg :network-settings :type
                         (common-lisp:or input-device-network-settings
                                         common-lisp:null)
                         :accessor %input-device-network-settings :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-name :initform common-lisp:nil)
                        (mac-address :initarg :mac-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-mac-address :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-id :initform common-lisp:nil)
                        (hd-device-settings :initarg :hd-device-settings :type
                         (common-lisp:or input-device-hd-settings
                                         common-lisp:null)
                         :accessor %input-device-hd-device-settings :initform
                         common-lisp:nil)
                        (device-update-status :initarg :device-update-status
                         :type
                         (common-lisp:or device-update-status common-lisp:null)
                         :accessor %input-device-device-update-status :initform
                         common-lisp:nil)
                        (device-settings-sync-state :initarg
                         :device-settings-sync-state :type
                         (common-lisp:or device-settings-sync-state
                                         common-lisp:null)
                         :accessor %input-device-device-settings-sync-state
                         :initform common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or input-device-connection-state
                                         common-lisp:null)
                         :accessor %input-device-connection-state :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'input-device 'make-input-device))
 (common-lisp:defun make-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags uhd-device-settings type
                     serial-number network-settings name mac-address id
                     hd-device-settings device-update-status
                     device-settings-sync-state connection-state arn)
   (common-lisp:apply #'common-lisp:make-instance 'input-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-device))
   common-lisp:nil))
(common-lisp:deftype input-device-active-input () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-configurable-settings common-lisp:nil
                       ((latency-ms :initarg :latency-ms :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %input-device-configurable-settings-latency-ms
                         :initform common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %input-device-configurable-settings-max-bitrate
                         :initform common-lisp:nil)
                        (configured-input :initarg :configured-input :type
                         (common-lisp:or input-device-configured-input
                                         common-lisp:null)
                         :accessor
                         %input-device-configurable-settings-configured-input
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-device-configurable-settings
                    'make-input-device-configurable-settings))
 (common-lisp:defun make-input-device-configurable-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latency-ms max-bitrate configured-input)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-device-configurable-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-input))
      (common-lisp:list
       (common-lisp:cons "ConfiguredInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency-ms))
      (common-lisp:list
       (common-lisp:cons "LatencyMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-device-configuration-validation-error
                       common-lisp:nil
                       ((validation-errors :initarg :validation-errors :type
                         (common-lisp:or |__listOfValidationError|
                                         common-lisp:null)
                         :accessor
                         %input-device-configuration-validation-error-validation-errors
                         :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-configuration-validation-error-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-device-configuration-validation-error
                    'make-input-device-configuration-validation-error))
 (common-lisp:defun make-input-device-configuration-validation-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation-errors message)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-device-configuration-validation-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configuration-validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configuration-validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "ValidationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configuration-validation-error))
   common-lisp:nil))
(common-lisp:deftype input-device-configured-input () 'common-lisp:string)
(common-lisp:deftype input-device-connection-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-hd-settings common-lisp:nil
                       ((latency-ms :initarg :latency-ms :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %input-device-hd-settings-latency-ms
                         :initform common-lisp:nil)
                        (width :initarg :width :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %input-device-hd-settings-width :initform
                         common-lisp:nil)
                        (scan-type :initarg :scan-type :type
                         (common-lisp:or input-device-scan-type
                                         common-lisp:null)
                         :accessor %input-device-hd-settings-scan-type
                         :initform common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %input-device-hd-settings-max-bitrate
                         :initform common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %input-device-hd-settings-height :initform
                         common-lisp:nil)
                        (framerate :initarg :framerate :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %input-device-hd-settings-framerate :initform
                         common-lisp:nil)
                        (device-state :initarg :device-state :type
                         (common-lisp:or input-device-state common-lisp:null)
                         :accessor %input-device-hd-settings-device-state
                         :initform common-lisp:nil)
                        (configured-input :initarg :configured-input :type
                         (common-lisp:or input-device-configured-input
                                         common-lisp:null)
                         :accessor %input-device-hd-settings-configured-input
                         :initform common-lisp:nil)
                        (active-input :initarg :active-input :type
                         (common-lisp:or input-device-active-input
                                         common-lisp:null)
                         :accessor %input-device-hd-settings-active-input
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-device-hd-settings 'make-input-device-hd-settings))
 (common-lisp:defun make-input-device-hd-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latency-ms width scan-type max-bitrate
                     height framerate device-state configured-input
                     active-input)
   (common-lisp:apply #'common-lisp:make-instance 'input-device-hd-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-hd-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-hd-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-input))
      (common-lisp:list
       (common-lisp:cons "ActiveInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-input))
      (common-lisp:list
       (common-lisp:cons "ConfiguredInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-state))
      (common-lisp:list
       (common-lisp:cons "DeviceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate))
      (common-lisp:list
       (common-lisp:cons "Framerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency-ms))
      (common-lisp:list
       (common-lisp:cons "LatencyMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-hd-settings))
   common-lisp:nil))
(common-lisp:deftype input-device-ip-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-network-settings common-lisp:nil
                       ((subnet-mask :initarg :subnet-mask :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-network-settings-subnet-mask :initform
                         common-lisp:nil)
                        (ip-scheme :initarg :ip-scheme :type
                         (common-lisp:or input-device-ip-scheme
                                         common-lisp:null)
                         :accessor %input-device-network-settings-ip-scheme
                         :initform common-lisp:nil)
                        (ip-address :initarg :ip-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-network-settings-ip-address :initform
                         common-lisp:nil)
                        (gateway :initarg :gateway :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-network-settings-gateway :initform
                         common-lisp:nil)
                        (dns-addresses :initarg :dns-addresses :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %input-device-network-settings-dns-addresses
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-device-network-settings
                    'make-input-device-network-settings))
 (common-lisp:defun make-input-device-network-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-mask ip-scheme ip-address gateway
                     dns-addresses)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-device-network-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-network-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-network-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-addresses))
      (common-lisp:list
       (common-lisp:cons "DnsAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway))
      (common-lisp:list
       (common-lisp:cons "Gateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-scheme))
      (common-lisp:list
       (common-lisp:cons "IpScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-mask))
      (common-lisp:list
       (common-lisp:cons "SubnetMask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-network-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-device-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-request-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-device-request 'make-input-device-request))
 (common-lisp:defun make-input-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-device-request))
   common-lisp:nil))
(common-lisp:deftype input-device-scan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-settings common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-settings-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-device-settings 'make-input-device-settings))
 (common-lisp:defun make-input-device-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'input-device-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-settings))
   common-lisp:nil))
(common-lisp:deftype input-device-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-summary common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %input-device-summary-tags :initform common-lisp:nil)
                        (uhd-device-settings :initarg :uhd-device-settings
                         :type
                         (common-lisp:or input-device-uhd-settings
                                         common-lisp:null)
                         :accessor %input-device-summary-uhd-device-settings
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or input-device-type common-lisp:null)
                         :accessor %input-device-summary-type :initform
                         common-lisp:nil)
                        (serial-number :initarg :serial-number :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-summary-serial-number :initform
                         common-lisp:nil)
                        (network-settings :initarg :network-settings :type
                         (common-lisp:or input-device-network-settings
                                         common-lisp:null)
                         :accessor %input-device-summary-network-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-summary-name :initform common-lisp:nil)
                        (mac-address :initarg :mac-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-summary-mac-address :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-summary-id :initform common-lisp:nil)
                        (hd-device-settings :initarg :hd-device-settings :type
                         (common-lisp:or input-device-hd-settings
                                         common-lisp:null)
                         :accessor %input-device-summary-hd-device-settings
                         :initform common-lisp:nil)
                        (device-update-status :initarg :device-update-status
                         :type
                         (common-lisp:or device-update-status common-lisp:null)
                         :accessor %input-device-summary-device-update-status
                         :initform common-lisp:nil)
                        (device-settings-sync-state :initarg
                         :device-settings-sync-state :type
                         (common-lisp:or device-settings-sync-state
                                         common-lisp:null)
                         :accessor
                         %input-device-summary-device-settings-sync-state
                         :initform common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or input-device-connection-state
                                         common-lisp:null)
                         :accessor %input-device-summary-connection-state
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-device-summary-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-device-summary 'make-input-device-summary))
 (common-lisp:defun make-input-device-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags uhd-device-settings type
                     serial-number network-settings name mac-address id
                     hd-device-settings device-update-status
                     device-settings-sync-state connection-state arn)
   (common-lisp:apply #'common-lisp:make-instance 'input-device-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-device-summary))
   common-lisp:nil))
(common-lisp:deftype input-device-transfer-type () 'common-lisp:string)
(common-lisp:deftype input-device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-device-uhd-settings common-lisp:nil
                       ((latency-ms :initarg :latency-ms :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %input-device-uhd-settings-latency-ms
                         :initform common-lisp:nil)
                        (width :initarg :width :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %input-device-uhd-settings-width :initform
                         common-lisp:nil)
                        (scan-type :initarg :scan-type :type
                         (common-lisp:or input-device-scan-type
                                         common-lisp:null)
                         :accessor %input-device-uhd-settings-scan-type
                         :initform common-lisp:nil)
                        (max-bitrate :initarg :max-bitrate :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %input-device-uhd-settings-max-bitrate
                         :initform common-lisp:nil)
                        (height :initarg :height :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %input-device-uhd-settings-height :initform
                         common-lisp:nil)
                        (framerate :initarg :framerate :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %input-device-uhd-settings-framerate :initform
                         common-lisp:nil)
                        (device-state :initarg :device-state :type
                         (common-lisp:or input-device-state common-lisp:null)
                         :accessor %input-device-uhd-settings-device-state
                         :initform common-lisp:nil)
                        (configured-input :initarg :configured-input :type
                         (common-lisp:or input-device-configured-input
                                         common-lisp:null)
                         :accessor %input-device-uhd-settings-configured-input
                         :initform common-lisp:nil)
                        (active-input :initarg :active-input :type
                         (common-lisp:or input-device-active-input
                                         common-lisp:null)
                         :accessor %input-device-uhd-settings-active-input
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-device-uhd-settings
                    'make-input-device-uhd-settings))
 (common-lisp:defun make-input-device-uhd-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latency-ms width scan-type max-bitrate
                     height framerate device-state configured-input
                     active-input)
   (common-lisp:apply #'common-lisp:make-instance 'input-device-uhd-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-input))
      (common-lisp:list
       (common-lisp:cons "ActiveInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-input))
      (common-lisp:list
       (common-lisp:cons "ConfiguredInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-state))
      (common-lisp:list
       (common-lisp:cons "DeviceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate))
      (common-lisp:list
       (common-lisp:cons "Framerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency-ms))
      (common-lisp:list
       (common-lisp:cons "LatencyMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-settings))
   common-lisp:nil))
(common-lisp:deftype input-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-location common-lisp:nil
                       ((username :initarg :username :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-location-username :initform common-lisp:nil)
                        (uri :initarg :uri :type
                         (common-lisp:or |__stringMax2048| common-lisp:null)
                         :accessor %input-location-uri :initform
                         (common-lisp:error ":uri is required"))
                        (password-param :initarg :password-param :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-location-password-param :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'input-location 'make-input-location))
 (common-lisp:defun make-input-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key username uri password-param)
   (common-lisp:apply #'common-lisp:make-instance 'input-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-location))
   common-lisp:nil))
(common-lisp:deftype input-loss-action-for-hls-out () 'common-lisp:string)
(common-lisp:deftype input-loss-action-for-ms-smooth-out () 'common-lisp:string)
(common-lisp:deftype input-loss-action-for-rtmp-out () 'common-lisp:string)
(common-lisp:deftype input-loss-action-for-udp-out () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-loss-behavior common-lisp:nil
                       ((repeat-frame-msec :initarg :repeat-frame-msec :type
                         (common-lisp:or |__integerMin0Max1000000|
                                         common-lisp:null)
                         :accessor %input-loss-behavior-repeat-frame-msec
                         :initform common-lisp:nil)
                        (input-loss-image-type :initarg :input-loss-image-type
                         :type
                         (common-lisp:or input-loss-image-type
                                         common-lisp:null)
                         :accessor %input-loss-behavior-input-loss-image-type
                         :initform common-lisp:nil)
                        (input-loss-image-slate :initarg
                         :input-loss-image-slate :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor %input-loss-behavior-input-loss-image-slate
                         :initform common-lisp:nil)
                        (input-loss-image-color :initarg
                         :input-loss-image-color :type
                         (common-lisp:or |__stringMin6Max6| common-lisp:null)
                         :accessor %input-loss-behavior-input-loss-image-color
                         :initform common-lisp:nil)
                        (black-frame-msec :initarg :black-frame-msec :type
                         (common-lisp:or |__integerMin0Max1000000|
                                         common-lisp:null)
                         :accessor %input-loss-behavior-black-frame-msec
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-loss-behavior 'make-input-loss-behavior))
 (common-lisp:defun make-input-loss-behavior
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repeat-frame-msec input-loss-image-type
                     input-loss-image-slate input-loss-image-color
                     black-frame-msec)
   (common-lisp:apply #'common-lisp:make-instance 'input-loss-behavior
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-loss-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-loss-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'black-frame-msec))
      (common-lisp:list
       (common-lisp:cons "BlackFrameMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-image-color))
      (common-lisp:list
       (common-lisp:cons "InputLossImageColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-image-slate))
      (common-lisp:list
       (common-lisp:cons "InputLossImageSlate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-image-type))
      (common-lisp:list
       (common-lisp:cons "InputLossImageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repeat-frame-msec))
      (common-lisp:list
       (common-lisp:cons "RepeatFrameMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-loss-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-loss-failover-settings common-lisp:nil
                       ((input-loss-threshold-msec :initarg
                         :input-loss-threshold-msec :type
                         (common-lisp:or |__integerMin100| common-lisp:null)
                         :accessor
                         %input-loss-failover-settings-input-loss-threshold-msec
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-loss-failover-settings
                    'make-input-loss-failover-settings))
 (common-lisp:defun make-input-loss-failover-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-loss-threshold-msec)
   (common-lisp:apply #'common-lisp:make-instance 'input-loss-failover-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-loss-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-loss-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-threshold-msec))
      (common-lisp:list
       (common-lisp:cons "InputLossThresholdMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-loss-failover-settings))
   common-lisp:nil))
(common-lisp:deftype input-loss-image-type () 'common-lisp:string)
(common-lisp:deftype input-maximum-bitrate () 'common-lisp:string)
(common-lisp:deftype input-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-prepare-schedule-action-settings common-lisp:nil
                       ((url-path :initarg :url-path :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %input-prepare-schedule-action-settings-url-path
                         :initform common-lisp:nil)
                        (input-clipping-settings :initarg
                         :input-clipping-settings :type
                         (common-lisp:or input-clipping-settings
                                         common-lisp:null)
                         :accessor
                         %input-prepare-schedule-action-settings-input-clipping-settings
                         :initform common-lisp:nil)
                        (input-attachment-name-reference :initarg
                         :input-attachment-name-reference :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-prepare-schedule-action-settings-input-attachment-name-reference
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-prepare-schedule-action-settings
                    'make-input-prepare-schedule-action-settings))
 (common-lisp:defun make-input-prepare-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url-path input-clipping-settings
                     input-attachment-name-reference)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-prepare-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-prepare-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-prepare-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name-reference))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentNameReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-clipping-settings))
      (common-lisp:list
       (common-lisp:cons "InputClippingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-path))
      (common-lisp:list
       (common-lisp:cons "UrlPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-prepare-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype input-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-security-group common-lisp:nil
                       ((whitelist-rules :initarg :whitelist-rules :type
                         (common-lisp:or |__listOfInputWhitelistRule|
                                         common-lisp:null)
                         :accessor %input-security-group-whitelist-rules
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %input-security-group-tags :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or input-security-group-state
                                         common-lisp:null)
                         :accessor %input-security-group-state :initform
                         common-lisp:nil)
                        (inputs :initarg :inputs :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %input-security-group-inputs :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-security-group-id :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-security-group-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-security-group 'make-input-security-group))
 (common-lisp:defun make-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key whitelist-rules tags state inputs id arn)
   (common-lisp:apply #'common-lisp:make-instance 'input-security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-security-group))
   common-lisp:nil))
(common-lisp:deftype input-security-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-security-group-whitelist-request common-lisp:nil
                       ((whitelist-rules :initarg :whitelist-rules :type
                         (common-lisp:or |__listOfInputWhitelistRuleCidr|
                                         common-lisp:null)
                         :accessor
                         %input-security-group-whitelist-request-whitelist-rules
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %input-security-group-whitelist-request-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-security-group-whitelist-request
                    'make-input-security-group-whitelist-request))
 (common-lisp:defun make-input-security-group-whitelist-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key whitelist-rules tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-security-group-whitelist-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-security-group-whitelist-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-security-group-whitelist-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-security-group-whitelist-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-settings common-lisp:nil
                       ((video-selector :initarg :video-selector :type
                         (common-lisp:or video-selector common-lisp:null)
                         :accessor %input-settings-video-selector :initform
                         common-lisp:nil)
                        (source-end-behavior :initarg :source-end-behavior
                         :type
                         (common-lisp:or input-source-end-behavior
                                         common-lisp:null)
                         :accessor %input-settings-source-end-behavior
                         :initform common-lisp:nil)
                        (smpte2038data-preference :initarg
                         :smpte2038data-preference :type
                         (common-lisp:or smpte2038data-preference
                                         common-lisp:null)
                         :accessor %input-settings-smpte2038data-preference
                         :initform common-lisp:nil)
                        (scte35pid :initarg :scte35pid :type
                         (common-lisp:or |__integerMin32Max8191|
                                         common-lisp:null)
                         :accessor %input-settings-scte35pid :initform
                         common-lisp:nil)
                        (network-input-settings :initarg
                         :network-input-settings :type
                         (common-lisp:or network-input-settings
                                         common-lisp:null)
                         :accessor %input-settings-network-input-settings
                         :initform common-lisp:nil)
                        (input-filter :initarg :input-filter :type
                         (common-lisp:or input-filter common-lisp:null)
                         :accessor %input-settings-input-filter :initform
                         common-lisp:nil)
                        (filter-strength :initarg :filter-strength :type
                         (common-lisp:or |__integerMin1Max5| common-lisp:null)
                         :accessor %input-settings-filter-strength :initform
                         common-lisp:nil)
                        (denoise-filter :initarg :denoise-filter :type
                         (common-lisp:or input-denoise-filter common-lisp:null)
                         :accessor %input-settings-denoise-filter :initform
                         common-lisp:nil)
                        (deblock-filter :initarg :deblock-filter :type
                         (common-lisp:or input-deblock-filter common-lisp:null)
                         :accessor %input-settings-deblock-filter :initform
                         common-lisp:nil)
                        (caption-selectors :initarg :caption-selectors :type
                         (common-lisp:or |__listOfCaptionSelector|
                                         common-lisp:null)
                         :accessor %input-settings-caption-selectors :initform
                         common-lisp:nil)
                        (audio-selectors :initarg :audio-selectors :type
                         (common-lisp:or |__listOfAudioSelector|
                                         common-lisp:null)
                         :accessor %input-settings-audio-selectors :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'input-settings 'make-input-settings))
 (common-lisp:defun make-input-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-selector source-end-behavior
                     smpte2038data-preference scte35pid network-input-settings
                     input-filter filter-strength denoise-filter deblock-filter
                     caption-selectors audio-selectors)
   (common-lisp:apply #'common-lisp:make-instance 'input-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selectors))
      (common-lisp:list
       (common-lisp:cons "AudioSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-selectors))
      (common-lisp:list
       (common-lisp:cons "CaptionSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deblock-filter))
      (common-lisp:list
       (common-lisp:cons "DeblockFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'denoise-filter))
      (common-lisp:list
       (common-lisp:cons "DenoiseFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-strength))
      (common-lisp:list
       (common-lisp:cons "FilterStrength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-filter))
      (common-lisp:list
       (common-lisp:cons "InputFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-input-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkInputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'smpte2038data-preference))
      (common-lisp:list
       (common-lisp:cons "Smpte2038DataPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-end-behavior))
      (common-lisp:list
       (common-lisp:cons "SourceEndBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-selector))
      (common-lisp:list
       (common-lisp:cons "VideoSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-source common-lisp:nil
                       ((username :initarg :username :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-source-username :initform common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-source-url :initform common-lisp:nil)
                        (password-param :initarg :password-param :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-source-password-param :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'input-source 'make-input-source))
 (common-lisp:defun make-input-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key username url password-param)
   (common-lisp:apply #'common-lisp:make-instance 'input-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-source))
   common-lisp:nil))
(common-lisp:deftype input-source-end-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-source-request common-lisp:nil
                       ((username :initarg :username :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-source-request-username :initform
                         common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-source-request-url :initform common-lisp:nil)
                        (password-param :initarg :password-param :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-source-request-password-param :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-source-request 'make-input-source-request))
 (common-lisp:defun make-input-source-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key username url password-param)
   (common-lisp:apply #'common-lisp:make-instance 'input-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-source-request))
   common-lisp:nil))
(common-lisp:deftype input-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-specification common-lisp:nil
                       ((resolution :initarg :resolution :type
                         (common-lisp:or input-resolution common-lisp:null)
                         :accessor %input-specification-resolution :initform
                         common-lisp:nil)
                        (maximum-bitrate :initarg :maximum-bitrate :type
                         (common-lisp:or input-maximum-bitrate
                                         common-lisp:null)
                         :accessor %input-specification-maximum-bitrate
                         :initform common-lisp:nil)
                        (codec :initarg :codec :type
                         (common-lisp:or input-codec common-lisp:null)
                         :accessor %input-specification-codec :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-specification 'make-input-specification))
 (common-lisp:defun make-input-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resolution maximum-bitrate codec)
   (common-lisp:apply #'common-lisp:make-instance 'input-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaximumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-specification))
   common-lisp:nil))
(common-lisp:deftype input-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-switch-schedule-action-settings common-lisp:nil
                       ((url-path :initarg :url-path :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %input-switch-schedule-action-settings-url-path
                         :initform common-lisp:nil)
                        (input-clipping-settings :initarg
                         :input-clipping-settings :type
                         (common-lisp:or input-clipping-settings
                                         common-lisp:null)
                         :accessor
                         %input-switch-schedule-action-settings-input-clipping-settings
                         :initform common-lisp:nil)
                        (input-attachment-name-reference :initarg
                         :input-attachment-name-reference :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-switch-schedule-action-settings-input-attachment-name-reference
                         :initform
                         (common-lisp:error
                          ":input-attachment-name-reference is required"))))
 (common-lisp:export
  (common-lisp:list 'input-switch-schedule-action-settings
                    'make-input-switch-schedule-action-settings))
 (common-lisp:defun make-input-switch-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url-path input-clipping-settings
                     input-attachment-name-reference)
   (common-lisp:apply #'common-lisp:make-instance
                      'input-switch-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-switch-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-switch-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name-reference))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentNameReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-clipping-settings))
      (common-lisp:list
       (common-lisp:cons "InputClippingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-path))
      (common-lisp:list
       (common-lisp:cons "UrlPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-switch-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype input-timecode-source () 'common-lisp:string)
(common-lisp:deftype input-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass input-vpc-request common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %input-vpc-request-subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %input-vpc-request-security-group-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-vpc-request 'make-input-vpc-request))
 (common-lisp:defun make-input-vpc-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-ids security-group-ids)
   (common-lisp:apply #'common-lisp:make-instance 'input-vpc-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-vpc-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-whitelist-rule common-lisp:nil
                       ((cidr :initarg :cidr :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-whitelist-rule-cidr :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-whitelist-rule 'make-input-whitelist-rule))
 (common-lisp:defun make-input-whitelist-rule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cidr)
   (common-lisp:apply #'common-lisp:make-instance 'input-whitelist-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-whitelist-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-whitelist-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-whitelist-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-whitelist-rule-cidr common-lisp:nil
                       ((cidr :initarg :cidr :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %input-whitelist-rule-cidr-cidr :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-whitelist-rule-cidr
                    'make-input-whitelist-rule-cidr))
 (common-lisp:defun make-input-whitelist-rule-cidr
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cidr)
   (common-lisp:apply #'common-lisp:make-instance 'input-whitelist-rule-cidr
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-whitelist-rule-cidr))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-whitelist-rule-cidr))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-whitelist-rule-cidr))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defclass internal-service-error common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %internal-service-error-message :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error 'make-internal-service-error))
 (common-lisp:defun make-internal-service-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'internal-service-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass invalid-request common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %invalid-request-message :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'invalid-request 'make-invalid-request))
 (common-lisp:defun make-invalid-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'invalid-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invalid-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invalid-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invalid-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass key-provider-settings common-lisp:nil
                       ((static-key-settings :initarg :static-key-settings
                         :type
                         (common-lisp:or static-key-settings common-lisp:null)
                         :accessor %key-provider-settings-static-key-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'key-provider-settings 'make-key-provider-settings))
 (common-lisp:defun make-key-provider-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key static-key-settings)
   (common-lisp:apply #'common-lisp:make-instance 'key-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          key-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          key-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-key-settings))
      (common-lisp:list
       (common-lisp:cons "StaticKeySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          key-provider-settings))
   common-lisp:nil))
(common-lisp:deftype last-frame-clipping-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass limit-exceeded common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %limit-exceeded-message :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'limit-exceeded 'make-limit-exceeded))
 (common-lisp:defun make-limit-exceeded
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'limit-exceeded
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limit-exceeded))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limit-exceeded))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limit-exceeded))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-channels-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-channels-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-channels-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-channels-request 'make-list-channels-request))
 (common-lisp:defun make-list-channels-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-channels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-channels-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-channels-response-next-token :initform
                         common-lisp:nil)
                        (channels :initarg :channels :type
                         (common-lisp:or |__listOfChannelSummary|
                                         common-lisp:null)
                         :accessor %list-channels-response-channels :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-channels-response 'make-list-channels-response))
 (common-lisp:defun make-list-channels-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token channels)
   (common-lisp:apply #'common-lisp:make-instance 'list-channels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-channels-result-model common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-channels-result-model-next-token :initform
                         common-lisp:nil)
                        (channels :initarg :channels :type
                         (common-lisp:or |__listOfChannelSummary|
                                         common-lisp:null)
                         :accessor %list-channels-result-model-channels
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-channels-result-model
                    'make-list-channels-result-model))
 (common-lisp:defun make-list-channels-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token channels)
   (common-lisp:apply #'common-lisp:make-instance 'list-channels-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-device-transfers-request common-lisp:nil
                       ((transfer-type :initarg :transfer-type :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-input-device-transfers-request-transfer-type
                         :initform
                         (common-lisp:error ":transfer-type is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-input-device-transfers-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-input-device-transfers-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-input-device-transfers-request
                    'make-list-input-device-transfers-request))
 (common-lisp:defun make-list-input-device-transfers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transfer-type next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-device-transfers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-device-transfers-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-input-device-transfers-response-next-token
                         :initform common-lisp:nil)
                        (input-device-transfers :initarg
                         :input-device-transfers :type
                         (common-lisp:or
                          |__listOfTransferringInputDeviceSummary|
                          common-lisp:null)
                         :accessor
                         %list-input-device-transfers-response-input-device-transfers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-input-device-transfers-response
                    'make-list-input-device-transfers-response))
 (common-lisp:defun make-list-input-device-transfers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token input-device-transfers)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-device-transfers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-device-transfers))
      (common-lisp:list
       (common-lisp:cons "InputDeviceTransfers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-device-transfers-result-model common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-input-device-transfers-result-model-next-token
                         :initform common-lisp:nil)
                        (input-device-transfers :initarg
                         :input-device-transfers :type
                         (common-lisp:or
                          |__listOfTransferringInputDeviceSummary|
                          common-lisp:null)
                         :accessor
                         %list-input-device-transfers-result-model-input-device-transfers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-input-device-transfers-result-model
                    'make-list-input-device-transfers-result-model))
 (common-lisp:defun make-list-input-device-transfers-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token input-device-transfers)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-device-transfers-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-device-transfers))
      (common-lisp:list
       (common-lisp:cons "InputDeviceTransfers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-devices-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-input-devices-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-input-devices-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-input-devices-request
                    'make-list-input-devices-request))
 (common-lisp:defun make-list-input-devices-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-input-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-devices-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-input-devices-response-next-token :initform
                         common-lisp:nil)
                        (input-devices :initarg :input-devices :type
                         (common-lisp:or |__listOfInputDeviceSummary|
                                         common-lisp:null)
                         :accessor %list-input-devices-response-input-devices
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-input-devices-response
                    'make-list-input-devices-response))
 (common-lisp:defun make-list-input-devices-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token input-devices)
   (common-lisp:apply #'common-lisp:make-instance 'list-input-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-devices-result-model common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-input-devices-result-model-next-token :initform
                         common-lisp:nil)
                        (input-devices :initarg :input-devices :type
                         (common-lisp:or |__listOfInputDeviceSummary|
                                         common-lisp:null)
                         :accessor
                         %list-input-devices-result-model-input-devices
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-input-devices-result-model
                    'make-list-input-devices-result-model))
 (common-lisp:defun make-list-input-devices-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token input-devices)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-devices-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-security-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-input-security-groups-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-input-security-groups-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-input-security-groups-request
                    'make-list-input-security-groups-request))
 (common-lisp:defun make-list-input-security-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-security-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-security-groups-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-input-security-groups-response-next-token
                         :initform common-lisp:nil)
                        (input-security-groups :initarg :input-security-groups
                         :type
                         (common-lisp:or |__listOfInputSecurityGroup|
                                         common-lisp:null)
                         :accessor
                         %list-input-security-groups-response-input-security-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-input-security-groups-response
                    'make-list-input-security-groups-response))
 (common-lisp:defun make-list-input-security-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token input-security-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-security-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-input-security-groups-result-model common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-input-security-groups-result-model-next-token
                         :initform common-lisp:nil)
                        (input-security-groups :initarg :input-security-groups
                         :type
                         (common-lisp:or |__listOfInputSecurityGroup|
                                         common-lisp:null)
                         :accessor
                         %list-input-security-groups-result-model-input-security-groups
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-input-security-groups-result-model
                    'make-list-input-security-groups-result-model))
 (common-lisp:defun make-list-input-security-groups-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token input-security-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-input-security-groups-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-inputs-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-inputs-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-inputs-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-inputs-request 'make-list-inputs-request))
 (common-lisp:defun make-list-inputs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-inputs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-inputs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-inputs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-inputs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-inputs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-inputs-response-next-token :initform
                         common-lisp:nil)
                        (inputs :initarg :inputs :type
                         (common-lisp:or |__listOfInput| common-lisp:null)
                         :accessor %list-inputs-response-inputs :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-inputs-response 'make-list-inputs-response))
 (common-lisp:defun make-list-inputs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token inputs)
   (common-lisp:apply #'common-lisp:make-instance 'list-inputs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-inputs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-inputs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-inputs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-inputs-result-model common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-inputs-result-model-next-token :initform
                         common-lisp:nil)
                        (inputs :initarg :inputs :type
                         (common-lisp:or |__listOfInput| common-lisp:null)
                         :accessor %list-inputs-result-model-inputs :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-inputs-result-model 'make-list-inputs-result-model))
 (common-lisp:defun make-list-inputs-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token inputs)
   (common-lisp:apply #'common-lisp:make-instance 'list-inputs-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inputs-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inputs-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inputs-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplex-programs-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-multiplex-programs-request-next-token :initform
                         common-lisp:nil)
                        (multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-multiplex-programs-request-multiplex-id
                         :initform
                         (common-lisp:error ":multiplex-id is required"))
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-multiplex-programs-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multiplex-programs-request
                    'make-list-multiplex-programs-request))
 (common-lisp:defun make-list-multiplex-programs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token multiplex-id max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multiplex-programs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplex-programs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-multiplex-programs-response-next-token :initform
                         common-lisp:nil)
                        (multiplex-programs :initarg :multiplex-programs :type
                         (common-lisp:or |__listOfMultiplexProgramSummary|
                                         common-lisp:null)
                         :accessor
                         %list-multiplex-programs-response-multiplex-programs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multiplex-programs-response
                    'make-list-multiplex-programs-response))
 (common-lisp:defun make-list-multiplex-programs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token multiplex-programs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multiplex-programs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-programs))
      (common-lisp:list
       (common-lisp:cons "MultiplexPrograms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplex-programs-result-model common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-multiplex-programs-result-model-next-token
                         :initform common-lisp:nil)
                        (multiplex-programs :initarg :multiplex-programs :type
                         (common-lisp:or |__listOfMultiplexProgramSummary|
                                         common-lisp:null)
                         :accessor
                         %list-multiplex-programs-result-model-multiplex-programs
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multiplex-programs-result-model
                    'make-list-multiplex-programs-result-model))
 (common-lisp:defun make-list-multiplex-programs-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token multiplex-programs)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multiplex-programs-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-programs))
      (common-lisp:list
       (common-lisp:cons "MultiplexPrograms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplexes-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-multiplexes-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-multiplexes-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multiplexes-request 'make-list-multiplexes-request))
 (common-lisp:defun make-list-multiplexes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-multiplexes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplexes-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-multiplexes-response-next-token :initform
                         common-lisp:nil)
                        (multiplexes :initarg :multiplexes :type
                         (common-lisp:or |__listOfMultiplexSummary|
                                         common-lisp:null)
                         :accessor %list-multiplexes-response-multiplexes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multiplexes-response
                    'make-list-multiplexes-response))
 (common-lisp:defun make-list-multiplexes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token multiplexes)
   (common-lisp:apply #'common-lisp:make-instance 'list-multiplexes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplexes))
      (common-lisp:list
       (common-lisp:cons "Multiplexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multiplexes-result-model common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-multiplexes-result-model-next-token :initform
                         common-lisp:nil)
                        (multiplexes :initarg :multiplexes :type
                         (common-lisp:or |__listOfMultiplexSummary|
                                         common-lisp:null)
                         :accessor %list-multiplexes-result-model-multiplexes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multiplexes-result-model
                    'make-list-multiplexes-result-model))
 (common-lisp:defun make-list-multiplexes-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token multiplexes)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multiplexes-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplexes))
      (common-lisp:list
       (common-lisp:cons "Multiplexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-request common-lisp:nil
                       ((video-quality :initarg :video-quality :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-video-quality :initform
                         common-lisp:nil)
                        (special-feature :initarg :special-feature :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-special-feature :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-resource-type :initform
                         common-lisp:nil)
                        (resolution :initarg :resolution :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-resolution :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-next-token :initform
                         common-lisp:nil)
                        (maximum-framerate :initarg :maximum-framerate :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-maximum-framerate :initform
                         common-lisp:nil)
                        (maximum-bitrate :initarg :maximum-bitrate :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-maximum-bitrate :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-offerings-request-max-results
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-duration :initform
                         common-lisp:nil)
                        (codec :initarg :codec :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-codec :initform
                         common-lisp:nil)
                        (channel-configuration :initarg :channel-configuration
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %list-offerings-request-channel-configuration
                         :initform common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-request-channel-class :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-offerings-request 'make-list-offerings-request))
 (common-lisp:defun make-list-offerings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-quality special-feature
                     resource-type resolution next-token maximum-framerate
                     maximum-bitrate max-results duration codec
                     channel-configuration channel-class)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-response common-lisp:nil
                       ((offerings :initarg :offerings :type
                         (common-lisp:or |__listOfOffering| common-lisp:null)
                         :accessor %list-offerings-response-offerings :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-offerings-response 'make-list-offerings-response))
 (common-lisp:defun make-list-offerings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key offerings next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offerings))
      (common-lisp:list
       (common-lisp:cons "Offerings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-offerings-result-model common-lisp:nil
                       ((offerings :initarg :offerings :type
                         (common-lisp:or |__listOfOffering| common-lisp:null)
                         :accessor %list-offerings-result-model-offerings
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-offerings-result-model-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-offerings-result-model
                    'make-list-offerings-result-model))
 (common-lisp:defun make-list-offerings-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key offerings next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-offerings-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offerings))
      (common-lisp:list
       (common-lisp:cons "Offerings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reservations-request common-lisp:nil
                       ((video-quality :initarg :video-quality :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-request-video-quality :initform
                         common-lisp:nil)
                        (special-feature :initarg :special-feature :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-request-special-feature :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-request-resource-type :initform
                         common-lisp:nil)
                        (resolution :initarg :resolution :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-request-resolution :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-request-next-token :initform
                         common-lisp:nil)
                        (maximum-framerate :initarg :maximum-framerate :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-request-maximum-framerate :initform
                         common-lisp:nil)
                        (maximum-bitrate :initarg :maximum-bitrate :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-request-maximum-bitrate :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-reservations-request-max-results
                         :initform common-lisp:nil)
                        (codec :initarg :codec :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-request-codec :initform
                         common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-request-channel-class :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-reservations-request
                    'make-list-reservations-request))
 (common-lisp:defun make-list-reservations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-quality special-feature
                     resource-type resolution next-token maximum-framerate
                     maximum-bitrate max-results codec channel-class)
   (common-lisp:apply #'common-lisp:make-instance 'list-reservations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reservations-response common-lisp:nil
                       ((reservations :initarg :reservations :type
                         (common-lisp:or |__listOfReservation|
                                         common-lisp:null)
                         :accessor %list-reservations-response-reservations
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-reservations-response
                    'make-list-reservations-response))
 (common-lisp:defun make-list-reservations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservations next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-reservations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservations))
      (common-lisp:list
       (common-lisp:cons "Reservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-reservations-result-model common-lisp:nil
                       ((reservations :initarg :reservations :type
                         (common-lisp:or |__listOfReservation|
                                         common-lisp:null)
                         :accessor %list-reservations-result-model-reservations
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-reservations-result-model-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-reservations-result-model
                    'make-list-reservations-result-model))
 (common-lisp:defun make-list-reservations-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservations next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-reservations-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservations))
      (common-lisp:list
       (common-lisp:cons "Reservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:deftype m2ts-absent-input-audio-behavior () 'common-lisp:string)
(common-lisp:deftype m2ts-arib () 'common-lisp:string)
(common-lisp:deftype m2ts-arib-captions-pid-control () 'common-lisp:string)
(common-lisp:deftype m2ts-audio-buffer-model () 'common-lisp:string)
(common-lisp:deftype m2ts-audio-interval () 'common-lisp:string)
(common-lisp:deftype m2ts-audio-stream-type () 'common-lisp:string)
(common-lisp:deftype m2ts-buffer-model () 'common-lisp:string)
(common-lisp:deftype m2ts-cc-descriptor () 'common-lisp:string)
(common-lisp:deftype m2ts-ebif-control () 'common-lisp:string)
(common-lisp:deftype m2ts-ebp-placement () 'common-lisp:string)
(common-lisp:deftype m2ts-es-rate-in-pes () 'common-lisp:string)
(common-lisp:deftype m2ts-klv () 'common-lisp:string)
(common-lisp:deftype m2ts-nielsen-id3behavior () 'common-lisp:string)
(common-lisp:deftype m2ts-pcr-control () 'common-lisp:string)
(common-lisp:deftype m2ts-rate-mode () 'common-lisp:string)
(common-lisp:deftype m2ts-scte35control () 'common-lisp:string)
(common-lisp:deftype m2ts-segmentation-markers () 'common-lisp:string)
(common-lisp:deftype m2ts-segmentation-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass m2ts-settings common-lisp:nil
                       ((scte35preroll-pullup-milliseconds :initarg
                         :scte35preroll-pullup-milliseconds :type
                         (common-lisp:or |__doubleMin0Max5000|
                                         common-lisp:null)
                         :accessor
                         %m2ts-settings-scte35preroll-pullup-milliseconds
                         :initform common-lisp:nil)
                        (video-pid :initarg :video-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-video-pid :initform common-lisp:nil)
                        (transport-stream-id :initarg :transport-stream-id
                         :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %m2ts-settings-transport-stream-id :initform
                         common-lisp:nil)
                        (timed-metadata-pid :initarg :timed-metadata-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-timed-metadata-pid :initform
                         common-lisp:nil)
                        (timed-metadata-behavior :initarg
                         :timed-metadata-behavior :type
                         (common-lisp:or m2ts-timed-metadata-behavior
                                         common-lisp:null)
                         :accessor %m2ts-settings-timed-metadata-behavior
                         :initform common-lisp:nil)
                        (segmentation-time :initarg :segmentation-time :type
                         (common-lisp:or |__doubleMin1| common-lisp:null)
                         :accessor %m2ts-settings-segmentation-time :initform
                         common-lisp:nil)
                        (segmentation-style :initarg :segmentation-style :type
                         (common-lisp:or m2ts-segmentation-style
                                         common-lisp:null)
                         :accessor %m2ts-settings-segmentation-style :initform
                         common-lisp:nil)
                        (segmentation-markers :initarg :segmentation-markers
                         :type
                         (common-lisp:or m2ts-segmentation-markers
                                         common-lisp:null)
                         :accessor %m2ts-settings-segmentation-markers
                         :initform common-lisp:nil)
                        (scte35pid :initarg :scte35pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-scte35pid :initform common-lisp:nil)
                        (scte35control :initarg :scte35control :type
                         (common-lisp:or m2ts-scte35control common-lisp:null)
                         :accessor %m2ts-settings-scte35control :initform
                         common-lisp:nil)
                        (scte27pids :initarg :scte27pids :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-scte27pids :initform common-lisp:nil)
                        (rate-mode :initarg :rate-mode :type
                         (common-lisp:or m2ts-rate-mode common-lisp:null)
                         :accessor %m2ts-settings-rate-mode :initform
                         common-lisp:nil)
                        (program-num :initarg :program-num :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %m2ts-settings-program-num :initform
                         common-lisp:nil)
                        (pmt-pid :initarg :pmt-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-pmt-pid :initform common-lisp:nil)
                        (pmt-interval :initarg :pmt-interval :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor %m2ts-settings-pmt-interval :initform
                         common-lisp:nil)
                        (pcr-pid :initarg :pcr-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-pcr-pid :initform common-lisp:nil)
                        (pcr-period :initarg :pcr-period :type
                         (common-lisp:or |__integerMin0Max500|
                                         common-lisp:null)
                         :accessor %m2ts-settings-pcr-period :initform
                         common-lisp:nil)
                        (pcr-control :initarg :pcr-control :type
                         (common-lisp:or m2ts-pcr-control common-lisp:null)
                         :accessor %m2ts-settings-pcr-control :initform
                         common-lisp:nil)
                        (pat-interval :initarg :pat-interval :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor %m2ts-settings-pat-interval :initform
                         common-lisp:nil)
                        (null-packet-bitrate :initarg :null-packet-bitrate
                         :type (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %m2ts-settings-null-packet-bitrate :initform
                         common-lisp:nil)
                        (nielsen-id3behavior :initarg :nielsen-id3behavior
                         :type
                         (common-lisp:or m2ts-nielsen-id3behavior
                                         common-lisp:null)
                         :accessor %m2ts-settings-nielsen-id3behavior :initform
                         common-lisp:nil)
                        (klv-data-pids :initarg :klv-data-pids :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-klv-data-pids :initform
                         common-lisp:nil)
                        (klv :initarg :klv :type
                         (common-lisp:or m2ts-klv common-lisp:null) :accessor
                         %m2ts-settings-klv :initform common-lisp:nil)
                        (fragment-time :initarg :fragment-time :type
                         (common-lisp:or |__doubleMin0| common-lisp:null)
                         :accessor %m2ts-settings-fragment-time :initform
                         common-lisp:nil)
                        (etv-signal-pid :initarg :etv-signal-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-etv-signal-pid :initform
                         common-lisp:nil)
                        (etv-platform-pid :initarg :etv-platform-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-etv-platform-pid :initform
                         common-lisp:nil)
                        (es-rate-in-pes :initarg :es-rate-in-pes :type
                         (common-lisp:or m2ts-es-rate-in-pes common-lisp:null)
                         :accessor %m2ts-settings-es-rate-in-pes :initform
                         common-lisp:nil)
                        (ecm-pid :initarg :ecm-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-ecm-pid :initform common-lisp:nil)
                        (ebp-placement :initarg :ebp-placement :type
                         (common-lisp:or m2ts-ebp-placement common-lisp:null)
                         :accessor %m2ts-settings-ebp-placement :initform
                         common-lisp:nil)
                        (ebp-lookahead-ms :initarg :ebp-lookahead-ms :type
                         (common-lisp:or |__integerMin0Max10000|
                                         common-lisp:null)
                         :accessor %m2ts-settings-ebp-lookahead-ms :initform
                         common-lisp:nil)
                        (ebp-audio-interval :initarg :ebp-audio-interval :type
                         (common-lisp:or m2ts-audio-interval common-lisp:null)
                         :accessor %m2ts-settings-ebp-audio-interval :initform
                         common-lisp:nil)
                        (ebif :initarg :ebif :type
                         (common-lisp:or m2ts-ebif-control common-lisp:null)
                         :accessor %m2ts-settings-ebif :initform
                         common-lisp:nil)
                        (dvb-teletext-pid :initarg :dvb-teletext-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-dvb-teletext-pid :initform
                         common-lisp:nil)
                        (dvb-tdt-settings :initarg :dvb-tdt-settings :type
                         (common-lisp:or dvb-tdt-settings common-lisp:null)
                         :accessor %m2ts-settings-dvb-tdt-settings :initform
                         common-lisp:nil)
                        (dvb-sub-pids :initarg :dvb-sub-pids :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-dvb-sub-pids :initform common-lisp:nil)
                        (dvb-sdt-settings :initarg :dvb-sdt-settings :type
                         (common-lisp:or dvb-sdt-settings common-lisp:null)
                         :accessor %m2ts-settings-dvb-sdt-settings :initform
                         common-lisp:nil)
                        (dvb-nit-settings :initarg :dvb-nit-settings :type
                         (common-lisp:or dvb-nit-settings common-lisp:null)
                         :accessor %m2ts-settings-dvb-nit-settings :initform
                         common-lisp:nil)
                        (cc-descriptor :initarg :cc-descriptor :type
                         (common-lisp:or m2ts-cc-descriptor common-lisp:null)
                         :accessor %m2ts-settings-cc-descriptor :initform
                         common-lisp:nil)
                        (buffer-model :initarg :buffer-model :type
                         (common-lisp:or m2ts-buffer-model common-lisp:null)
                         :accessor %m2ts-settings-buffer-model :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %m2ts-settings-bitrate :initform
                         common-lisp:nil)
                        (audio-stream-type :initarg :audio-stream-type :type
                         (common-lisp:or m2ts-audio-stream-type
                                         common-lisp:null)
                         :accessor %m2ts-settings-audio-stream-type :initform
                         common-lisp:nil)
                        (audio-pids :initarg :audio-pids :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-audio-pids :initform common-lisp:nil)
                        (audio-frames-per-pes :initarg :audio-frames-per-pes
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %m2ts-settings-audio-frames-per-pes
                         :initform common-lisp:nil)
                        (audio-buffer-model :initarg :audio-buffer-model :type
                         (common-lisp:or m2ts-audio-buffer-model
                                         common-lisp:null)
                         :accessor %m2ts-settings-audio-buffer-model :initform
                         common-lisp:nil)
                        (arib-captions-pid-control :initarg
                         :arib-captions-pid-control :type
                         (common-lisp:or m2ts-arib-captions-pid-control
                                         common-lisp:null)
                         :accessor %m2ts-settings-arib-captions-pid-control
                         :initform common-lisp:nil)
                        (arib-captions-pid :initarg :arib-captions-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m2ts-settings-arib-captions-pid :initform
                         common-lisp:nil)
                        (arib :initarg :arib :type
                         (common-lisp:or m2ts-arib common-lisp:null) :accessor
                         %m2ts-settings-arib :initform common-lisp:nil)
                        (absent-input-audio-behavior :initarg
                         :absent-input-audio-behavior :type
                         (common-lisp:or m2ts-absent-input-audio-behavior
                                         common-lisp:null)
                         :accessor %m2ts-settings-absent-input-audio-behavior
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'm2ts-settings 'make-m2ts-settings))
 (common-lisp:defun make-m2ts-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scte35preroll-pullup-milliseconds
                     video-pid transport-stream-id timed-metadata-pid
                     timed-metadata-behavior segmentation-time
                     segmentation-style segmentation-markers scte35pid
                     scte35control scte27pids rate-mode program-num pmt-pid
                     pmt-interval pcr-pid pcr-period pcr-control pat-interval
                     null-packet-bitrate nielsen-id3behavior klv-data-pids klv
                     fragment-time etv-signal-pid etv-platform-pid
                     es-rate-in-pes ecm-pid ebp-placement ebp-lookahead-ms
                     ebp-audio-interval ebif dvb-teletext-pid dvb-tdt-settings
                     dvb-sub-pids dvb-sdt-settings dvb-nit-settings
                     cc-descriptor buffer-model bitrate audio-stream-type
                     audio-pids audio-frames-per-pes audio-buffer-model
                     arib-captions-pid-control arib-captions-pid arib
                     absent-input-audio-behavior)
   (common-lisp:apply #'common-lisp:make-instance 'm2ts-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input m2ts-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input m2ts-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'absent-input-audio-behavior))
      (common-lisp:list
       (common-lisp:cons "AbsentInputAudioBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arib))
      (common-lisp:list
       (common-lisp:cons "Arib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arib-captions-pid))
      (common-lisp:list
       (common-lisp:cons "AribCaptionsPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'arib-captions-pid-control))
      (common-lisp:list
       (common-lisp:cons "AribCaptionsPidControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-buffer-model))
      (common-lisp:list
       (common-lisp:cons "AudioBufferModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-frames-per-pes))
      (common-lisp:list
       (common-lisp:cons "AudioFramesPerPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream-type))
      (common-lisp:list
       (common-lisp:cons "AudioStreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-model))
      (common-lisp:list
       (common-lisp:cons "BufferModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cc-descriptor))
      (common-lisp:list
       (common-lisp:cons "CcDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-nit-settings))
      (common-lisp:list
       (common-lisp:cons "DvbNitSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sdt-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSdtSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sub-pids))
      (common-lisp:list
       (common-lisp:cons "DvbSubPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-tdt-settings))
      (common-lisp:list
       (common-lisp:cons "DvbTdtSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-teletext-pid))
      (common-lisp:list
       (common-lisp:cons "DvbTeletextPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebif))
      (common-lisp:list
       (common-lisp:cons "Ebif"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-audio-interval))
      (common-lisp:list
       (common-lisp:cons "EbpAudioInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-lookahead-ms))
      (common-lisp:list
       (common-lisp:cons "EbpLookaheadMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-placement))
      (common-lisp:list
       (common-lisp:cons "EbpPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecm-pid))
      (common-lisp:list
       (common-lisp:cons "EcmPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'es-rate-in-pes))
      (common-lisp:list
       (common-lisp:cons "EsRateInPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-platform-pid))
      (common-lisp:list
       (common-lisp:cons "EtvPlatformPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-signal-pid))
      (common-lisp:list
       (common-lisp:cons "EtvSignalPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-time))
      (common-lisp:list
       (common-lisp:cons "FragmentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv))
      (common-lisp:list
       (common-lisp:cons "Klv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-data-pids))
      (common-lisp:list
       (common-lisp:cons "KlvDataPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3behavior))
      (common-lisp:list
       (common-lisp:cons "NielsenId3Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-packet-bitrate))
      (common-lisp:list
       (common-lisp:cons "NullPacketBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pat-interval))
      (common-lisp:list
       (common-lisp:cons "PatInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-control))
      (common-lisp:list
       (common-lisp:cons "PcrControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-period))
      (common-lisp:list
       (common-lisp:cons "PcrPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-interval))
      (common-lisp:list
       (common-lisp:cons "PmtInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-num))
      (common-lisp:list
       (common-lisp:cons "ProgramNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-mode))
      (common-lisp:list
       (common-lisp:cons "RateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte27pids))
      (common-lisp:list
       (common-lisp:cons "Scte27Pids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35control))
      (common-lisp:list
       (common-lisp:cons "Scte35Control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-markers))
      (common-lisp:list
       (common-lisp:cons "SegmentationMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-style))
      (common-lisp:list
       (common-lisp:cons "SegmentationStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-time))
      (common-lisp:list
       (common-lisp:cons "SegmentationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-behavior))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35preroll-pullup-milliseconds))
      (common-lisp:list
       (common-lisp:cons "Scte35PrerollPullupMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input m2ts-settings))
   common-lisp:nil))
(common-lisp:deftype m2ts-timed-metadata-behavior () 'common-lisp:string)
(common-lisp:deftype m3u8nielsen-id3behavior () 'common-lisp:string)
(common-lisp:deftype m3u8pcr-control () 'common-lisp:string)
(common-lisp:deftype m3u8scte35behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass m3u8settings common-lisp:nil
                       ((video-pid :initarg :video-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m3u8settings-video-pid :initform common-lisp:nil)
                        (transport-stream-id :initarg :transport-stream-id
                         :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %m3u8settings-transport-stream-id :initform
                         common-lisp:nil)
                        (timed-metadata-pid :initarg :timed-metadata-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m3u8settings-timed-metadata-pid :initform
                         common-lisp:nil)
                        (timed-metadata-behavior :initarg
                         :timed-metadata-behavior :type
                         (common-lisp:or m3u8timed-metadata-behavior
                                         common-lisp:null)
                         :accessor %m3u8settings-timed-metadata-behavior
                         :initform common-lisp:nil)
                        (scte35pid :initarg :scte35pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m3u8settings-scte35pid :initform common-lisp:nil)
                        (scte35behavior :initarg :scte35behavior :type
                         (common-lisp:or m3u8scte35behavior common-lisp:null)
                         :accessor %m3u8settings-scte35behavior :initform
                         common-lisp:nil)
                        (program-num :initarg :program-num :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %m3u8settings-program-num :initform
                         common-lisp:nil)
                        (pmt-pid :initarg :pmt-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m3u8settings-pmt-pid :initform common-lisp:nil)
                        (pmt-interval :initarg :pmt-interval :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor %m3u8settings-pmt-interval :initform
                         common-lisp:nil)
                        (pcr-pid :initarg :pcr-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m3u8settings-pcr-pid :initform common-lisp:nil)
                        (pcr-period :initarg :pcr-period :type
                         (common-lisp:or |__integerMin0Max500|
                                         common-lisp:null)
                         :accessor %m3u8settings-pcr-period :initform
                         common-lisp:nil)
                        (pcr-control :initarg :pcr-control :type
                         (common-lisp:or m3u8pcr-control common-lisp:null)
                         :accessor %m3u8settings-pcr-control :initform
                         common-lisp:nil)
                        (pat-interval :initarg :pat-interval :type
                         (common-lisp:or |__integerMin0Max1000|
                                         common-lisp:null)
                         :accessor %m3u8settings-pat-interval :initform
                         common-lisp:nil)
                        (nielsen-id3behavior :initarg :nielsen-id3behavior
                         :type
                         (common-lisp:or m3u8nielsen-id3behavior
                                         common-lisp:null)
                         :accessor %m3u8settings-nielsen-id3behavior :initform
                         common-lisp:nil)
                        (ecm-pid :initarg :ecm-pid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m3u8settings-ecm-pid :initform common-lisp:nil)
                        (audio-pids :initarg :audio-pids :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %m3u8settings-audio-pids :initform common-lisp:nil)
                        (audio-frames-per-pes :initarg :audio-frames-per-pes
                         :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %m3u8settings-audio-frames-per-pes :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'm3u8settings 'make-m3u8settings))
 (common-lisp:defun make-m3u8settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-pid transport-stream-id
                     timed-metadata-pid timed-metadata-behavior scte35pid
                     scte35behavior program-num pmt-pid pmt-interval pcr-pid
                     pcr-period pcr-control pat-interval nielsen-id3behavior
                     ecm-pid audio-pids audio-frames-per-pes)
   (common-lisp:apply #'common-lisp:make-instance 'm3u8settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input m3u8settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input m3u8settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-frames-per-pes))
      (common-lisp:list
       (common-lisp:cons "AudioFramesPerPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecm-pid))
      (common-lisp:list
       (common-lisp:cons "EcmPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3behavior))
      (common-lisp:list
       (common-lisp:cons "NielsenId3Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pat-interval))
      (common-lisp:list
       (common-lisp:cons "PatInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-control))
      (common-lisp:list
       (common-lisp:cons "PcrControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-period))
      (common-lisp:list
       (common-lisp:cons "PcrPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-interval))
      (common-lisp:list
       (common-lisp:cons "PmtInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-num))
      (common-lisp:list
       (common-lisp:cons "ProgramNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35behavior))
      (common-lisp:list
       (common-lisp:cons "Scte35Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-behavior))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input m3u8settings))
   common-lisp:nil))
(common-lisp:deftype m3u8timed-metadata-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-create-settings common-lisp:nil
                       ((maintenance-start-time :initarg
                         :maintenance-start-time :type
                         (common-lisp:or |__stringPattern010920300|
                                         common-lisp:null)
                         :accessor
                         %maintenance-create-settings-maintenance-start-time
                         :initform common-lisp:nil)
                        (maintenance-day :initarg :maintenance-day :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor %maintenance-create-settings-maintenance-day
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-create-settings
                    'make-maintenance-create-settings))
 (common-lisp:defun make-maintenance-create-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maintenance-start-time maintenance-day)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-create-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-create-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-create-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-create-settings))
   common-lisp:nil))
(common-lisp:deftype maintenance-day () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass maintenance-status common-lisp:nil
                       ((maintenance-start-time :initarg
                         :maintenance-start-time :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %maintenance-status-maintenance-start-time :initform
                         common-lisp:nil)
                        (maintenance-scheduled-date :initarg
                         :maintenance-scheduled-date :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %maintenance-status-maintenance-scheduled-date
                         :initform common-lisp:nil)
                        (maintenance-deadline :initarg :maintenance-deadline
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %maintenance-status-maintenance-deadline
                         :initform common-lisp:nil)
                        (maintenance-day :initarg :maintenance-day :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor %maintenance-status-maintenance-day
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-status 'make-maintenance-status))
 (common-lisp:defun make-maintenance-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maintenance-start-time
                     maintenance-scheduled-date maintenance-deadline
                     maintenance-day)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maintenance-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maintenance-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-deadline))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDeadline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-scheduled-date))
      (common-lisp:list
       (common-lisp:cons "MaintenanceScheduledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maintenance-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass maintenance-update-settings common-lisp:nil
                       ((maintenance-start-time :initarg
                         :maintenance-start-time :type
                         (common-lisp:or |__stringPattern010920300|
                                         common-lisp:null)
                         :accessor
                         %maintenance-update-settings-maintenance-start-time
                         :initform common-lisp:nil)
                        (maintenance-scheduled-date :initarg
                         :maintenance-scheduled-date :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %maintenance-update-settings-maintenance-scheduled-date
                         :initform common-lisp:nil)
                        (maintenance-day :initarg :maintenance-day :type
                         (common-lisp:or maintenance-day common-lisp:null)
                         :accessor %maintenance-update-settings-maintenance-day
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'maintenance-update-settings
                    'make-maintenance-update-settings))
 (common-lisp:defun make-maintenance-update-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maintenance-start-time
                     maintenance-scheduled-date maintenance-day)
   (common-lisp:apply #'common-lisp:make-instance 'maintenance-update-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-update-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-update-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-scheduled-date))
      (common-lisp:list
       (common-lisp:cons "MaintenanceScheduledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-update-settings))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass media-connect-flow common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-connect-flow-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'media-connect-flow 'make-media-connect-flow))
 (common-lisp:defun make-media-connect-flow
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'media-connect-flow
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-connect-flow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-connect-flow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-connect-flow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-connect-flow-request common-lisp:nil
                       ((flow-arn :initarg :flow-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %media-connect-flow-request-flow-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'media-connect-flow-request
                    'make-media-connect-flow-request))
 (common-lisp:defun make-media-connect-flow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flow-arn)
   (common-lisp:apply #'common-lisp:make-instance 'media-connect-flow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-connect-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-connect-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-connect-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-package-group-settings common-lisp:nil
                       ((destination :initarg :destination :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor %media-package-group-settings-destination
                         :initform
                         (common-lisp:error ":destination is required"))))
 (common-lisp:export
  (common-lisp:list 'media-package-group-settings
                    'make-media-package-group-settings))
 (common-lisp:defun make-media-package-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination)
   (common-lisp:apply #'common-lisp:make-instance 'media-package-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-package-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-package-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-package-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-package-output-destination-settings
                       common-lisp:nil
                       ((channel-id :initarg :channel-id :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         %media-package-output-destination-settings-channel-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'media-package-output-destination-settings
                    'make-media-package-output-destination-settings))
 (common-lisp:defun make-media-package-output-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-package-output-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass media-package-output-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'media-package-output-settings
                    'make-media-package-output-settings))
 (common-lisp:defun make-media-package-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'media-package-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass motion-graphics-activate-schedule-action-settings
                       common-lisp:nil
                       ((username :initarg :username :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %motion-graphics-activate-schedule-action-settings-username
                         :initform common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %motion-graphics-activate-schedule-action-settings-url
                         :initform common-lisp:nil)
                        (password-param :initarg :password-param :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %motion-graphics-activate-schedule-action-settings-password-param
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or |__longMin0Max86400000|
                                         common-lisp:null)
                         :accessor
                         %motion-graphics-activate-schedule-action-settings-duration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-activate-schedule-action-settings
                    'make-motion-graphics-activate-schedule-action-settings))
 (common-lisp:defun make-motion-graphics-activate-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key username url password-param duration)
   (common-lisp:apply #'common-lisp:make-instance
                      'motion-graphics-activate-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-activate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-activate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-activate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass motion-graphics-configuration common-lisp:nil
                       ((motion-graphics-settings :initarg
                         :motion-graphics-settings :type
                         (common-lisp:or motion-graphics-settings
                                         common-lisp:null)
                         :accessor
                         %motion-graphics-configuration-motion-graphics-settings
                         :initform
                         (common-lisp:error
                          ":motion-graphics-settings is required"))
                        (motion-graphics-insertion :initarg
                         :motion-graphics-insertion :type
                         (common-lisp:or motion-graphics-insertion
                                         common-lisp:null)
                         :accessor
                         %motion-graphics-configuration-motion-graphics-insertion
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-configuration
                    'make-motion-graphics-configuration))
 (common-lisp:defun make-motion-graphics-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key motion-graphics-settings
                     motion-graphics-insertion)
   (common-lisp:apply #'common-lisp:make-instance
                      'motion-graphics-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-insertion))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-settings))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass motion-graphics-deactivate-schedule-action-settings
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'motion-graphics-deactivate-schedule-action-settings
                    'make-motion-graphics-deactivate-schedule-action-settings))
 (common-lisp:defun make-motion-graphics-deactivate-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'motion-graphics-deactivate-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-deactivate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-deactivate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-deactivate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype motion-graphics-insertion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass motion-graphics-settings common-lisp:nil
                       ((html-motion-graphics-settings :initarg
                         :html-motion-graphics-settings :type
                         (common-lisp:or html-motion-graphics-settings
                                         common-lisp:null)
                         :accessor
                         %motion-graphics-settings-html-motion-graphics-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-settings 'make-motion-graphics-settings))
 (common-lisp:defun make-motion-graphics-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key html-motion-graphics-settings)
   (common-lisp:apply #'common-lisp:make-instance 'motion-graphics-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'html-motion-graphics-settings))
      (common-lisp:list
       (common-lisp:cons "HtmlMotionGraphicsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-settings))
   common-lisp:nil))
(common-lisp:deftype mp2coding-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mp2settings common-lisp:nil
                       ((sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %mp2settings-sample-rate :initform common-lisp:nil)
                        (coding-mode :initarg :coding-mode :type
                         (common-lisp:or mp2coding-mode common-lisp:null)
                         :accessor %mp2settings-coding-mode :initform
                         common-lisp:nil)
                        (bitrate :initarg :bitrate :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %mp2settings-bitrate :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mp2settings 'make-mp2settings))
 (common-lisp:defun make-mp2settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-rate coding-mode bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'mp2settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mp2settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mp2settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mp2settings))
   common-lisp:nil))
(common-lisp:deftype mpeg2adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype mpeg2color-metadata () 'common-lisp:string)
(common-lisp:deftype mpeg2color-space () 'common-lisp:string)
(common-lisp:deftype mpeg2display-ratio () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mpeg2filter-settings common-lisp:nil
                       ((temporal-filter-settings :initarg
                         :temporal-filter-settings :type
                         (common-lisp:or temporal-filter-settings
                                         common-lisp:null)
                         :accessor
                         %mpeg2filter-settings-temporal-filter-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'mpeg2filter-settings 'make-mpeg2filter-settings))
 (common-lisp:defun make-mpeg2filter-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key temporal-filter-settings)
   (common-lisp:apply #'common-lisp:make-instance 'mpeg2filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mpeg2filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mpeg2filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-filter-settings))
      (common-lisp:list
       (common-lisp:cons "TemporalFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mpeg2filter-settings))
   common-lisp:nil))
(common-lisp:deftype mpeg2gop-size-units () 'common-lisp:string)
(common-lisp:deftype mpeg2scan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass mpeg2settings common-lisp:nil
                       ((timecode-burnin-settings :initarg
                         :timecode-burnin-settings :type
                         (common-lisp:or timecode-burnin-settings
                                         common-lisp:null)
                         :accessor %mpeg2settings-timecode-burnin-settings
                         :initform common-lisp:nil)
                        (timecode-insertion :initarg :timecode-insertion :type
                         (common-lisp:or mpeg2timecode-insertion-behavior
                                         common-lisp:null)
                         :accessor %mpeg2settings-timecode-insertion :initform
                         common-lisp:nil)
                        (subgop-length :initarg :subgop-length :type
                         (common-lisp:or mpeg2sub-gop-length common-lisp:null)
                         :accessor %mpeg2settings-subgop-length :initform
                         common-lisp:nil)
                        (scan-type :initarg :scan-type :type
                         (common-lisp:or mpeg2scan-type common-lisp:null)
                         :accessor %mpeg2settings-scan-type :initform
                         common-lisp:nil)
                        (gop-size-units :initarg :gop-size-units :type
                         (common-lisp:or mpeg2gop-size-units common-lisp:null)
                         :accessor %mpeg2settings-gop-size-units :initform
                         common-lisp:nil)
                        (gop-size :initarg :gop-size :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %mpeg2settings-gop-size :initform common-lisp:nil)
                        (gop-num-bframes :initarg :gop-num-bframes :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor %mpeg2settings-gop-num-bframes :initform
                         common-lisp:nil)
                        (gop-closed-cadence :initarg :gop-closed-cadence :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %mpeg2settings-gop-closed-cadence :initform
                         common-lisp:nil)
                        (framerate-numerator :initarg :framerate-numerator
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %mpeg2settings-framerate-numerator :initform
                         (common-lisp:error
                          ":framerate-numerator is required"))
                        (framerate-denominator :initarg :framerate-denominator
                         :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %mpeg2settings-framerate-denominator
                         :initform
                         (common-lisp:error
                          ":framerate-denominator is required"))
                        (fixed-afd :initarg :fixed-afd :type
                         (common-lisp:or fixed-afd common-lisp:null) :accessor
                         %mpeg2settings-fixed-afd :initform common-lisp:nil)
                        (filter-settings :initarg :filter-settings :type
                         (common-lisp:or mpeg2filter-settings common-lisp:null)
                         :accessor %mpeg2settings-filter-settings :initform
                         common-lisp:nil)
                        (display-aspect-ratio :initarg :display-aspect-ratio
                         :type
                         (common-lisp:or mpeg2display-ratio common-lisp:null)
                         :accessor %mpeg2settings-display-aspect-ratio
                         :initform common-lisp:nil)
                        (color-space :initarg :color-space :type
                         (common-lisp:or mpeg2color-space common-lisp:null)
                         :accessor %mpeg2settings-color-space :initform
                         common-lisp:nil)
                        (color-metadata :initarg :color-metadata :type
                         (common-lisp:or mpeg2color-metadata common-lisp:null)
                         :accessor %mpeg2settings-color-metadata :initform
                         common-lisp:nil)
                        (afd-signaling :initarg :afd-signaling :type
                         (common-lisp:or afd-signaling common-lisp:null)
                         :accessor %mpeg2settings-afd-signaling :initform
                         common-lisp:nil)
                        (adaptive-quantization :initarg :adaptive-quantization
                         :type
                         (common-lisp:or mpeg2adaptive-quantization
                                         common-lisp:null)
                         :accessor %mpeg2settings-adaptive-quantization
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'mpeg2settings 'make-mpeg2settings))
 (common-lisp:defun make-mpeg2settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timecode-burnin-settings
                     timecode-insertion subgop-length scan-type gop-size-units
                     gop-size gop-num-bframes gop-closed-cadence
                     framerate-numerator framerate-denominator fixed-afd
                     filter-settings display-aspect-ratio color-space
                     color-metadata afd-signaling adaptive-quantization)
   (common-lisp:apply #'common-lisp:make-instance 'mpeg2settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mpeg2settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mpeg2settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-metadata))
      (common-lisp:list
       (common-lisp:cons "ColorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space))
      (common-lisp:list
       (common-lisp:cons "ColorSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-aspect-ratio))
      (common-lisp:list
       (common-lisp:cons "DisplayAspectRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-settings))
      (common-lisp:list
       (common-lisp:cons "FilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-afd))
      (common-lisp:list
       (common-lisp:cons "FixedAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-num-bframes))
      (common-lisp:list
       (common-lisp:cons "GopNumBFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subgop-length))
      (common-lisp:list
       (common-lisp:cons "SubgopLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-insertion))
      (common-lisp:list
       (common-lisp:cons "TimecodeInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mpeg2settings))
   common-lisp:nil))
(common-lisp:deftype mpeg2sub-gop-length () 'common-lisp:string)
(common-lisp:deftype mpeg2timecode-insertion-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ms-smooth-group-settings common-lisp:nil
                       ((timestamp-offset-mode :initarg :timestamp-offset-mode
                         :type
                         (common-lisp:or smooth-group-timestamp-offset-mode
                                         common-lisp:null)
                         :accessor
                         %ms-smooth-group-settings-timestamp-offset-mode
                         :initform common-lisp:nil)
                        (timestamp-offset :initarg :timestamp-offset :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ms-smooth-group-settings-timestamp-offset :initform
                         common-lisp:nil)
                        (stream-manifest-behavior :initarg
                         :stream-manifest-behavior :type
                         (common-lisp:or smooth-group-stream-manifest-behavior
                                         common-lisp:null)
                         :accessor
                         %ms-smooth-group-settings-stream-manifest-behavior
                         :initform common-lisp:nil)
                        (sparse-track-type :initarg :sparse-track-type :type
                         (common-lisp:or smooth-group-sparse-track-type
                                         common-lisp:null)
                         :accessor %ms-smooth-group-settings-sparse-track-type
                         :initform common-lisp:nil)
                        (send-delay-ms :initarg :send-delay-ms :type
                         (common-lisp:or |__integerMin0Max10000|
                                         common-lisp:null)
                         :accessor %ms-smooth-group-settings-send-delay-ms
                         :initform common-lisp:nil)
                        (segmentation-mode :initarg :segmentation-mode :type
                         (common-lisp:or smooth-group-segmentation-mode
                                         common-lisp:null)
                         :accessor %ms-smooth-group-settings-segmentation-mode
                         :initform common-lisp:nil)
                        (restart-delay :initarg :restart-delay :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %ms-smooth-group-settings-restart-delay
                         :initform common-lisp:nil)
                        (num-retries :initarg :num-retries :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %ms-smooth-group-settings-num-retries
                         :initform common-lisp:nil)
                        (input-loss-action :initarg :input-loss-action :type
                         (common-lisp:or input-loss-action-for-ms-smooth-out
                                         common-lisp:null)
                         :accessor %ms-smooth-group-settings-input-loss-action
                         :initform common-lisp:nil)
                        (fragment-length :initarg :fragment-length :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %ms-smooth-group-settings-fragment-length
                         :initform common-lisp:nil)
                        (filecache-duration :initarg :filecache-duration :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %ms-smooth-group-settings-filecache-duration
                         :initform common-lisp:nil)
                        (event-stop-behavior :initarg :event-stop-behavior
                         :type
                         (common-lisp:or smooth-group-event-stop-behavior
                                         common-lisp:null)
                         :accessor
                         %ms-smooth-group-settings-event-stop-behavior
                         :initform common-lisp:nil)
                        (event-id-mode :initarg :event-id-mode :type
                         (common-lisp:or smooth-group-event-id-mode
                                         common-lisp:null)
                         :accessor %ms-smooth-group-settings-event-id-mode
                         :initform common-lisp:nil)
                        (event-id :initarg :event-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ms-smooth-group-settings-event-id :initform
                         common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor %ms-smooth-group-settings-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (connection-retry-interval :initarg
                         :connection-retry-interval :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %ms-smooth-group-settings-connection-retry-interval
                         :initform common-lisp:nil)
                        (certificate-mode :initarg :certificate-mode :type
                         (common-lisp:or smooth-group-certificate-mode
                                         common-lisp:null)
                         :accessor %ms-smooth-group-settings-certificate-mode
                         :initform common-lisp:nil)
                        (audio-only-timecode-control :initarg
                         :audio-only-timecode-control :type
                         (common-lisp:or
                          smooth-group-audio-only-timecode-control
                          common-lisp:null)
                         :accessor
                         %ms-smooth-group-settings-audio-only-timecode-control
                         :initform common-lisp:nil)
                        (acquisition-point-id :initarg :acquisition-point-id
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %ms-smooth-group-settings-acquisition-point-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ms-smooth-group-settings 'make-ms-smooth-group-settings))
 (common-lisp:defun make-ms-smooth-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp-offset-mode timestamp-offset
                     stream-manifest-behavior sparse-track-type send-delay-ms
                     segmentation-mode restart-delay num-retries
                     input-loss-action fragment-length filecache-duration
                     event-stop-behavior event-id-mode event-id destination
                     connection-retry-interval certificate-mode
                     audio-only-timecode-control acquisition-point-id)
   (common-lisp:apply #'common-lisp:make-instance 'ms-smooth-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acquisition-point-id))
      (common-lisp:list
       (common-lisp:cons "AcquisitionPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-only-timecode-control))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyTimecodeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "CertificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id-mode))
      (common-lisp:list
       (common-lisp:cons "EventIdMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stop-behavior))
      (common-lisp:list
       (common-lisp:cons "EventStopBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-length))
      (common-lisp:list
       (common-lisp:cons "FragmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-mode))
      (common-lisp:list
       (common-lisp:cons "SegmentationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'send-delay-ms))
      (common-lisp:list
       (common-lisp:cons "SendDelayMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sparse-track-type))
      (common-lisp:list
       (common-lisp:cons "SparseTrackType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-manifest-behavior))
      (common-lisp:list
       (common-lisp:cons "StreamManifestBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-offset))
      (common-lisp:list
       (common-lisp:cons "TimestampOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-offset-mode))
      (common-lisp:list
       (common-lisp:cons "TimestampOffsetMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   common-lisp:nil))
(common-lisp:deftype ms-smooth-h265packaging-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ms-smooth-output-settings common-lisp:nil
                       ((name-modifier :initarg :name-modifier :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %ms-smooth-output-settings-name-modifier :initform
                         common-lisp:nil)
                        (h265packaging-type :initarg :h265packaging-type :type
                         (common-lisp:or ms-smooth-h265packaging-type
                                         common-lisp:null)
                         :accessor
                         %ms-smooth-output-settings-h265packaging-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ms-smooth-output-settings
                    'make-ms-smooth-output-settings))
 (common-lisp:defun make-ms-smooth-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name-modifier h265packaging-type)
   (common-lisp:apply #'common-lisp:make-instance 'ms-smooth-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h265packaging-type))
      (common-lisp:list
       (common-lisp:cons "H265PackagingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %multiplex-tags :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor %multiplex-state :initform common-lisp:nil)
                        (program-count :initarg :program-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %multiplex-program-count :initform
                         common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %multiplex-pipelines-running-count :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-name :initform common-lisp:nil)
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor %multiplex-multiplex-settings :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-id :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfMultiplexOutputDestination|
                                         common-lisp:null)
                         :accessor %multiplex-destinations :initform
                         common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %multiplex-availability-zones :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'multiplex 'make-multiplex))
 (common-lisp:defun make-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags state program-count
                     pipelines-running-count name multiplex-settings id
                     destinations availability-zones arn)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-configuration-validation-error common-lisp:nil
                       ((validation-errors :initarg :validation-errors :type
                         (common-lisp:or |__listOfValidationError|
                                         common-lisp:null)
                         :accessor
                         %multiplex-configuration-validation-error-validation-errors
                         :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-configuration-validation-error-message
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-configuration-validation-error
                    'make-multiplex-configuration-validation-error))
 (common-lisp:defun make-multiplex-configuration-validation-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation-errors message)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-configuration-validation-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-configuration-validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-configuration-validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "ValidationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-configuration-validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-group-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'multiplex-group-settings 'make-multiplex-group-settings))
 (common-lisp:defun make-multiplex-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-media-connect-output-destination-settings
                       common-lisp:nil
                       ((entitlement-arn :initarg :entitlement-arn :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         %multiplex-media-connect-output-destination-settings-entitlement-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-media-connect-output-destination-settings
                    'make-multiplex-media-connect-output-destination-settings))
 (common-lisp:defun make-multiplex-media-connect-output-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entitlement-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-media-connect-output-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-media-connect-output-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-media-connect-output-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-media-connect-output-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-output-destination common-lisp:nil
                       ((media-connect-settings :initarg
                         :media-connect-settings :type
                         (common-lisp:or
                          multiplex-media-connect-output-destination-settings
                          common-lisp:null)
                         :accessor
                         %multiplex-output-destination-media-connect-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-output-destination
                    'make-multiplex-output-destination))
 (common-lisp:defun make-multiplex-output-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key media-connect-settings)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-output-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-connect-settings))
      (common-lisp:list
       (common-lisp:cons "MediaConnectSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-output-settings common-lisp:nil
                       ((destination :initarg :destination :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor %multiplex-output-settings-destination
                         :initform
                         (common-lisp:error ":destination is required"))))
 (common-lisp:export
  (common-lisp:list 'multiplex-output-settings
                    'make-multiplex-output-settings))
 (common-lisp:defun make-multiplex-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program common-lisp:nil
                       ((program-name :initarg :program-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-program-program-name :initform
                         common-lisp:nil)
                        (pipeline-details :initarg :pipeline-details :type
                         (common-lisp:or
                          |__listOfMultiplexProgramPipelineDetail|
                          common-lisp:null)
                         :accessor %multiplex-program-pipeline-details
                         :initform common-lisp:nil)
                        (packet-identifiers-map :initarg
                         :packet-identifiers-map :type
                         (common-lisp:or
                          multiplex-program-packet-identifiers-map
                          common-lisp:null)
                         :accessor %multiplex-program-packet-identifiers-map
                         :initform common-lisp:nil)
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         %multiplex-program-multiplex-program-settings
                         :initform common-lisp:nil)
                        (channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-program-channel-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program 'make-multiplex-program))
 (common-lisp:defun make-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key program-name pipeline-details
                     packet-identifiers-map multiplex-program-settings
                     channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-program
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex-program))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex-program))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'packet-identifiers-map))
      (common-lisp:list
       (common-lisp:cons "PacketIdentifiersMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex-program))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-channel-destination-settings
                       common-lisp:nil
                       ((program-name :initarg :program-name :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         %multiplex-program-channel-destination-settings-program-name
                         :initform common-lisp:nil)
                        (multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__stringMin1| common-lisp:null)
                         :accessor
                         %multiplex-program-channel-destination-settings-multiplex-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-channel-destination-settings
                    'make-multiplex-program-channel-destination-settings))
 (common-lisp:defun make-multiplex-program-channel-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key program-name multiplex-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-program-channel-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-channel-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-channel-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-id))
      (common-lisp:list
       (common-lisp:cons "MultiplexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-channel-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-packet-identifiers-map common-lisp:nil
                       ((video-pid :initarg :video-pid :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-video-pid
                         :initform common-lisp:nil)
                        (timed-metadata-pid :initarg :timed-metadata-pid :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-timed-metadata-pid
                         :initform common-lisp:nil)
                        (scte35pid :initarg :scte35pid :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-scte35pid
                         :initform common-lisp:nil)
                        (scte27pids :initarg :scte27pids :type
                         (common-lisp:or |__listOf__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-scte27pids
                         :initform common-lisp:nil)
                        (private-metadata-pid :initarg :private-metadata-pid
                         :type (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-private-metadata-pid
                         :initform common-lisp:nil)
                        (pmt-pid :initarg :pmt-pid :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-pmt-pid
                         :initform common-lisp:nil)
                        (pcr-pid :initarg :pcr-pid :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-pcr-pid
                         :initform common-lisp:nil)
                        (klv-data-pids :initarg :klv-data-pids :type
                         (common-lisp:or |__listOf__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-klv-data-pids
                         :initform common-lisp:nil)
                        (etv-signal-pid :initarg :etv-signal-pid :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-etv-signal-pid
                         :initform common-lisp:nil)
                        (etv-platform-pid :initarg :etv-platform-pid :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-etv-platform-pid
                         :initform common-lisp:nil)
                        (dvb-teletext-pid :initarg :dvb-teletext-pid :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-dvb-teletext-pid
                         :initform common-lisp:nil)
                        (dvb-sub-pids :initarg :dvb-sub-pids :type
                         (common-lisp:or |__listOf__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-dvb-sub-pids
                         :initform common-lisp:nil)
                        (audio-pids :initarg :audio-pids :type
                         (common-lisp:or |__listOf__integer| common-lisp:null)
                         :accessor
                         %multiplex-program-packet-identifiers-map-audio-pids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-packet-identifiers-map
                    'make-multiplex-program-packet-identifiers-map))
 (common-lisp:defun make-multiplex-program-packet-identifiers-map
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-pid timed-metadata-pid scte35pid
                     scte27pids private-metadata-pid pmt-pid pcr-pid
                     klv-data-pids etv-signal-pid etv-platform-pid
                     dvb-teletext-pid dvb-sub-pids audio-pids)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-program-packet-identifiers-map
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-packet-identifiers-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-packet-identifiers-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sub-pids))
      (common-lisp:list
       (common-lisp:cons "DvbSubPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-teletext-pid))
      (common-lisp:list
       (common-lisp:cons "DvbTeletextPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-platform-pid))
      (common-lisp:list
       (common-lisp:cons "EtvPlatformPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-signal-pid))
      (common-lisp:list
       (common-lisp:cons "EtvSignalPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-data-pids))
      (common-lisp:list
       (common-lisp:cons "KlvDataPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "PrivateMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte27pids))
      (common-lisp:list
       (common-lisp:cons "Scte27Pids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-packet-identifiers-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-pipeline-detail common-lisp:nil
                       ((pipeline-id :initarg :pipeline-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-program-pipeline-detail-pipeline-id
                         :initform common-lisp:nil)
                        (active-channel-pipeline :initarg
                         :active-channel-pipeline :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-program-pipeline-detail-active-channel-pipeline
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-pipeline-detail
                    'make-multiplex-program-pipeline-detail))
 (common-lisp:defun make-multiplex-program-pipeline-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-id active-channel-pipeline)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-program-pipeline-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-pipeline-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-pipeline-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-channel-pipeline))
      (common-lisp:list
       (common-lisp:cons "ActiveChannelPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-pipeline-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-service-descriptor common-lisp:nil
                       ((service-name :initarg :service-name :type
                         (common-lisp:or |__stringMax256| common-lisp:null)
                         :accessor
                         %multiplex-program-service-descriptor-service-name
                         :initform
                         (common-lisp:error ":service-name is required"))
                        (provider-name :initarg :provider-name :type
                         (common-lisp:or |__stringMax256| common-lisp:null)
                         :accessor
                         %multiplex-program-service-descriptor-provider-name
                         :initform
                         (common-lisp:error ":provider-name is required"))))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-service-descriptor
                    'make-multiplex-program-service-descriptor))
 (common-lisp:defun make-multiplex-program-service-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name provider-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-program-service-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-service-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-service-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-service-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-settings common-lisp:nil
                       ((video-settings :initarg :video-settings :type
                         (common-lisp:or multiplex-video-settings
                                         common-lisp:null)
                         :accessor %multiplex-program-settings-video-settings
                         :initform common-lisp:nil)
                        (service-descriptor :initarg :service-descriptor :type
                         (common-lisp:or multiplex-program-service-descriptor
                                         common-lisp:null)
                         :accessor
                         %multiplex-program-settings-service-descriptor
                         :initform common-lisp:nil)
                        (program-number :initarg :program-number :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %multiplex-program-settings-program-number
                         :initform
                         (common-lisp:error ":program-number is required"))
                        (preferred-channel-pipeline :initarg
                         :preferred-channel-pipeline :type
                         (common-lisp:or preferred-channel-pipeline
                                         common-lisp:null)
                         :accessor
                         %multiplex-program-settings-preferred-channel-pipeline
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-settings
                    'make-multiplex-program-settings))
 (common-lisp:defun make-multiplex-program-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-settings service-descriptor
                     program-number preferred-channel-pipeline)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-program-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-channel-pipeline))
      (common-lisp:list
       (common-lisp:cons "PreferredChannelPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-number))
      (common-lisp:list
       (common-lisp:cons "ProgramNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-descriptor))
      (common-lisp:list
       (common-lisp:cons "ServiceDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-settings))
      (common-lisp:list
       (common-lisp:cons "VideoSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-program-summary common-lisp:nil
                       ((program-name :initarg :program-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-program-summary-program-name :initform
                         common-lisp:nil)
                        (channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-program-summary-channel-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-summary
                    'make-multiplex-program-summary))
 (common-lisp:defun make-multiplex-program-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key program-name channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-program-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-settings common-lisp:nil
                       ((transport-stream-reserved-bitrate :initarg
                         :transport-stream-reserved-bitrate :type
                         (common-lisp:or |__integerMin0Max100000000|
                                         common-lisp:null)
                         :accessor
                         %multiplex-settings-transport-stream-reserved-bitrate
                         :initform common-lisp:nil)
                        (transport-stream-id :initarg :transport-stream-id
                         :type
                         (common-lisp:or |__integerMin0Max65535|
                                         common-lisp:null)
                         :accessor %multiplex-settings-transport-stream-id
                         :initform
                         (common-lisp:error
                          ":transport-stream-id is required"))
                        (transport-stream-bitrate :initarg
                         :transport-stream-bitrate :type
                         (common-lisp:or |__integerMin1000000Max100000000|
                                         common-lisp:null)
                         :accessor %multiplex-settings-transport-stream-bitrate
                         :initform
                         (common-lisp:error
                          ":transport-stream-bitrate is required"))
                        (maximum-video-buffer-delay-milliseconds :initarg
                         :maximum-video-buffer-delay-milliseconds :type
                         (common-lisp:or |__integerMin800Max3000|
                                         common-lisp:null)
                         :accessor
                         %multiplex-settings-maximum-video-buffer-delay-milliseconds
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-settings 'make-multiplex-settings))
 (common-lisp:defun make-multiplex-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transport-stream-reserved-bitrate
                     transport-stream-id transport-stream-bitrate
                     maximum-video-buffer-delay-milliseconds)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-video-buffer-delay-milliseconds))
      (common-lisp:list
       (common-lisp:cons "MaximumVideoBufferDelayMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-stream-bitrate))
      (common-lisp:list
       (common-lisp:cons "TransportStreamBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-stream-reserved-bitrate))
      (common-lisp:list
       (common-lisp:cons "TransportStreamReservedBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-settings-summary common-lisp:nil
                       ((transport-stream-bitrate :initarg
                         :transport-stream-bitrate :type
                         (common-lisp:or |__integerMin1000000Max100000000|
                                         common-lisp:null)
                         :accessor
                         %multiplex-settings-summary-transport-stream-bitrate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-settings-summary
                    'make-multiplex-settings-summary))
 (common-lisp:defun make-multiplex-settings-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transport-stream-bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-settings-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-stream-bitrate))
      (common-lisp:list
       (common-lisp:cons "TransportStreamBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-settings-summary))
   common-lisp:nil))
(common-lisp:deftype multiplex-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass multiplex-statmux-video-settings common-lisp:nil
                       ((priority :initarg :priority :type
                         (common-lisp:or |__integerMinNegative5Max5|
                                         common-lisp:null)
                         :accessor %multiplex-statmux-video-settings-priority
                         :initform common-lisp:nil)
                        (minimum-bitrate :initarg :minimum-bitrate :type
                         (common-lisp:or |__integerMin100000Max100000000|
                                         common-lisp:null)
                         :accessor
                         %multiplex-statmux-video-settings-minimum-bitrate
                         :initform common-lisp:nil)
                        (maximum-bitrate :initarg :maximum-bitrate :type
                         (common-lisp:or |__integerMin100000Max100000000|
                                         common-lisp:null)
                         :accessor
                         %multiplex-statmux-video-settings-maximum-bitrate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-statmux-video-settings
                    'make-multiplex-statmux-video-settings))
 (common-lisp:defun make-multiplex-statmux-video-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key priority minimum-bitrate maximum-bitrate)
   (common-lisp:apply #'common-lisp:make-instance
                      'multiplex-statmux-video-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-statmux-video-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-statmux-video-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaximumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MinimumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-statmux-video-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-summary common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %multiplex-summary-tags :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor %multiplex-summary-state :initform
                         common-lisp:nil)
                        (program-count :initarg :program-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %multiplex-summary-program-count :initform
                         common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %multiplex-summary-pipelines-running-count
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-summary-name :initform common-lisp:nil)
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or multiplex-settings-summary
                                         common-lisp:null)
                         :accessor %multiplex-summary-multiplex-settings
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-summary-id :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %multiplex-summary-availability-zones
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %multiplex-summary-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-summary 'make-multiplex-summary))
 (common-lisp:defun make-multiplex-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags state program-count
                     pipelines-running-count name multiplex-settings id
                     availability-zones arn)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass multiplex-video-settings common-lisp:nil
                       ((statmux-settings :initarg :statmux-settings :type
                         (common-lisp:or multiplex-statmux-video-settings
                                         common-lisp:null)
                         :accessor %multiplex-video-settings-statmux-settings
                         :initform common-lisp:nil)
                        (constant-bitrate :initarg :constant-bitrate :type
                         (common-lisp:or |__integerMin100000Max100000000|
                                         common-lisp:null)
                         :accessor %multiplex-video-settings-constant-bitrate
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multiplex-video-settings 'make-multiplex-video-settings))
 (common-lisp:defun make-multiplex-video-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key statmux-settings constant-bitrate)
   (common-lisp:apply #'common-lisp:make-instance 'multiplex-video-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-video-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-video-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constant-bitrate))
      (common-lisp:list
       (common-lisp:cons "ConstantBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statmux-settings))
      (common-lisp:list
       (common-lisp:cons "StatmuxSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-video-settings))
   common-lisp:nil))
(common-lisp:deftype network-input-server-validation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-input-settings common-lisp:nil
                       ((server-validation :initarg :server-validation :type
                         (common-lisp:or network-input-server-validation
                                         common-lisp:null)
                         :accessor %network-input-settings-server-validation
                         :initform common-lisp:nil)
                        (hls-input-settings :initarg :hls-input-settings :type
                         (common-lisp:or hls-input-settings common-lisp:null)
                         :accessor %network-input-settings-hls-input-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-input-settings 'make-network-input-settings))
 (common-lisp:defun make-network-input-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-validation hls-input-settings)
   (common-lisp:apply #'common-lisp:make-instance 'network-input-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-input-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-input-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-input-settings))
      (common-lisp:list
       (common-lisp:cons "HlsInputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-validation))
      (common-lisp:list
       (common-lisp:cons "ServerValidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-input-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nielsen-cbet common-lisp:nil
                       ((csid :initarg :csid :type
                         (common-lisp:or |__stringMin1Max7| common-lisp:null)
                         :accessor %nielsen-cbet-csid :initform
                         (common-lisp:error ":csid is required"))
                        (cbet-stepaside :initarg :cbet-stepaside :type
                         (common-lisp:or nielsen-watermarks-cbet-stepaside
                                         common-lisp:null)
                         :accessor %nielsen-cbet-cbet-stepaside :initform
                         (common-lisp:error ":cbet-stepaside is required"))
                        (cbet-check-digit-string :initarg
                         :cbet-check-digit-string :type
                         (common-lisp:or |__stringMin2Max2| common-lisp:null)
                         :accessor %nielsen-cbet-cbet-check-digit-string
                         :initform
                         (common-lisp:error
                          ":cbet-check-digit-string is required"))))
 (common-lisp:export (common-lisp:list 'nielsen-cbet 'make-nielsen-cbet))
 (common-lisp:defun make-nielsen-cbet
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key csid cbet-stepaside
                     cbet-check-digit-string)
   (common-lisp:apply #'common-lisp:make-instance 'nielsen-cbet
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nielsen-cbet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nielsen-cbet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cbet-check-digit-string))
      (common-lisp:list
       (common-lisp:cons "CbetCheckDigitString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cbet-stepaside))
      (common-lisp:list
       (common-lisp:cons "CbetStepaside"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csid))
      (common-lisp:list
       (common-lisp:cons "Csid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nielsen-cbet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nielsen-configuration common-lisp:nil
                       ((nielsen-pcm-to-id3tagging :initarg
                         :nielsen-pcm-to-id3tagging :type
                         (common-lisp:or nielsen-pcm-to-id3tagging-state
                                         common-lisp:null)
                         :accessor
                         %nielsen-configuration-nielsen-pcm-to-id3tagging
                         :initform common-lisp:nil)
                        (distributor-id :initarg :distributor-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %nielsen-configuration-distributor-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'nielsen-configuration 'make-nielsen-configuration))
 (common-lisp:defun make-nielsen-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nielsen-pcm-to-id3tagging distributor-id)
   (common-lisp:apply #'common-lisp:make-instance 'nielsen-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributor-id))
      (common-lisp:list
       (common-lisp:cons "DistributorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-pcm-to-id3tagging))
      (common-lisp:list
       (common-lisp:cons "NielsenPcmToId3Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass nielsen-naes-ii-nw common-lisp:nil
                       ((timezone :initarg :timezone :type
                         (common-lisp:or nielsen-watermark-timezones
                                         common-lisp:null)
                         :accessor %nielsen-naes-ii-nw-timezone :initform
                         common-lisp:nil)
                        (sid :initarg :sid :type
                         (common-lisp:or |__doubleMin1Max65535|
                                         common-lisp:null)
                         :accessor %nielsen-naes-ii-nw-sid :initform
                         (common-lisp:error ":sid is required"))
                        (check-digit-string :initarg :check-digit-string :type
                         (common-lisp:or |__stringMin2Max2| common-lisp:null)
                         :accessor %nielsen-naes-ii-nw-check-digit-string
                         :initform
                         (common-lisp:error
                          ":check-digit-string is required"))))
 (common-lisp:export
  (common-lisp:list 'nielsen-naes-ii-nw 'make-nielsen-naes-ii-nw))
 (common-lisp:defun make-nielsen-naes-ii-nw
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timezone sid check-digit-string)
   (common-lisp:apply #'common-lisp:make-instance 'nielsen-naes-ii-nw
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nielsen-naes-ii-nw))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nielsen-naes-ii-nw))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-digit-string))
      (common-lisp:list
       (common-lisp:cons "CheckDigitString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sid))
      (common-lisp:list
       (common-lisp:cons "Sid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timezone))
      (common-lisp:list
       (common-lisp:cons "Timezone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nielsen-naes-ii-nw))
   common-lisp:nil))
(common-lisp:deftype nielsen-pcm-to-id3tagging-state () 'common-lisp:string)
(common-lisp:deftype nielsen-watermark-timezones () 'common-lisp:string)
(common-lisp:deftype nielsen-watermarks-cbet-stepaside () 'common-lisp:string)
(common-lisp:deftype nielsen-watermarks-distribution-types ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass nielsen-watermarks-settings common-lisp:nil
                       ((nielsen-naes-ii-nw-settings :initarg
                         :nielsen-naes-ii-nw-settings :type
                         (common-lisp:or nielsen-naes-ii-nw common-lisp:null)
                         :accessor
                         %nielsen-watermarks-settings-nielsen-naes-ii-nw-settings
                         :initform common-lisp:nil)
                        (nielsen-distribution-type :initarg
                         :nielsen-distribution-type :type
                         (common-lisp:or nielsen-watermarks-distribution-types
                                         common-lisp:null)
                         :accessor
                         %nielsen-watermarks-settings-nielsen-distribution-type
                         :initform common-lisp:nil)
                        (nielsen-cbet-settings :initarg :nielsen-cbet-settings
                         :type (common-lisp:or nielsen-cbet common-lisp:null)
                         :accessor
                         %nielsen-watermarks-settings-nielsen-cbet-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'nielsen-watermarks-settings
                    'make-nielsen-watermarks-settings))
 (common-lisp:defun make-nielsen-watermarks-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key nielsen-naes-ii-nw-settings
                     nielsen-distribution-type nielsen-cbet-settings)
   (common-lisp:apply #'common-lisp:make-instance 'nielsen-watermarks-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-watermarks-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-watermarks-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-cbet-settings))
      (common-lisp:list
       (common-lisp:cons "NielsenCbetSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-distribution-type))
      (common-lisp:list
       (common-lisp:cons "NielsenDistributionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-naes-ii-nw-settings))
      (common-lisp:list
       (common-lisp:cons "NielsenNaesIiNwSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-watermarks-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass offering common-lisp:nil
                       ((usage-price :initarg :usage-price :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %offering-usage-price :initform common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :type
                         (common-lisp:or reservation-resource-specification
                                         common-lisp:null)
                         :accessor %offering-resource-specification :initform
                         common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %offering-region :initform common-lisp:nil)
                        (offering-type :initarg :offering-type :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor %offering-offering-type :initform
                         common-lisp:nil)
                        (offering-id :initarg :offering-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %offering-offering-id :initform common-lisp:nil)
                        (offering-description :initarg :offering-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %offering-offering-description :initform
                         common-lisp:nil)
                        (fixed-price :initarg :fixed-price :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %offering-fixed-price :initform common-lisp:nil)
                        (duration-units :initarg :duration-units :type
                         (common-lisp:or offering-duration-units
                                         common-lisp:null)
                         :accessor %offering-duration-units :initform
                         common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %offering-duration :initform
                         common-lisp:nil)
                        (currency-code :initarg :currency-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %offering-currency-code :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %offering-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'offering 'make-offering))
 (common-lisp:defun make-offering
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key usage-price resource-specification region
                     offering-type offering-id offering-description fixed-price
                     duration-units duration currency-code arn)
   (common-lisp:apply #'common-lisp:make-instance 'offering
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offering))
   common-lisp:nil))
(common-lisp:deftype offering-duration-units () 'common-lisp:string)
(common-lisp:deftype offering-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output common-lisp:nil
                       ((video-description-name :initarg
                         :video-description-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-video-description-name :initform
                         common-lisp:nil)
                        (output-settings :initarg :output-settings :type
                         (common-lisp:or output-settings common-lisp:null)
                         :accessor %output-output-settings :initform
                         (common-lisp:error ":output-settings is required"))
                        (output-name :initarg :output-name :type
                         (common-lisp:or |__stringMin1Max255| common-lisp:null)
                         :accessor %output-output-name :initform
                         common-lisp:nil)
                        (caption-description-names :initarg
                         :caption-description-names :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %output-caption-description-names :initform
                         common-lisp:nil)
                        (audio-description-names :initarg
                         :audio-description-names :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %output-audio-description-names :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defun make-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-description-name output-settings
                     output-name caption-description-names
                     audio-description-names)
   (common-lisp:apply #'common-lisp:make-instance 'output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-description-names))
      (common-lisp:list
       (common-lisp:cons "AudioDescriptionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-description-names))
      (common-lisp:list
       (common-lisp:cons "CaptionDescriptionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-name))
      (common-lisp:list
       (common-lisp:cons "OutputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-settings))
      (common-lisp:list
       (common-lisp:cons "OutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-description-name))
      (common-lisp:list
       (common-lisp:cons "VideoDescriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-destination common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or |__listOfOutputDestinationSettings|
                                         common-lisp:null)
                         :accessor %output-destination-settings :initform
                         common-lisp:nil)
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or
                          multiplex-program-channel-destination-settings
                          common-lisp:null)
                         :accessor %output-destination-multiplex-settings
                         :initform common-lisp:nil)
                        (media-package-settings :initarg
                         :media-package-settings :type
                         (common-lisp:or
                          |__listOfMediaPackageOutputDestinationSettings|
                          common-lisp:null)
                         :accessor %output-destination-media-package-settings
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-destination-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-destination 'make-output-destination))
 (common-lisp:defun make-output-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings multiplex-settings
                     media-package-settings id)
   (common-lisp:apply #'common-lisp:make-instance 'output-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-package-settings))
      (common-lisp:list
       (common-lisp:cons "MediaPackageSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-destination-settings common-lisp:nil
                       ((username :initarg :username :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-destination-settings-username :initform
                         common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-destination-settings-url :initform
                         common-lisp:nil)
                        (stream-name :initarg :stream-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-destination-settings-stream-name :initform
                         common-lisp:nil)
                        (password-param :initarg :password-param :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-destination-settings-password-param :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-destination-settings
                    'make-output-destination-settings))
 (common-lisp:defun make-output-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key username url stream-name password-param)
   (common-lisp:apply #'common-lisp:make-instance 'output-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-group common-lisp:nil
                       ((outputs :initarg :outputs :type
                         (common-lisp:or |__listOfOutput| common-lisp:null)
                         :accessor %output-group-outputs :initform
                         (common-lisp:error ":outputs is required"))
                        (output-group-settings :initarg :output-group-settings
                         :type
                         (common-lisp:or output-group-settings
                                         common-lisp:null)
                         :accessor %output-group-output-group-settings
                         :initform
                         (common-lisp:error
                          ":output-group-settings is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__stringMax32| common-lisp:null)
                         :accessor %output-group-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output-group 'make-output-group))
 (common-lisp:defun make-output-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key outputs output-group-settings name)
   (common-lisp:apply #'common-lisp:make-instance 'output-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-group-settings))
      (common-lisp:list
       (common-lisp:cons "OutputGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-group-settings common-lisp:nil
                       ((udp-group-settings :initarg :udp-group-settings :type
                         (common-lisp:or udp-group-settings common-lisp:null)
                         :accessor %output-group-settings-udp-group-settings
                         :initform common-lisp:nil)
                        (rtmp-group-settings :initarg :rtmp-group-settings
                         :type
                         (common-lisp:or rtmp-group-settings common-lisp:null)
                         :accessor %output-group-settings-rtmp-group-settings
                         :initform common-lisp:nil)
                        (multiplex-group-settings :initarg
                         :multiplex-group-settings :type
                         (common-lisp:or multiplex-group-settings
                                         common-lisp:null)
                         :accessor
                         %output-group-settings-multiplex-group-settings
                         :initform common-lisp:nil)
                        (ms-smooth-group-settings :initarg
                         :ms-smooth-group-settings :type
                         (common-lisp:or ms-smooth-group-settings
                                         common-lisp:null)
                         :accessor
                         %output-group-settings-ms-smooth-group-settings
                         :initform common-lisp:nil)
                        (media-package-group-settings :initarg
                         :media-package-group-settings :type
                         (common-lisp:or media-package-group-settings
                                         common-lisp:null)
                         :accessor
                         %output-group-settings-media-package-group-settings
                         :initform common-lisp:nil)
                        (hls-group-settings :initarg :hls-group-settings :type
                         (common-lisp:or hls-group-settings common-lisp:null)
                         :accessor %output-group-settings-hls-group-settings
                         :initform common-lisp:nil)
                        (frame-capture-group-settings :initarg
                         :frame-capture-group-settings :type
                         (common-lisp:or frame-capture-group-settings
                                         common-lisp:null)
                         :accessor
                         %output-group-settings-frame-capture-group-settings
                         :initform common-lisp:nil)
                        (archive-group-settings :initarg
                         :archive-group-settings :type
                         (common-lisp:or archive-group-settings
                                         common-lisp:null)
                         :accessor
                         %output-group-settings-archive-group-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-group-settings 'make-output-group-settings))
 (common-lisp:defun make-output-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key udp-group-settings rtmp-group-settings
                     multiplex-group-settings ms-smooth-group-settings
                     media-package-group-settings hls-group-settings
                     frame-capture-group-settings archive-group-settings)
   (common-lisp:apply #'common-lisp:make-instance 'output-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-group-settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-group-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-group-settings))
      (common-lisp:list
       (common-lisp:cons "HlsGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-package-group-settings))
      (common-lisp:list
       (common-lisp:cons "MediaPackageGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ms-smooth-group-settings))
      (common-lisp:list
       (common-lisp:cons "MsSmoothGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-group-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rtmp-group-settings))
      (common-lisp:list
       (common-lisp:cons "RtmpGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'udp-group-settings))
      (common-lisp:list
       (common-lisp:cons "UdpGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-location-ref common-lisp:nil
                       ((destination-ref-id :initarg :destination-ref-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %output-location-ref-destination-ref-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'output-location-ref 'make-output-location-ref))
 (common-lisp:defun make-output-location-ref
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-ref-id)
   (common-lisp:apply #'common-lisp:make-instance 'output-location-ref
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-location-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-location-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ref-id))
      (common-lisp:list
       (common-lisp:cons "DestinationRefId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-location-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass output-settings common-lisp:nil
                       ((udp-output-settings :initarg :udp-output-settings
                         :type
                         (common-lisp:or udp-output-settings common-lisp:null)
                         :accessor %output-settings-udp-output-settings
                         :initform common-lisp:nil)
                        (rtmp-output-settings :initarg :rtmp-output-settings
                         :type
                         (common-lisp:or rtmp-output-settings common-lisp:null)
                         :accessor %output-settings-rtmp-output-settings
                         :initform common-lisp:nil)
                        (multiplex-output-settings :initarg
                         :multiplex-output-settings :type
                         (common-lisp:or multiplex-output-settings
                                         common-lisp:null)
                         :accessor %output-settings-multiplex-output-settings
                         :initform common-lisp:nil)
                        (ms-smooth-output-settings :initarg
                         :ms-smooth-output-settings :type
                         (common-lisp:or ms-smooth-output-settings
                                         common-lisp:null)
                         :accessor %output-settings-ms-smooth-output-settings
                         :initform common-lisp:nil)
                        (media-package-output-settings :initarg
                         :media-package-output-settings :type
                         (common-lisp:or media-package-output-settings
                                         common-lisp:null)
                         :accessor
                         %output-settings-media-package-output-settings
                         :initform common-lisp:nil)
                        (hls-output-settings :initarg :hls-output-settings
                         :type
                         (common-lisp:or hls-output-settings common-lisp:null)
                         :accessor %output-settings-hls-output-settings
                         :initform common-lisp:nil)
                        (frame-capture-output-settings :initarg
                         :frame-capture-output-settings :type
                         (common-lisp:or frame-capture-output-settings
                                         common-lisp:null)
                         :accessor
                         %output-settings-frame-capture-output-settings
                         :initform common-lisp:nil)
                        (archive-output-settings :initarg
                         :archive-output-settings :type
                         (common-lisp:or archive-output-settings
                                         common-lisp:null)
                         :accessor %output-settings-archive-output-settings
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output-settings 'make-output-settings))
 (common-lisp:defun make-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key udp-output-settings rtmp-output-settings
                     multiplex-output-settings ms-smooth-output-settings
                     media-package-output-settings hls-output-settings
                     frame-capture-output-settings archive-output-settings)
   (common-lisp:apply #'common-lisp:make-instance 'output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-output-settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-output-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-output-settings))
      (common-lisp:list
       (common-lisp:cons "HlsOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-package-output-settings))
      (common-lisp:list
       (common-lisp:cons "MediaPackageOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ms-smooth-output-settings))
      (common-lisp:list
       (common-lisp:cons "MsSmoothOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-output-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rtmp-output-settings))
      (common-lisp:list
       (common-lisp:cons "RtmpOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'udp-output-settings))
      (common-lisp:list
       (common-lisp:cons "UdpOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pass-through-settings common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'pass-through-settings 'make-pass-through-settings))
 (common-lisp:defun make-pass-through-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'pass-through-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pass-through-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pass-through-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pass-through-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pause-state-schedule-action-settings common-lisp:nil
                       ((pipelines :initarg :pipelines :type
                         (common-lisp:or |__listOfPipelinePauseStateSettings|
                                         common-lisp:null)
                         :accessor
                         %pause-state-schedule-action-settings-pipelines
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pause-state-schedule-action-settings
                    'make-pause-state-schedule-action-settings))
 (common-lisp:defun make-pause-state-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipelines)
   (common-lisp:apply #'common-lisp:make-instance
                      'pause-state-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pause-state-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pause-state-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipelines))
      (common-lisp:list
       (common-lisp:cons "Pipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pause-state-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pipeline-detail common-lisp:nil
                       ((pipeline-id :initarg :pipeline-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %pipeline-detail-pipeline-id :initform
                         common-lisp:nil)
                        (active-motion-graphics-uri :initarg
                         :active-motion-graphics-uri :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %pipeline-detail-active-motion-graphics-uri :initform
                         common-lisp:nil)
                        (active-motion-graphics-action-name :initarg
                         :active-motion-graphics-action-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %pipeline-detail-active-motion-graphics-action-name
                         :initform common-lisp:nil)
                        (active-input-switch-action-name :initarg
                         :active-input-switch-action-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %pipeline-detail-active-input-switch-action-name
                         :initform common-lisp:nil)
                        (active-input-attachment-name :initarg
                         :active-input-attachment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %pipeline-detail-active-input-attachment-name
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'pipeline-detail 'make-pipeline-detail))
 (common-lisp:defun make-pipeline-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-id active-motion-graphics-uri
                     active-motion-graphics-action-name
                     active-input-switch-action-name
                     active-input-attachment-name)
   (common-lisp:apply #'common-lisp:make-instance 'pipeline-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-input-attachment-name))
      (common-lisp:list
       (common-lisp:cons "ActiveInputAttachmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-input-switch-action-name))
      (common-lisp:list
       (common-lisp:cons "ActiveInputSwitchActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-motion-graphics-action-name))
      (common-lisp:list
       (common-lisp:cons "ActiveMotionGraphicsActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-motion-graphics-uri))
      (common-lisp:list
       (common-lisp:cons "ActiveMotionGraphicsUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-detail))
   common-lisp:nil))
(common-lisp:deftype pipeline-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pipeline-pause-state-settings common-lisp:nil
                       ((pipeline-id :initarg :pipeline-id :type
                         (common-lisp:or pipeline-id common-lisp:null)
                         :accessor %pipeline-pause-state-settings-pipeline-id
                         :initform
                         (common-lisp:error ":pipeline-id is required"))))
 (common-lisp:export
  (common-lisp:list 'pipeline-pause-state-settings
                    'make-pipeline-pause-state-settings))
 (common-lisp:defun make-pipeline-pause-state-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pipeline-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'pipeline-pause-state-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-pause-state-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-pause-state-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-pause-state-settings))
   common-lisp:nil))
(common-lisp:deftype preferred-channel-pipeline () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass purchase-offering common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %purchase-offering-tags :initform common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %purchase-offering-start :initform common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %purchase-offering-request-id :initform
                         common-lisp:nil)
                        (renewal-settings :initarg :renewal-settings :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor %purchase-offering-renewal-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %purchase-offering-name :initform common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %purchase-offering-count :initform
                         (common-lisp:error ":count is required"))))
 (common-lisp:export
  (common-lisp:list 'purchase-offering 'make-purchase-offering))
 (common-lisp:defun make-purchase-offering
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags start request-id renewal-settings
                     name count)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input purchase-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input purchase-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input purchase-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-offering-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %purchase-offering-request-tags :initform
                         common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %purchase-offering-request-start :initform
                         common-lisp:nil)
                        (request-id :initarg :request-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %purchase-offering-request-request-id :initform
                         common-lisp:nil)
                        (renewal-settings :initarg :renewal-settings :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor %purchase-offering-request-renewal-settings
                         :initform common-lisp:nil)
                        (offering-id :initarg :offering-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %purchase-offering-request-offering-id :initform
                         (common-lisp:error ":offering-id is required"))
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %purchase-offering-request-name :initform
                         common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %purchase-offering-request-count :initform
                         (common-lisp:error ":count is required"))))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-request
                    'make-purchase-offering-request))
 (common-lisp:defun make-purchase-offering-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags start request-id renewal-settings
                     offering-id name count)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-offering-response common-lisp:nil
                       ((reservation :initarg :reservation :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor %purchase-offering-response-reservation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-response
                    'make-purchase-offering-response))
 (common-lisp:defun make-purchase-offering-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation)
   (common-lisp:apply #'common-lisp:make-instance 'purchase-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-offering-result-model common-lisp:nil
                       ((reservation :initarg :reservation :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor %purchase-offering-result-model-reservation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-result-model
                    'make-purchase-offering-result-model))
 (common-lisp:defun make-purchase-offering-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-offering-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass raw-settings common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'raw-settings 'make-raw-settings))
 (common-lisp:defun make-raw-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'raw-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input raw-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input raw-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input raw-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-input-device common-lisp:nil
                       ((force :initarg :force :type
                         (common-lisp:or reboot-input-device-force
                                         common-lisp:null)
                         :accessor %reboot-input-device-force :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reboot-input-device 'make-reboot-input-device))
 (common-lisp:defun make-reboot-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key force)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-input-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reboot-input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reboot-input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reboot-input-device))
   common-lisp:nil))
(common-lisp:deftype reboot-input-device-force () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reboot-input-device-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reboot-input-device-request-input-device-id :initform
                         (common-lisp:error ":input-device-id is required"))
                        (force :initarg :force :type
                         (common-lisp:or reboot-input-device-force
                                         common-lisp:null)
                         :accessor %reboot-input-device-request-force :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reboot-input-device-request
                    'make-reboot-input-device-request))
 (common-lisp:defun make-reboot-input-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-device-id force)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reboot-input-device-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reboot-input-device-response
                    'make-reboot-input-device-response))
 (common-lisp:defun make-reboot-input-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'reboot-input-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rec601settings common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'rec601settings 'make-rec601settings))
 (common-lisp:defun make-rec601settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'rec601settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rec601settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rec601settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rec601settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rec709settings common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'rec709settings 'make-rec709settings))
 (common-lisp:defun make-rec709settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'rec709settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rec709settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rec709settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rec709settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-input-device-transfer-request common-lisp:nil
                       ((input-device-id :initarg :input-device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reject-input-device-transfer-request-input-device-id
                         :initform
                         (common-lisp:error ":input-device-id is required"))))
 (common-lisp:export
  (common-lisp:list 'reject-input-device-transfer-request
                    'make-reject-input-device-transfer-request))
 (common-lisp:defun make-reject-input-device-transfer-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-input-device-transfer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-input-device-transfer-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reject-input-device-transfer-response
                    'make-reject-input-device-transfer-response))
 (common-lisp:defun make-reject-input-device-transfer-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-input-device-transfer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remix-settings common-lisp:nil
                       ((channels-out :initarg :channels-out :type
                         (common-lisp:or |__integerMin1Max8| common-lisp:null)
                         :accessor %remix-settings-channels-out :initform
                         common-lisp:nil)
                        (channels-in :initarg :channels-in :type
                         (common-lisp:or |__integerMin1Max16| common-lisp:null)
                         :accessor %remix-settings-channels-in :initform
                         common-lisp:nil)
                        (channel-mappings :initarg :channel-mappings :type
                         (common-lisp:or |__listOfAudioChannelMapping|
                                         common-lisp:null)
                         :accessor %remix-settings-channel-mappings :initform
                         (common-lisp:error ":channel-mappings is required"))))
 (common-lisp:export (common-lisp:list 'remix-settings 'make-remix-settings))
 (common-lisp:defun make-remix-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channels-out channels-in
                     channel-mappings)
   (common-lisp:apply #'common-lisp:make-instance 'remix-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remix-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remix-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-mappings))
      (common-lisp:list
       (common-lisp:cons "ChannelMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels-in))
      (common-lisp:list
       (common-lisp:cons "ChannelsIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels-out))
      (common-lisp:list
       (common-lisp:cons "ChannelsOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remix-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass renewal-settings common-lisp:nil
                       ((renewal-count :initarg :renewal-count :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %renewal-settings-renewal-count :initform
                         common-lisp:nil)
                        (automatic-renewal :initarg :automatic-renewal :type
                         (common-lisp:or reservation-automatic-renewal
                                         common-lisp:null)
                         :accessor %renewal-settings-automatic-renewal
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'renewal-settings 'make-renewal-settings))
 (common-lisp:defun make-renewal-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key renewal-count automatic-renewal)
   (common-lisp:apply #'common-lisp:make-instance 'renewal-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input renewal-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input renewal-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-renewal))
      (common-lisp:list
       (common-lisp:cons "AutomaticRenewal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-count))
      (common-lisp:list
       (common-lisp:cons "RenewalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input renewal-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reservation common-lisp:nil
                       ((usage-price :initarg :usage-price :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %reservation-usage-price :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %reservation-tags :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or reservation-state common-lisp:null)
                         :accessor %reservation-state :initform
                         common-lisp:nil)
                        (start :initarg :start :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-start :initform common-lisp:nil)
                        (resource-specification :initarg
                         :resource-specification :type
                         (common-lisp:or reservation-resource-specification
                                         common-lisp:null)
                         :accessor %reservation-resource-specification
                         :initform common-lisp:nil)
                        (reservation-id :initarg :reservation-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-reservation-id :initform common-lisp:nil)
                        (renewal-settings :initarg :renewal-settings :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor %reservation-renewal-settings :initform
                         common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-region :initform common-lisp:nil)
                        (offering-type :initarg :offering-type :type
                         (common-lisp:or offering-type common-lisp:null)
                         :accessor %reservation-offering-type :initform
                         common-lisp:nil)
                        (offering-id :initarg :offering-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-offering-id :initform common-lisp:nil)
                        (offering-description :initarg :offering-description
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %reservation-offering-description :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-name :initform common-lisp:nil)
                        (fixed-price :initarg :fixed-price :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %reservation-fixed-price :initform common-lisp:nil)
                        (end :initarg :end :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-end :initform common-lisp:nil)
                        (duration-units :initarg :duration-units :type
                         (common-lisp:or offering-duration-units
                                         common-lisp:null)
                         :accessor %reservation-duration-units :initform
                         common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %reservation-duration :initform
                         common-lisp:nil)
                        (currency-code :initarg :currency-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-currency-code :initform common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %reservation-count :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %reservation-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'reservation 'make-reservation))
 (common-lisp:defun make-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key usage-price tags state start
                     resource-specification reservation-id renewal-settings
                     region offering-type offering-id offering-description name
                     fixed-price end duration-units duration currency-code
                     count arn)
   (common-lisp:apply #'common-lisp:make-instance 'reservation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reservation))
   common-lisp:nil))
(common-lisp:deftype reservation-automatic-renewal () 'common-lisp:string)
(common-lisp:deftype reservation-codec () 'common-lisp:string)
(common-lisp:deftype reservation-maximum-bitrate () 'common-lisp:string)
(common-lisp:deftype reservation-maximum-framerate () 'common-lisp:string)
(common-lisp:deftype reservation-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reservation-resource-specification common-lisp:nil
                       ((video-quality :initarg :video-quality :type
                         (common-lisp:or reservation-video-quality
                                         common-lisp:null)
                         :accessor
                         %reservation-resource-specification-video-quality
                         :initform common-lisp:nil)
                        (special-feature :initarg :special-feature :type
                         (common-lisp:or reservation-special-feature
                                         common-lisp:null)
                         :accessor
                         %reservation-resource-specification-special-feature
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or reservation-resource-type
                                         common-lisp:null)
                         :accessor
                         %reservation-resource-specification-resource-type
                         :initform common-lisp:nil)
                        (resolution :initarg :resolution :type
                         (common-lisp:or reservation-resolution
                                         common-lisp:null)
                         :accessor
                         %reservation-resource-specification-resolution
                         :initform common-lisp:nil)
                        (maximum-framerate :initarg :maximum-framerate :type
                         (common-lisp:or reservation-maximum-framerate
                                         common-lisp:null)
                         :accessor
                         %reservation-resource-specification-maximum-framerate
                         :initform common-lisp:nil)
                        (maximum-bitrate :initarg :maximum-bitrate :type
                         (common-lisp:or reservation-maximum-bitrate
                                         common-lisp:null)
                         :accessor
                         %reservation-resource-specification-maximum-bitrate
                         :initform common-lisp:nil)
                        (codec :initarg :codec :type
                         (common-lisp:or reservation-codec common-lisp:null)
                         :accessor %reservation-resource-specification-codec
                         :initform common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor
                         %reservation-resource-specification-channel-class
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reservation-resource-specification
                    'make-reservation-resource-specification))
 (common-lisp:defun make-reservation-resource-specification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-quality special-feature
                     resource-type resolution maximum-framerate maximum-bitrate
                     codec channel-class)
   (common-lisp:apply #'common-lisp:make-instance
                      'reservation-resource-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-resource-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-resource-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaximumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-framerate))
      (common-lisp:list
       (common-lisp:cons "MaximumFramerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'special-feature))
      (common-lisp:list
       (common-lisp:cons "SpecialFeature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-quality))
      (common-lisp:list
       (common-lisp:cons "VideoQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-resource-specification))
   common-lisp:nil))
(common-lisp:deftype reservation-resource-type () 'common-lisp:string)
(common-lisp:deftype reservation-special-feature () 'common-lisp:string)
(common-lisp:deftype reservation-state () 'common-lisp:string)
(common-lisp:deftype reservation-video-quality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-conflict common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %resource-conflict-message :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict 'make-resource-conflict))
 (common-lisp:defun make-resource-conflict
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'resource-conflict
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-conflict))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-conflict))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-conflict))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-not-found common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %resource-not-found-message :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found 'make-resource-not-found))
 (common-lisp:defun make-resource-not-found
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'resource-not-found
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-not-found))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-not-found))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-not-found))
   common-lisp:nil))
(common-lisp:deftype rtmp-ad-markers () 'common-lisp:string)
(common-lisp:deftype rtmp-cache-full-behavior () 'common-lisp:string)
(common-lisp:deftype rtmp-caption-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rtmp-caption-info-destination-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'rtmp-caption-info-destination-settings
                    'make-rtmp-caption-info-destination-settings))
 (common-lisp:defun make-rtmp-caption-info-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'rtmp-caption-info-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rtmp-caption-info-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rtmp-caption-info-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rtmp-caption-info-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rtmp-group-settings common-lisp:nil
                       ((restart-delay :initarg :restart-delay :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %rtmp-group-settings-restart-delay :initform
                         common-lisp:nil)
                        (input-loss-action :initarg :input-loss-action :type
                         (common-lisp:or input-loss-action-for-rtmp-out
                                         common-lisp:null)
                         :accessor %rtmp-group-settings-input-loss-action
                         :initform common-lisp:nil)
                        (caption-data :initarg :caption-data :type
                         (common-lisp:or rtmp-caption-data common-lisp:null)
                         :accessor %rtmp-group-settings-caption-data :initform
                         common-lisp:nil)
                        (cache-length :initarg :cache-length :type
                         (common-lisp:or |__integerMin30| common-lisp:null)
                         :accessor %rtmp-group-settings-cache-length :initform
                         common-lisp:nil)
                        (cache-full-behavior :initarg :cache-full-behavior
                         :type
                         (common-lisp:or rtmp-cache-full-behavior
                                         common-lisp:null)
                         :accessor %rtmp-group-settings-cache-full-behavior
                         :initform common-lisp:nil)
                        (authentication-scheme :initarg :authentication-scheme
                         :type
                         (common-lisp:or authentication-scheme
                                         common-lisp:null)
                         :accessor %rtmp-group-settings-authentication-scheme
                         :initform common-lisp:nil)
                        (ad-markers :initarg :ad-markers :type
                         (common-lisp:or |__listOfRtmpAdMarkers|
                                         common-lisp:null)
                         :accessor %rtmp-group-settings-ad-markers :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rtmp-group-settings 'make-rtmp-group-settings))
 (common-lisp:defun make-rtmp-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restart-delay input-loss-action
                     caption-data cache-length cache-full-behavior
                     authentication-scheme ad-markers)
   (common-lisp:apply #'common-lisp:make-instance 'rtmp-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rtmp-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rtmp-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-markers))
      (common-lisp:list
       (common-lisp:cons "AdMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-scheme))
      (common-lisp:list
       (common-lisp:cons "AuthenticationScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-full-behavior))
      (common-lisp:list
       (common-lisp:cons "CacheFullBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-length))
      (common-lisp:list
       (common-lisp:cons "CacheLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-data))
      (common-lisp:list
       (common-lisp:cons "CaptionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rtmp-group-settings))
   common-lisp:nil))
(common-lisp:deftype rtmp-output-certificate-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rtmp-output-settings common-lisp:nil
                       ((num-retries :initarg :num-retries :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %rtmp-output-settings-num-retries :initform
                         common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor %rtmp-output-settings-destination :initform
                         (common-lisp:error ":destination is required"))
                        (connection-retry-interval :initarg
                         :connection-retry-interval :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         %rtmp-output-settings-connection-retry-interval
                         :initform common-lisp:nil)
                        (certificate-mode :initarg :certificate-mode :type
                         (common-lisp:or rtmp-output-certificate-mode
                                         common-lisp:null)
                         :accessor %rtmp-output-settings-certificate-mode
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rtmp-output-settings 'make-rtmp-output-settings))
 (common-lisp:defun make-rtmp-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key num-retries destination
                     connection-retry-interval certificate-mode)
   (common-lisp:apply #'common-lisp:make-instance 'rtmp-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rtmp-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rtmp-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "CertificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rtmp-output-settings))
   common-lisp:nil))
(common-lisp:deftype s3canned-acl () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schedule-action common-lisp:nil
                       ((schedule-action-start-settings :initarg
                         :schedule-action-start-settings :type
                         (common-lisp:or schedule-action-start-settings
                                         common-lisp:null)
                         :accessor
                         %schedule-action-schedule-action-start-settings
                         :initform
                         (common-lisp:error
                          ":schedule-action-start-settings is required"))
                        (schedule-action-settings :initarg
                         :schedule-action-settings :type
                         (common-lisp:or schedule-action-settings
                                         common-lisp:null)
                         :accessor %schedule-action-schedule-action-settings
                         :initform
                         (common-lisp:error
                          ":schedule-action-settings is required"))
                        (action-name :initarg :action-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %schedule-action-action-name :initform
                         (common-lisp:error ":action-name is required"))))
 (common-lisp:export (common-lisp:list 'schedule-action 'make-schedule-action))
 (common-lisp:defun make-schedule-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule-action-start-settings
                     schedule-action-settings action-name)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-action-settings))
      (common-lisp:list
       (common-lisp:cons "ScheduleActionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "ScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-action-settings common-lisp:nil
                       ((static-image-deactivate-settings :initarg
                         :static-image-deactivate-settings :type
                         (common-lisp:or
                          static-image-deactivate-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-settings-static-image-deactivate-settings
                         :initform common-lisp:nil)
                        (static-image-activate-settings :initarg
                         :static-image-activate-settings :type
                         (common-lisp:or
                          static-image-activate-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-settings-static-image-activate-settings
                         :initform common-lisp:nil)
                        (scte35time-signal-settings :initarg
                         :scte35time-signal-settings :type
                         (common-lisp:or
                          scte35time-signal-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-settings-scte35time-signal-settings
                         :initform common-lisp:nil)
                        (scte35splice-insert-settings :initarg
                         :scte35splice-insert-settings :type
                         (common-lisp:or
                          scte35splice-insert-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-settings-scte35splice-insert-settings
                         :initform common-lisp:nil)
                        (scte35return-to-network-settings :initarg
                         :scte35return-to-network-settings :type
                         (common-lisp:or
                          scte35return-to-network-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-settings-scte35return-to-network-settings
                         :initform common-lisp:nil)
                        (scte35input-settings :initarg :scte35input-settings
                         :type
                         (common-lisp:or scte35input-schedule-action-settings
                                         common-lisp:null)
                         :accessor
                         %schedule-action-settings-scte35input-settings
                         :initform common-lisp:nil)
                        (pause-state-settings :initarg :pause-state-settings
                         :type
                         (common-lisp:or pause-state-schedule-action-settings
                                         common-lisp:null)
                         :accessor
                         %schedule-action-settings-pause-state-settings
                         :initform common-lisp:nil)
                        (motion-graphics-image-deactivate-settings :initarg
                         :motion-graphics-image-deactivate-settings :type
                         (common-lisp:or
                          motion-graphics-deactivate-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-settings-motion-graphics-image-deactivate-settings
                         :initform common-lisp:nil)
                        (motion-graphics-image-activate-settings :initarg
                         :motion-graphics-image-activate-settings :type
                         (common-lisp:or
                          motion-graphics-activate-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-settings-motion-graphics-image-activate-settings
                         :initform common-lisp:nil)
                        (input-switch-settings :initarg :input-switch-settings
                         :type
                         (common-lisp:or input-switch-schedule-action-settings
                                         common-lisp:null)
                         :accessor
                         %schedule-action-settings-input-switch-settings
                         :initform common-lisp:nil)
                        (input-prepare-settings :initarg
                         :input-prepare-settings :type
                         (common-lisp:or input-prepare-schedule-action-settings
                                         common-lisp:null)
                         :accessor
                         %schedule-action-settings-input-prepare-settings
                         :initform common-lisp:nil)
                        (hls-timed-metadata-settings :initarg
                         :hls-timed-metadata-settings :type
                         (common-lisp:or
                          hls-timed-metadata-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-settings-hls-timed-metadata-settings
                         :initform common-lisp:nil)
                        (hls-id3segment-tagging-settings :initarg
                         :hls-id3segment-tagging-settings :type
                         (common-lisp:or
                          hls-id3segment-tagging-schedule-action-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-settings-hls-id3segment-tagging-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'schedule-action-settings 'make-schedule-action-settings))
 (common-lisp:defun make-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key static-image-deactivate-settings
                     static-image-activate-settings scte35time-signal-settings
                     scte35splice-insert-settings
                     scte35return-to-network-settings scte35input-settings
                     pause-state-settings
                     motion-graphics-image-deactivate-settings
                     motion-graphics-image-activate-settings
                     input-switch-settings input-prepare-settings
                     hls-timed-metadata-settings
                     hls-id3segment-tagging-settings)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-id3segment-tagging-settings))
      (common-lisp:list
       (common-lisp:cons "HlsId3SegmentTaggingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-timed-metadata-settings))
      (common-lisp:list
       (common-lisp:cons "HlsTimedMetadataSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-prepare-settings))
      (common-lisp:list
       (common-lisp:cons "InputPrepareSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-switch-settings))
      (common-lisp:list
       (common-lisp:cons "InputSwitchSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-image-activate-settings))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsImageActivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-image-deactivate-settings))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsImageDeactivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pause-state-settings))
      (common-lisp:list
       (common-lisp:cons "PauseStateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35input-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35InputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35return-to-network-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35ReturnToNetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35splice-insert-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35SpliceInsertSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35time-signal-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35TimeSignalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-image-activate-settings))
      (common-lisp:list
       (common-lisp:cons "StaticImageActivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-image-deactivate-settings))
      (common-lisp:list
       (common-lisp:cons "StaticImageDeactivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-action-start-settings common-lisp:nil
                       ((immediate-mode-schedule-action-start-settings :initarg
                         :immediate-mode-schedule-action-start-settings :type
                         (common-lisp:or
                          immediate-mode-schedule-action-start-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-start-settings-immediate-mode-schedule-action-start-settings
                         :initform common-lisp:nil)
                        (follow-mode-schedule-action-start-settings :initarg
                         :follow-mode-schedule-action-start-settings :type
                         (common-lisp:or
                          follow-mode-schedule-action-start-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-start-settings-follow-mode-schedule-action-start-settings
                         :initform common-lisp:nil)
                        (fixed-mode-schedule-action-start-settings :initarg
                         :fixed-mode-schedule-action-start-settings :type
                         (common-lisp:or
                          fixed-mode-schedule-action-start-settings
                          common-lisp:null)
                         :accessor
                         %schedule-action-start-settings-fixed-mode-schedule-action-start-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'schedule-action-start-settings
                    'make-schedule-action-start-settings))
 (common-lisp:defun make-schedule-action-start-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     immediate-mode-schedule-action-start-settings
                     follow-mode-schedule-action-start-settings
                     fixed-mode-schedule-action-start-settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'schedule-action-start-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-start-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fixed-mode-schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "FixedModeScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'follow-mode-schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "FollowModeScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'immediate-mode-schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "ImmediateModeScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-delete-result-model common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'schedule-delete-result-model
                    'make-schedule-delete-result-model))
 (common-lisp:defun make-schedule-delete-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'schedule-delete-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-delete-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-delete-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-delete-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schedule-describe-result-model common-lisp:nil
                       ((schedule-actions :initarg :schedule-actions :type
                         (common-lisp:or |__listOfScheduleAction|
                                         common-lisp:null)
                         :accessor
                         %schedule-describe-result-model-schedule-actions
                         :initform
                         (common-lisp:error ":schedule-actions is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %schedule-describe-result-model-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'schedule-describe-result-model
                    'make-schedule-describe-result-model))
 (common-lisp:defun make-schedule-describe-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key schedule-actions next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'schedule-describe-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-describe-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-describe-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-describe-result-model))
   common-lisp:nil))
(common-lisp:deftype scte20convert608to708 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte20plus-embedded-destination-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'scte20plus-embedded-destination-settings
                    'make-scte20plus-embedded-destination-settings))
 (common-lisp:defun make-scte20plus-embedded-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte20plus-embedded-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte20plus-embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte20plus-embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte20plus-embedded-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte20source-settings common-lisp:nil
                       ((source608channel-number :initarg
                         :source608channel-number :type
                         (common-lisp:or |__integerMin1Max4| common-lisp:null)
                         :accessor
                         %scte20source-settings-source608channel-number
                         :initform common-lisp:nil)
                        (convert608to708 :initarg :convert608to708 :type
                         (common-lisp:or scte20convert608to708
                                         common-lisp:null)
                         :accessor %scte20source-settings-convert608to708
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scte20source-settings 'make-scte20source-settings))
 (common-lisp:defun make-scte20source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source608channel-number convert608to708)
   (common-lisp:apply #'common-lisp:make-instance 'scte20source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte20source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte20source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'convert608to708))
      (common-lisp:list
       (common-lisp:cons "Convert608To708"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608channel-number))
      (common-lisp:list
       (common-lisp:cons "Source608ChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte20source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte27destination-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'scte27destination-settings
                    'make-scte27destination-settings))
 (common-lisp:defun make-scte27destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'scte27destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte27destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte27destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte27destination-settings))
   common-lisp:nil))
(common-lisp:deftype scte27ocr-language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte27source-settings common-lisp:nil
                       ((pid :initarg :pid :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor %scte27source-settings-pid :initform
                         common-lisp:nil)
                        (ocr-language :initarg :ocr-language :type
                         (common-lisp:or scte27ocr-language common-lisp:null)
                         :accessor %scte27source-settings-ocr-language
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scte27source-settings 'make-scte27source-settings))
 (common-lisp:defun make-scte27source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pid ocr-language)
   (common-lisp:apply #'common-lisp:make-instance 'scte27source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte27source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte27source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ocr-language))
      (common-lisp:list
       (common-lisp:cons "OcrLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte27source-settings))
   common-lisp:nil))
(common-lisp:deftype scte35apos-no-regional-blackout-behavior ()
  'common-lisp:string)
(common-lisp:deftype scte35apos-web-delivery-allowed-behavior ()
  'common-lisp:string)
(common-lisp:deftype scte35archive-allowed-flag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35delivery-restrictions common-lisp:nil
                       ((web-delivery-allowed-flag :initarg
                         :web-delivery-allowed-flag :type
                         (common-lisp:or scte35web-delivery-allowed-flag
                                         common-lisp:null)
                         :accessor
                         %scte35delivery-restrictions-web-delivery-allowed-flag
                         :initform
                         (common-lisp:error
                          ":web-delivery-allowed-flag is required"))
                        (no-regional-blackout-flag :initarg
                         :no-regional-blackout-flag :type
                         (common-lisp:or scte35no-regional-blackout-flag
                                         common-lisp:null)
                         :accessor
                         %scte35delivery-restrictions-no-regional-blackout-flag
                         :initform
                         (common-lisp:error
                          ":no-regional-blackout-flag is required"))
                        (device-restrictions :initarg :device-restrictions
                         :type
                         (common-lisp:or scte35device-restrictions
                                         common-lisp:null)
                         :accessor
                         %scte35delivery-restrictions-device-restrictions
                         :initform
                         (common-lisp:error
                          ":device-restrictions is required"))
                        (archive-allowed-flag :initarg :archive-allowed-flag
                         :type
                         (common-lisp:or scte35archive-allowed-flag
                                         common-lisp:null)
                         :accessor
                         %scte35delivery-restrictions-archive-allowed-flag
                         :initform
                         (common-lisp:error
                          ":archive-allowed-flag is required"))))
 (common-lisp:export
  (common-lisp:list 'scte35delivery-restrictions
                    'make-scte35delivery-restrictions))
 (common-lisp:defun make-scte35delivery-restrictions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key web-delivery-allowed-flag
                     no-regional-blackout-flag device-restrictions
                     archive-allowed-flag)
   (common-lisp:apply #'common-lisp:make-instance 'scte35delivery-restrictions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35delivery-restrictions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35delivery-restrictions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "ArchiveAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-restrictions))
      (common-lisp:list
       (common-lisp:cons "DeviceRestrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-regional-blackout-flag))
      (common-lisp:list
       (common-lisp:cons "NoRegionalBlackoutFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-delivery-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "WebDeliveryAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35delivery-restrictions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte35descriptor common-lisp:nil
                       ((scte35descriptor-settings :initarg
                         :scte35descriptor-settings :type
                         (common-lisp:or scte35descriptor-settings
                                         common-lisp:null)
                         :accessor %scte35descriptor-scte35descriptor-settings
                         :initform
                         (common-lisp:error
                          ":scte35descriptor-settings is required"))))
 (common-lisp:export
  (common-lisp:list 'scte35descriptor 'make-scte35descriptor))
 (common-lisp:defun make-scte35descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scte35descriptor-settings)
   (common-lisp:apply #'common-lisp:make-instance 'scte35descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scte35descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scte35descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35descriptor-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35DescriptorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scte35descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte35descriptor-settings common-lisp:nil
                       ((segmentation-descriptor-scte35descriptor-settings
                         :initarg
                         :segmentation-descriptor-scte35descriptor-settings
                         :type
                         (common-lisp:or scte35segmentation-descriptor
                                         common-lisp:null)
                         :accessor
                         %scte35descriptor-settings-segmentation-descriptor-scte35descriptor-settings
                         :initform
                         (common-lisp:error
                          ":segmentation-descriptor-scte35descriptor-settings is required"))))
 (common-lisp:export
  (common-lisp:list 'scte35descriptor-settings
                    'make-scte35descriptor-settings))
 (common-lisp:defun make-scte35descriptor-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key
                     segmentation-descriptor-scte35descriptor-settings)
   (common-lisp:apply #'common-lisp:make-instance 'scte35descriptor-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35descriptor-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35descriptor-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-descriptor-scte35descriptor-settings))
      (common-lisp:list
       (common-lisp:cons "SegmentationDescriptorScte35DescriptorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35descriptor-settings))
   common-lisp:nil))
(common-lisp:deftype scte35device-restrictions () 'common-lisp:string)
(common-lisp:deftype scte35input-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35input-schedule-action-settings common-lisp:nil
                       ((mode :initarg :mode :type
                         (common-lisp:or scte35input-mode common-lisp:null)
                         :accessor %scte35input-schedule-action-settings-mode
                         :initform (common-lisp:error ":mode is required"))
                        (input-attachment-name-reference :initarg
                         :input-attachment-name-reference :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %scte35input-schedule-action-settings-input-attachment-name-reference
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scte35input-schedule-action-settings
                    'make-scte35input-schedule-action-settings))
 (common-lisp:defun make-scte35input-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mode input-attachment-name-reference)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte35input-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35input-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35input-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name-reference))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentNameReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35input-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35no-regional-blackout-flag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35return-to-network-schedule-action-settings
                       common-lisp:nil
                       ((splice-event-id :initarg :splice-event-id :type
                         (common-lisp:or |__longMin0Max4294967295|
                                         common-lisp:null)
                         :accessor
                         %scte35return-to-network-schedule-action-settings-splice-event-id
                         :initform
                         (common-lisp:error ":splice-event-id is required"))))
 (common-lisp:export
  (common-lisp:list 'scte35return-to-network-schedule-action-settings
                    'make-scte35return-to-network-schedule-action-settings))
 (common-lisp:defun make-scte35return-to-network-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key splice-event-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte35return-to-network-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35return-to-network-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35return-to-network-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'splice-event-id))
      (common-lisp:list
       (common-lisp:cons "SpliceEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35return-to-network-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35segmentation-cancel-indicator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35segmentation-descriptor common-lisp:nil
                       ((sub-segments-expected :initarg :sub-segments-expected
                         :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         %scte35segmentation-descriptor-sub-segments-expected
                         :initform common-lisp:nil)
                        (sub-segment-num :initarg :sub-segment-num :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         %scte35segmentation-descriptor-sub-segment-num
                         :initform common-lisp:nil)
                        (segments-expected :initarg :segments-expected :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         %scte35segmentation-descriptor-segments-expected
                         :initform common-lisp:nil)
                        (segmentation-upid-type :initarg
                         :segmentation-upid-type :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         %scte35segmentation-descriptor-segmentation-upid-type
                         :initform common-lisp:nil)
                        (segmentation-upid :initarg :segmentation-upid :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %scte35segmentation-descriptor-segmentation-upid
                         :initform common-lisp:nil)
                        (segmentation-type-id :initarg :segmentation-type-id
                         :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor
                         %scte35segmentation-descriptor-segmentation-type-id
                         :initform common-lisp:nil)
                        (segmentation-event-id :initarg :segmentation-event-id
                         :type
                         (common-lisp:or |__longMin0Max4294967295|
                                         common-lisp:null)
                         :accessor
                         %scte35segmentation-descriptor-segmentation-event-id
                         :initform
                         (common-lisp:error
                          ":segmentation-event-id is required"))
                        (segmentation-duration :initarg :segmentation-duration
                         :type
                         (common-lisp:or |__longMin0Max1099511627775|
                                         common-lisp:null)
                         :accessor
                         %scte35segmentation-descriptor-segmentation-duration
                         :initform common-lisp:nil)
                        (segmentation-cancel-indicator :initarg
                         :segmentation-cancel-indicator :type
                         (common-lisp:or scte35segmentation-cancel-indicator
                                         common-lisp:null)
                         :accessor
                         %scte35segmentation-descriptor-segmentation-cancel-indicator
                         :initform
                         (common-lisp:error
                          ":segmentation-cancel-indicator is required"))
                        (segment-num :initarg :segment-num :type
                         (common-lisp:or |__integerMin0Max255|
                                         common-lisp:null)
                         :accessor %scte35segmentation-descriptor-segment-num
                         :initform common-lisp:nil)
                        (delivery-restrictions :initarg :delivery-restrictions
                         :type
                         (common-lisp:or scte35delivery-restrictions
                                         common-lisp:null)
                         :accessor
                         %scte35segmentation-descriptor-delivery-restrictions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scte35segmentation-descriptor
                    'make-scte35segmentation-descriptor))
 (common-lisp:defun make-scte35segmentation-descriptor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sub-segments-expected sub-segment-num
                     segments-expected segmentation-upid-type segmentation-upid
                     segmentation-type-id segmentation-event-id
                     segmentation-duration segmentation-cancel-indicator
                     segment-num delivery-restrictions)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte35segmentation-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35segmentation-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35segmentation-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-restrictions))
      (common-lisp:list
       (common-lisp:cons "DeliveryRestrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-num))
      (common-lisp:list
       (common-lisp:cons "SegmentNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-cancel-indicator))
      (common-lisp:list
       (common-lisp:cons "SegmentationCancelIndicator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-duration))
      (common-lisp:list
       (common-lisp:cons "SegmentationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-event-id))
      (common-lisp:list
       (common-lisp:cons "SegmentationEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-type-id))
      (common-lisp:list
       (common-lisp:cons "SegmentationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-upid))
      (common-lisp:list
       (common-lisp:cons "SegmentationUpid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-upid-type))
      (common-lisp:list
       (common-lisp:cons "SegmentationUpidType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segments-expected))
      (common-lisp:list
       (common-lisp:cons "SegmentsExpected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-segment-num))
      (common-lisp:list
       (common-lisp:cons "SubSegmentNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sub-segments-expected))
      (common-lisp:list
       (common-lisp:cons "SubSegmentsExpected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35segmentation-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte35splice-insert common-lisp:nil
                       ((web-delivery-allowed-flag :initarg
                         :web-delivery-allowed-flag :type
                         (common-lisp:or
                          scte35splice-insert-web-delivery-allowed-behavior
                          common-lisp:null)
                         :accessor
                         %scte35splice-insert-web-delivery-allowed-flag
                         :initform common-lisp:nil)
                        (no-regional-blackout-flag :initarg
                         :no-regional-blackout-flag :type
                         (common-lisp:or
                          scte35splice-insert-no-regional-blackout-behavior
                          common-lisp:null)
                         :accessor
                         %scte35splice-insert-no-regional-blackout-flag
                         :initform common-lisp:nil)
                        (ad-avail-offset :initarg :ad-avail-offset :type
                         (common-lisp:or |__integerMinNegative1000Max1000|
                                         common-lisp:null)
                         :accessor %scte35splice-insert-ad-avail-offset
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scte35splice-insert 'make-scte35splice-insert))
 (common-lisp:defun make-scte35splice-insert
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key web-delivery-allowed-flag
                     no-regional-blackout-flag ad-avail-offset)
   (common-lisp:apply #'common-lisp:make-instance 'scte35splice-insert
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scte35splice-insert))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scte35splice-insert))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-regional-blackout-flag))
      (common-lisp:list
       (common-lisp:cons "NoRegionalBlackoutFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-delivery-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "WebDeliveryAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scte35splice-insert))
   common-lisp:nil))
(common-lisp:deftype scte35splice-insert-no-regional-blackout-behavior ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35splice-insert-schedule-action-settings
                       common-lisp:nil
                       ((splice-event-id :initarg :splice-event-id :type
                         (common-lisp:or |__longMin0Max4294967295|
                                         common-lisp:null)
                         :accessor
                         %scte35splice-insert-schedule-action-settings-splice-event-id
                         :initform
                         (common-lisp:error ":splice-event-id is required"))
                        (duration :initarg :duration :type
                         (common-lisp:or |__longMin0Max8589934591|
                                         common-lisp:null)
                         :accessor
                         %scte35splice-insert-schedule-action-settings-duration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scte35splice-insert-schedule-action-settings
                    'make-scte35splice-insert-schedule-action-settings))
 (common-lisp:defun make-scte35splice-insert-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key splice-event-id duration)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte35splice-insert-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35splice-insert-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35splice-insert-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'splice-event-id))
      (common-lisp:list
       (common-lisp:cons "SpliceEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35splice-insert-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35splice-insert-web-delivery-allowed-behavior ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scte35time-signal-apos common-lisp:nil
                       ((web-delivery-allowed-flag :initarg
                         :web-delivery-allowed-flag :type
                         (common-lisp:or
                          scte35apos-web-delivery-allowed-behavior
                          common-lisp:null)
                         :accessor
                         %scte35time-signal-apos-web-delivery-allowed-flag
                         :initform common-lisp:nil)
                        (no-regional-blackout-flag :initarg
                         :no-regional-blackout-flag :type
                         (common-lisp:or
                          scte35apos-no-regional-blackout-behavior
                          common-lisp:null)
                         :accessor
                         %scte35time-signal-apos-no-regional-blackout-flag
                         :initform common-lisp:nil)
                        (ad-avail-offset :initarg :ad-avail-offset :type
                         (common-lisp:or |__integerMinNegative1000Max1000|
                                         common-lisp:null)
                         :accessor %scte35time-signal-apos-ad-avail-offset
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scte35time-signal-apos 'make-scte35time-signal-apos))
 (common-lisp:defun make-scte35time-signal-apos
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key web-delivery-allowed-flag
                     no-regional-blackout-flag ad-avail-offset)
   (common-lisp:apply #'common-lisp:make-instance 'scte35time-signal-apos
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-apos))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-apos))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-regional-blackout-flag))
      (common-lisp:list
       (common-lisp:cons "NoRegionalBlackoutFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-delivery-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "WebDeliveryAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-apos))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass scte35time-signal-schedule-action-settings
                       common-lisp:nil
                       ((scte35descriptors :initarg :scte35descriptors :type
                         (common-lisp:or |__listOfScte35Descriptor|
                                         common-lisp:null)
                         :accessor
                         %scte35time-signal-schedule-action-settings-scte35descriptors
                         :initform
                         (common-lisp:error
                          ":scte35descriptors is required"))))
 (common-lisp:export
  (common-lisp:list 'scte35time-signal-schedule-action-settings
                    'make-scte35time-signal-schedule-action-settings))
 (common-lisp:defun make-scte35time-signal-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scte35descriptors)
   (common-lisp:apply #'common-lisp:make-instance
                      'scte35time-signal-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35descriptors))
      (common-lisp:list
       (common-lisp:cons "Scte35Descriptors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35web-delivery-allowed-flag () 'common-lisp:string)
(common-lisp:deftype smooth-group-audio-only-timecode-control ()
  'common-lisp:string)
(common-lisp:deftype smooth-group-certificate-mode () 'common-lisp:string)
(common-lisp:deftype smooth-group-event-id-mode () 'common-lisp:string)
(common-lisp:deftype smooth-group-event-stop-behavior () 'common-lisp:string)
(common-lisp:deftype smooth-group-segmentation-mode () 'common-lisp:string)
(common-lisp:deftype smooth-group-sparse-track-type () 'common-lisp:string)
(common-lisp:deftype smooth-group-stream-manifest-behavior ()
  'common-lisp:string)
(common-lisp:deftype smooth-group-timestamp-offset-mode () 'common-lisp:string)
(common-lisp:deftype smpte2038data-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass smpte-tt-destination-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'smpte-tt-destination-settings
                    'make-smpte-tt-destination-settings))
 (common-lisp:defun make-smpte-tt-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'smpte-tt-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          smpte-tt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          smpte-tt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          smpte-tt-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass standard-hls-settings common-lisp:nil
                       ((m3u8settings :initarg :m3u8settings :type
                         (common-lisp:or m3u8settings common-lisp:null)
                         :accessor %standard-hls-settings-m3u8settings
                         :initform
                         (common-lisp:error ":m3u8settings is required"))
                        (audio-rendition-sets :initarg :audio-rendition-sets
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %standard-hls-settings-audio-rendition-sets
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'standard-hls-settings 'make-standard-hls-settings))
 (common-lisp:defun make-standard-hls-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key m3u8settings audio-rendition-sets)
   (common-lisp:apply #'common-lisp:make-instance 'standard-hls-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standard-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standard-hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-rendition-sets))
      (common-lisp:list
       (common-lisp:cons "AudioRenditionSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm3u8settings))
      (common-lisp:list
       (common-lisp:cons "M3u8Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standard-hls-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-channel-request common-lisp:nil
                       ((channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-channel-request-channel-id :initform
                         (common-lisp:error ":channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-channel-request 'make-start-channel-request))
 (common-lisp:defun make-start-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-channel-response common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor %start-channel-response-vpc :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %start-channel-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor %start-channel-response-state :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-channel-response-role-arn :initform
                         common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %start-channel-response-pipelines-running-count
                         :initform common-lisp:nil)
                        (pipeline-details :initarg :pipeline-details :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor %start-channel-response-pipeline-details
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-channel-response-name :initform
                         common-lisp:nil)
                        (maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor %start-channel-response-maintenance
                         :initform common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %start-channel-response-log-level :initform
                         common-lisp:nil)
                        (input-specification :initarg :input-specification
                         :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor %start-channel-response-input-specification
                         :initform common-lisp:nil)
                        (input-attachments :initarg :input-attachments :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor %start-channel-response-input-attachments
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-channel-response-id :initform common-lisp:nil)
                        (encoder-settings :initarg :encoder-settings :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor %start-channel-response-encoder-settings
                         :initform common-lisp:nil)
                        (egress-endpoints :initarg :egress-endpoints :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor %start-channel-response-egress-endpoints
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %start-channel-response-destinations
                         :initform common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor %start-channel-response-channel-class
                         :initform common-lisp:nil)
                        (cdi-input-specification :initarg
                         :cdi-input-specification :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         %start-channel-response-cdi-input-specification
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-channel-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-channel-response 'make-start-channel-response))
 (common-lisp:defun make-start-channel-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc tags state role-arn
                     pipelines-running-count pipeline-details name maintenance
                     log-level input-specification input-attachments id
                     encoder-settings egress-endpoints destinations
                     channel-class cdi-input-specification arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-input-device-maintenance-window-request
                       common-lisp:nil
                       ((input-device-id :initarg :input-device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-input-device-maintenance-window-request-input-device-id
                         :initform
                         (common-lisp:error ":input-device-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-input-device-maintenance-window-request
                    'make-start-input-device-maintenance-window-request))
 (common-lisp:defun make-start-input-device-maintenance-window-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input-device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-input-device-maintenance-window-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-input-device-maintenance-window-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-input-device-maintenance-window-response
                    'make-start-input-device-maintenance-window-response))
 (common-lisp:defun make-start-input-device-maintenance-window-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-input-device-maintenance-window-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-multiplex-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-multiplex-request-multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-multiplex-request 'make-start-multiplex-request))
 (common-lisp:defun make-start-multiplex-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-multiplex-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %start-multiplex-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor %start-multiplex-response-state :initform
                         common-lisp:nil)
                        (program-count :initarg :program-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %start-multiplex-response-program-count
                         :initform common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %start-multiplex-response-pipelines-running-count
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-multiplex-response-name :initform
                         common-lisp:nil)
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor %start-multiplex-response-multiplex-settings
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-multiplex-response-id :initform
                         common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfMultiplexOutputDestination|
                                         common-lisp:null)
                         :accessor %start-multiplex-response-destinations
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %start-multiplex-response-availability-zones
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-multiplex-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-multiplex-response 'make-start-multiplex-response))
 (common-lisp:defun make-start-multiplex-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags state program-count
                     pipelines-running-count name multiplex-settings id
                     destinations availability-zones arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-timecode common-lisp:nil
                       ((timecode :initarg :timecode :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %start-timecode-timecode :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'start-timecode 'make-start-timecode))
 (common-lisp:defun make-start-timecode
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timecode)
   (common-lisp:apply #'common-lisp:make-instance 'start-timecode
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-timecode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-timecode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode))
      (common-lisp:list
       (common-lisp:cons "Timecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-timecode))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass static-image-activate-schedule-action-settings
                       common-lisp:nil
                       ((width :initarg :width :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         %static-image-activate-schedule-action-settings-width
                         :initform common-lisp:nil)
                        (opacity :initarg :opacity :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor
                         %static-image-activate-schedule-action-settings-opacity
                         :initform common-lisp:nil)
                        (layer :initarg :layer :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor
                         %static-image-activate-schedule-action-settings-layer
                         :initform common-lisp:nil)
                        (image-y :initarg :image-y :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %static-image-activate-schedule-action-settings-image-y
                         :initform common-lisp:nil)
                        (image-x :initarg :image-x :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %static-image-activate-schedule-action-settings-image-x
                         :initform common-lisp:nil)
                        (image :initarg :image :type
                         (common-lisp:or input-location common-lisp:null)
                         :accessor
                         %static-image-activate-schedule-action-settings-image
                         :initform (common-lisp:error ":image is required"))
                        (height :initarg :height :type
                         (common-lisp:or |__integerMin1| common-lisp:null)
                         :accessor
                         %static-image-activate-schedule-action-settings-height
                         :initform common-lisp:nil)
                        (fade-out :initarg :fade-out :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %static-image-activate-schedule-action-settings-fade-out
                         :initform common-lisp:nil)
                        (fade-in :initarg :fade-in :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %static-image-activate-schedule-action-settings-fade-in
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %static-image-activate-schedule-action-settings-duration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'static-image-activate-schedule-action-settings
                    'make-static-image-activate-schedule-action-settings))
 (common-lisp:defun make-static-image-activate-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width opacity layer image-y image-x image
                     height fade-out fade-in duration)
   (common-lisp:apply #'common-lisp:make-instance
                      'static-image-activate-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-image-activate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-image-activate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-in))
      (common-lisp:list
       (common-lisp:cons "FadeIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-out))
      (common-lisp:list
       (common-lisp:cons "FadeOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-x))
      (common-lisp:list
       (common-lisp:cons "ImageX"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-y))
      (common-lisp:list
       (common-lisp:cons "ImageY"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer))
      (common-lisp:list
       (common-lisp:cons "Layer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opacity))
      (common-lisp:list
       (common-lisp:cons "Opacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-image-activate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass static-image-deactivate-schedule-action-settings
                       common-lisp:nil
                       ((layer :initarg :layer :type
                         (common-lisp:or |__integerMin0Max7| common-lisp:null)
                         :accessor
                         %static-image-deactivate-schedule-action-settings-layer
                         :initform common-lisp:nil)
                        (fade-out :initarg :fade-out :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor
                         %static-image-deactivate-schedule-action-settings-fade-out
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'static-image-deactivate-schedule-action-settings
                    'make-static-image-deactivate-schedule-action-settings))
 (common-lisp:defun make-static-image-deactivate-schedule-action-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key layer fade-out)
   (common-lisp:apply #'common-lisp:make-instance
                      'static-image-deactivate-schedule-action-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-image-deactivate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-image-deactivate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-out))
      (common-lisp:list
       (common-lisp:cons "FadeOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer))
      (common-lisp:list
       (common-lisp:cons "Layer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-image-deactivate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass static-key-settings common-lisp:nil
                       ((static-key-value :initarg :static-key-value :type
                         (common-lisp:or |__stringMin32Max32| common-lisp:null)
                         :accessor %static-key-settings-static-key-value
                         :initform
                         (common-lisp:error ":static-key-value is required"))
                        (key-provider-server :initarg :key-provider-server
                         :type (common-lisp:or input-location common-lisp:null)
                         :accessor %static-key-settings-key-provider-server
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'static-key-settings 'make-static-key-settings))
 (common-lisp:defun make-static-key-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key static-key-value key-provider-server)
   (common-lisp:apply #'common-lisp:make-instance 'static-key-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input static-key-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input static-key-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-provider-server))
      (common-lisp:list
       (common-lisp:cons "KeyProviderServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-key-value))
      (common-lisp:list
       (common-lisp:cons "StaticKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input static-key-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-channel-request common-lisp:nil
                       ((channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-channel-request-channel-id :initform
                         (common-lisp:error ":channel-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-channel-request 'make-stop-channel-request))
 (common-lisp:defun make-stop-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-channel-response common-lisp:nil
                       ((vpc :initarg :vpc :type
                         (common-lisp:or vpc-output-settings-description
                                         common-lisp:null)
                         :accessor %stop-channel-response-vpc :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %stop-channel-response-tags :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or channel-state common-lisp:null)
                         :accessor %stop-channel-response-state :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-channel-response-role-arn :initform
                         common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %stop-channel-response-pipelines-running-count
                         :initform common-lisp:nil)
                        (pipeline-details :initarg :pipeline-details :type
                         (common-lisp:or |__listOfPipelineDetail|
                                         common-lisp:null)
                         :accessor %stop-channel-response-pipeline-details
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-channel-response-name :initform common-lisp:nil)
                        (maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance-status common-lisp:null)
                         :accessor %stop-channel-response-maintenance :initform
                         common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %stop-channel-response-log-level :initform
                         common-lisp:nil)
                        (input-specification :initarg :input-specification
                         :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor %stop-channel-response-input-specification
                         :initform common-lisp:nil)
                        (input-attachments :initarg :input-attachments :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor %stop-channel-response-input-attachments
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-channel-response-id :initform common-lisp:nil)
                        (encoder-settings :initarg :encoder-settings :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor %stop-channel-response-encoder-settings
                         :initform common-lisp:nil)
                        (egress-endpoints :initarg :egress-endpoints :type
                         (common-lisp:or |__listOfChannelEgressEndpoint|
                                         common-lisp:null)
                         :accessor %stop-channel-response-egress-endpoints
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %stop-channel-response-destinations
                         :initform common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor %stop-channel-response-channel-class
                         :initform common-lisp:nil)
                        (cdi-input-specification :initarg
                         :cdi-input-specification :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         %stop-channel-response-cdi-input-specification
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-channel-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-channel-response 'make-stop-channel-response))
 (common-lisp:defun make-stop-channel-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc tags state role-arn
                     pipelines-running-count pipeline-details name maintenance
                     log-level input-specification input-attachments id
                     encoder-settings egress-endpoints destinations
                     channel-class cdi-input-specification arn)
   (common-lisp:apply #'common-lisp:make-instance 'stop-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-multiplex-request common-lisp:nil
                       ((multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-multiplex-request-multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-multiplex-request 'make-stop-multiplex-request))
 (common-lisp:defun make-stop-multiplex-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-multiplex-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %stop-multiplex-response-tags :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or multiplex-state common-lisp:null)
                         :accessor %stop-multiplex-response-state :initform
                         common-lisp:nil)
                        (program-count :initarg :program-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %stop-multiplex-response-program-count
                         :initform common-lisp:nil)
                        (pipelines-running-count :initarg
                         :pipelines-running-count :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor
                         %stop-multiplex-response-pipelines-running-count
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-multiplex-response-name :initform
                         common-lisp:nil)
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor %stop-multiplex-response-multiplex-settings
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-multiplex-response-id :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfMultiplexOutputDestination|
                                         common-lisp:null)
                         :accessor %stop-multiplex-response-destinations
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %stop-multiplex-response-availability-zones
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-multiplex-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-multiplex-response 'make-stop-multiplex-response))
 (common-lisp:defun make-stop-multiplex-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags state program-count
                     pipelines-running-count name multiplex-settings id
                     destinations availability-zones arn)
   (common-lisp:apply #'common-lisp:make-instance 'stop-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-timecode common-lisp:nil
                       ((timecode :initarg :timecode :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %stop-timecode-timecode :initform common-lisp:nil)
                        (last-frame-clipping-behavior :initarg
                         :last-frame-clipping-behavior :type
                         (common-lisp:or last-frame-clipping-behavior
                                         common-lisp:null)
                         :accessor %stop-timecode-last-frame-clipping-behavior
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stop-timecode 'make-stop-timecode))
 (common-lisp:defun make-stop-timecode
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timecode last-frame-clipping-behavior)
   (common-lisp:apply #'common-lisp:make-instance 'stop-timecode
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-timecode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-timecode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-frame-clipping-behavior))
      (common-lisp:list
       (common-lisp:cons "LastFrameClippingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode))
      (common-lisp:list
       (common-lisp:cons "Timecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-timecode))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tags-model common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tags-model-tags :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tags-model 'make-tags-model))
 (common-lisp:defun make-tags-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance 'tags-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tags-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tags-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tags-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass teletext-destination-settings common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'teletext-destination-settings
                    'make-teletext-destination-settings))
 (common-lisp:defun make-teletext-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'teletext-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass teletext-source-settings common-lisp:nil
                       ((page-number :initarg :page-number :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %teletext-source-settings-page-number :initform
                         common-lisp:nil)
                        (output-rectangle :initarg :output-rectangle :type
                         (common-lisp:or caption-rectangle common-lisp:null)
                         :accessor %teletext-source-settings-output-rectangle
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'teletext-source-settings 'make-teletext-source-settings))
 (common-lisp:defun make-teletext-source-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key page-number output-rectangle)
   (common-lisp:apply #'common-lisp:make-instance 'teletext-source-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-rectangle))
      (common-lisp:list
       (common-lisp:cons "OutputRectangle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   common-lisp:nil))
(common-lisp:deftype temporal-filter-post-filter-sharpening ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass temporal-filter-settings common-lisp:nil
                       ((strength :initarg :strength :type
                         (common-lisp:or temporal-filter-strength
                                         common-lisp:null)
                         :accessor %temporal-filter-settings-strength :initform
                         common-lisp:nil)
                        (post-filter-sharpening :initarg
                         :post-filter-sharpening :type
                         (common-lisp:or temporal-filter-post-filter-sharpening
                                         common-lisp:null)
                         :accessor
                         %temporal-filter-settings-post-filter-sharpening
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'temporal-filter-settings 'make-temporal-filter-settings))
 (common-lisp:defun make-temporal-filter-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key strength post-filter-sharpening)
   (common-lisp:apply #'common-lisp:make-instance 'temporal-filter-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          temporal-filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          temporal-filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-filter-sharpening))
      (common-lisp:list
       (common-lisp:cons "PostFilterSharpening"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strength))
      (common-lisp:list
       (common-lisp:cons "Strength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          temporal-filter-settings))
   common-lisp:nil))
(common-lisp:deftype temporal-filter-strength () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass thumbnail-data common-lisp:nil
                       ((body :initarg :body :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %thumbnail-data-body :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'thumbnail-data 'make-thumbnail-data))
 (common-lisp:defun make-thumbnail-data
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key body)
   (common-lisp:apply #'common-lisp:make-instance 'thumbnail-data
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thumbnail-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thumbnail-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thumbnail-data))
   common-lisp:nil))
(common-lisp:deftype timecode-burnin-font-size () 'common-lisp:string)
(common-lisp:deftype timecode-burnin-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timecode-burnin-settings common-lisp:nil
                       ((prefix :initarg :prefix :type
                         (common-lisp:or |__stringMax255| common-lisp:null)
                         :accessor %timecode-burnin-settings-prefix :initform
                         common-lisp:nil)
                        (position :initarg :position :type
                         (common-lisp:or timecode-burnin-position
                                         common-lisp:null)
                         :accessor %timecode-burnin-settings-position :initform
                         (common-lisp:error ":position is required"))
                        (font-size :initarg :font-size :type
                         (common-lisp:or timecode-burnin-font-size
                                         common-lisp:null)
                         :accessor %timecode-burnin-settings-font-size
                         :initform
                         (common-lisp:error ":font-size is required"))))
 (common-lisp:export
  (common-lisp:list 'timecode-burnin-settings 'make-timecode-burnin-settings))
 (common-lisp:defun make-timecode-burnin-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key prefix position font-size)
   (common-lisp:apply #'common-lisp:make-instance 'timecode-burnin-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timecode-burnin-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timecode-burnin-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timecode-burnin-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass timecode-config common-lisp:nil
                       ((sync-threshold :initarg :sync-threshold :type
                         (common-lisp:or |__integerMin1Max1000000|
                                         common-lisp:null)
                         :accessor %timecode-config-sync-threshold :initform
                         common-lisp:nil)
                        (source :initarg :source :type
                         (common-lisp:or timecode-config-source
                                         common-lisp:null)
                         :accessor %timecode-config-source :initform
                         (common-lisp:error ":source is required"))))
 (common-lisp:export (common-lisp:list 'timecode-config 'make-timecode-config))
 (common-lisp:defun make-timecode-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sync-threshold source)
   (common-lisp:apply #'common-lisp:make-instance 'timecode-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timecode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timecode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-threshold))
      (common-lisp:list
       (common-lisp:cons "SyncThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timecode-config))
   common-lisp:nil))
(common-lisp:deftype timecode-config-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass transfer-input-device common-lisp:nil
                       ((transfer-message :initarg :transfer-message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transfer-input-device-transfer-message :initform
                         common-lisp:nil)
                        (target-region :initarg :target-region :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transfer-input-device-target-region :initform
                         common-lisp:nil)
                        (target-customer-id :initarg :target-customer-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transfer-input-device-target-customer-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'transfer-input-device 'make-transfer-input-device))
 (common-lisp:defun make-transfer-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transfer-message target-region
                     target-customer-id)
   (common-lisp:apply #'common-lisp:make-instance 'transfer-input-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-customer-id))
      (common-lisp:list
       (common-lisp:cons "TargetCustomerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "TargetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "TransferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transfer-input-device-request common-lisp:nil
                       ((transfer-message :initarg :transfer-message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transfer-input-device-request-transfer-message
                         :initform common-lisp:nil)
                        (target-region :initarg :target-region :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transfer-input-device-request-target-region :initform
                         common-lisp:nil)
                        (target-customer-id :initarg :target-customer-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transfer-input-device-request-target-customer-id
                         :initform common-lisp:nil)
                        (input-device-id :initarg :input-device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transfer-input-device-request-input-device-id
                         :initform
                         (common-lisp:error ":input-device-id is required"))))
 (common-lisp:export
  (common-lisp:list 'transfer-input-device-request
                    'make-transfer-input-device-request))
 (common-lisp:defun make-transfer-input-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transfer-message target-region
                     target-customer-id input-device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'transfer-input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-customer-id))
      (common-lisp:list
       (common-lisp:cons "TargetCustomerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "TargetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "TransferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transfer-input-device-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'transfer-input-device-response
                    'make-transfer-input-device-response))
 (common-lisp:defun make-transfer-input-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'transfer-input-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transferring-input-device-summary common-lisp:nil
                       ((transfer-type :initarg :transfer-type :type
                         (common-lisp:or input-device-transfer-type
                                         common-lisp:null)
                         :accessor
                         %transferring-input-device-summary-transfer-type
                         :initform common-lisp:nil)
                        (target-customer-id :initarg :target-customer-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transferring-input-device-summary-target-customer-id
                         :initform common-lisp:nil)
                        (message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transferring-input-device-summary-message :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %transferring-input-device-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'transferring-input-device-summary
                    'make-transferring-input-device-summary))
 (common-lisp:defun make-transferring-input-device-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transfer-type target-customer-id message
                     id)
   (common-lisp:apply #'common-lisp:make-instance
                      'transferring-input-device-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transferring-input-device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transferring-input-device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-customer-id))
      (common-lisp:list
       (common-lisp:cons "TargetCustomerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-type))
      (common-lisp:list
       (common-lisp:cons "TransferType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transferring-input-device-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ttml-destination-settings common-lisp:nil
                       ((style-control :initarg :style-control :type
                         (common-lisp:or ttml-destination-style-control
                                         common-lisp:null)
                         :accessor %ttml-destination-settings-style-control
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ttml-destination-settings
                    'make-ttml-destination-settings))
 (common-lisp:defun make-ttml-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key style-control)
   (common-lisp:apply #'common-lisp:make-instance 'ttml-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-control))
      (common-lisp:list
       (common-lisp:cons "StyleControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   common-lisp:nil))
(common-lisp:deftype ttml-destination-style-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass udp-container-settings common-lisp:nil
                       ((m2ts-settings :initarg :m2ts-settings :type
                         (common-lisp:or m2ts-settings common-lisp:null)
                         :accessor %udp-container-settings-m2ts-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'udp-container-settings 'make-udp-container-settings))
 (common-lisp:defun make-udp-container-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key m2ts-settings)
   (common-lisp:apply #'common-lisp:make-instance 'udp-container-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          udp-container-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          udp-container-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm2ts-settings))
      (common-lisp:list
       (common-lisp:cons "M2tsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          udp-container-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass udp-group-settings common-lisp:nil
                       ((timed-metadata-id3period :initarg
                         :timed-metadata-id3period :type
                         (common-lisp:or |__integerMin0| common-lisp:null)
                         :accessor %udp-group-settings-timed-metadata-id3period
                         :initform common-lisp:nil)
                        (timed-metadata-id3frame :initarg
                         :timed-metadata-id3frame :type
                         (common-lisp:or udp-timed-metadata-id3frame
                                         common-lisp:null)
                         :accessor %udp-group-settings-timed-metadata-id3frame
                         :initform common-lisp:nil)
                        (input-loss-action :initarg :input-loss-action :type
                         (common-lisp:or input-loss-action-for-udp-out
                                         common-lisp:null)
                         :accessor %udp-group-settings-input-loss-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'udp-group-settings 'make-udp-group-settings))
 (common-lisp:defun make-udp-group-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timed-metadata-id3period
                     timed-metadata-id3frame input-loss-action)
   (common-lisp:apply #'common-lisp:make-instance 'udp-group-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input udp-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input udp-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3frame))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Frame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3period))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input udp-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass udp-output-settings common-lisp:nil
                       ((fec-output-settings :initarg :fec-output-settings
                         :type
                         (common-lisp:or fec-output-settings common-lisp:null)
                         :accessor %udp-output-settings-fec-output-settings
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or output-location-ref common-lisp:null)
                         :accessor %udp-output-settings-destination :initform
                         (common-lisp:error ":destination is required"))
                        (container-settings :initarg :container-settings :type
                         (common-lisp:or udp-container-settings
                                         common-lisp:null)
                         :accessor %udp-output-settings-container-settings
                         :initform
                         (common-lisp:error ":container-settings is required"))
                        (buffer-msec :initarg :buffer-msec :type
                         (common-lisp:or |__integerMin0Max10000|
                                         common-lisp:null)
                         :accessor %udp-output-settings-buffer-msec :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'udp-output-settings 'make-udp-output-settings))
 (common-lisp:defun make-udp-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fec-output-settings destination
                     container-settings buffer-msec)
   (common-lisp:apply #'common-lisp:make-instance 'udp-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input udp-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input udp-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-msec))
      (common-lisp:list
       (common-lisp:cons "BufferMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-settings))
      (common-lisp:list
       (common-lisp:cons "ContainerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fec-output-settings))
      (common-lisp:list
       (common-lisp:cons "FecOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input udp-output-settings))
   common-lisp:nil))
(common-lisp:deftype udp-timed-metadata-id3frame () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unprocessable-entity-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unprocessable-entity-exception-message)
      (validation-errors :initarg :validation-errors :initform common-lisp:nil
       :reader unprocessable-entity-exception-validation-errors)))
 (common-lisp:export
  (common-lisp:list 'unprocessable-entity-exception
                    'unprocessable-entity-exception-message
                    'unprocessable-entity-exception-validation-errors)))
(common-lisp:progn
 (common-lisp:defclass update-channel common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-channel-role-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-channel-name :initform common-lisp:nil)
                        (maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance-update-settings
                                         common-lisp:null)
                         :accessor %update-channel-maintenance :initform
                         common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %update-channel-log-level :initform common-lisp:nil)
                        (input-specification :initarg :input-specification
                         :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor %update-channel-input-specification
                         :initform common-lisp:nil)
                        (input-attachments :initarg :input-attachments :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor %update-channel-input-attachments :initform
                         common-lisp:nil)
                        (encoder-settings :initarg :encoder-settings :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor %update-channel-encoder-settings :initform
                         common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %update-channel-destinations :initform
                         common-lisp:nil)
                        (cdi-input-specification :initarg
                         :cdi-input-specification :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor %update-channel-cdi-input-specification
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'update-channel 'make-update-channel))
 (common-lisp:defun make-update-channel
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn name maintenance log-level
                     input-specification input-attachments encoder-settings
                     destinations cdi-input-specification)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-class common-lisp:nil
                       ((destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %update-channel-class-destinations :initform
                         common-lisp:nil)
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor %update-channel-class-channel-class
                         :initform
                         (common-lisp:error ":channel-class is required"))))
 (common-lisp:export
  (common-lisp:list 'update-channel-class 'make-update-channel-class))
 (common-lisp:defun make-update-channel-class
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destinations channel-class)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-class
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-channel-class))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-channel-class))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-channel-class))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-class-request common-lisp:nil
                       ((destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %update-channel-class-request-destinations
                         :initform common-lisp:nil)
                        (channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-channel-class-request-channel-id :initform
                         (common-lisp:error ":channel-id is required"))
                        (channel-class :initarg :channel-class :type
                         (common-lisp:or channel-class common-lisp:null)
                         :accessor %update-channel-class-request-channel-class
                         :initform
                         (common-lisp:error ":channel-class is required"))))
 (common-lisp:export
  (common-lisp:list 'update-channel-class-request
                    'make-update-channel-class-request))
 (common-lisp:defun make-update-channel-class-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destinations channel-id channel-class)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-class-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-class-response common-lisp:nil
                       ((channel :initarg :channel :type
                         (common-lisp:or channel common-lisp:null) :accessor
                         %update-channel-class-response-channel :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-channel-class-response
                    'make-update-channel-class-response))
 (common-lisp:defun make-update-channel-class-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-channel-class-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-request common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-channel-request-role-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-channel-request-name :initform
                         common-lisp:nil)
                        (maintenance :initarg :maintenance :type
                         (common-lisp:or maintenance-update-settings
                                         common-lisp:null)
                         :accessor %update-channel-request-maintenance
                         :initform common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %update-channel-request-log-level :initform
                         common-lisp:nil)
                        (input-specification :initarg :input-specification
                         :type
                         (common-lisp:or input-specification common-lisp:null)
                         :accessor %update-channel-request-input-specification
                         :initform common-lisp:nil)
                        (input-attachments :initarg :input-attachments :type
                         (common-lisp:or |__listOfInputAttachment|
                                         common-lisp:null)
                         :accessor %update-channel-request-input-attachments
                         :initform common-lisp:nil)
                        (encoder-settings :initarg :encoder-settings :type
                         (common-lisp:or encoder-settings common-lisp:null)
                         :accessor %update-channel-request-encoder-settings
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfOutputDestination|
                                         common-lisp:null)
                         :accessor %update-channel-request-destinations
                         :initform common-lisp:nil)
                        (channel-id :initarg :channel-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-channel-request-channel-id :initform
                         (common-lisp:error ":channel-id is required"))
                        (cdi-input-specification :initarg
                         :cdi-input-specification :type
                         (common-lisp:or cdi-input-specification
                                         common-lisp:null)
                         :accessor
                         %update-channel-request-cdi-input-specification
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-channel-request 'make-update-channel-request))
 (common-lisp:defun make-update-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn name maintenance log-level
                     input-specification input-attachments encoder-settings
                     destinations channel-id cdi-input-specification)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-response common-lisp:nil
                       ((channel :initarg :channel :type
                         (common-lisp:or channel common-lisp:null) :accessor
                         %update-channel-response-channel :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-channel-response 'make-update-channel-response))
 (common-lisp:defun make-update-channel-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-channel-result-model common-lisp:nil
                       ((channel :initarg :channel :type
                         (common-lisp:or channel common-lisp:null) :accessor
                         %update-channel-result-model-channel :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-channel-result-model
                    'make-update-channel-result-model))
 (common-lisp:defun make-update-channel-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channel)
   (common-lisp:apply #'common-lisp:make-instance 'update-channel-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or |__listOfInputSourceRequest|
                                         common-lisp:null)
                         :accessor %update-input-sources :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-role-arn :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-name :initform common-lisp:nil)
                        (media-connect-flows :initarg :media-connect-flows
                         :type
                         (common-lisp:or |__listOfMediaConnectFlowRequest|
                                         common-lisp:null)
                         :accessor %update-input-media-connect-flows :initform
                         common-lisp:nil)
                        (input-security-groups :initarg :input-security-groups
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %update-input-input-security-groups
                         :initform common-lisp:nil)
                        (input-devices :initarg :input-devices :type
                         (common-lisp:or |__listOfInputDeviceRequest|
                                         common-lisp:null)
                         :accessor %update-input-input-devices :initform
                         common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfInputDestinationRequest|
                                         common-lisp:null)
                         :accessor %update-input-destinations :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'update-input 'make-update-input))
 (common-lisp:defun make-update-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources role-arn name media-connect-flows
                     input-security-groups input-devices destinations)
   (common-lisp:apply #'common-lisp:make-instance 'update-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-device common-lisp:nil
                       ((uhd-device-settings :initarg :uhd-device-settings
                         :type
                         (common-lisp:or input-device-configurable-settings
                                         common-lisp:null)
                         :accessor %update-input-device-uhd-device-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-device-name :initform common-lisp:nil)
                        (hd-device-settings :initarg :hd-device-settings :type
                         (common-lisp:or input-device-configurable-settings
                                         common-lisp:null)
                         :accessor %update-input-device-hd-device-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-input-device 'make-update-input-device))
 (common-lisp:defun make-update-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uhd-device-settings name
                     hd-device-settings)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-input-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-device-request common-lisp:nil
                       ((uhd-device-settings :initarg :uhd-device-settings
                         :type
                         (common-lisp:or input-device-configurable-settings
                                         common-lisp:null)
                         :accessor
                         %update-input-device-request-uhd-device-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-device-request-name :initform
                         common-lisp:nil)
                        (input-device-id :initarg :input-device-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-device-request-input-device-id :initform
                         (common-lisp:error ":input-device-id is required"))
                        (hd-device-settings :initarg :hd-device-settings :type
                         (common-lisp:or input-device-configurable-settings
                                         common-lisp:null)
                         :accessor
                         %update-input-device-request-hd-device-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-input-device-request
                    'make-update-input-device-request))
 (common-lisp:defun make-update-input-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uhd-device-settings name input-device-id
                     hd-device-settings)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-device-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %update-input-device-response-tags :initform
                         common-lisp:nil)
                        (uhd-device-settings :initarg :uhd-device-settings
                         :type
                         (common-lisp:or input-device-uhd-settings
                                         common-lisp:null)
                         :accessor
                         %update-input-device-response-uhd-device-settings
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or input-device-type common-lisp:null)
                         :accessor %update-input-device-response-type :initform
                         common-lisp:nil)
                        (serial-number :initarg :serial-number :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-device-response-serial-number :initform
                         common-lisp:nil)
                        (network-settings :initarg :network-settings :type
                         (common-lisp:or input-device-network-settings
                                         common-lisp:null)
                         :accessor
                         %update-input-device-response-network-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-device-response-name :initform
                         common-lisp:nil)
                        (mac-address :initarg :mac-address :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-device-response-mac-address :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-device-response-id :initform
                         common-lisp:nil)
                        (hd-device-settings :initarg :hd-device-settings :type
                         (common-lisp:or input-device-hd-settings
                                         common-lisp:null)
                         :accessor
                         %update-input-device-response-hd-device-settings
                         :initform common-lisp:nil)
                        (device-update-status :initarg :device-update-status
                         :type
                         (common-lisp:or device-update-status common-lisp:null)
                         :accessor
                         %update-input-device-response-device-update-status
                         :initform common-lisp:nil)
                        (device-settings-sync-state :initarg
                         :device-settings-sync-state :type
                         (common-lisp:or device-settings-sync-state
                                         common-lisp:null)
                         :accessor
                         %update-input-device-response-device-settings-sync-state
                         :initform common-lisp:nil)
                        (connection-state :initarg :connection-state :type
                         (common-lisp:or input-device-connection-state
                                         common-lisp:null)
                         :accessor
                         %update-input-device-response-connection-state
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-device-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-input-device-response
                    'make-update-input-device-response))
 (common-lisp:defun make-update-input-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags uhd-device-settings type
                     serial-number network-settings name mac-address id
                     hd-device-settings device-update-status
                     device-settings-sync-state connection-state arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-request common-lisp:nil
                       ((sources :initarg :sources :type
                         (common-lisp:or |__listOfInputSourceRequest|
                                         common-lisp:null)
                         :accessor %update-input-request-sources :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-request-role-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-request-name :initform common-lisp:nil)
                        (media-connect-flows :initarg :media-connect-flows
                         :type
                         (common-lisp:or |__listOfMediaConnectFlowRequest|
                                         common-lisp:null)
                         :accessor %update-input-request-media-connect-flows
                         :initform common-lisp:nil)
                        (input-security-groups :initarg :input-security-groups
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %update-input-request-input-security-groups
                         :initform common-lisp:nil)
                        (input-id :initarg :input-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-request-input-id :initform
                         (common-lisp:error ":input-id is required"))
                        (input-devices :initarg :input-devices :type
                         (common-lisp:or |__listOfInputDeviceRequest|
                                         common-lisp:null)
                         :accessor %update-input-request-input-devices
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or |__listOfInputDestinationRequest|
                                         common-lisp:null)
                         :accessor %update-input-request-destinations :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-input-request 'make-update-input-request))
 (common-lisp:defun make-update-input-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sources role-arn name media-connect-flows
                     input-security-groups input-id input-devices destinations)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-response common-lisp:nil
                       ((input :initarg :input :type
                         (common-lisp:or input common-lisp:null) :accessor
                         %update-input-response-input :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-input-response 'make-update-input-response))
 (common-lisp:defun make-update-input-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-result-model common-lisp:nil
                       ((input :initarg :input :type
                         (common-lisp:or input common-lisp:null) :accessor
                         %update-input-result-model-input :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-input-result-model
                    'make-update-input-result-model))
 (common-lisp:defun make-update-input-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key input)
   (common-lisp:apply #'common-lisp:make-instance 'update-input-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-security-group-request common-lisp:nil
                       ((whitelist-rules :initarg :whitelist-rules :type
                         (common-lisp:or |__listOfInputWhitelistRuleCidr|
                                         common-lisp:null)
                         :accessor
                         %update-input-security-group-request-whitelist-rules
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %update-input-security-group-request-tags :initform
                         common-lisp:nil)
                        (input-security-group-id :initarg
                         :input-security-group-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-input-security-group-request-input-security-group-id
                         :initform
                         (common-lisp:error
                          ":input-security-group-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-input-security-group-request
                    'make-update-input-security-group-request))
 (common-lisp:defun make-update-input-security-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key whitelist-rules tags
                     input-security-group-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-input-security-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-security-group-response common-lisp:nil
                       ((security-group :initarg :security-group :type
                         (common-lisp:or input-security-group common-lisp:null)
                         :accessor
                         %update-input-security-group-response-security-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-input-security-group-response
                    'make-update-input-security-group-response))
 (common-lisp:defun make-update-input-security-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-input-security-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-input-security-group-result-model common-lisp:nil
                       ((security-group :initarg :security-group :type
                         (common-lisp:or input-security-group common-lisp:null)
                         :accessor
                         %update-input-security-group-result-model-security-group
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-input-security-group-result-model
                    'make-update-input-security-group-result-model))
 (common-lisp:defun make-update-input-security-group-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-input-security-group-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-multiplex-name :initform common-lisp:nil)
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor %update-multiplex-multiplex-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex 'make-update-multiplex))
 (common-lisp:defun make-update-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name multiplex-settings)
   (common-lisp:apply #'common-lisp:make-instance 'update-multiplex
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-multiplex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-multiplex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-multiplex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-program common-lisp:nil
                       ((multiplex-program-settings :initarg
                         :multiplex-program-settings :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         %update-multiplex-program-multiplex-program-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program 'make-update-multiplex-program))
 (common-lisp:defun make-update-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-program-settings)
   (common-lisp:apply #'common-lisp:make-instance 'update-multiplex-program
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-program-request common-lisp:nil
                       ((program-name :initarg :program-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-multiplex-program-request-program-name
                         :initform
                         (common-lisp:error ":program-name is required"))
                        (multiplex-program-settings :initarg
                         :multiplex-program-settings :type
                         (common-lisp:or multiplex-program-settings
                                         common-lisp:null)
                         :accessor
                         %update-multiplex-program-request-multiplex-program-settings
                         :initform common-lisp:nil)
                        (multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-multiplex-program-request-multiplex-id
                         :initform
                         (common-lisp:error ":multiplex-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program-request
                    'make-update-multiplex-program-request))
 (common-lisp:defun make-update-multiplex-program-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key program-name multiplex-program-settings
                     multiplex-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-multiplex-program-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-program-response common-lisp:nil
                       ((multiplex-program :initarg :multiplex-program :type
                         (common-lisp:or multiplex-program common-lisp:null)
                         :accessor
                         %update-multiplex-program-response-multiplex-program
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program-response
                    'make-update-multiplex-program-response))
 (common-lisp:defun make-update-multiplex-program-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-program)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-multiplex-program-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-program-result-model common-lisp:nil
                       ((multiplex-program :initarg :multiplex-program :type
                         (common-lisp:or multiplex-program common-lisp:null)
                         :accessor
                         %update-multiplex-program-result-model-multiplex-program
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program-result-model
                    'make-update-multiplex-program-result-model))
 (common-lisp:defun make-update-multiplex-program-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex-program)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-multiplex-program-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-multiplex-request-name :initform
                         common-lisp:nil)
                        (multiplex-settings :initarg :multiplex-settings :type
                         (common-lisp:or multiplex-settings common-lisp:null)
                         :accessor %update-multiplex-request-multiplex-settings
                         :initform common-lisp:nil)
                        (multiplex-id :initarg :multiplex-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-multiplex-request-multiplex-id :initform
                         (common-lisp:error ":multiplex-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-request 'make-update-multiplex-request))
 (common-lisp:defun make-update-multiplex-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name multiplex-settings multiplex-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-multiplex-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-response common-lisp:nil
                       ((multiplex :initarg :multiplex :type
                         (common-lisp:or multiplex common-lisp:null) :accessor
                         %update-multiplex-response-multiplex :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-response
                    'make-update-multiplex-response))
 (common-lisp:defun make-update-multiplex-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex)
   (common-lisp:apply #'common-lisp:make-instance 'update-multiplex-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multiplex-result-model common-lisp:nil
                       ((multiplex :initarg :multiplex :type
                         (common-lisp:or multiplex common-lisp:null) :accessor
                         %update-multiplex-result-model-multiplex :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-result-model
                    'make-update-multiplex-result-model))
 (common-lisp:defun make-update-multiplex-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multiplex)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-multiplex-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-reservation common-lisp:nil
                       ((renewal-settings :initarg :renewal-settings :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor %update-reservation-renewal-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-reservation-name :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-reservation 'make-update-reservation))
 (common-lisp:defun make-update-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key renewal-settings name)
   (common-lisp:apply #'common-lisp:make-instance 'update-reservation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-reservation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-reservation-request common-lisp:nil
                       ((reservation-id :initarg :reservation-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-reservation-request-reservation-id :initform
                         (common-lisp:error ":reservation-id is required"))
                        (renewal-settings :initarg :renewal-settings :type
                         (common-lisp:or renewal-settings common-lisp:null)
                         :accessor %update-reservation-request-renewal-settings
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-reservation-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-reservation-request
                    'make-update-reservation-request))
 (common-lisp:defun make-update-reservation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation-id renewal-settings name)
   (common-lisp:apply #'common-lisp:make-instance 'update-reservation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-reservation-response common-lisp:nil
                       ((reservation :initarg :reservation :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor %update-reservation-response-reservation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-reservation-response
                    'make-update-reservation-response))
 (common-lisp:defun make-update-reservation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation)
   (common-lisp:apply #'common-lisp:make-instance 'update-reservation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-reservation-result-model common-lisp:nil
                       ((reservation :initarg :reservation :type
                         (common-lisp:or reservation common-lisp:null)
                         :accessor %update-reservation-result-model-reservation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-reservation-result-model
                    'make-update-reservation-result-model))
 (common-lisp:defun make-update-reservation-result-model
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-reservation-result-model
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validation-error common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %validation-error-error-message :initform
                         common-lisp:nil)
                        (element-path :initarg :element-path :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %validation-error-element-path :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validation-error 'make-validation-error))
 (common-lisp:defun make-validation-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message element-path)
   (common-lisp:apply #'common-lisp:make-instance 'validation-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-path))
      (common-lisp:list
       (common-lisp:cons "ElementPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-black-failover-settings common-lisp:nil
                       ((video-black-threshold-msec :initarg
                         :video-black-threshold-msec :type
                         (common-lisp:or |__integerMin1000| common-lisp:null)
                         :accessor
                         %video-black-failover-settings-video-black-threshold-msec
                         :initform common-lisp:nil)
                        (black-detect-threshold :initarg
                         :black-detect-threshold :type
                         (common-lisp:or |__doubleMin0Max1| common-lisp:null)
                         :accessor
                         %video-black-failover-settings-black-detect-threshold
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-black-failover-settings
                    'make-video-black-failover-settings))
 (common-lisp:defun make-video-black-failover-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-black-threshold-msec
                     black-detect-threshold)
   (common-lisp:apply #'common-lisp:make-instance
                      'video-black-failover-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-black-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-black-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'black-detect-threshold))
      (common-lisp:list
       (common-lisp:cons "BlackDetectThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-black-threshold-msec))
      (common-lisp:list
       (common-lisp:cons "VideoBlackThresholdMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-black-failover-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-codec-settings common-lisp:nil
                       ((mpeg2settings :initarg :mpeg2settings :type
                         (common-lisp:or mpeg2settings common-lisp:null)
                         :accessor %video-codec-settings-mpeg2settings
                         :initform common-lisp:nil)
                        (h265settings :initarg :h265settings :type
                         (common-lisp:or h265settings common-lisp:null)
                         :accessor %video-codec-settings-h265settings :initform
                         common-lisp:nil)
                        (h264settings :initarg :h264settings :type
                         (common-lisp:or h264settings common-lisp:null)
                         :accessor %video-codec-settings-h264settings :initform
                         common-lisp:nil)
                        (frame-capture-settings :initarg
                         :frame-capture-settings :type
                         (common-lisp:or frame-capture-settings
                                         common-lisp:null)
                         :accessor %video-codec-settings-frame-capture-settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-codec-settings 'make-video-codec-settings))
 (common-lisp:defun make-video-codec-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mpeg2settings h265settings h264settings
                     frame-capture-settings)
   (common-lisp:apply #'common-lisp:make-instance 'video-codec-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-codec-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-codec-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h264settings))
      (common-lisp:list
       (common-lisp:cons "H264Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h265settings))
      (common-lisp:list
       (common-lisp:cons "H265Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mpeg2settings))
      (common-lisp:list
       (common-lisp:cons "Mpeg2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-codec-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-description common-lisp:nil
                       ((width :initarg :width :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %video-description-width :initform
                         common-lisp:nil)
                        (sharpness :initarg :sharpness :type
                         (common-lisp:or |__integerMin0Max100|
                                         common-lisp:null)
                         :accessor %video-description-sharpness :initform
                         common-lisp:nil)
                        (scaling-behavior :initarg :scaling-behavior :type
                         (common-lisp:or video-description-scaling-behavior
                                         common-lisp:null)
                         :accessor %video-description-scaling-behavior
                         :initform common-lisp:nil)
                        (respond-to-afd :initarg :respond-to-afd :type
                         (common-lisp:or video-description-respond-to-afd
                                         common-lisp:null)
                         :accessor %video-description-respond-to-afd :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %video-description-name :initform
                         (common-lisp:error ":name is required"))
                        (height :initarg :height :type
                         (common-lisp:or |__integer| common-lisp:null)
                         :accessor %video-description-height :initform
                         common-lisp:nil)
                        (codec-settings :initarg :codec-settings :type
                         (common-lisp:or video-codec-settings common-lisp:null)
                         :accessor %video-description-codec-settings :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-description 'make-video-description))
 (common-lisp:defun make-video-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key width sharpness scaling-behavior
                     respond-to-afd name height codec-settings)
   (common-lisp:apply #'common-lisp:make-instance 'video-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-settings))
      (common-lisp:list
       (common-lisp:cons "CodecSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'respond-to-afd))
      (common-lisp:list
       (common-lisp:cons "RespondToAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-behavior))
      (common-lisp:list
       (common-lisp:cons "ScalingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sharpness))
      (common-lisp:list
       (common-lisp:cons "Sharpness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-description))
   common-lisp:nil))
(common-lisp:deftype video-description-respond-to-afd () 'common-lisp:string)
(common-lisp:deftype video-description-scaling-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass video-selector common-lisp:nil
                       ((selector-settings :initarg :selector-settings :type
                         (common-lisp:or video-selector-settings
                                         common-lisp:null)
                         :accessor %video-selector-selector-settings :initform
                         common-lisp:nil)
                        (color-space-usage :initarg :color-space-usage :type
                         (common-lisp:or video-selector-color-space-usage
                                         common-lisp:null)
                         :accessor %video-selector-color-space-usage :initform
                         common-lisp:nil)
                        (color-space-settings :initarg :color-space-settings
                         :type
                         (common-lisp:or video-selector-color-space-settings
                                         common-lisp:null)
                         :accessor %video-selector-color-space-settings
                         :initform common-lisp:nil)
                        (color-space :initarg :color-space :type
                         (common-lisp:or video-selector-color-space
                                         common-lisp:null)
                         :accessor %video-selector-color-space :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'video-selector 'make-video-selector))
 (common-lisp:defun make-video-selector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key selector-settings color-space-usage
                     color-space-settings color-space)
   (common-lisp:apply #'common-lisp:make-instance 'video-selector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space))
      (common-lisp:list
       (common-lisp:cons "ColorSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space-usage))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-settings))
      (common-lisp:list
       (common-lisp:cons "SelectorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-selector))
   common-lisp:nil))
(common-lisp:deftype video-selector-color-space () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass video-selector-color-space-settings common-lisp:nil
                       ((hdr10settings :initarg :hdr10settings :type
                         (common-lisp:or hdr10settings common-lisp:null)
                         :accessor
                         %video-selector-color-space-settings-hdr10settings
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-selector-color-space-settings
                    'make-video-selector-color-space-settings))
 (common-lisp:defun make-video-selector-color-space-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hdr10settings)
   (common-lisp:apply #'common-lisp:make-instance
                      'video-selector-color-space-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-color-space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-color-space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hdr10settings))
      (common-lisp:list
       (common-lisp:cons "Hdr10Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-color-space-settings))
   common-lisp:nil))
(common-lisp:deftype video-selector-color-space-usage () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass video-selector-pid common-lisp:nil
                       ((pid :initarg :pid :type
                         (common-lisp:or |__integerMin0Max8191|
                                         common-lisp:null)
                         :accessor %video-selector-pid-pid :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-selector-pid 'make-video-selector-pid))
 (common-lisp:defun make-video-selector-pid
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pid)
   (common-lisp:apply #'common-lisp:make-instance 'video-selector-pid
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-selector-pid))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-selector-pid))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-selector-pid))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-selector-program-id common-lisp:nil
                       ((program-id :initarg :program-id :type
                         (common-lisp:or |__integerMin0Max65536|
                                         common-lisp:null)
                         :accessor %video-selector-program-id-program-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-selector-program-id
                    'make-video-selector-program-id))
 (common-lisp:defun make-video-selector-program-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key program-id)
   (common-lisp:apply #'common-lisp:make-instance 'video-selector-program-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-program-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-program-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-id))
      (common-lisp:list
       (common-lisp:cons "ProgramId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-program-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass video-selector-settings common-lisp:nil
                       ((video-selector-program-id :initarg
                         :video-selector-program-id :type
                         (common-lisp:or video-selector-program-id
                                         common-lisp:null)
                         :accessor
                         %video-selector-settings-video-selector-program-id
                         :initform common-lisp:nil)
                        (video-selector-pid :initarg :video-selector-pid :type
                         (common-lisp:or video-selector-pid common-lisp:null)
                         :accessor %video-selector-settings-video-selector-pid
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'video-selector-settings 'make-video-selector-settings))
 (common-lisp:defun make-video-selector-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key video-selector-program-id
                     video-selector-pid)
   (common-lisp:apply #'common-lisp:make-instance 'video-selector-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-selector-pid))
      (common-lisp:list
       (common-lisp:cons "VideoSelectorPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-selector-program-id))
      (common-lisp:list
       (common-lisp:cons "VideoSelectorProgramId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-output-settings common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %vpc-output-settings-subnet-ids :initform
                         (common-lisp:error ":subnet-ids is required"))
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %vpc-output-settings-security-group-ids
                         :initform common-lisp:nil)
                        (public-address-allocation-ids :initarg
                         :public-address-allocation-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %vpc-output-settings-public-address-allocation-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-output-settings 'make-vpc-output-settings))
 (common-lisp:defun make-vpc-output-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-ids security-group-ids
                     public-address-allocation-ids)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-output-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-address-allocation-ids))
      (common-lisp:list
       (common-lisp:cons "PublicAddressAllocationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-output-settings-description common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor %vpc-output-settings-description-subnet-ids
                         :initform common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %vpc-output-settings-description-security-group-ids
                         :initform common-lisp:nil)
                        (network-interface-ids :initarg :network-interface-ids
                         :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %vpc-output-settings-description-network-interface-ids
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or |__listOf__string| common-lisp:null)
                         :accessor
                         %vpc-output-settings-description-availability-zones
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-output-settings-description
                    'make-vpc-output-settings-description))
 (common-lisp:defun make-vpc-output-settings-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subnet-ids security-group-ids
                     network-interface-ids availability-zones)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-output-settings-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-output-settings-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-output-settings-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-output-settings-description))
   common-lisp:nil))
(common-lisp:deftype wav-coding-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass wav-settings common-lisp:nil
                       ((sample-rate :initarg :sample-rate :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %wav-settings-sample-rate :initform common-lisp:nil)
                        (coding-mode :initarg :coding-mode :type
                         (common-lisp:or wav-coding-mode common-lisp:null)
                         :accessor %wav-settings-coding-mode :initform
                         common-lisp:nil)
                        (bit-depth :initarg :bit-depth :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %wav-settings-bit-depth :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'wav-settings 'make-wav-settings))
 (common-lisp:defun make-wav-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sample-rate coding-mode bit-depth)
   (common-lisp:apply #'common-lisp:make-instance 'wav-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wav-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wav-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-depth))
      (common-lisp:list
       (common-lisp:cons "BitDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wav-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass webvtt-destination-settings common-lisp:nil
                       ((style-control :initarg :style-control :type
                         (common-lisp:or webvtt-destination-style-control
                                         common-lisp:null)
                         :accessor %webvtt-destination-settings-style-control
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'webvtt-destination-settings
                    'make-webvtt-destination-settings))
 (common-lisp:defun make-webvtt-destination-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key style-control)
   (common-lisp:apply #'common-lisp:make-instance 'webvtt-destination-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-control))
      (common-lisp:list
       (common-lisp:cons "StyleControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   common-lisp:nil))
(common-lisp:deftype webvtt-destination-style-control () 'common-lisp:string)
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max1| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max100| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max5000| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin1| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin1Max65535| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMinNegative59Max0| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max100| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max10000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max1000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max100000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max128| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max15| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max255| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max30| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max32768| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max3600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max500| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max65535| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max65536| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max7| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max8191| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000000Max100000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100000Max100000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100000Max40000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100000Max80000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000Max30000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max1000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max16| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max20| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max3003| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max31| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max32| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max3600000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max4| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max5| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max6| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max8| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin25Max10000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin25Max2000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin3| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin30| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin32Max8191| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin4Max20| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin800Max3000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin96Max600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative1000Max1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative5Max5| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative60Max6| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative60Max60| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioChannelMapping| ()
   '(trivial-types:proper-list audio-channel-mapping))
 (common-lisp:defun |make-__listofaudiochannelmapping|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-channel-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioDescription| ()
   '(trivial-types:proper-list audio-description))
 (common-lisp:defun |make-__listofaudiodescription|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioSelector| ()
   '(trivial-types:proper-list audio-selector))
 (common-lisp:defun |make-__listofaudioselector|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-selector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioTrack| ()
   '(trivial-types:proper-list audio-track))
 (common-lisp:defun |make-__listofaudiotrack|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-track))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBatchFailedResultModel| ()
   '(trivial-types:proper-list batch-failed-result-model))
 (common-lisp:defun |make-__listofbatchfailedresultmodel|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-failed-result-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBatchSuccessfulResultModel| ()
   '(trivial-types:proper-list batch-successful-result-model))
 (common-lisp:defun |make-__listofbatchsuccessfulresultmodel|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-successful-result-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionDescription| ()
   '(trivial-types:proper-list caption-description))
 (common-lisp:defun |make-__listofcaptiondescription|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list caption-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionLanguageMapping| ()
   '(trivial-types:proper-list caption-language-mapping))
 (common-lisp:defun |make-__listofcaptionlanguagemapping|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            caption-language-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionSelector| ()
   '(trivial-types:proper-list caption-selector))
 (common-lisp:defun |make-__listofcaptionselector|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list caption-selector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfChannelEgressEndpoint| ()
   '(trivial-types:proper-list channel-egress-endpoint))
 (common-lisp:defun |make-__listofchannelegressendpoint|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-egress-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfChannelSummary| ()
   '(trivial-types:proper-list channel-summary))
 (common-lisp:defun |make-__listofchannelsummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfFailoverCondition| ()
   '(trivial-types:proper-list failover-condition))
 (common-lisp:defun |make-__listoffailovercondition|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failover-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfHlsAdMarkers| ()
   '(trivial-types:proper-list hls-ad-markers))
 (common-lisp:defun |make-__listofhlsadmarkers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hls-ad-markers))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInput| () '(trivial-types:proper-list input))
 (common-lisp:defun |make-__listofinput|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputAttachment| ()
   '(trivial-types:proper-list input-attachment))
 (common-lisp:defun |make-__listofinputattachment|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputChannelLevel| ()
   '(trivial-types:proper-list input-channel-level))
 (common-lisp:defun |make-__listofinputchannellevel|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-channel-level))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDestination| ()
   '(trivial-types:proper-list input-destination))
 (common-lisp:defun |make-__listofinputdestination|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDestinationRequest| ()
   '(trivial-types:proper-list input-destination-request))
 (common-lisp:defun |make-__listofinputdestinationrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            input-destination-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceRequest| ()
   '(trivial-types:proper-list input-device-request))
 (common-lisp:defun |make-__listofinputdevicerequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-device-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceSettings| ()
   '(trivial-types:proper-list input-device-settings))
 (common-lisp:defun |make-__listofinputdevicesettings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-device-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceSummary| ()
   '(trivial-types:proper-list input-device-summary))
 (common-lisp:defun |make-__listofinputdevicesummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputSecurityGroup| ()
   '(trivial-types:proper-list input-security-group))
 (common-lisp:defun |make-__listofinputsecuritygroup|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputSource| ()
   '(trivial-types:proper-list input-source))
 (common-lisp:defun |make-__listofinputsource|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputSourceRequest| ()
   '(trivial-types:proper-list input-source-request))
 (common-lisp:defun |make-__listofinputsourcerequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-source-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputWhitelistRule| ()
   '(trivial-types:proper-list input-whitelist-rule))
 (common-lisp:defun |make-__listofinputwhitelistrule|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-whitelist-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputWhitelistRuleCidr| ()
   '(trivial-types:proper-list input-whitelist-rule-cidr))
 (common-lisp:defun |make-__listofinputwhitelistrulecidr|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            input-whitelist-rule-cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaConnectFlow| ()
   '(trivial-types:proper-list media-connect-flow))
 (common-lisp:defun |make-__listofmediaconnectflow|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-connect-flow))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaConnectFlowRequest| ()
   '(trivial-types:proper-list media-connect-flow-request))
 (common-lisp:defun |make-__listofmediaconnectflowrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-connect-flow-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaPackageOutputDestinationSettings| ()
   '(trivial-types:proper-list media-package-output-destination-settings))
 (common-lisp:defun |make-__listofmediapackageoutputdestinationsettings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-package-output-destination-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexOutputDestination| ()
   '(trivial-types:proper-list multiplex-output-destination))
 (common-lisp:defun |make-__listofmultiplexoutputdestination|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multiplex-output-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexProgramPipelineDetail| ()
   '(trivial-types:proper-list multiplex-program-pipeline-detail))
 (common-lisp:defun |make-__listofmultiplexprogrampipelinedetail|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multiplex-program-pipeline-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexProgramSummary| ()
   '(trivial-types:proper-list multiplex-program-summary))
 (common-lisp:defun |make-__listofmultiplexprogramsummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multiplex-program-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexSummary| ()
   '(trivial-types:proper-list multiplex-summary))
 (common-lisp:defun |make-__listofmultiplexsummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list multiplex-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOffering| ()
   '(trivial-types:proper-list offering))
 (common-lisp:defun |make-__listofoffering|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutput| () '(trivial-types:proper-list output))
 (common-lisp:defun |make-__listofoutput|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputDestination| ()
   '(trivial-types:proper-list output-destination))
 (common-lisp:defun |make-__listofoutputdestination|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputDestinationSettings| ()
   '(trivial-types:proper-list output-destination-settings))
 (common-lisp:defun |make-__listofoutputdestinationsettings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            output-destination-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputGroup| ()
   '(trivial-types:proper-list output-group))
 (common-lisp:defun |make-__listofoutputgroup|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfPipelineDetail| ()
   '(trivial-types:proper-list pipeline-detail))
 (common-lisp:defun |make-__listofpipelinedetail|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfPipelinePauseStateSettings| ()
   '(trivial-types:proper-list pipeline-pause-state-settings))
 (common-lisp:defun |make-__listofpipelinepausestatesettings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pipeline-pause-state-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfReservation| ()
   '(trivial-types:proper-list reservation))
 (common-lisp:defun |make-__listofreservation|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reservation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfRtmpAdMarkers| ()
   '(trivial-types:proper-list rtmp-ad-markers))
 (common-lisp:defun |make-__listofrtmpadmarkers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rtmp-ad-markers))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfScheduleAction| ()
   '(trivial-types:proper-list schedule-action))
 (common-lisp:defun |make-__listofscheduleaction|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schedule-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfScte35Descriptor| ()
   '(trivial-types:proper-list scte35descriptor))
 (common-lisp:defun |make-__listofscte35descriptor|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scte35descriptor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTransferringInputDeviceSummary| ()
   '(trivial-types:proper-list transferring-input-device-summary))
 (common-lisp:defun |make-__listoftransferringinputdevicesummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transferring-input-device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfValidationError| ()
   '(trivial-types:proper-list validation-error))
 (common-lisp:defun |make-__listofvalidationerror|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVideoDescription| ()
   '(trivial-types:proper-list video-description))
 (common-lisp:defun |make-__listofvideodescription|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list video-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__integer| ()
   '(trivial-types:proper-list |__integer|))
 (common-lisp:defun |make-__listof__integer|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__integer|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun |make-__listof__string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max1099511627775| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max4294967295| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max8589934591| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max86400000| () 'common-lisp:integer)
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__stringMax1000| () 'common-lisp:string)
(common-lisp:deftype |__stringMax2048| () 'common-lisp:string)
(common-lisp:deftype |__stringMax255| () 'common-lisp:string)
(common-lisp:deftype |__stringMax256| () 'common-lisp:string)
(common-lisp:deftype |__stringMax32| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max255| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max256| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max35| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max7| () 'common-lisp:string)
(common-lisp:deftype |__stringMin2Max2| () 'common-lisp:string)
(common-lisp:deftype |__stringMin32Max32| () 'common-lisp:string)
(common-lisp:deftype |__stringMin34Max34| () 'common-lisp:string)
(common-lisp:deftype |__stringMin3Max3| () 'common-lisp:string)
(common-lisp:deftype |__stringMin6Max6| () 'common-lisp:string)
(common-lisp:deftype |__stringPattern010920300| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:deftype input-device-thumbnail ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype accept-header () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype |__timestamp| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-input-device-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-input-device-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/accept"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "AcceptInputDeviceTransfer"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-input-device-transfer))
(common-lisp:progn
 (common-lisp:defun batch-delete
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-ids input-ids
                     input-security-group-ids multiplex-ids)
   (common-lisp:declare
    (common-lisp:ignorable channel-ids input-ids input-security-group-ids
     multiplex-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/prod/batch/delete"
                                                        "BatchDelete"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete))
(common-lisp:progn
 (common-lisp:defun batch-start
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-ids multiplex-ids)
   (common-lisp:declare (common-lisp:ignorable channel-ids multiplex-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-start-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/prod/batch/start"
                                                        "BatchStart"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-start))
(common-lisp:progn
 (common-lisp:defun batch-stop
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-ids multiplex-ids)
   (common-lisp:declare (common-lisp:ignorable channel-ids multiplex-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-stop-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/prod/batch/stop"
                                                        "BatchStop"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-stop))
(common-lisp:progn
 (common-lisp:defun batch-update-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id creates deletes)
   (common-lisp:declare (common-lisp:ignorable channel-id creates deletes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/schedule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "BatchUpdateSchedule"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-schedule))
(common-lisp:progn
 (common-lisp:defun cancel-input-device-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-input-device-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "CancelInputDeviceTransfer"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-input-device-transfer))
(common-lisp:progn
 (common-lisp:defun claim-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-claim-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/prod/claimDevice"
                                                        "ClaimDevice"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'claim-device))
(common-lisp:progn
 (common-lisp:defun create-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cdi-input-specification channel-class
                     destinations encoder-settings input-attachments
                     input-specification log-level maintenance name request-id
                     reserved role-arn tags vpc)
   (common-lisp:declare
    (common-lisp:ignorable cdi-input-specification channel-class destinations
     encoder-settings input-attachments input-specification log-level
     maintenance name request-id reserved role-arn tags vpc))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/prod/channels"
                                                        "CreateChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-channel))
(common-lisp:progn
 (common-lisp:defun create-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destinations input-devices
                     input-security-groups media-connect-flows name request-id
                     role-arn sources tags type vpc)
   (common-lisp:declare
    (common-lisp:ignorable destinations input-devices input-security-groups
     media-connect-flows name request-id role-arn sources tags type vpc))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/prod/inputs"
                                                        "CreateInput"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-input))
(common-lisp:progn
 (common-lisp:defun create-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags whitelist-rules)
   (common-lisp:declare (common-lisp:ignorable tags whitelist-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/prod/inputSecurityGroups"
                                                        "CreateInputSecurityGroup"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-input-security-group))
(common-lisp:progn
 (common-lisp:defun create-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones multiplex-settings
                     name request-id tags)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones multiplex-settings name
     request-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/prod/multiplexes"
                                                        "CreateMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-multiplex))
(common-lisp:progn
 (common-lisp:defun create-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id multiplex-program-settings
                     program-name request-id)
   (common-lisp:declare
    (common-lisp:ignorable multiplex-id multiplex-program-settings program-name
     request-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-multiplex-program-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "CreateMultiplexProgram"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-multiplex-program))
(common-lisp:progn
 (common-lisp:defun create-partner-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-id request-id tags)
   (common-lisp:declare (common-lisp:ignorable input-id request-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-partner-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A/partners"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "CreatePartnerInput"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-partner-input))
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "CreateTags"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun delete-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DeleteChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-channel))
(common-lisp:progn
 (common-lisp:defun delete-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-id)
   (common-lisp:declare (common-lisp:ignorable input-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "DeleteInput"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-input))
(common-lisp:progn
 (common-lisp:defun delete-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-security-group-id)
   (common-lisp:declare (common-lisp:ignorable input-security-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputSecurityGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-security-group-id))))
                                                        "DeleteInputSecurityGroup"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-input-security-group))
(common-lisp:progn
 (common-lisp:defun delete-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "DeleteMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-multiplex))
(common-lisp:progn
 (common-lisp:defun delete-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id program-name)
   (common-lisp:declare (common-lisp:ignorable multiplex-id program-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-multiplex-program-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'program-name))))
                                                        "DeleteMultiplexProgram"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-multiplex-program))
(common-lisp:progn
 (common-lisp:defun delete-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reservation-id)
   (common-lisp:declare (common-lisp:ignorable reservation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-id))))
                                                        "DeleteReservation"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-reservation))
(common-lisp:progn
 (common-lisp:defun delete-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/schedule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DeleteSchedule"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-schedule))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "DeleteTags"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun describe-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DescribeChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-channel))
(common-lisp:progn
 (common-lisp:defun describe-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-id)
   (common-lisp:declare (common-lisp:ignorable input-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "DescribeInput"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-input))
(common-lisp:progn
 (common-lisp:defun describe-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "DescribeInputDevice"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-input-device))
(common-lisp:progn
 (common-lisp:defun describe-input-device-thumbnail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id accept)
   (common-lisp:declare (common-lisp:ignorable input-device-id accept))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-input-device-thumbnail-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/thumbnailData"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "DescribeInputDeviceThumbnail"
                                                        "2017-10-14")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-input-device-thumbnail))
(common-lisp:progn
 (common-lisp:defun describe-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-security-group-id)
   (common-lisp:declare (common-lisp:ignorable input-security-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputSecurityGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-security-group-id))))
                                                        "DescribeInputSecurityGroup"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-input-security-group))
(common-lisp:progn
 (common-lisp:defun describe-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "DescribeMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-multiplex))
(common-lisp:progn
 (common-lisp:defun describe-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id program-name)
   (common-lisp:declare (common-lisp:ignorable multiplex-id program-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-multiplex-program-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'program-name))))
                                                        "DescribeMultiplexProgram"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-multiplex-program))
(common-lisp:progn
 (common-lisp:defun describe-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key offering-id)
   (common-lisp:declare (common-lisp:ignorable offering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/offerings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'offering-id))))
                                                        "DescribeOffering"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-offering))
(common-lisp:progn
 (common-lisp:defun describe-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reservation-id)
   (common-lisp:declare (common-lisp:ignorable reservation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-id))))
                                                        "DescribeReservation"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-reservation))
(common-lisp:progn
 (common-lisp:defun describe-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable channel-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/schedule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DescribeSchedule"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-schedule))
(common-lisp:progn
 (common-lisp:defun list-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/prod/channels"
                                                        "ListChannels"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channels))
(common-lisp:progn
 (common-lisp:defun list-input-device-transfers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token transfer-type)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token transfer-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-input-device-transfers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/prod/inputDeviceTransfers"
                                                        "ListInputDeviceTransfers"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-input-device-transfers))
(common-lisp:progn
 (common-lisp:defun list-input-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-input-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/prod/inputDevices"
                                                        "ListInputDevices"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-input-devices))
(common-lisp:progn
 (common-lisp:defun list-input-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-input-security-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/prod/inputSecurityGroups"
                                                        "ListInputSecurityGroups"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-input-security-groups))
(common-lisp:progn
 (common-lisp:defun list-inputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-inputs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/prod/inputs"
                                                        "ListInputs"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-inputs))
(common-lisp:progn
 (common-lisp:defun list-multiplex-programs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results multiplex-id next-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results multiplex-id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-multiplex-programs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "ListMultiplexPrograms"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-multiplex-programs))
(common-lisp:progn
 (common-lisp:defun list-multiplexes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-multiplexes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/prod/multiplexes"
                                                        "ListMultiplexes"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-multiplexes))
(common-lisp:progn
 (common-lisp:defun list-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-class channel-configuration codec
                     duration max-results maximum-bitrate maximum-framerate
                     next-token resolution resource-type special-feature
                     video-quality)
   (common-lisp:declare
    (common-lisp:ignorable channel-class channel-configuration codec duration
     max-results maximum-bitrate maximum-framerate next-token resolution
     resource-type special-feature video-quality))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-offerings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/prod/offerings"
                                                        "ListOfferings"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-offerings))
(common-lisp:progn
 (common-lisp:defun list-reservations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-class codec max-results
                     maximum-bitrate maximum-framerate next-token resolution
                     resource-type special-feature video-quality)
   (common-lisp:declare
    (common-lisp:ignorable channel-class codec max-results maximum-bitrate
     maximum-framerate next-token resolution resource-type special-feature
     video-quality))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-reservations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/prod/reservations"
                                                        "ListReservations"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-reservations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun purchase-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key count name offering-id renewal-settings
                     request-id start tags)
   (common-lisp:declare
    (common-lisp:ignorable count name offering-id renewal-settings request-id
     start tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-purchase-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/offerings/~A/purchase"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'offering-id))))
                                                        "PurchaseOffering"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'purchase-offering))
(common-lisp:progn
 (common-lisp:defun reboot-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force input-device-id)
   (common-lisp:declare (common-lisp:ignorable force input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/reboot"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "RebootInputDevice"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reboot-input-device))
(common-lisp:progn
 (common-lisp:defun reject-input-device-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-input-device-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/reject"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "RejectInputDeviceTransfer"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-input-device-transfer))
(common-lisp:progn
 (common-lisp:defun start-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "StartChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-channel))
(common-lisp:progn
 (common-lisp:defun start-input-device-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-input-device-maintenance-window-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/startInputDeviceMaintenanceWindow"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "StartInputDeviceMaintenanceWindow"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-input-device-maintenance-window))
(common-lisp:progn
 (common-lisp:defun start-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "StartMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-multiplex))
(common-lisp:progn
 (common-lisp:defun stop-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "StopChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-channel))
(common-lisp:progn
 (common-lisp:defun stop-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "StopMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-multiplex))
(common-lisp:progn
 (common-lisp:defun transfer-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id target-customer-id
                     target-region transfer-message)
   (common-lisp:declare
    (common-lisp:ignorable input-device-id target-customer-id target-region
     transfer-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-transfer-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/transfer"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "TransferInputDevice"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'transfer-input-device))
(common-lisp:progn
 (common-lisp:defun update-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cdi-input-specification channel-id
                     destinations encoder-settings input-attachments
                     input-specification log-level maintenance name role-arn)
   (common-lisp:declare
    (common-lisp:ignorable cdi-input-specification channel-id destinations
     encoder-settings input-attachments input-specification log-level
     maintenance name role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "UpdateChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-channel))
(common-lisp:progn
 (common-lisp:defun update-channel-class
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-class channel-id destinations)
   (common-lisp:declare
    (common-lisp:ignorable channel-class channel-id destinations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-class-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/channelClass"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "UpdateChannelClass"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-channel-class))
(common-lisp:progn
 (common-lisp:defun update-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destinations input-devices input-id
                     input-security-groups media-connect-flows name role-arn
                     sources)
   (common-lisp:declare
    (common-lisp:ignorable destinations input-devices input-id
     input-security-groups media-connect-flows name role-arn sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "UpdateInput"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-input))
(common-lisp:progn
 (common-lisp:defun update-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hd-device-settings input-device-id name
                     uhd-device-settings)
   (common-lisp:declare
    (common-lisp:ignorable hd-device-settings input-device-id name
     uhd-device-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "UpdateInputDevice"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-input-device))
(common-lisp:progn
 (common-lisp:defun update-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-security-group-id tags
                     whitelist-rules)
   (common-lisp:declare
    (common-lisp:ignorable input-security-group-id tags whitelist-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputSecurityGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-security-group-id))))
                                                        "UpdateInputSecurityGroup"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-input-security-group))
(common-lisp:progn
 (common-lisp:defun update-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id multiplex-settings name)
   (common-lisp:declare
    (common-lisp:ignorable multiplex-id multiplex-settings name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "UpdateMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-multiplex))
(common-lisp:progn
 (common-lisp:defun update-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id multiplex-program-settings
                     program-name)
   (common-lisp:declare
    (common-lisp:ignorable multiplex-id multiplex-program-settings
     program-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-multiplex-program-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'program-name))))
                                                        "UpdateMultiplexProgram"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-multiplex-program))
(common-lisp:progn
 (common-lisp:defun update-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name renewal-settings reservation-id)
   (common-lisp:declare
    (common-lisp:ignorable name renewal-settings reservation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-id))))
                                                        "UpdateReservation"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-reservation))
